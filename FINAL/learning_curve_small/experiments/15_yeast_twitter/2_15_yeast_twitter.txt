Starting experiment #2 for 15_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 51477

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( complex(A, D), complex(C, D) )
%   | then return 0.8581489350995117;  // std dev = 1,98e-07, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( phenotype(A, E), interaction(F, C) )
%   | | then return 0.6081489350995123;  // std dev = 0,433, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | then if ( interaction(H, A), interaction(H, H) )
%   | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( complex(A, I), complex(G, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5724346493852266;  // std dev = 1,690, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else if ( interaction(A, A) )
%   | | then return -0.14185106490048768;  // std dev = 5,37e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( interaction(J, A), enzyme(J, K) )
%   | | | then return 0.1140544469105371;  // std dev = 6,955, 254,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=65 */
%   | | | else return 0.1580150662909408;  // std dev = 12,523, 747,000 (wgt'ed) examples reached here.  /* #neg=523 #pos=224 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( interaction(C, D), interaction(A, D) )
%   | then return 0.7054990963364938;  // std dev = 0,159, 40,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else if ( complex(C, E), complex(A, E) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( complex(C, F) )
%   | | | then return -0.021885609276169088;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.6007686212991321;  // std dev = 1,238, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( interaction(A, A) )
%   | then return -0.12544463852839155;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( complex(A, G), interaction(A, H) )
%   | | then if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.061835073713266756;  // std dev = 6,540, 247,000 (wgt'ed) examples reached here.  /* #neg=192 #pos=55 */
%   | | else if ( interaction(A, J), interaction(J, K) )
%   | | | then return 0.13089955167341405;  // std dev = 6,977, 236,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=69 */
%   | | | else return 0.16322283257941933;  // std dev = 10,995, 559,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=183 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), complex(A, E) )
%   | then if ( complex(D, E), complex(C, E) )
%   | | then return 0.5575009238563182;  // std dev = 0,008, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.20203943543473715;  // std dev = 0,982, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( phenotype(A, F) )
%   | | then return 0.6739613494256297;  // std dev = 0,050, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.5194443628519012;  // std dev = 0,301, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( interaction(A, A) )
%   | then return -0.11231637819360629;  // std dev = 4,08e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( interaction(G, A), interaction(G, G) )
%   | | then if ( complex(G, H), phenotype(A, I) )
%   | | | then return 0.20049091781537481;  // std dev = 3,768, 61,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=23 */
%   | | | else return 0.10712638313174404;  // std dev = 4,472, 98,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=28 */
%   | | else if ( location(A, J) )
%   | | | then return 0.10662822411615651;  // std dev = 13,051, 852,000 (wgt'ed) examples reached here.  /* #neg=603 #pos=249 */
%   | | | else return 0.161255388105674;  // std dev = 2,809, 35,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( interaction(C, D), interaction(D, C) )
%   | then if ( recursion_proteinclass(D, B) )
%   | | then return 0.43990013957430685;  // std dev = 0,183, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.03104232027617993;  // std dev = 0,967, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( interaction(E, A), recursion_proteinclass(E, B) )
%   | | then return 0.4266277723463003;  // std dev = 0,033, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5960332839577702;  // std dev = 0,066, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( interaction(A, A) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( interaction(F, A), recursion_proteinclass(F, B) )
%   | | then if ( phenotype(A, G), enzyme(F, H) )
%   | | | then return 0.1454854965277972;  // std dev = 1,091, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.5411509512424475;  // std dev = 0,219, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( interaction(I, A), phenotype(I, J) )
%   | | | then return 0.11080296323863306;  // std dev = 11,306, 600,000 (wgt'ed) examples reached here.  /* #neg=415 #pos=185 */
%   | | | else return 0.07348339628612127;  // std dev = 8,700, 384,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=104 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( interaction(A, A) )
%   then if ( interaction(C, A), recursion_proteinclass(C, B) )
%   | then return 0.32578680375246255;  // std dev = 0,052, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.09670160487957233;  // std dev = 0,247, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else if ( interaction(A, D), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), interaction(A, E) )
%   | | then if ( complex(D, F), enzyme(E, G) )
%   | | | then return 0.1530631873374521;  // std dev = 0,601, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3883931852938538;  // std dev = 0,109, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4367049837769805;  // std dev = 0,078, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( interaction(H, A), interaction(H, H) )
%   | | then if ( complex(H, I), location(A, J) )
%   | | | then return 0.14006195187446155;  // std dev = 4,610, 93,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=34 */
%   | | | else return 0.22035991310760303;  // std dev = 3,134, 41,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | | else if ( interaction(A, K), complex(A, L) )
%   | | | then return 0.027367870615137745;  // std dev = 5,736, 191,000 (wgt'ed) examples reached here.  /* #neg=145 #pos=46 */
%   | | | else return 0.08828911485409173;  // std dev = 11,894, 685,000 (wgt'ed) examples reached here.  /* #neg=471 #pos=214 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then return 0.25228431732119094;  // std dev = 0,207, 60,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   else if ( interaction(A, D), interaction(E, A) )
%   | then if ( complex(E, F), complex(A, F) )
%   | | then if ( complex(D, F), location(A, G) )
%   | | | then return -0.07958951653380865;  // std dev = 2,774, 95,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=10 */
%   | | | else return 0.04709562414086578;  // std dev = 2,252, 30,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | else if ( interaction(E, E), interaction(D, A) )
%   | | | then return -0.0045295316441604505;  // std dev = 3,217, 75,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=14 */
%   | | | else return 0.09457218842793166;  // std dev = 6,801, 215,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=69 */
%   | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | then if ( enzyme(A, I), phenotype(H, J) )
%   | | | then return -0.32989261011524695;  // std dev = 0,853, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.34277650585314445;  // std dev = 0,960, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( interaction(K, A), enzyme(K, L) )
%   | | | then return 0.033435590997851386;  // std dev = 4,759, 116,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=31 */
%   | | | else return 0.08486079283799529;  // std dev = 10,547, 516,000 (wgt'ed) examples reached here.  /* #neg=353 #pos=163 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( phenotype(A, D), phenotype(C, D) )
%   | then return 0.2679605088905537;  // std dev = 0,092, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( interaction(E, C), recursion_proteinclass(E, B) )
%   | | then return 0.24531082244767846;  // std dev = 0,048, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( interaction(F, C), interaction(C, F) )
%   | | | then return -0.38638519900622914;  // std dev = 0,800, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.16101890407753516;  // std dev = 1,370, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   else if ( interaction(A, A) )
%   | then return -0.08652292439810284;  // std dev = 0,294, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else if ( complex(A, G), location(A, H) )
%   | | then if ( complex(I, G), recursion_proteinclass(I, B) )
%   | | | then return 0.6761104005915626;  // std dev = 2,705, 115,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=113 */
%   | | | else return -0.23043987317512754;  // std dev = 0,369, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | | else if ( interaction(J, A), location(J, K) )
%   | | | then return 0.06138520920529332;  // std dev = 10,698, 538,000 (wgt'ed) examples reached here.  /* #neg=368 #pos=170 */
%   | | | else return 0.1492910862996543;  // std dev = 4,078, 72,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.15258664365450145;  // std dev = 0,254, 63,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=57 */
%   else if ( interaction(D, A), interaction(E, D) )
%   | then if ( complex(E, F) )
%   | | then if ( interaction(A, E), complex(D, F) )
%   | | | then return -0.03776594489071123;  // std dev = 2,583, 86,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=14 */
%   | | | else return 0.04842663056549001;  // std dev = 10,591, 616,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=191 */
%   | | else if ( complex(D, G), complex(A, H) )
%   | | | then return 0.1426193765004484;  // std dev = 1,576, 15,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return -0.05396186697083192;  // std dev = 3,506, 88,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | else if ( interaction(I, A), enzyme(A, J) )
%   | | then if ( interaction(I, K), recursion_proteinclass(K, B) )
%   | | | then return 0.6972043931360815;  // std dev = 0,241, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.2426083499307187;  // std dev = 0,111, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( location(A, L) )
%   | | | then return 0.06630231785937556;  // std dev = 5,823, 177,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=63 */
%   | | | else return -0.0168508346735184;  // std dev = 2,288, 28,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( interaction(C, A), interaction(D, C) )
%   then if ( recursion_proteinclass(D, B) )
%   | then return 0.3569388409620639;  // std dev = 0,325, 100,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=90 */
%   | else return -0.006921921392156287;  // std dev = 0,391, 754,000 (wgt'ed) examples reached here.  /* #neg=560 #pos=194 */
%   else if ( interaction(A, E), interaction(E, E) )
%   | then if ( complex(E, F), phenotype(E, G) )
%   | | then if ( phenotype(A, H), enzyme(E, I) )
%   | | | then return -0.01857341323901006;  // std dev = 1,141, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.09962969833094194;  // std dev = 1,852, 22,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | else return -0.033935707497052395;  // std dev = 0,387, 43,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | else if ( interaction(J, A), phenotype(J, K) )
%   | | then if ( enzyme(J, L) )
%   | | | then return 0.24597062505412925;  // std dev = 1,414, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.11578519489999667;  // std dev = 2,759, 42,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=18 */
%   | | else if ( phenotype(A, M) )
%   | | | then return 0.03547203214498765;  // std dev = 3,219, 63,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=20 */
%   | | | else return 0.09949433731747187;  // std dev = 3,244, 52,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then return 0.11334170805964112;  // std dev = 0,180, 60,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   else if ( interaction(A, D), complex(D, E) )
%   | then if ( interaction(D, D) )
%   | | then if ( interaction(D, A), phenotype(D, F) )
%   | | | then return -0.07731385310255842;  // std dev = 1,371, 50,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | | else return -0.02492399303924659;  // std dev = 3,547, 109,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=23 */
%   | | else if ( interaction(D, G), interaction(G, D) )
%   | | | then return 0.041113058075987106;  // std dev = 3,860, 88,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=29 */
%   | | | else return -0.010807931532042408;  // std dev = 4,830, 149,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=38 */
%   | else if ( interaction(H, A), enzyme(H, I) )
%   | | then if ( recursion_proteinclass(H, B) )
%   | | | then return 0.3099787481652681;  // std dev = 0,172, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0036738023385295667;  // std dev = 5,166, 163,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=42 */
%   | | else if ( phenotype(A, J), interaction(K, A) )
%   | | | then return 0.024260807811365245;  // std dev = 6,245, 224,000 (wgt'ed) examples reached here.  /* #neg=152 #pos=72 */
%   | | | else return 0.06930850915303922;  // std dev = 7,448, 280,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=98 */


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, A).;false;true
0;true,false;phenotype(A, E), interaction(F, C).;false;false
0;false,true,false;complex(A, I), complex(G, I).;false;false
0;true;complex(A, D), complex(C, D).;false;true
0;false,true;interaction(H, A), interaction(H, H).;false;true
0;false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,false;interaction(J, A), enzyme(J, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,true;interaction(I, A), recursion_proteinclass(I, B).;false;false
1;false,false;complex(A, G), interaction(A, H).;true;true
1;true,false;complex(C, E), complex(A, E).;false;true
1;true;interaction(C, D), interaction(A, D).;false;true
1;false;interaction(A, A).;false;true
1;false,false,false;interaction(A, J), interaction(J, K).;false;false
1;true,false,false;complex(C, F).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;false,false,true;complex(G, H), phenotype(A, I).;false;false
2;false,false;interaction(G, A), interaction(G, G).;true;true
2;true,false;phenotype(A, F).;false;false
2;true;interaction(A, D), complex(A, E).;true;true
2;false;interaction(A, A).;false;true
2;true,true;complex(D, E), complex(C, E).;false;false
2;false,false,false;location(A, J).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;false,false,true;phenotype(A, G), enzyme(F, H).;false;false
3;false,false;interaction(F, A), recursion_proteinclass(F, B).;true;true
3;true,false;interaction(E, A), recursion_proteinclass(E, B).;false;false
3;true;interaction(C, D), interaction(D, C).;true;true
3;false;interaction(A, A).;false;true
3;true,true;recursion_proteinclass(D, B).;false;false
3;false,false,false;interaction(I, A), phenotype(I, J).;false;false
4;;proteinclass(A, B) :- interaction(A, A).;true;true
4;false,false,true;complex(H, I), location(A, J).;false;false
4;false,false;interaction(H, A), interaction(H, H).;true;true
4;false,true,true;complex(D, F), enzyme(E, G).;false;false
4;true;interaction(C, A), recursion_proteinclass(C, B).;false;false
4;false,true;interaction(E, A), interaction(A, E).;true;false
4;false;interaction(A, D), recursion_proteinclass(D, B).;true;true
4;false,false,false;interaction(A, K), complex(A, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false,false,true;enzyme(A, I), phenotype(H, J).;false;false
5;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
5;false,true,true;complex(D, F), location(A, G).;false;false
5;false,true;complex(E, F), complex(A, F).;true;true
5;false;interaction(A, D), interaction(E, A).;true;true
5;false,false,false;interaction(K, A), enzyme(K, L).;false;false
5;false,true,false;interaction(E, E), interaction(D, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,false,true;complex(I, G), recursion_proteinclass(I, B).;false;false
6;false,false;complex(A, G), location(A, H).;true;true
6;true,false;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true;phenotype(A, D), phenotype(C, D).;false;true
6;false;interaction(A, A).;false;true
6;false,false,false;interaction(J, A), location(J, K).;false;false
6;true,false,false;interaction(F, C), interaction(C, F).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false,false,true;interaction(I, K), recursion_proteinclass(K, B).;false;false
7;false,false;interaction(I, A), enzyme(A, J).;true;true
7;false,true,true;interaction(A, E), complex(D, F).;false;false
7;false,true;complex(E, F).;true;true
7;false;interaction(D, A), interaction(E, D).;true;true
7;false,false,false;location(A, L).;false;false
7;false,true,false;complex(D, G), complex(A, H).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
8;false,false,true;enzyme(J, L).;false;false
8;false,false;interaction(J, A), phenotype(J, K).;true;true
8;false,true,true;phenotype(A, H), enzyme(E, I).;false;false
8;true;recursion_proteinclass(D, B).;false;false
8;false,true;complex(E, F), phenotype(E, G).;true;false
8;false;interaction(A, E), interaction(E, E).;true;true
8;false,false,false;phenotype(A, M).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false,false,true;recursion_proteinclass(H, B).;false;false
9;false,false;interaction(H, A), enzyme(H, I).;true;true
9;false,true,true;interaction(D, A), phenotype(D, F).;false;false
9;false,true;interaction(D, D).;true;true
9;false;interaction(A, D), complex(D, E).;true;true
9;false,false,false;phenotype(A, J), interaction(K, A).;false;false
9;false,true,false;interaction(D, G), interaction(G, D).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A), tweets(F, G) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.21879950833382064;  // std dev = 1,030, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.15619471171805724;  // std dev = 0,690, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.6868979052935038;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09083257602313037;  // std dev = 0,414, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.5246695645672359;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.159334564590344;  // std dev = 0,008, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.39089875920783274;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.12674881427403215;  // std dev = 0,953, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04144411427308847;  // std dev = 0,433, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, E), follows(D, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.15911807289082605;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.38524241569279094;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.14031040665301958;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.27680761854304164;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.23946788572878921;  // std dev = 0,073, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5426702363738032;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.1315938800234626;  // std dev = 0,015, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.45732976362619676;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19894863569131685;  // std dev = 0,064, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.12395306484860828;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.11060083365230133;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.15615153017837777;  // std dev = 0,356, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16935361425793796;  // std dev = 0,057, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10564447036910599;  // std dev = 0,011, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.11933921009770922;  // std dev = 0,356, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12629122142668858;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return 0.014488389522995453;  // std dev = 0,653, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.18841108031157328;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.0910514452311839;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.968636
   AUC PR    = 0.347153
   CLL	      = -0.199054
   Precision = 0.35786 at threshold = 0.5
   Recall    = 0.849206
   F1        = 0.503529


Total learning time: 1.053 seconds
Total inference time: 6.55 seconds
AUC ROC: 0.968636


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.217721
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.594 seconds
Parameter learned model CLL: -0.217721


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false,false': 'follows(A, A)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,false': 'follows(F, A), tweets(F, G)'}, {'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 4, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.816, 1, 2], 'true,true': [2.11e-08, 0, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)', 'false': 'follows(A, A)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'false,false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.69, 2, 1], 'false,true': [0.0, 0, 0], 'false,false,true,false': [1.03, 3, 2], 'true,true': [0.0, 0, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.414, 5, 2], 'true,false': [0.0, 0, 1], 'true,true': [0.0, 0, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(E, F)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'true,true': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.008, 4, 0], 'false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 2], 'false,false,false,false': [0.816, 1, 2], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false': 'follows(F, A), follows(F, F)', 'false,true,true': 'tweets(D, E)', 'false,true': 'follows(D, A), follows(A, D)', 'false': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,false': 'follows(A, G)'}, {'false,true,true,true': [0.0, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.953, 3, 2], 'false,true,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false,false,false': [0.433, 2, 1], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(A, G)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(E, E), follows(D, A)', 'false': 'follows(A, D), follows(E, A)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'false,false,true,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 2, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 2], 'false,false,false,false': [0.816, 1, 2], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false,false': 'follows(F, A)'}, {'false,false,true': [0.0, 0, 2], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.015, 4, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 1, 0], 'true,true': [0.073, 0, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,true': 'follows(A, E)', 'false,false': 'follows(F, A), tweets(A, G)', 'false': 'follows(D, A), follows(E, D)'}, {'true': [0.064, 0, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.356, 1, 2], 'false,true,true': [0.0, 2, 0], 'false,true,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B)', 'false,false': 'follows(F, A)', 'false': 'follows(A, E), follows(E, E)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.356, 1, 2], 'true,false': [0.011, 4, 0], 'true,true': [0.057, 0, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false': 'follows(F, A), tweets(F, G)', 'false,true,false': 'follows(D, E), follows(E, D)', 'false,true': 'follows(D, D)', 'false': 'follows(A, D)'}, {'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.653, 3, 2], 'true': [0.0, 0, 2], 'false,false,true,false': [0.0, 2, 0]}]]
[{'': [1.4802973661668753e-16, 0.20408163265306123], 'true': [1.4802973661668753e-16, nan], 'false,false': [nan, 0.20408163265306126], 'false': [nan, 0.20408163265306123], 'false,false,false': [0.0, 0.22222222222222224]}, {'': [0.0, 0.1931191564402226], 'false,false,true': [nan, 0.21233602176592817], 'false,false': [0.2123360217659281, 0.15864144721448356], 'true': [0.0, nan], 'false': [nan, 0.1931191564402226], 'false,false,false': [nan, 0.15864144721448356]}, {'': [0.003844561604041822, 0.17101039551434952], 'true': [0.0, 0.0], 'false,false': [nan, 0.17101039551434952], 'false': [nan, 0.17101039551434946]}, {'': [0.0, 0.17018916694463607], 'false,false,true': [0.0, nan], 'false,false': [0.0, 0.16939263765098703], 'true': [0.0, nan], 'false': [nan, 0.17018916694463607], 'true,true': [0.0, nan], 'false,false,false': [1.7573243422362023e-05, 0.22222222222222224]}, {'': [nan, 0.11919465699145541], 'false,false': [nan, 0.1387824332812362], 'false,true,true': [0.0, nan], 'false,true': [0.0, nan], 'false': [0.0, 0.13878243328123624], 'false,false,false': [0.1818006467267668, 0.06253735347061178]}, {'': [0.0, 0.13592504243524897], 'false,false,true': [0.0, nan], 'false,false': [0.0, 0.1750903205997642], 'false,true': [nan, 0.0], 'false': [0.0, 0.15643362598641078], 'false,false,false': [0.0, 0.2222222222222222]}, {'': [0.0017653884142966592, 0.12373455319539803], 'true': [0.0017653884142966592, nan], 'false,false': [0.0, 0.01702007150494128], 'false': [nan, 0.12373455319539803], 'false,false,false': [5.431620788580449e-05, 0.0]}, {'': [0.0013666456810958922, 0.07277087985428825], 'false,true': [0.0, 0.0], 'false,false': [nan, 0.12701750180769164], 'false': [4.457051947990599e-05, 0.12701750180769164]}, {'': [0.018997119160298982, 0.12671436271608663], 'true': [0.0010731226848246327, 2.9853710386391896e-05], 'false,false': [nan, 0.12671436271608663], 'false': [nan, 0.12671436271608663]}, {'': [0.0, 0.059779309774571195], 'false,false,true': [0.0, 0.0], 'false,false': [0.017355400707274714, nan], 'false,true,false': [0.08517612850379983, nan], 'false,true': [nan, 0.08517612850379983], 'false': [0.08517612850379983, 0.017355400707274714]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(F, A), tweets(F, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false,false;follows(G, A).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;follows(F, A), recursion_accounttype(F, B).;true;true
5;false;follows(A, D), follows(E, A).;true;true
5;false,false,false;follows(H, A), tweets(H, I).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false,false;follows(F, A).;true;true
6;false;recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false,true;follows(A, E).;true;true
7;false;follows(D, A), follows(E, D).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
8;true;recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(F, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, D), tweets(A, E) )
%   | then return 0.4792710802073998;  // std dev = 0,741, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.024953687240215138;  // std dev = 0,781, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.7144095034523531;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then return 0.3967087346871993;  // std dev = 0,716, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.15182101254430194;  // std dev = 0,082, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5504497107555858;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A) )
%   | | then return -0.14817822211692802;  // std dev = 0,125, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.3331674465636741;  // std dev = 0,650, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, D), tweets(A, E) )
%   | then return 0.2680070821605083;  // std dev = 0,609, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.02729375038031947;  // std dev = 0,512, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, D), follows(E, A) )
%   | then return -0.18776659855029204;  // std dev = 0,130, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.42051293876690377;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.09585177171704748;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.21630007048386868;  // std dev = 0,572, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2474204571315787;  // std dev = 0,092, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0.39693079416411925;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(E, A) )
%   | | then return -0.12498699527552629;  // std dev = 0,137, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.29320306987963124;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20484570848004816;  // std dev = 0,081, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.14657129677483655;  // std dev = 0,106, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07834642153268426;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.12575605359068323;  // std dev = 0,443, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17386071684585291;  // std dev = 0,072, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.1013694005152648;  // std dev = 0,111, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.1005583640282256;  // std dev = 0,441, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12427956250912942;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, D) )
%   | then return 7.392428940961981E-4;  // std dev = 0,500, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.20305514271693703;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.06631364120976832;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.958323
   AUC PR    = 0.311151
   CLL	      = -0.267607
   Precision = 0.056346 at threshold = 0.5
   Recall    = 0.81746
   F1        = 0.105425


Total learning time: 0.961 seconds
Total inference time: 4.245 seconds
AUC ROC: 0.958323


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.174513
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.573 seconds
Refined model CLL: -0.174513


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.958323
   AUC PR    = 0.311151
   CLL	      = -0.267607
   Precision = 0.056346 at threshold = 0.5
   Recall    = 0.81746
   F1        = 0.105425


Total learning time: 3.1809999999999996 seconds
Total inference time: 4.245 seconds
AUC ROC: 0.958323
Total revision time: 3.1809999999999996
Best scored revision CLL: -0.174513


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:16:24
{'CLL': -0.267607, 'AUC ROC': 0.958323, 'F1': 0.105425, 'Recall': 0.81746, 'Precision': [0.056346, 0.5], 'parameter_5': {'CLL': -0.199054, 'AUC ROC': 0.968636, 'F1': 0.503529, 'Recall': 0.849206, 'Precision': [0.35786, 0.5], 'Inference time': 6.55, 'Learning time': 1.053, 'AUC PR': 0.347153}, 'Inference time': 4.245, 'Learning time': 3.1809999999999996, 'AUC PR': 0.311151}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(A, D) )
%   then return 0.5753520130088217;  // std dev = 0,786, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.024953687240215138;  // std dev = 0,781, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6318783383858603;  // std dev = 0,101, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then return 0.3777050504490293;  // std dev = 0,711, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.15182101254430194;  // std dev = 0,082, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.4796199742686795;  // std dev = 0,112, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.15191854708599958;  // std dev = 0,138, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.32073149626190983;  // std dev = 0,635, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.36510884692792844;  // std dev = 0,106, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then return 0.25283611963105634;  // std dev = 0,606, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.1367484632876509;  // std dev = 0,135, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2864386940765062;  // std dev = 0,095, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.13774745978477715;  // std dev = 0,178, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.21555385118766868;  // std dev = 0,544, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(A, D) )
%   then return 0.18069036012001605;  // std dev = 0,531, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.03936122087855989;  // std dev = 0,415, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21698326028156667;  // std dev = 0,112, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.1302305246752408;  // std dev = 0,197, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.14207829111601886;  // std dev = 0,493, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1831352445793616;  // std dev = 0,099, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then return 0.11686227298965866;  // std dev = 0,479, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12108844853629931;  // std dev = 0,194, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15781700479598848;  // std dev = 0,089, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.117995301427527;  // std dev = 0,207, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.10350903014626305;  // std dev = 0,451, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.878793
   AUC PR    = 0.270865
   CLL	      = -0.372207
   Precision = 0.053592 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.1


Total learning time: 1.196 seconds
Total inference time: 3.198 seconds
AUC ROC: 0.878793


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:16:29
{'CLL': -0.372207, 'AUC ROC': 0.878793, 'F1': 0.1, 'Recall': 0.746032, 'Precision': [0.053592, 0.5], 'Inference time': 3.198, 'Learning time': 1.196, 'AUC PR': 0.270865}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.875145
   AUC PR    = 0.276232
   CLL	      = -0.164383
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.605 seconds
Total inference time: 2.035 seconds
AUC ROC: 0.875145


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:16:32
{'CLL': -0.164383, 'AUC ROC': 0.875145, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.035, 'Learning time': 0.605, 'AUC PR': 0.276232}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, A).;false;true
0;true,false;phenotype(A, E), interaction(F, C).;false;false
0;false,true,false;complex(A, I), complex(G, I).;false;false
0;true;complex(A, D), complex(C, D).;false;true
0;false,true;interaction(H, A), interaction(H, H).;false;true
0;false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,false;interaction(J, A), enzyme(J, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,true;interaction(I, A), recursion_proteinclass(I, B).;false;false
1;false,false;complex(A, G), interaction(A, H).;true;true
1;true,false;complex(C, E), complex(A, E).;false;true
1;true;interaction(C, D), interaction(A, D).;false;true
1;false;interaction(A, A).;false;true
1;false,false,false;interaction(A, J), interaction(J, K).;false;false
1;true,false,false;complex(C, F).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;false,false,true;complex(G, H), phenotype(A, I).;false;false
2;false,false;interaction(G, A), interaction(G, G).;true;true
2;true,false;phenotype(A, F).;false;false
2;true;interaction(A, D), complex(A, E).;true;true
2;false;interaction(A, A).;false;true
2;true,true;complex(D, E), complex(C, E).;false;false
2;false,false,false;location(A, J).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;false,false,true;phenotype(A, G), enzyme(F, H).;false;false
3;false,false;interaction(F, A), recursion_proteinclass(F, B).;true;true
3;true,false;interaction(E, A), recursion_proteinclass(E, B).;false;false
3;true;interaction(C, D), interaction(D, C).;true;true
3;false;interaction(A, A).;false;true
3;true,true;recursion_proteinclass(D, B).;false;false
3;false,false,false;interaction(I, A), phenotype(I, J).;false;false
4;;proteinclass(A, B) :- interaction(A, A).;true;true
4;false,false,true;complex(H, I), location(A, J).;false;false
4;false,false;interaction(H, A), interaction(H, H).;true;true
4;false,true,true;complex(D, F), enzyme(E, G).;false;false
4;true;interaction(C, A), recursion_proteinclass(C, B).;false;false
4;false,true;interaction(E, A), interaction(A, E).;true;false
4;false;interaction(A, D), recursion_proteinclass(D, B).;true;true
4;false,false,false;interaction(A, K), complex(A, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false,false,true;enzyme(A, I), phenotype(H, J).;false;false
5;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
5;false,true,true;complex(D, F), location(A, G).;false;false
5;false,true;complex(E, F), complex(A, F).;true;true
5;false;interaction(A, D), interaction(E, A).;true;true
5;false,false,false;interaction(K, A), enzyme(K, L).;false;false
5;false,true,false;interaction(E, E), interaction(D, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,false,true;complex(I, G), recursion_proteinclass(I, B).;false;false
6;false,false;complex(A, G), location(A, H).;true;true
6;true,false;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true;phenotype(A, D), phenotype(C, D).;false;true
6;false;interaction(A, A).;false;true
6;false,false,false;interaction(J, A), location(J, K).;false;false
6;true,false,false;interaction(F, C), interaction(C, F).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false,false,true;interaction(I, K), recursion_proteinclass(K, B).;false;false
7;false,false;interaction(I, A), enzyme(A, J).;true;true
7;false,true,true;interaction(A, E), complex(D, F).;false;false
7;false,true;complex(E, F).;true;true
7;false;interaction(D, A), interaction(E, D).;true;true
7;false,false,false;location(A, L).;false;false
7;false,true,false;complex(D, G), complex(A, H).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
8;false,false,true;enzyme(J, L).;false;false
8;false,false;interaction(J, A), phenotype(J, K).;true;true
8;false,true,true;phenotype(A, H), enzyme(E, I).;false;false
8;true;recursion_proteinclass(D, B).;false;false
8;false,true;complex(E, F), phenotype(E, G).;true;false
8;false;interaction(A, E), interaction(E, E).;true;true
8;false,false,false;phenotype(A, M).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false,false,true;recursion_proteinclass(H, B).;false;false
9;false,false;interaction(H, A), enzyme(H, I).;true;true
9;false,true,true;interaction(D, A), phenotype(D, F).;false;false
9;false,true;interaction(D, D).;true;true
9;false;interaction(A, D), complex(D, E).;true;true
9;false,false,false;phenotype(A, J), interaction(K, A).;false;false
9;false,true,false;interaction(D, G), interaction(G, D).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.11138396564289575;  // std dev = 1,419, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2970143868412815;  // std dev = 0,845, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.6558459784192016;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09188175413906956;  // std dev = 0,409, 14,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4462796272973753;  // std dev = 0,100, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.4706696631922529;  // std dev = 0,065, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.15668333510930244;  // std dev = 0,030, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.27531767712315136;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.34128409311440255;  // std dev = 0,093, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.08322269849493373;  // std dev = 1,378, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.114322549888009;  // std dev = 0,535, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2697812585087539;  // std dev = 0,083, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, E), follows(D, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06836688199426057;  // std dev = 0,394, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3552590163534931;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.16863732773098178;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.20683153979223576;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.24356755796643484;  // std dev = 0,111, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5675578457168589;  // std dev = 0,328, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.13632845334541419;  // std dev = 0,017, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.33777767397745545;  // std dev = 7,45e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2019324623151139;  // std dev = 0,097, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.05731285440739823;  // std dev = 0,269, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.12586986778995193;  // std dev = 0,006, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1298017083350348;  // std dev = 0,397, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17451071738646892;  // std dev = 0,087, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.11208140008006372;  // std dev = 0,009, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.10051619728862815;  // std dev = 0,393, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13018229745969975;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return 0.01307652736439042;  // std dev = 1,020, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.17203523801763487;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.10543595820573078;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.973429
   AUC PR    = 0.34813
   CLL	      = -0.176319
   Precision = 0.331325 at threshold = 0.5
   Recall    = 0.873016
   F1        = 0.480349


Total learning time: 1.125 seconds
Total inference time: 7.077 seconds
AUC ROC: 0.973429


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.23927
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.595 seconds
Parameter learned model CLL: -0.23927


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C)', 'false,true': 'follows(F, A), follows(F, F)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 7, 0], 'false,true,true': [0.0, 0, 0], 'false,false,false,false': [1.225, 3, 3], 'true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)', 'false': 'follows(A, A)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'false,false,true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.845, 2, 2], 'false,true': [0.0, 0, 0], 'false,false,true,false': [1.419, 8, 3], 'true,true': [0.0, 0, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.409, 10, 4], 'true,false': [0.0, 0, 2], 'true,true': [0.0, 0, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(E, F)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'true,true': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.065, 0, 3], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.03, 7, 0], 'false,true': [0.0, 0, 0], 'true,true,true': [0.1, 0, 4], 'false,false,false,false': [1.225, 3, 3], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false': 'follows(F, A), follows(F, F)', 'false,true,true': 'tweets(D, E)', 'false,true': 'follows(D, A), follows(A, D)', 'false': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,false': 'follows(A, G)'}, {'false,true,true,true': [0.093, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.378, 8, 4], 'false,true,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false,false,false': [0.535, 2, 2], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(A, G)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(E, E), follows(D, A)', 'false': 'follows(A, D), follows(E, A)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'false,false,true,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 2, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.083, 0, 4], 'false,false,false,false': [1.225, 3, 3], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [0.394, 5, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false,false': 'follows(F, A)'}, {'false,false,true': [0.328, 0, 4], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.017, 7, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 3, 0], 'true,true': [0.111, 0, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,true': 'follows(A, E)', 'false,false': 'follows(F, A), tweets(A, G)', 'false': 'follows(D, A), follows(E, D)'}, {'true': [0.097, 0, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.397, 3, 3], 'false,true,true': [0.269, 4, 1], 'false,true,false': [0.006, 3, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B)', 'false,false': 'follows(F, A)', 'false': 'follows(A, E), follows(E, E)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.393, 3, 3], 'true,false': [0.009, 7, 0], 'true,true': [0.087, 0, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false': 'follows(F, A), tweets(F, G)', 'false,true,false': 'follows(D, E), follows(E, D)', 'false,true': 'follows(D, D)', 'false': 'follows(A, D)'}, {'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.02, 8, 4], 'true': [0.042, 0, 4], 'false,false,true,false': [0.0, 2, 0]}]]
[{'': [-1.4802973661668753e-16, 0.20408163265306123], 'false,false': [nan, 0.17751479289940816], 'true': [-1.4802973661668753e-16, nan], 'false,true': [nan, 0.0], 'false': [0.0, 0.1775147928994082], 'false,false,false': [-7.93016446160826e-18, 0.24999999999999992]}, {'': [0.0, 0.19510140957743874], 'false,false,true': [0.0, 0.18310345949173648], 'false,false': [0.196091369293133, 0.1784716281162939], 'true': [0.0, nan], 'false': [nan, 0.1951014095774387], 'false,false,false': [nan, 0.1784716281162939]}, {'': [0.0022435862877331716, 0.16756253288308548], 'true': [0.0, 0.0], 'false,false': [nan, 0.16756253288308548], 'false': [nan, 0.1675625328830855]}, {'': [0.0024824557136357006, 0.15965807206416846], 'false,false,true': [0.0014127843691313553, nan], 'false,false': [0.0014127843691313553, 0.16183436471029203], 'true': [0.0024824557136357006, nan], 'false': [nan, 0.1596580720641685], 'true,true': [0.0024824557136357006, nan], 'false,false,false': [0.00012926268247293038, 0.25]}, {'': [nan, 0.11982960342076268], 'false,false': [nan, 0.13671940289469509], 'false,true,true': [0.002155767182025356, nan], 'false,true': [0.002155767182025356, nan], 'false': [0.002155767182025356, 0.13671940289469509], 'false,false,false': [0.15819273424064556, 0.07157400828934009]}, {'': [0.0017096808165393412, 0.1349395977547211], 'false,false,true': [0.0, nan], 'false,false': [0.0, 0.21393316321484393], 'false,true': [nan, 0.025937390992624525], 'false': [0.025937390992624525, 0.1805396055271044], 'false,false,false': [0.0, 0.25000000000000006]}, {'': [0.0020385050899904187, 0.13301008106387166], 'true': [0.0020385050899904187, nan], 'false,false': [0.02688409149463661, 0.008549993809343704], 'false': [nan, 0.13301008106387166], 'false,false,false': [3.9740322513970305e-05, 1.850371707708594e-17]}, {'': [0.0015595059063108114, 0.08430337739960111], 'false,true': [0.014468968082151024, 3.539350381723492e-05], 'false,false': [nan, 0.15728175882565362], 'false': [0.010157955134948271, 0.15728175882565362]}, {'': [0.021085507475903632, 0.1548009863264634], 'true': [0.001090729979022677, 1.2764075809162945e-05], 'false,false': [nan, 0.1548009863264634], 'false': [nan, 0.1548009863264634]}, {'': [0.0004364183951485537, 0.06990068873048506], 'false,false,true': [0.0, 0.0], 'false,false': [0.01924756618340637, nan], 'false,true,false': [0.08668281934262746, nan], 'false,true': [nan, 0.08668281934262746], 'false': [0.08668281934262746, 0.01924756618340637]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false,false;follows(G, A), tweets(G, H).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false,true;follows(F, A), recursion_accounttype(F, B).;true;true
1;false;follows(A, E).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false,false;follows(G, A).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;follows(F, A), recursion_accounttype(F, B).;true;true
5;false;follows(A, D), follows(E, A).;true;true
5;false,false,false;follows(H, A), tweets(H, I).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false,false;follows(F, A).;true;true
6;false;recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false,true;follows(A, E).;true;true
7;false;follows(D, A), follows(E, D).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
8;true;recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(F, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A), tweets(E, F) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.30874113578563506;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2970143868412815;  // std dev = 0,845, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.6558459784192016;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.13211303049479012;  // std dev = 0,054, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11024456011969057;  // std dev = 0,545, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.2564123687585864;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.44513617217565626;  // std dev = 0,096, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4706696631922529;  // std dev = 0,065, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then return -0.11947774984480013;  // std dev = 0,050, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.2061374073445397;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3404206330479034;  // std dev = 0,089, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return -0.09830213608939475;  // std dev = 0,024, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.32353230309457087;  // std dev = 0,817, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.12567119537588445;  // std dev = 0,512, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.005038091182520003;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2691435307562439;  // std dev = 0,079, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, D), follows(E, A) )
%   | then return -0.03416686524751284;  // std dev = 0,306, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.352663899192181;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.14544830545809292;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.12432610966086521;  // std dev = 1,197, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.23402180752875631;  // std dev = 0,086, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0.5064264190490002;  // std dev = 0,269, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(E, A) )
%   | | then return -0.09892571629841375;  // std dev = 0,054, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.3918973883891708;  // std dev = 0,064, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1949385679868988;  // std dev = 0,076, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.023507030349520595;  // std dev = 0,239, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.10857193081620524;  // std dev = 0,022, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.07645989356999512;  // std dev = 0,936, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.15332801798174933;  // std dev = 0,047, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1927708596899305;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.08523412459311795;  // std dev = 0,040, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return 0.058904582761097286;  // std dev = 0,933, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1345343320808101;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return -0.0707906031296229;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.14089613999282416;  // std dev = 0,636, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.04644369979992713;  // std dev = 0,642, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.17054844792608392;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.09895086820839083;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.972632
   AUC PR    = 0.325028
   CLL	      = -0.164623
   Precision = 0.332335 at threshold = 0.5
   Recall    = 0.880952
   F1        = 0.482609


Total learning time: 1.508 seconds
Total inference time: 5.748 seconds
AUC ROC: 0.972632


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.216549
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.6 seconds
Refined model CLL: -0.216549


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.972632
   AUC PR    = 0.325028
   CLL	      = -0.164623
   Precision = 0.332335 at threshold = 0.5
   Recall    = 0.880952
   F1        = 0.482609


Total learning time: 3.828 seconds
Total inference time: 5.748 seconds
AUC ROC: 0.972632
Total revision time: 3.828
Best scored revision CLL: -0.216549


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:16:49
{'CLL': -0.164623, 'AUC ROC': 0.972632, 'F1': 0.482609, 'Recall': 0.880952, 'Precision': [0.332335, 0.5], 'Inference time': 5.748, 'Learning time': 3.828, 'AUC PR': 0.325028, 'parameter_10': {'CLL': -0.176319, 'AUC ROC': 0.973429, 'F1': 0.480349, 'Recall': 0.873016, 'Precision': [0.331325, 0.5], 'Inference time': 7.077, 'Learning time': 1.125, 'AUC PR': 0.34813}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.30874113578563506;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.2564123687585864;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5095890810122652;  // std dev = 0,319, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, D), follows(D, A) )
%   | then return -0.14663156906304944;  // std dev = 0,123, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.38398145154798224;  // std dev = 0,817, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1579586273352368;  // std dev = 0,519, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.03947074067787304;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3977177989357068;  // std dev = 0,335, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3624671068643499;  // std dev = 0,042, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then return -0.12598440967487343;  // std dev = 0,112, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.15931345001302633;  // std dev = 1,197, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.25403337261603487;  // std dev = 0,081, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5873590747377007;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then return -0.10242187539385772;  // std dev = 0,080, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.20883908643459867;  // std dev = 0,255, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.045510431267141646;  // std dev = 0,829, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20918306265174116;  // std dev = 0,071, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then return 0.44171930500184864;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14835587773357375;  // std dev = 0,256, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.05308374232959439;  // std dev = 0,832, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17682165174695255;  // std dev = 0,063, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.00372167760562041;  // std dev = 0,388, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.10772378547966059;  // std dev = 0,062, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.0644039947263977;  // std dev = 0,988, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1855619811824559;  // std dev = 0,184, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.17291563179254843;  // std dev = 0,026, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then return -0.08889908889621133;  // std dev = 0,090, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.05024686644221666;  // std dev = 0,988, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13102635961433917;  // std dev = 0,051, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then return 0.3067263398008762;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.13258369141605067;  // std dev = 0,261, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.04870950455155807;  // std dev = 0,825, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.975236
   AUC PR    = 0.341175
   CLL	      = -0.156387
   Precision = 0.334437 at threshold = 0.5
   Recall    = 0.801587
   F1        = 0.471963


Total learning time: 2.812 seconds
Total inference time: 21.323 seconds
AUC ROC: 0.975236


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:17:14
{'CLL': -0.156387, 'AUC ROC': 0.975236, 'F1': 0.471963, 'Recall': 0.801587, 'Precision': [0.334437, 0.5], 'Inference time': 21.323, 'Learning time': 2.812, 'AUC PR': 0.341175}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */


Results
   AUC ROC   = 0.916921
   AUC PR    = 0.277637
   CLL	      = -0.171071
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.813 seconds
Total inference time: 2.276 seconds
AUC ROC: 0.916921


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:17:17
{'CLL': -0.171071, 'AUC ROC': 0.916921, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.276, 'Learning time': 0.813, 'AUC PR': 0.277637}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, A).;false;true
0;true,false;phenotype(A, E), interaction(F, C).;false;false
0;false,true,false;complex(A, I), complex(G, I).;false;false
0;true;complex(A, D), complex(C, D).;false;true
0;false,true;interaction(H, A), interaction(H, H).;false;true
0;false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,false;interaction(J, A), enzyme(J, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,true;interaction(I, A), recursion_proteinclass(I, B).;false;false
1;false,false;complex(A, G), interaction(A, H).;true;true
1;true,false;complex(C, E), complex(A, E).;false;true
1;true;interaction(C, D), interaction(A, D).;false;true
1;false;interaction(A, A).;false;true
1;false,false,false;interaction(A, J), interaction(J, K).;false;false
1;true,false,false;complex(C, F).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;false,false,true;complex(G, H), phenotype(A, I).;false;false
2;false,false;interaction(G, A), interaction(G, G).;true;true
2;true,false;phenotype(A, F).;false;false
2;true;interaction(A, D), complex(A, E).;true;true
2;false;interaction(A, A).;false;true
2;true,true;complex(D, E), complex(C, E).;false;false
2;false,false,false;location(A, J).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;false,false,true;phenotype(A, G), enzyme(F, H).;false;false
3;false,false;interaction(F, A), recursion_proteinclass(F, B).;true;true
3;true,false;interaction(E, A), recursion_proteinclass(E, B).;false;false
3;true;interaction(C, D), interaction(D, C).;true;true
3;false;interaction(A, A).;false;true
3;true,true;recursion_proteinclass(D, B).;false;false
3;false,false,false;interaction(I, A), phenotype(I, J).;false;false
4;;proteinclass(A, B) :- interaction(A, A).;true;true
4;false,false,true;complex(H, I), location(A, J).;false;false
4;false,false;interaction(H, A), interaction(H, H).;true;true
4;false,true,true;complex(D, F), enzyme(E, G).;false;false
4;true;interaction(C, A), recursion_proteinclass(C, B).;false;false
4;false,true;interaction(E, A), interaction(A, E).;true;false
4;false;interaction(A, D), recursion_proteinclass(D, B).;true;true
4;false,false,false;interaction(A, K), complex(A, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false,false,true;enzyme(A, I), phenotype(H, J).;false;false
5;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
5;false,true,true;complex(D, F), location(A, G).;false;false
5;false,true;complex(E, F), complex(A, F).;true;true
5;false;interaction(A, D), interaction(E, A).;true;true
5;false,false,false;interaction(K, A), enzyme(K, L).;false;false
5;false,true,false;interaction(E, E), interaction(D, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,false,true;complex(I, G), recursion_proteinclass(I, B).;false;false
6;false,false;complex(A, G), location(A, H).;true;true
6;true,false;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true;phenotype(A, D), phenotype(C, D).;false;true
6;false;interaction(A, A).;false;true
6;false,false,false;interaction(J, A), location(J, K).;false;false
6;true,false,false;interaction(F, C), interaction(C, F).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false,false,true;interaction(I, K), recursion_proteinclass(K, B).;false;false
7;false,false;interaction(I, A), enzyme(A, J).;true;true
7;false,true,true;interaction(A, E), complex(D, F).;false;false
7;false,true;complex(E, F).;true;true
7;false;interaction(D, A), interaction(E, D).;true;true
7;false,false,false;location(A, L).;false;false
7;false,true,false;complex(D, G), complex(A, H).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
8;false,false,true;enzyme(J, L).;false;false
8;false,false;interaction(J, A), phenotype(J, K).;true;true
8;false,true,true;phenotype(A, H), enzyme(E, I).;false;false
8;true;recursion_proteinclass(D, B).;false;false
8;false,true;complex(E, F), phenotype(E, G).;true;false
8;false;interaction(A, E), interaction(E, E).;true;true
8;false,false,false;phenotype(A, M).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false,false,true;recursion_proteinclass(H, B).;false;false
9;false,false;interaction(H, A), enzyme(H, I).;true;true
9;false,true,true;interaction(D, A), phenotype(D, F).;false;false
9;false,true;interaction(D, D).;true;true
9;false;interaction(A, D), complex(D, E).;true;true
9;false,false,false;phenotype(A, J), interaction(K, A).;false;false
9;false,true,false;interaction(D, G), interaction(G, D).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.30259337954395676;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.07947818646175175;  // std dev = 1,690, 17,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.29701438684128156;  // std dev = 0,845, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6558459784192016;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.07007289026795287;  // std dev = 0,399, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4325747308029507;  // std dev = 0,113, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.4706696631922529;  // std dev = 0,065, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.14854044294827054;  // std dev = 0,036, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.23822325914648942;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.3315580879565829;  // std dev = 0,106, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.05963022259956785;  // std dev = 1,652, 18,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0.11520484680947701;  // std dev = 0,533, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2629499450809815;  // std dev = 0,095, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, E), follows(D, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0845940800131824;  // std dev = 0,404, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3550569520192244;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.16685265635974011;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.18521973958321303;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.23011913919207042;  // std dev = 0,128, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6217792939343603;  // std dev = 0,366, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.12725772456391116;  // std dev = 0,028, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.2963411507905924;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19220756073028072;  // std dev = 0,114, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.06795691069569013;  // std dev = 0,271, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.11981578242816407;  // std dev = 0,010, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.11661091554746002;  // std dev = 0,397, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16695669975467428;  // std dev = 0,105, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10508555826796931;  // std dev = 0,020, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09164699590243852;  // std dev = 0,393, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13012118391021196;  // std dev = 0,041, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return -0.023861759286278244;  // std dev = 1,124, 17,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.5086854055022287;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.17635738810167345;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.1064895563075549;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.972713
   AUC PR    = 0.342757
   CLL	      = -0.172129
   Precision = 0.322785 at threshold = 0.5
   Recall    = 0.809524
   F1        = 0.461538


Total learning time: 1.214 seconds
Total inference time: 6.575 seconds
AUC ROC: 0.972713


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.225556
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.69 seconds
Parameter learned model CLL: -0.225556


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C)', 'false,true': 'follows(F, A), follows(F, F)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 10, 0], 'false,true,true': [0.0, 0, 0], 'false,false,false,false': [1.491, 5, 4], 'true,true': [0.0, 0, 10], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)', 'false': 'follows(A, A)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'false,false,true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.845, 2, 2], 'false,true': [0.0, 0, 0], 'false,false,true,false': [1.69, 13, 4], 'true,true': [0.0, 0, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.399, 15, 5], 'true,false': [0.0, 0, 2], 'true,true': [0.0, 0, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(E, F)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'true,true': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.065, 0, 3], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.036, 10, 0], 'false,true': [0.0, 0, 0], 'true,true,true': [0.113, 0, 8], 'false,false,false,false': [1.491, 5, 4], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false': 'follows(F, A), follows(F, F)', 'false,true,true': 'tweets(D, E)', 'false,true': 'follows(D, A), follows(A, D)', 'false': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,false': 'follows(A, G)'}, {'false,true,true,true': [0.106, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.652, 13, 5], 'false,true,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false,false,false': [0.533, 2, 2], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(A, G)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(E, E), follows(D, A)', 'false': 'follows(A, D), follows(E, A)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'false,false,true,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 2, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.095, 0, 8], 'false,false,false,false': [1.491, 5, 4], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [0.404, 8, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false,false': 'follows(F, A)'}, {'false,false,true': [0.366, 0, 5], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.028, 10, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 5, 0], 'true,true': [0.128, 0, 10]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,true': 'follows(A, E)', 'false,false': 'follows(F, A), tweets(A, G)', 'false': 'follows(D, A), follows(E, D)'}, {'true': [0.114, 0, 10], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.397, 5, 4], 'false,true,true': [0.271, 6, 1], 'false,true,false': [0.01, 4, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B)', 'false,false': 'follows(F, A)', 'false': 'follows(A, E), follows(E, E)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.393, 5, 4], 'true,false': [0.02, 10, 0], 'true,true': [0.105, 0, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false': 'follows(F, A), tweets(F, G)', 'false,true,false': 'follows(D, E), follows(E, D)', 'false,true': 'follows(D, D)', 'false': 'follows(A, D)'}, {'false,true,false,false': [0.0, 0, 1], 'false,false,true,true': [0.0, 0, 2], 'false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.124, 13, 4], 'true': [0.041, 0, 8], 'false,false,true,false': [0.0, 2, 0]}]]
[{'': [-8.881784197001253e-17, 0.18749999999999994], 'false,false': [nan, 0.16620498614958432], 'true': [-8.881784197001253e-17, nan], 'false,true': [nan, 0.0], 'false': [0.0, 0.16620498614958434], 'false,false,false': [-1.1102230246251566e-17, 0.2469135802469134]}, {'': [0.0, 0.18481349445678472], 'false,false,true': [0.0, 0.16804638909453562], 'false,false': [0.1802015159741298, 0.17847162811629394], 'true': [0.0, nan], 'false': [nan, 0.18481349445678488], 'false,false,false': [nan, 0.17847162811629394]}, {'': [0.001615382127167786, 0.1594720543599789], 'true': [-1.1102230246251565e-16, 0.0], 'false,false': [nan, 0.1594720543599789], 'false': [nan, 0.15947205435997888]}, {'': [0.0015878669677596713, 0.15585838313501807], 'false,false,true': [0.0014127843691313553, nan], 'false,false': [0.0014127843691313553, 0.15432160562983718], 'true': [0.0015878669677596713, nan], 'false': [nan, 0.1558583831350181], 'true,true': [0.0015878669677596713, nan], 'false,false,false': [0.00013222577328966535, 0.24691358024691348]}, {'': [nan, 0.11451138579912211], 'false,false': [nan, 0.13736410260941057], 'false,true,true': [0.0013953243805124582, nan], 'false,true': [0.0013953243805124582, nan], 'false': [0.0013953243805124582, 0.13736410260941048], 'false,false,false': [0.15152730637764486, 0.0711026993155692]}, {'': [0.001123762137050649, 0.136000128149288], 'false,false,true': [0.0, nan], 'false,false': [0.0, 0.22045978462954252], 'false,true': [nan, 0.01816863903082129], 'false': [0.01816863903082129, 0.1936617820058985], 'false,false,false': [0.0, 0.24691358024691348]}, {'': [0.0016509835927339344, 0.13313306897466826], 'true': [0.0016509835927339344, nan], 'false,false': [0.026817046288158064, 0.006405193939577081], 'false': [nan, 0.13313306897466817], 'false,false,false': [7.805590118107608e-05, 0.0]}, {'': [0.001288885063862849, 0.08519518423728813], 'false,true': [0.010491505872141121, 0.00010085772211103176], 'false,false': [nan, 0.15759703811009484], 'false': [0.007335415571024601, 0.15759703811009484]}, {'': [0.019000270462697005, 0.15481596699940414], 'true': [0.0009970246192608121, 3.8274621398518e-05], 'false,false': [nan, 0.15481596699940414], 'false': [nan, 0.15481596699940414]}, {'': [0.00021155541082453974, 0.07339859837157779], 'false,false,true': [0.0, 0.0], 'false,false': [0.02000059849040928, nan], 'false,true,false': [0.07436022862616165, 0.0], 'false,true': [nan, 0.08510969187011784], 'false': [0.08510969187011784, 0.02000059849040928]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false,false;follows(G, A), tweets(G, H).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false,true;follows(F, A), recursion_accounttype(F, B).;true;true
1;false;follows(A, E).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false,false;follows(G, A).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;follows(F, A), recursion_accounttype(F, B).;true;true
5;false;follows(A, D), follows(E, A).;true;true
5;false,false,false;follows(H, A), tweets(H, I).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false,false;follows(F, A).;true;true
6;false;recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false,true;follows(A, E).;true;true
7;false;follows(D, A), follows(E, D).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
8;true;recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,true;follows(D, E), follows(E, D).;true;true
9;false,false;recursion_accounttype(F, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A), tweets(E, F) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2602045188031407;  // std dev = 1,466, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else return 0.29701438684128156;  // std dev = 0,845, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6558459784192016;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.12645684412302335;  // std dev = 0,059, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.05460432554136632;  // std dev = 0,578, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then return 0.34680545041679317;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.057157737085084086;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.4330550390440572;  // std dev = 0,041, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4706696631922529;  // std dev = 0,065, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then return -0.1145958171845141;  // std dev = 0,054, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.2758667173869111;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.048104420168533675;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.33192681058868906;  // std dev = 0,039, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3576516559039817;  // std dev = 0,059, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then return -0.10350157038687995;  // std dev = 0,050, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.2127708419789336;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04024194139428913;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.26322811330590173;  // std dev = 0,035, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D), follows(E, A) )
%   | then return -0.05155521079594067;  // std dev = 0,103, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.30167578200284906;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.12032131616743241;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.10446482025348115;  // std dev = 1,409, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.20404554356200505;  // std dev = 1,05e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.24406261727394993;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.5337247727803913;  // std dev = 0,331, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return -0.08864191376682246;  // std dev = 0,036, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.32670022317377995;  // std dev = 0,252, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.17289541292234448;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.20187973671946188;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), follows(F, E) )
%   | then if ( follows(A, F) )
%   | | then return -0.035444751801435415;  // std dev = 0,096, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.09265523931012554;  // std dev = 0,014, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, G) )
%   | | then return 0.08794925682880068;  // std dev = 0,863, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.02825275867547073;  // std dev = 0,725, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.1495493809423316;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1632742752950766;  // std dev = 0,048, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17129738968552147;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return -0.07237604251092657;  // std dev = 0,010, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08880808189090113;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, I) )
%   | then return 0.06695692124449062;  // std dev = 0,864, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.02348118998352807;  // std dev = 0,724, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13688085436801983;  // std dev = 0,016, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return -0.06873158455325314;  // std dev = 0,012, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.013053978641431908;  // std dev = 1,081, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0.36658573438322783;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.14701013383484762;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.08472471991629874;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.969871
   AUC PR    = 0.320832
   CLL	      = -0.16083
   Precision = 0.125457 at threshold = 0.5
   Recall    = 0.81746
   F1        = 0.217529


Total learning time: 2.192 seconds
Total inference time: 7.624 seconds
AUC ROC: 0.969871


Results scoring model
   AUC ROC   = 0.991111
   AUC PR    = 0.991912
   CLL	      = -0.206166
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.701 seconds
Refined model CLL: -0.206166


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.969871
   AUC PR    = 0.320832
   CLL	      = -0.16083
   Precision = 0.125457 at threshold = 0.5
   Recall    = 0.81746
   F1        = 0.217529


Total learning time: 4.797 seconds
Total inference time: 7.624 seconds
AUC ROC: 0.969871
Total revision time: 4.797
Best scored revision CLL: -0.206166


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:17:37
{'CLL': -0.16083, 'AUC ROC': 0.969871, 'F1': 0.217529, 'Recall': 0.81746, 'Precision': [0.125457, 0.5], 'parameter_15': {'CLL': -0.172129, 'AUC ROC': 0.972713, 'F1': 0.461538, 'Recall': 0.809524, 'Precision': [0.322785, 0.5], 'Inference time': 6.575, 'Learning time': 1.214, 'AUC PR': 0.342757}, 'Inference time': 7.624, 'Learning time': 4.797, 'AUC PR': 0.320832}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.08165239320886175;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then return 0.32092546969114216;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.08165239320886175;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5181124438058329;  // std dev = 0,348, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then return -0.13103182239924716;  // std dev = 0,107, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.25206564481433;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.012740572002988828;  // std dev = 0,888, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3142588632776334;  // std dev = 0,031, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.09382237137867677;  // std dev = 0,015, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.061487352843866784;  // std dev = 0,773, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then return 0.19292386438161405;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.06802009923221464;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, A) )
%   | then return 0.25640062904341665;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.357850410979739;  // std dev = 0,416, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), follows(A, E) )
%   | then return -0.11553907540134986;  // std dev = 0,119, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.25640062904341665;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.14565792934085833;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0069727318965719055;  // std dev = 0,884, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, A) )
%   | then return 0.21062505510957963;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.29440987596796353;  // std dev = 0,400, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), follows(A, E) )
%   | then return -0.10442681532711193;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.21062505510957963;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.10936989620321738;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.006049785537385874;  // std dev = 0,884, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, A) )
%   | then return 0.17773238912207157;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2474134981814241;  // std dev = 0,373, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then return -0.09519436757499192;  // std dev = 0,101, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.17773238912207157;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.08203625432353104;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.005245578647611053;  // std dev = 0,883, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, A) )
%   | then return 0.15322607453944304;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2116849134284558;  // std dev = 0,343, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), follows(A, E) )
%   | then return -0.08741288052354725;  // std dev = 0,093, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.15322607453944304;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.008208098128256399;  // std dev = 1,329, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.08986187883615264;  // std dev = 0,455, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.11889068877328882;  // std dev = 0,057, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5447363148876668;  // std dev = 0,299, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(C, A) )
%   | | then return -0.08077233799143474;  // std dev = 0,087, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.3340605912870819;  // std dev = 0,377, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.09998740735267793;  // std dev = 0,448, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */


Results
   AUC ROC   = 0.953978
   AUC PR    = 0.311822
   CLL	      = -0.178334
   Precision = 0.130711 at threshold = 0.5
   Recall    = 0.81746
   F1        = 0.225383


Total learning time: 3.596 seconds
Total inference time: 5.734 seconds
AUC ROC: 0.953978


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:17:46
{'CLL': -0.178334, 'AUC ROC': 0.953978, 'F1': 0.225383, 'Recall': 0.81746, 'Precision': [0.130711, 0.5], 'Inference time': 5.734, 'Learning time': 3.596, 'AUC PR': 0.311822}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.913296
   AUC PR    = 0.277131
   CLL	      = -0.166564
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.893 seconds
Total inference time: 2.368 seconds
AUC ROC: 0.913296


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:17:50
{'CLL': -0.166564, 'AUC ROC': 0.913296, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.368, 'Learning time': 0.893, 'AUC PR': 0.277131}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, A).;false;true
0;true,false;phenotype(A, E), interaction(F, C).;false;false
0;false,true,false;complex(A, I), complex(G, I).;false;false
0;true;complex(A, D), complex(C, D).;false;true
0;false,true;interaction(H, A), interaction(H, H).;false;true
0;false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,false;interaction(J, A), enzyme(J, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,true;interaction(I, A), recursion_proteinclass(I, B).;false;false
1;false,false;complex(A, G), interaction(A, H).;true;true
1;true,false;complex(C, E), complex(A, E).;false;true
1;true;interaction(C, D), interaction(A, D).;false;true
1;false;interaction(A, A).;false;true
1;false,false,false;interaction(A, J), interaction(J, K).;false;false
1;true,false,false;complex(C, F).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;false,false,true;complex(G, H), phenotype(A, I).;false;false
2;false,false;interaction(G, A), interaction(G, G).;true;true
2;true,false;phenotype(A, F).;false;false
2;true;interaction(A, D), complex(A, E).;true;true
2;false;interaction(A, A).;false;true
2;true,true;complex(D, E), complex(C, E).;false;false
2;false,false,false;location(A, J).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;false,false,true;phenotype(A, G), enzyme(F, H).;false;false
3;false,false;interaction(F, A), recursion_proteinclass(F, B).;true;true
3;true,false;interaction(E, A), recursion_proteinclass(E, B).;false;false
3;true;interaction(C, D), interaction(D, C).;true;true
3;false;interaction(A, A).;false;true
3;true,true;recursion_proteinclass(D, B).;false;false
3;false,false,false;interaction(I, A), phenotype(I, J).;false;false
4;;proteinclass(A, B) :- interaction(A, A).;true;true
4;false,false,true;complex(H, I), location(A, J).;false;false
4;false,false;interaction(H, A), interaction(H, H).;true;true
4;false,true,true;complex(D, F), enzyme(E, G).;false;false
4;true;interaction(C, A), recursion_proteinclass(C, B).;false;false
4;false,true;interaction(E, A), interaction(A, E).;true;false
4;false;interaction(A, D), recursion_proteinclass(D, B).;true;true
4;false,false,false;interaction(A, K), complex(A, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false,false,true;enzyme(A, I), phenotype(H, J).;false;false
5;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
5;false,true,true;complex(D, F), location(A, G).;false;false
5;false,true;complex(E, F), complex(A, F).;true;true
5;false;interaction(A, D), interaction(E, A).;true;true
5;false,false,false;interaction(K, A), enzyme(K, L).;false;false
5;false,true,false;interaction(E, E), interaction(D, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,false,true;complex(I, G), recursion_proteinclass(I, B).;false;false
6;false,false;complex(A, G), location(A, H).;true;true
6;true,false;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true;phenotype(A, D), phenotype(C, D).;false;true
6;false;interaction(A, A).;false;true
6;false,false,false;interaction(J, A), location(J, K).;false;false
6;true,false,false;interaction(F, C), interaction(C, F).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false,false,true;interaction(I, K), recursion_proteinclass(K, B).;false;false
7;false,false;interaction(I, A), enzyme(A, J).;true;true
7;false,true,true;interaction(A, E), complex(D, F).;false;false
7;false,true;complex(E, F).;true;true
7;false;interaction(D, A), interaction(E, D).;true;true
7;false,false,false;location(A, L).;false;false
7;false,true,false;complex(D, G), complex(A, H).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
8;false,false,true;enzyme(J, L).;false;false
8;false,false;interaction(J, A), phenotype(J, K).;true;true
8;false,true,true;phenotype(A, H), enzyme(E, I).;false;false
8;true;recursion_proteinclass(D, B).;false;false
8;false,true;complex(E, F), phenotype(E, G).;true;false
8;false;interaction(A, E), interaction(E, E).;true;true
8;false,false,false;phenotype(A, M).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false,false,true;recursion_proteinclass(H, B).;false;false
9;false,false;interaction(H, A), enzyme(H, I).;true;true
9;false,true,true;interaction(D, A), phenotype(D, F).;false;false
9;false,true;interaction(D, D).;true;true
9;false;interaction(A, D), complex(D, E).;true;true
9;false,false,false;phenotype(A, J), interaction(K, A).;false;false
9;false,true,false;interaction(D, G), interaction(G, D).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.024204006076958388;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.40360348055405776;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15490813077869695;  // std dev = 2,273, 25,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.290271611198291;  // std dev = 1,051, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.657366300637122;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.11510030928897148;  // std dev = 0,439, 29,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4311735917279771;  // std dev = 0,102, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.4782933652672001;  // std dev = 0,070, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.060427644574597324;  // std dev = 1,334, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.30062626159479433;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.33049115789857625;  // std dev = 0,095, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.10132259977307777;  // std dev = 2,217, 26,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | | else return 0.09787492391198555;  // std dev = 0,694, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.26215031675712896;  // std dev = 0,085, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, E), follows(D, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0159890059174895;  // std dev = 1,346, 15,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3584828410587228;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.20078668588189216;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.21903835852880926;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2332276240272094;  // std dev = 0,125, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6302038728170382;  // std dev = 0,439, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.17657575080913815;  // std dev = 0,012, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.3762722887423902;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19440231235181946;  // std dev = 0,110, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.02106515488648359;  // std dev = 0,835, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.05539824088651281;  // std dev = 0,271, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.12262565298303851;  // std dev = 0,379, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.24578007109349712;  // std dev = 0,729, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.14736257767631292;  // std dev = 0,016, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09422485925983706;  // std dev = 0,377, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11972876836283411;  // std dev = 0,027, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return 0.031544163086576274;  // std dev = 1,579, 22,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return 0.007000514231915375;  // std dev = 0,472, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.16605505670993637;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12330393337460015;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978231
   AUC PR    = 0.344626
   CLL	      = -0.214572
   Precision = 0.331325 at threshold = 0.5
   Recall    = 0.873016
   F1        = 0.480349


Total learning time: 1.566 seconds
Total inference time: 6.794 seconds
AUC ROC: 0.978231


Results scoring model
   AUC ROC   = 0.975
   AUC PR    = 0.979149
   CLL	      = -0.277045
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.689 seconds
Parameter learned model CLL: -0.277045


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C)', 'false,true': 'follows(F, A), follows(F, F)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [1.328, 15, 2], 'false,true,true': [0.0, 0, 0], 'false,false,false,false': [1.651, 5, 6], 'true,true': [0.0, 0, 11], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)', 'false': 'follows(A, A)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'false,false,true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.051, 3, 3], 'false,true': [0.0, 0, 0], 'false,false,true,false': [2.273, 17, 8], 'true,true': [2.98e-08, 0, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.439, 20, 9], 'true,false': [0.0, 0, 3], 'true,true': [0.0, 0, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(E, F)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'true,true': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.07, 0, 4], 'true,false': [0.0, 0, 0], 'false,false,false,true': [1.334, 15, 2], 'false,true': [0.0, 0, 0], 'true,true,true': [0.102, 0, 8], 'false,false,false,false': [1.651, 5, 6], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false': 'follows(F, A), follows(F, F)', 'false,true,true': 'tweets(D, E)', 'false,true': 'follows(D, A), follows(A, D)', 'false': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,false': 'follows(A, G)'}, {'false,true,true,true': [0.095, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.217, 17, 9], 'false,true,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false,false,false': [0.694, 3, 3], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(A, G)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(E, E), follows(D, A)', 'false': 'follows(A, D), follows(E, A)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'false,false,true,true': [0.0, 0, 3], 'false,false,false,true': [3.73e-09, 3, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.085, 0, 8], 'false,false,false,false': [1.651, 5, 6], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [1.346, 12, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false,false': 'follows(F, A)'}, {'false,false,true': [0.439, 0, 9], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.012, 15, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 5, 0], 'true,true': [0.125, 0, 11]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,true': 'follows(A, E)', 'false,false': 'follows(F, A), tweets(A, G)', 'false': 'follows(D, A), follows(E, D)'}, {'true': [0.11, 0, 11], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.379, 5, 6], 'false,true,true': [0.835, 7, 2], 'false,true,false': [0.271, 8, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B)', 'false,false': 'follows(F, A)', 'false': 'follows(A, E), follows(E, E)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.377, 5, 6], 'true,false': [0.016, 15, 0], 'true,true': [0.729, 0, 14]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false': 'follows(F, A), tweets(F, G)', 'false,true,false': 'follows(D, E), follows(E, D)', 'false,true': 'follows(D, D)', 'false': 'follows(A, D)'}, {'false,true,false,false': [0.472, 3, 1], 'false,false,true,true': [3.73e-09, 0, 3], 'false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.579, 14, 8], 'true': [0.027, 0, 8], 'false,false,true,false': [0.0, 3, 0]}]]
[{'': [-1.6148698540002277e-16, 0.21403091557669432], 'false,false': [nan, 0.2040816326530613], 'true': [-1.6148698540002277e-16, nan], 'false,true': [nan, 0.0], 'false': [0.0, 0.2040816326530613], 'false,false,false': [0.10380622837370246, 0.2479338842975207]}, {'': [1.1102230246251565e-16, 0.20754970212699445], 'false,false,true': [0.0, 0.20667455806482715], 'false,false': [0.2105130350105098, 0.18421418599251396], 'true': [1.1102230246251565e-16, nan], 'false': [nan, 0.20754970212699445], 'false,false,false': [nan, 0.18421418599251396]}, {'': [0.002063597798429492, 0.1930715171953681], 'true': [-1.1102230246251565e-16, 0.0], 'false,false': [nan, 0.1930715171953681], 'false': [nan, 0.19307151719536816]}, {'': [0.0013061706476236168, 0.18544420917101817], 'false,false,true': [0.0012313939305482469, nan], 'false,false': [0.0012313939305482469, 0.19207126720395648], 'true': [0.0013061706476236168, nan], 'false': [nan, 0.18544420917101817], 'true,true': [0.0013061706476236168, nan], 'false,false,false': [0.10471204095233742, 0.24793388429752072]}, {'': [nan, 0.1436067894242726], 'false,false': [nan, 0.16866110926044034], 'false,true,true': [0.0011375636742185086, nan], 'false,true': [0.0011375636742185086, nan], 'false': [0.0011375636742185086, 0.16866110926044034], 'false,false,false': [0.18904445985801968, 0.08032359891499473]}, {'': [0.0009108879808242126, 0.16748115742014805], 'false,false,true': [-5.551115123125783e-17, nan], 'false,false': [-5.551115123125783e-17, 0.2244804562397702], 'false,true': [nan, 0.12081997918814197], 'false': [0.12081997918814197, 0.19251455515936927], 'false,false,false': [4.625929269271485e-18, 0.2479338842975207]}, {'': [0.0014236275113787807, 0.16888407211183223], 'true': [0.0014236275113787807, nan], 'false,false': [0.02138400708697234, 0.007484206116801917], 'false': [nan, 0.16888407211183215], 'false,false,false': [9.26467343755899e-06, -2.2204460492503132e-17]}, {'': [0.0011001100487615428, 0.10765563408958138], 'false,true': [0.07748624871350433, 0.0733846120504501], 'false,false': [nan, 0.1438369844363512], 'false': [0.07573012058054865, 0.1438369844363512]}, {'': [0.05691980358250821, 0.14219450105499506], 'true': [0.03794196834081355, 1.6725947938519187e-05], 'false,false': [nan, 0.14219450105499506], 'false': [nan, 0.14219450105499506]}, {'': [9.386088774737157e-05, 0.08883878868098742], 'false,false,true': [4.625929269271485e-18, 0.0], 'false,false': [0.020932156285685722, nan], 'false,true,false': [0.11330067231164126, 0.055598856607786275], 'false,true': [nan, 0.10450188761980686], 'false': [0.10450188761980686, 0.020932156285685722]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false,true;follows(F, A), recursion_accounttype(F, B).;true;true
1;false;follows(A, E).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;follows(F, A), recursion_accounttype(F, B).;true;true
5;false;follows(A, D), follows(E, A).;true;true
5;false,false,false;follows(H, A), tweets(H, I).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false,false;follows(F, A).;true;true
6;false;recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
8;true;recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(F, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.002368542510824959;  // std dev = 1,287, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.3462219918065728;  // std dev = 1,634, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else return 0.2919997329019726;  // std dev = 1,047, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6569769598971538;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.13357679022624883;  // std dev = 0,044, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7478928751912486;  // std dev = 0,236, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.16284320529986493;  // std dev = 0,038, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, H) )
%   | | then return 0.3835313995131832;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.16774630744228877;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.4117698232881809;  // std dev = 0,043, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4780423464616902;  // std dev = 0,070, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1188846488386001;  // std dev = 0,040, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.07344758121959048;  // std dev = 1,055, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2997415681458582;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.13650521994880468;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3169000239755088;  // std dev = 0,038, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.36269209904505617;  // std dev = 0,064, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.05169769142091346;  // std dev = 1,033, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.13964715220630586;  // std dev = 0,061, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.22778190872692186;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.10917436781778775;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.25261560424968243;  // std dev = 0,033, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.10524619615809823;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.1914077681422386;  // std dev = 0,917, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.027102433086910845;  // std dev = 0,306, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2998819485433045;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return -0.13123884498957322;  // std dev = 0,040, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13251221377557199;  // std dev = 1,598, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22238359381574604;  // std dev = 0,047, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.49471325748006256;  // std dev = 0,384, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5332337043858972;  // std dev = 0,214, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return -0.11501583825634067;  // std dev = 0,105, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.12552418446683036;  // std dev = 0,047, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.41728344986320776;  // std dev = 0,203, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18633917997571825;  // std dev = 0,041, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.3947045549789454;  // std dev = 0,338, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.08639825370044006;  // std dev = 0,011, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1358784849160534;  // std dev = 0,048, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, G) )
%   | | then return 0.08735028871150867;  // std dev = 0,887, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.058045246305863704;  // std dev = 0,860, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1597434628809169;  // std dev = 0,036, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3173451817890941;  // std dev = 0,286, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, A), follows(F, A) )
%   | | | then return -0.07966506111153243;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.12686010978012247;  // std dev = 0,036, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09148051832081545;  // std dev = 0,035, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, H) )
%   | then return 0.06724645468517272;  // std dev = 0,890, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.04552586108346002;  // std dev = 0,856, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1233373279012793;  // std dev = 0,023, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.28985865501851477;  // std dev = 0,168, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08800802873776636;  // std dev = 0,073, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.051987575837087165;  // std dev = 0,892, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.03557020907194721;  // std dev = 0,854, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.15236020884550805;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08762261547712492;  // std dev = 0,025, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.990044
   AUC PR    = 0.322507
   CLL	      = -0.18243
   Precision = 0.345506 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.510373


Total learning time: 9.747 seconds
Total inference time: 19.008 seconds
AUC ROC: 0.990044


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.213575
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.711 seconds
Refined model CLL: -0.213575


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.990044
   AUC PR    = 0.322507
   CLL	      = -0.18243
   Precision = 0.345506 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.510373


Total learning time: 12.713 seconds
Total inference time: 19.008 seconds
AUC ROC: 0.990044
Total revision time: 12.713
Best scored revision CLL: -0.213575


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:18:29
{'CLL': -0.18243, 'AUC ROC': 0.990044, 'F1': 0.510373, 'Recall': 0.97619, 'Precision': [0.345506, 0.5], 'Inference time': 19.008, 'Learning time': 12.713, 'AUC PR': 0.322507, 'parameter_20': {'CLL': -0.214572, 'AUC ROC': 0.978231, 'F1': 0.480349, 'Recall': 0.873016, 'Precision': [0.331325, 0.5], 'Inference time': 6.794, 'Learning time': 1.566, 'AUC PR': 0.344626}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.15570029437174368;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.21248070121827137;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.12582628229372092;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.15948988228171151;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.10008916917880559;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.11975529938157475;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.07866279780602592;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.09028081829440963;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.06127260860742232;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.06840311429118533;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.04741549148811439;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.052078905701252655;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.036517889972878734;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.978624
   AUC PR    = 0.296157
   CLL	      = -0.205681
   Precision = 0.062903 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.117825


Total learning time: 2.969 seconds
Total inference time: 9.313 seconds
AUC ROC: 0.978624


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:18:41
{'CLL': -0.205681, 'AUC ROC': 0.978624, 'F1': 0.117825, 'Recall': 0.928571, 'Precision': [0.062903, 0.5], 'Inference time': 9.313, 'Learning time': 2.969, 'AUC PR': 0.296157}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.979597
   AUC PR    = 0.341037
   CLL	      = -0.160641
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.027 seconds
Total inference time: 2.592 seconds
AUC ROC: 0.979597


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:18:45
{'CLL': -0.160641, 'AUC ROC': 0.979597, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.592, 'Learning time': 1.027, 'AUC PR': 0.341037}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, A).;false;true
0;true,false;phenotype(A, E), interaction(F, C).;false;false
0;false,true,false;complex(A, I), complex(G, I).;false;false
0;true;complex(A, D), complex(C, D).;false;true
0;false,true;interaction(H, A), interaction(H, H).;false;true
0;false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,false;interaction(J, A), enzyme(J, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,true;interaction(I, A), recursion_proteinclass(I, B).;false;false
1;false,false;complex(A, G), interaction(A, H).;true;true
1;true,false;complex(C, E), complex(A, E).;false;true
1;true;interaction(C, D), interaction(A, D).;false;true
1;false;interaction(A, A).;false;true
1;false,false,false;interaction(A, J), interaction(J, K).;false;false
1;true,false,false;complex(C, F).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;false,false,true;complex(G, H), phenotype(A, I).;false;false
2;false,false;interaction(G, A), interaction(G, G).;true;true
2;true,false;phenotype(A, F).;false;false
2;true;interaction(A, D), complex(A, E).;true;true
2;false;interaction(A, A).;false;true
2;true,true;complex(D, E), complex(C, E).;false;false
2;false,false,false;location(A, J).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;false,false,true;phenotype(A, G), enzyme(F, H).;false;false
3;false,false;interaction(F, A), recursion_proteinclass(F, B).;true;true
3;true,false;interaction(E, A), recursion_proteinclass(E, B).;false;false
3;true;interaction(C, D), interaction(D, C).;true;true
3;false;interaction(A, A).;false;true
3;true,true;recursion_proteinclass(D, B).;false;false
3;false,false,false;interaction(I, A), phenotype(I, J).;false;false
4;;proteinclass(A, B) :- interaction(A, A).;true;true
4;false,false,true;complex(H, I), location(A, J).;false;false
4;false,false;interaction(H, A), interaction(H, H).;true;true
4;false,true,true;complex(D, F), enzyme(E, G).;false;false
4;true;interaction(C, A), recursion_proteinclass(C, B).;false;false
4;false,true;interaction(E, A), interaction(A, E).;true;false
4;false;interaction(A, D), recursion_proteinclass(D, B).;true;true
4;false,false,false;interaction(A, K), complex(A, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false,false,true;enzyme(A, I), phenotype(H, J).;false;false
5;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
5;false,true,true;complex(D, F), location(A, G).;false;false
5;false,true;complex(E, F), complex(A, F).;true;true
5;false;interaction(A, D), interaction(E, A).;true;true
5;false,false,false;interaction(K, A), enzyme(K, L).;false;false
5;false,true,false;interaction(E, E), interaction(D, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,false,true;complex(I, G), recursion_proteinclass(I, B).;false;false
6;false,false;complex(A, G), location(A, H).;true;true
6;true,false;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true;phenotype(A, D), phenotype(C, D).;false;true
6;false;interaction(A, A).;false;true
6;false,false,false;interaction(J, A), location(J, K).;false;false
6;true,false,false;interaction(F, C), interaction(C, F).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false,false,true;interaction(I, K), recursion_proteinclass(K, B).;false;false
7;false,false;interaction(I, A), enzyme(A, J).;true;true
7;false,true,true;interaction(A, E), complex(D, F).;false;false
7;false,true;complex(E, F).;true;true
7;false;interaction(D, A), interaction(E, D).;true;true
7;false,false,false;location(A, L).;false;false
7;false,true,false;complex(D, G), complex(A, H).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
8;false,false,true;enzyme(J, L).;false;false
8;false,false;interaction(J, A), phenotype(J, K).;true;true
8;false,true,true;phenotype(A, H), enzyme(E, I).;false;false
8;true;recursion_proteinclass(D, B).;false;false
8;false,true;complex(E, F), phenotype(E, G).;true;false
8;false;interaction(A, E), interaction(E, E).;true;true
8;false,false,false;phenotype(A, M).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false,false,true;recursion_proteinclass(H, B).;false;false
9;false,false;interaction(H, A), enzyme(H, I).;true;true
9;false,true,true;interaction(D, A), phenotype(D, F).;false;false
9;false,true;interaction(D, D).;true;true
9;false;interaction(A, D), complex(D, E).;true;true
9;false,false,false;phenotype(A, J), interaction(K, A).;false;false
9;false,true,false;interaction(D, G), interaction(G, D).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995121;  // std dev = 1,83e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.05094197399139689;  // std dev = 1,348, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.40360348055405776;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.11634496108924675;  // std dev = 2,334, 29,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.23076727014499684;  // std dev = 1,120, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.6706405945892042;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.10867808335705931;  // std dev = 0,419, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.44310144391040157;  // std dev = 0,168, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.4869604626301187;  // std dev = 0,080, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.07644963164259416;  // std dev = 1,353, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.30884773350965083;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.3323669793602508;  // std dev = 0,133, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.41838616339997925;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.07553440957412967;  // std dev = 2,267, 30,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return 0.07026789214348074;  // std dev = 0,733, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.26796726646202773;  // std dev = 0,131, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, E), follows(D, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.035093775384014224;  // std dev = 1,375, 19,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3736042788203602;  // std dev = 7,45e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.17980364714789343;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.23263949185947108;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.22758463494512163;  // std dev = 0,154, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5748793434981715;  // std dev = 0,655, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.1585615754571324;  // std dev = 0,008, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.36485533945740733;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19038442883516193;  // std dev = 0,136, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.030130340557272657;  // std dev = 0,909, 14,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else return -0.04897096770832948;  // std dev = 0,266, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.14274226073303697;  // std dev = 0,372, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.2313555879306641;  // std dev = 0,796, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.133999511605498;  // std dev = 0,011, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.11086522544977973;  // std dev = 0,369, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12378588960991409;  // std dev = 0,050, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return 0.01908393739957549;  // std dev = 1,652, 26,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.01884296765343353;  // std dev = 0,477, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.1765768422299414;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11516716465975307;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.973265
   AUC PR    = 0.341988
   CLL	      = -0.202644
   Precision = 0.33033 at threshold = 0.5
   Recall    = 0.873016
   F1        = 0.479303


Total learning time: 1.35 seconds
Total inference time: 6.388 seconds
AUC ROC: 0.973265


Results scoring model
   AUC ROC   = 0.984
   AUC PR    = 0.986199
   CLL	      = -0.252925
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.958333


Total scoring time: 0.762 seconds
Parameter learned model CLL: -0.252925


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C)', 'false,true': 'follows(F, A), follows(F, F)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [1.348, 20, 2], 'false,true,true': [0.0, 0, 0], 'false,false,false,false': [1.651, 5, 6], 'true,true': [0.0, 0, 14], 'false,true,false': [1.83e-08, 0, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)', 'false': 'follows(A, A)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'false,false,true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.12, 4, 3], 'false,true': [0.0, 0, 0], 'false,false,true,false': [2.334, 21, 8], 'true,true': [4.21e-08, 0, 13]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.419, 25, 11], 'true,false': [1.05e-08, 0, 3], 'true,true': [0.0, 0, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(E, F)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'true,true': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.08, 0, 4], 'true,false': [0.0, 0, 0], 'false,false,false,true': [1.353, 20, 2], 'false,true': [0.0, 0, 0], 'true,true,true': [0.168, 0, 13], 'false,false,false,false': [1.651, 5, 6], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false': 'follows(F, A), follows(F, F)', 'false,true,true': 'tweets(D, E)', 'false,true': 'follows(D, A), follows(A, D)', 'false': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,false': 'follows(A, G)'}, {'false,true,true,true': [0.133, 0, 12], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.267, 21, 9], 'false,true,false': [0.0, 0, 1], 'true': [0.0, 0, 0], 'false,false,false,false': [0.733, 4, 3], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(A, G)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(E, E), follows(D, A)', 'false': 'follows(A, D), follows(E, A)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'false,false,true,true': [7.45e-09, 0, 3], 'false,false,false,true': [0.0, 4, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.131, 0, 13], 'false,false,false,false': [1.651, 5, 6], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [1.375, 16, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false,false': 'follows(F, A)'}, {'false,false,true': [0.655, 0, 11], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.008, 20, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 5, 0], 'true,true': [0.154, 0, 14]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,true': 'follows(A, E)', 'false,false': 'follows(F, A), tweets(A, G)', 'false': 'follows(D, A), follows(E, D)'}, {'true': [0.136, 0, 14], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.372, 5, 7], 'false,true,true': [0.909, 11, 3], 'false,true,false': [0.266, 9, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B)', 'false,false': 'follows(F, A)', 'false': 'follows(A, E), follows(E, E)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.369, 5, 7], 'true,false': [0.011, 20, 0], 'true,true': [0.796, 0, 18]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false': 'follows(F, A), tweets(F, G)', 'false,true,false': 'follows(D, E), follows(E, D)', 'false,true': 'follows(D, D)', 'false': 'follows(A, D)'}, {'false,true,false,false': [0.477, 3, 1], 'false,false,true,true': [0.0, 0, 3], 'false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.652, 18, 8], 'true': [0.05, 0, 13], 'false,false,true,false': [0.0, 4, 0]}]]
[{'': [-2.5376526277146434e-16, 0.21219135802469122], 'false,false': [nan, 0.1836547291092747], 'true': [-2.5376526277146434e-16, nan], 'false,true': [nan, 1.4802973661668753e-16], 'false': [1.4802973661668753e-16, 0.18365472910927466], 'false,false,false': [0.0826446280991736, 0.2479338842975207]}, {'': [1.3664283380001927e-16, 0.19201213058249622], 'false,false,true': [0.0, 0.18787735480693604], 'false,false': [0.19333605845561763, 0.17912526996974387], 'true': [1.3664283380001927e-16, nan], 'false': [nan, 0.19201213058249625], 'false,false,false': [nan, 0.17912526996974387]}, {'': [0.002237287440770278, 0.1756753198257498], 'true': [-2.0185873175002846e-16, 7.401486830834377e-17], 'false,false': [nan, 0.1756753198257498], 'false': [nan, 0.17567531982574963]}, {'': [0.002182461888975862, 0.17103508729530204], 'false,false,true': [0.001607622976492723, nan], 'false,false': [0.001607622976492723, 0.17111709594799088], 'true': [0.002182461888975862, nan], 'false': [nan, 0.17103508729530204], 'true,true': [0.002182461888975862, nan], 'false,false,false': [0.0832240152421385, 0.24793388429752056]}, {'': [nan, 0.1275122939030347], 'false,false': [nan, 0.15346714730569416], 'false,true,true': [0.0014798600045721015, nan], 'false,true': [0.0014798600045721015, 0.0], 'false': [0.0018914187040684953, 0.15346714730569425], 'false,false,false': [0.17135972050434128, 0.0767622019245121]}, {'': [0.0013265296839095608, 0.15246417703953974], 'false,false,true': [1.850371707708594e-17, nan], 'false,false': [1.850371707708594e-17, 0.21508400887696816], 'false,true': [nan, 0.09943795304245034], 'false': [0.09943795304245034, 0.18798330098088423], 'false,false,false': [0.0, 0.24793388429752072]}, {'': [0.0016921791036822612, 0.14399046773470844], 'true': [0.0016921791036822612, nan], 'false,false': [0.03898227769717064, 0.006811977029101027], 'false': [nan, 0.14399046773470842], 'false,false,false': [3.5478732960780855e-06, 0.0]}, {'': [0.001319866721924745, 0.09597455229187406], 'false,true': [0.05901932705839753, 0.07054668142462887], 'false,false': [nan, 0.13833248425445097], 'false': [0.06390866862141453, 0.13833248425445097]}, {'': [0.04994022186832827, 0.1364189977956526], 'true': [0.03516799661915632, 5.796233966628983e-06], 'false,false': [nan, 0.1364189977956526], 'false': [nan, 0.1364189977956526]}, {'': [0.0001907846314902313, 0.08386497325451006], 'false,false,true': [0.0, 0.0], 'false,false': [0.02084438340148264, nan], 'false,true,false': [0.1049667157206625, 0.05686990159228693], 'false,true': [nan, 0.09855381388010967], 'false': [0.09855381388010967, 0.02084438340148264]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false,true;follows(F, A), recursion_accounttype(F, B).;true;true
1;false;follows(A, E).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(D, A), follows(A, D).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;follows(F, A), recursion_accounttype(F, B).;true;true
5;false;follows(A, D), follows(E, A).;true;true
5;false,false,false;follows(H, A), tweets(H, I).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false,false;follows(F, A).;true;true
6;false;recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
8;true;recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(F, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.0803711573217344;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.026099900178172923;  // std dev = 1,312, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.3462219918065728;  // std dev = 1,634, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.7194734122109544;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1320632232063935;  // std dev = 0,023, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.7033898490498289;  // std dev = 0,296, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12941303910094054;  // std dev = 0,060, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, G) )
%   | | then return 0.40807926197505484;  // std dev = 0,441, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.16774630744228877;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.40591127704704394;  // std dev = 0,059, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.1070683982050288;  // std dev = 0,015, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.062190403692720365;  // std dev = 1,086, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.29402091849036543;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.13650521994880468;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.3158840596832401;  // std dev = 0,011, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.3562648689190817;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(F, A), follows(E, F) )
%   | | then return -0.09935316345989799;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, G), follows(F, H) )
%   | | | then return 0.17340857036937987;  // std dev = 1,014, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.1266389232596473;  // std dev = 0,033, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1713375614350849;  // std dev = 1,603, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return -0.09969489253925452;  // std dev = 0,033, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.256090892850588;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.25609089285058795;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2470880399469891;  // std dev = 0,039, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(G, A) )
%   | then if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09080992698838099;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.12825900203095955;  // std dev = 0,976, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.0231601506284742;  // std dev = 0,359, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(K, A), tweets(K, L) )
%   | | | then return -0.09112055889926125;  // std dev = 0,030, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1314858831568011;  // std dev = 1,602, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.21040642713256885;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21040642713256885;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21040642713256885;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.22954234538900567;  // std dev = 0,069, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20413575326844294;  // std dev = 0,035, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5671176332866927;  // std dev = 0,086, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.11276837875701869;  // std dev = 0,159, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.08386865990570792;  // std dev = 0,028, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.4217724790598315;  // std dev = 0,177, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.17757215078089472;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17757215078089472;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17757215078089472;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19170046229061247;  // std dev = 0,061, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.34418846607758136;  // std dev = 0,367, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, I), follows(I, A) )
%   | | | then return -0.07435467583042328;  // std dev = 0,009, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.13971922850657337;  // std dev = 0,066, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, J) )
%   | | then return 0.10676645689711685;  // std dev = 0,333, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.04199399868253926;  // std dev = 0,846, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.1522394790597299;  // std dev = 0,006, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1706459539286298;  // std dev = 0,049, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.28072259066512073;  // std dev = 0,323, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.08108188502437984;  // std dev = 0,079, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.11848719354925263;  // std dev = 0,064, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07115764787782364;  // std dev = 0,020, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, I) )
%   | then return 0.08341835431762101;  // std dev = 0,335, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.032816532022412324;  // std dev = 0,844, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.13438919295856944;  // std dev = 1,86e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.13368024988570737;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.11841612442185108;  // std dev = 0,063, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3107501012207797;  // std dev = 0,156, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08511571106009712;  // std dev = 0,111, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.048246377830689226;  // std dev = 0,882, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.025579679121219768;  // std dev = 0,842, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.12943356213683677;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.06660211154223122;  // std dev = 0,019, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.990832
   AUC PR    = 0.270575
   CLL	      = -0.17964
   Precision = 0.344538 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.509317


Total learning time: 10.832 seconds
Total inference time: 17.259 seconds
AUC ROC: 0.990832


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188586
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.887 seconds
Refined model CLL: -0.188586


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.990832
   AUC PR    = 0.270575
   CLL	      = -0.17964
   Precision = 0.344538 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.509317


Total learning time: 13.831000000000001 seconds
Total inference time: 17.259 seconds
AUC ROC: 0.990832
Total revision time: 13.831000000000001
Best scored revision CLL: -0.188586


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:19:24
{'CLL': -0.17964, 'AUC ROC': 0.990832, 'F1': 0.509317, 'Recall': 0.97619, 'parameter_25': {'CLL': -0.202644, 'AUC ROC': 0.973265, 'F1': 0.479303, 'Recall': 0.873016, 'Precision': [0.33033, 0.5], 'Inference time': 6.388, 'Learning time': 1.35, 'AUC PR': 0.341988}, 'Precision': [0.344538, 0.5], 'Inference time': 17.259, 'Learning time': 13.831000000000001, 'AUC PR': 0.270575}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5724346493852266;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7374463313511526;  // std dev = 0,044, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.062314928302574374;  // std dev = 1,054, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.44005883629821535;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.6288250444096412;  // std dev = 0,156, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11936040285270003;  // std dev = 0,043, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, F) )
%   | | then return 0.3919869359124301;  // std dev = 0,446, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.42235139858655685;  // std dev = 0,110, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.10095519146964359;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.032163471708978326;  // std dev = 0,850, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2642773829628406;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.15570029437174368;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.31995968264771524;  // std dev = 0,002, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.4272654866594615;  // std dev = 0,254, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10285930622227368;  // std dev = 0,065, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, F) )
%   | | then return 0.23088986001718115;  // std dev = 0,443, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.12582628229372092;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.25465899534412;  // std dev = 0,002, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.3332880355374062;  // std dev = 0,229, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09376712465633012;  // std dev = 0,060, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, F) )
%   | | then return 0.17361884564222402;  // std dev = 0,443, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.10008916917880559;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2093951349002911;  // std dev = 0,001, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.26734069156584156;  // std dev = 0,201, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.086112175905778;  // std dev = 0,056, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, F) )
%   | | then return 0.13115800061242952;  // std dev = 0,444, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.07866279780602592;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.1865384757501095;  // std dev = 0,191, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.07958454634777574;  // std dev = 0,052, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( tweets(A, E) )
%   | then return 0.09983739649558508;  // std dev = 0,444, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.06127260860742232;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15129134208658312;  // std dev = 0,001, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.19133818011518994;  // std dev = 0,157, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07395621703331422;  // std dev = 0,049, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, F) )
%   | | then return 0.0765959067084945;  // std dev = 0,444, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.04741549148811439;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13287205945183983;  // std dev = 0,000943, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.16444314801281446;  // std dev = 0,139, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.06905601057710865;  // std dev = 0,046, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, F) )
%   | | then return 0.059181744879827906;  // std dev = 0,444, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.036517889972878734;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.978962
   AUC PR    = 0.245895
   CLL	      = -0.216892
   Precision = 0.063102 at threshold = 0.5
   Recall    = 0.936508
   F1        = 0.118236


Total learning time: 3.502 seconds
Total inference time: 9.307 seconds
AUC ROC: 0.978962


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:19:37
{'CLL': -0.216892, 'AUC ROC': 0.978962, 'F1': 0.118236, 'Recall': 0.936508, 'Precision': [0.063102, 0.5], 'Inference time': 9.307, 'Learning time': 3.502, 'AUC PR': 0.245895}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.0803711573217344;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.936853
   AUC PR    = 0.306356
   CLL	      = -0.16889
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.136 seconds
Total inference time: 2.478 seconds
AUC ROC: 0.936853


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:19:41
{'CLL': -0.16889, 'AUC ROC': 0.936853, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.478, 'Learning time': 1.136, 'AUC PR': 0.306356}


Starting fold 2

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, A).;false;true
0;true,false;phenotype(A, E), interaction(F, C).;false;false
0;false,true,false;complex(A, I), complex(G, I).;false;false
0;true;complex(A, D), complex(C, D).;false;true
0;false,true;interaction(H, A), interaction(H, H).;false;true
0;false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,false;interaction(J, A), enzyme(J, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,true;interaction(I, A), recursion_proteinclass(I, B).;false;false
1;false,false;complex(A, G), interaction(A, H).;true;true
1;true,false;complex(C, E), complex(A, E).;false;true
1;true;interaction(C, D), interaction(A, D).;false;true
1;false;interaction(A, A).;false;true
1;false,false,false;interaction(A, J), interaction(J, K).;false;false
1;true,false,false;complex(C, F).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;false,false,true;complex(G, H), phenotype(A, I).;false;false
2;false,false;interaction(G, A), interaction(G, G).;true;true
2;true,false;phenotype(A, F).;false;false
2;true;interaction(A, D), complex(A, E).;true;true
2;false;interaction(A, A).;false;true
2;true,true;complex(D, E), complex(C, E).;false;false
2;false,false,false;location(A, J).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;false,false,true;phenotype(A, G), enzyme(F, H).;false;false
3;false,false;interaction(F, A), recursion_proteinclass(F, B).;true;true
3;true,false;interaction(E, A), recursion_proteinclass(E, B).;false;false
3;true;interaction(C, D), interaction(D, C).;true;true
3;false;interaction(A, A).;false;true
3;true,true;recursion_proteinclass(D, B).;false;false
3;false,false,false;interaction(I, A), phenotype(I, J).;false;false
4;;proteinclass(A, B) :- interaction(A, A).;true;true
4;false,false,true;complex(H, I), location(A, J).;false;false
4;false,false;interaction(H, A), interaction(H, H).;true;true
4;false,true,true;complex(D, F), enzyme(E, G).;false;false
4;true;interaction(C, A), recursion_proteinclass(C, B).;false;false
4;false,true;interaction(E, A), interaction(A, E).;true;false
4;false;interaction(A, D), recursion_proteinclass(D, B).;true;true
4;false,false,false;interaction(A, K), complex(A, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false,false,true;enzyme(A, I), phenotype(H, J).;false;false
5;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
5;false,true,true;complex(D, F), location(A, G).;false;false
5;false,true;complex(E, F), complex(A, F).;true;true
5;false;interaction(A, D), interaction(E, A).;true;true
5;false,false,false;interaction(K, A), enzyme(K, L).;false;false
5;false,true,false;interaction(E, E), interaction(D, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,false,true;complex(I, G), recursion_proteinclass(I, B).;false;false
6;false,false;complex(A, G), location(A, H).;true;true
6;true,false;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true;phenotype(A, D), phenotype(C, D).;false;true
6;false;interaction(A, A).;false;true
6;false,false,false;interaction(J, A), location(J, K).;false;false
6;true,false,false;interaction(F, C), interaction(C, F).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false,false,true;interaction(I, K), recursion_proteinclass(K, B).;false;false
7;false,false;interaction(I, A), enzyme(A, J).;true;true
7;false,true,true;interaction(A, E), complex(D, F).;false;false
7;false,true;complex(E, F).;true;true
7;false;interaction(D, A), interaction(E, D).;true;true
7;false,false,false;location(A, L).;false;false
7;false,true,false;complex(D, G), complex(A, H).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
8;false,false,true;enzyme(J, L).;false;false
8;false,false;interaction(J, A), phenotype(J, K).;true;true
8;false,true,true;phenotype(A, H), enzyme(E, I).;false;false
8;true;recursion_proteinclass(D, B).;false;false
8;false,true;complex(E, F), phenotype(E, G).;true;false
8;false;interaction(A, E), interaction(E, E).;true;true
8;false,false,false;phenotype(A, M).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false,false,true;recursion_proteinclass(H, B).;false;false
9;false,false;interaction(H, A), enzyme(H, I).;true;true
9;false,true,true;interaction(D, A), phenotype(D, F).;false;false
9;false,true;interaction(D, D).;true;true
9;false;interaction(A, D), complex(D, E).;true;true
9;false,false,false;phenotype(A, J), interaction(K, A).;false;false
9;false,true,false;interaction(D, G), interaction(G, D).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.020547093018245182;  // std dev = 0,891, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09474413416408455;  // std dev = 0,386, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4556307673108857;  // std dev = 0,093, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.13864860464386072;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14989539275978667;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.34788610456493935;  // std dev = 0,087, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.04730143328713264;  // std dev = 0,920, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.27436857418274535;  // std dev = 0,077, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, E), follows(D, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.018447482142196055;  // std dev = 0,380, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.11849935945010898;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2355503461474333;  // std dev = 0,097, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5216688090694832;  // std dev = 0,343, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.12604890069581462;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.23549654199856299;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19640207834040227;  // std dev = 0,085, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.01298643397909264;  // std dev = 0,245, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.11280507446725341;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.08893865416461304;  // std dev = 0,403, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17288365115656207;  // std dev = 0,078, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10834093206385532;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.07259166144490929;  // std dev = 0,400, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1329026796212348;  // std dev = 0,038, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return 0.011663393162239782;  // std dev = 0,744, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965194
   AUC PR    = 0.412833
   CLL	      = -0.164828
   Precision = 0.305994 at threshold = 0.5
   Recall    = 0.621795
   F1        = 0.410148


Total learning time: 0.932 seconds
Total inference time: 7.88 seconds
AUC ROC: 0.965194


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.238563
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.564 seconds
Parameter learned model CLL: -0.238563


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C)', 'false,true': 'follows(F, A), follows(F, F)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'false,false,false,false': [0.816, 2, 1], 'true,true': [2.11e-08, 0, 3], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(A, D)', 'false,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false,true': 'follows(F, A), recursion_accounttype(F, B)'}, {'false,false,true,true': [0.0, 0, 1], 'false,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.891, 5, 1], 'true,true': [0.0, 0, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.386, 5, 2], 'true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(E, F)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'true,true': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [3.73e-09, 3, 0], 'false,true': [0.0, 0, 0], 'true,true,true': [0.093, 0, 3], 'false,false,false,false': [0.816, 2, 1], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false': 'follows(F, A), follows(F, F)', 'false,true,true': 'tweets(D, E)', 'false,true': 'follows(D, A), follows(A, D)', 'false': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,false': 'follows(A, G)'}, {'false,true,true,true': [0.087, 0, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.92, 5, 2], 'false,true,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,true': 'follows(E, E), follows(D, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false': 'follows(A, D), follows(E, A)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.077, 0, 3], 'false,false,false,false': [0.816, 2, 1], 'false,true,false': [0.38, 3, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false,false': 'follows(F, A)'}, {'false,false,true': [0.343, 0, 2], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'true,true': [0.097, 0, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,true': 'follows(A, E)', 'false,false': 'follows(F, A), tweets(A, G)', 'false': 'follows(D, A), follows(E, D)'}, {'true': [0.085, 0, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.403, 2, 1], 'false,true,true': [0.245, 2, 1], 'false,true,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B)', 'false,false': 'follows(F, A)', 'false': 'follows(A, E), follows(E, E)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.4, 2, 1], 'true,false': [0.008, 3, 0], 'true,true': [0.078, 0, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,true': 'follows(D, D)', 'false': 'follows(A, D)', 'false,true,false': 'follows(D, E), follows(E, D)'}, {'true': [0.038, 0, 3], 'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.744, 5, 2]}]]
[{'': [1.4802973661668753e-16, 0.20408163265306126], 'false,false': [nan, 0.13888888888888892], 'true': [1.4802973661668753e-16, nan], 'false,true': [nan, 0.0], 'false': [0.0, 0.13888888888888892], 'false,false,false': [0.0, 0.22222222222222224]}, {'': [0.0, 0.17332296455485016], 'false,false,true': [0.0, 0.1324246967910963], 'false,false': [0.17332296455485016, nan], 'false': [nan, 0.17332296455485016], 'true': [0.0, nan]}, {'': [3.700743415417188e-17, 0.14879359149299906], 'true': [3.700743415417188e-17, nan], 'false,false': [nan, 0.14879359149299906], 'false': [nan, 0.14879359149299903]}, {'': [0.0029058393029739817, 0.133852919234034], 'false,false,true': [0.0, nan], 'false,false': [0.0, 0.13192552072053013], 'true': [0.0029058393029739817, nan], 'false': [nan, 0.133852919234034], 'true,true': [0.0029058393029739817, nan], 'false,false,false': [4.625929269271485e-18, 0.2222222222222222]}, {'': [nan, 0.10443511160054901], 'false,false': [nan, 0.12101226435212462], 'false,true,true': [0.0025092872885084105, nan], 'false,true': [0.0025092872885084105, nan], 'false': [0.0025092872885084105, 0.12101226435212463], 'false,false,false': [0.12101226435212463, nan]}, {'': [0.0019726824485541325, 0.12044120676936632], 'false,true': [nan, 0.03606782914167811], 'false,false': [nan, 0.2222222222222222], 'false': [0.03606782914167811, 0.2222222222222222], 'false,false,false': [nan, 0.2222222222222222]}, {'': [0.003113258674048306, 0.11648695746776917], 'true': [0.003113258674048306, nan], 'false,false': [0.058968666721905205, 0.002874908684816413], 'false': [nan, 0.11648695746776917], 'false,false,false': [0.0, 0.0]}, {'': [0.0024233767271469447, 0.08302324722397003], 'false,true': [0.019927521977809375, 0.0], 'false,false': [nan, 0.16210332195281124], 'false': [0.01681384666877666, 0.16210332195281124]}, {'': [0.020243490233349284, 0.1598731707563619], 'true': [0.001516482581638983, 2.011022182160649e-05], 'false,false': [nan, 0.1598731707563619], 'false': [nan, 0.1598731707563619]}, {'': [0.0004705941495998951, 0.07899815155294329], 'false,true': [nan, 0.07899815155294329], 'false': [0.07899815155294329, nan], 'false,true,false': [0.07899815155294329, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false,false;follows(G, A), tweets(G, H).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false,false;follows(G, A).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false,false;follows(F, A).;true;true
6;false;recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false,true;follows(A, E).;true;true
7;false;follows(D, A), follows(E, D).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
8;true;recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A), tweets(E, F) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.020547093018245182;  // std dev = 0,891, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return 0.04305443888539351;  // std dev = 0,592, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.16366372786900593;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.45991274072500943;  // std dev = 0,104, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A) )
%   | | then return -0.13259006520117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13934604966889017;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.35113374758700644;  // std dev = 0,097, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.008374180577448799;  // std dev = 0,380, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.11662637474629008;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.27676013157103685;  // std dev = 0,086, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.007265498445336006;  // std dev = 0,381, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.09617716769383096;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2377341304610369;  // std dev = 0,106, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0.5161586205675923;  // std dev = 0,324, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(E, A) )
%   | | then return -0.11645068007007424;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.25499303836218273;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19809406004007815;  // std dev = 0,093, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.0053508644404102286;  // std dev = 0,244, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.104993742447009;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.07208799038886744;  // std dev = 0,690, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17542425713065482;  // std dev = 0,086, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10150422637000604;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.05834026889986605;  // std dev = 0,686, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1334931364510303;  // std dev = 0,043, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.017835261289157307;  // std dev = 0,259, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.046899244983014295;  // std dev = 0,683, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.960788
   AUC PR    = 0.338986
   CLL	      = -0.170844
   Precision = 0.308411 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.415094


Total learning time: 0.943 seconds
Total inference time: 4.986 seconds
AUC ROC: 0.960788


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.235287
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.528 seconds
Refined model CLL: -0.235287


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.960788
   AUC PR    = 0.338986
   CLL	      = -0.170844
   Precision = 0.308411 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.415094


Total learning time: 2.967 seconds
Total inference time: 4.986 seconds
AUC ROC: 0.960788
Total revision time: 2.967
Best scored revision CLL: -0.235287


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:57
{'CLL': -0.170844, 'AUC ROC': 0.960788, 'F1': 0.415094, 'Recall': 0.634615, 'Precision': [0.308411, 0.5], 'parameter_5': {'CLL': -0.164828, 'AUC ROC': 0.965194, 'F1': 0.410148, 'Recall': 0.621795, 'Precision': [0.305994, 0.5], 'Inference time': 7.88, 'Learning time': 0.932, 'AUC PR': 0.412833}, 'Inference time': 4.986, 'Learning time': 2.967, 'AUC PR': 0.338986}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7611380874192215;  // std dev = 0,102, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return 0.06321893142955534;  // std dev = 0,758, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.6024437669660495;  // std dev = 0,141, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return 0.05362129779328703;  // std dev = 0,754, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.49583476278221045;  // std dev = 0,244, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return 0.01670712465316361;  // std dev = 0,652, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.38415575597995577;  // std dev = 0,242, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return 0.013898984522179095;  // std dev = 0,651, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.33387402521169424;  // std dev = 0,294, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.010357266786826955;  // std dev = 0,573, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.27235961783228596;  // std dev = 0,268, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.00858810250057919;  // std dev = 0,574, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.24980465013132294;  // std dev = 0,295, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.024008918722715808;  // std dev = 0,517, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21218415717463793;  // std dev = 0,266, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.020061126843195595;  // std dev = 0,519, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20164366503606243;  // std dev = 0,285, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return -0.03063389419174873;  // std dev = 0,472, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.884921
   AUC PR    = 0.277426
   CLL	      = -0.251122
   Precision = 0.308411 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.415094


Total learning time: 1.261 seconds
Total inference time: 4.236 seconds
AUC ROC: 0.884921


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:20:03
{'CLL': -0.251122, 'AUC ROC': 0.884921, 'F1': 0.415094, 'Recall': 0.634615, 'Precision': [0.308411, 0.5], 'Inference time': 4.236, 'Learning time': 1.261, 'AUC PR': 0.277426}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.85353
   AUC PR    = 0.262501
   CLL	      = -0.182303
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.626 seconds
Total inference time: 2.05 seconds
AUC ROC: 0.85353


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:20:06
{'CLL': -0.182303, 'AUC ROC': 0.85353, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.05, 'Learning time': 0.626, 'AUC PR': 0.262501}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, A).;false;true
0;true,false;phenotype(A, E), interaction(F, C).;false;false
0;false,true,false;complex(A, I), complex(G, I).;false;false
0;true;complex(A, D), complex(C, D).;false;true
0;false,true;interaction(H, A), interaction(H, H).;false;true
0;false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,false;interaction(J, A), enzyme(J, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,true;interaction(I, A), recursion_proteinclass(I, B).;false;false
1;false,false;complex(A, G), interaction(A, H).;true;true
1;true,false;complex(C, E), complex(A, E).;false;true
1;true;interaction(C, D), interaction(A, D).;false;true
1;false;interaction(A, A).;false;true
1;false,false,false;interaction(A, J), interaction(J, K).;false;false
1;true,false,false;complex(C, F).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;false,false,true;complex(G, H), phenotype(A, I).;false;false
2;false,false;interaction(G, A), interaction(G, G).;true;true
2;true,false;phenotype(A, F).;false;false
2;true;interaction(A, D), complex(A, E).;true;true
2;false;interaction(A, A).;false;true
2;true,true;complex(D, E), complex(C, E).;false;false
2;false,false,false;location(A, J).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;false,false,true;phenotype(A, G), enzyme(F, H).;false;false
3;false,false;interaction(F, A), recursion_proteinclass(F, B).;true;true
3;true,false;interaction(E, A), recursion_proteinclass(E, B).;false;false
3;true;interaction(C, D), interaction(D, C).;true;true
3;false;interaction(A, A).;false;true
3;true,true;recursion_proteinclass(D, B).;false;false
3;false,false,false;interaction(I, A), phenotype(I, J).;false;false
4;;proteinclass(A, B) :- interaction(A, A).;true;true
4;false,false,true;complex(H, I), location(A, J).;false;false
4;false,false;interaction(H, A), interaction(H, H).;true;true
4;false,true,true;complex(D, F), enzyme(E, G).;false;false
4;true;interaction(C, A), recursion_proteinclass(C, B).;false;false
4;false,true;interaction(E, A), interaction(A, E).;true;false
4;false;interaction(A, D), recursion_proteinclass(D, B).;true;true
4;false,false,false;interaction(A, K), complex(A, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false,false,true;enzyme(A, I), phenotype(H, J).;false;false
5;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
5;false,true,true;complex(D, F), location(A, G).;false;false
5;false,true;complex(E, F), complex(A, F).;true;true
5;false;interaction(A, D), interaction(E, A).;true;true
5;false,false,false;interaction(K, A), enzyme(K, L).;false;false
5;false,true,false;interaction(E, E), interaction(D, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,false,true;complex(I, G), recursion_proteinclass(I, B).;false;false
6;false,false;complex(A, G), location(A, H).;true;true
6;true,false;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true;phenotype(A, D), phenotype(C, D).;false;true
6;false;interaction(A, A).;false;true
6;false,false,false;interaction(J, A), location(J, K).;false;false
6;true,false,false;interaction(F, C), interaction(C, F).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false,false,true;interaction(I, K), recursion_proteinclass(K, B).;false;false
7;false,false;interaction(I, A), enzyme(A, J).;true;true
7;false,true,true;interaction(A, E), complex(D, F).;false;false
7;false,true;complex(E, F).;true;true
7;false;interaction(D, A), interaction(E, D).;true;true
7;false,false,false;location(A, L).;false;false
7;false,true,false;complex(D, G), complex(A, H).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
8;false,false,true;enzyme(J, L).;false;false
8;false,false;interaction(J, A), phenotype(J, K).;true;true
8;false,true,true;phenotype(A, H), enzyme(E, I).;false;false
8;true;recursion_proteinclass(D, B).;false;false
8;false,true;complex(E, F), phenotype(E, G).;true;false
8;false;interaction(A, E), interaction(E, E).;true;true
8;false,false,false;phenotype(A, M).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false,false,true;recursion_proteinclass(H, B).;false;false
9;false,false;interaction(H, A), enzyme(H, I).;true;true
9;false,true,true;interaction(D, A), phenotype(D, F).;false;false
9;false,true;interaction(D, D).;true;true
9;false;interaction(A, D), complex(D, E).;true;true
9;false,false,false;phenotype(A, J), interaction(K, A).;false;false
9;false,true,false;interaction(D, G), interaction(G, D).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.09048820401554203;  // std dev = 1,408, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2970143868412815;  // std dev = 0,597, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462843;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6558459784192016;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09508901072138842;  // std dev = 0,401, 14,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.440366720070043;  // std dev = 0,102, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.45738064343376716;  // std dev = 0,056, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.15074076416215207;  // std dev = 0,026, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3606549948405809;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.33707567124150717;  // std dev = 0,095, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.06554274619540836;  // std dev = 1,333, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.11529795457858408;  // std dev = 0,381, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2668233885261001;  // std dev = 0,085, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, E), follows(D, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08249338193246614;  // std dev = 0,407, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3580844504993148;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.1700616395038769;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.2748219739842666;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2336806093239945;  // std dev = 0,114, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5303093481315684;  // std dev = 0,283, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.129915783407894;  // std dev = 0,019, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.38811227697955114;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19487565126171916;  // std dev = 0,101, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.07022076270895296;  // std dev = 0,282, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.12272860812891595;  // std dev = 0,009, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.16841649907067255;  // std dev = 0,383, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17139317644268967;  // std dev = 0,095, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10761305157134178;  // std dev = 0,012, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1287028440071964;  // std dev = 0,381, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13235555945780525;  // std dev = 0,048, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return 0.0014295026025118985;  // std dev = 0,935, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.1762851171625922;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.10759848816771705;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.959921
   AUC PR    = 0.439463
   CLL	      = -0.233656
   Precision = 0.341646 at threshold = 0.5
   Recall    = 0.878205
   F1        = 0.491921


Total learning time: 1.05 seconds
Total inference time: 8.643 seconds
AUC ROC: 0.959921


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.215879
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.601 seconds
Parameter learned model CLL: -0.215879


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C)', 'false,true': 'follows(F, A), follows(F, F)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 8, 0], 'false,true,true': [0.0, 0, 0], 'false,false,false,false': [1.095, 2, 3], 'true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)', 'false': 'follows(A, A)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'false,false,true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.597, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true,false': [1.408, 9, 3], 'true,true': [0.0, 0, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.401, 10, 4], 'true,false': [0.0, 0, 1], 'true,true': [1.05e-08, 0, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(E, F)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'true,true': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.056, 0, 2], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.026, 8, 0], 'false,true': [0.0, 0, 0], 'true,true,true': [0.102, 0, 5], 'false,false,false,false': [1.095, 2, 3], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false': 'follows(F, A), follows(F, F)', 'false,true,true': 'tweets(D, E)', 'false,true': 'follows(D, A), follows(A, D)', 'false': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,false': 'follows(A, G)'}, {'false,true,true,true': [0.095, 0, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.333, 9, 4], 'false,true,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false,false,false': [0.381, 1, 1], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(A, G)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(E, E), follows(D, A)', 'false': 'follows(A, D), follows(E, A)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'false,false,true,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 1, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.085, 0, 5], 'false,false,false,false': [1.095, 2, 3], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [0.407, 7, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false,false': 'follows(F, A)'}, {'false,false,true': [0.283, 0, 4], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.019, 8, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'true,true': [0.114, 0, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,true': 'follows(A, E)', 'false,false': 'follows(F, A), tweets(A, G)', 'false': 'follows(D, A), follows(E, D)'}, {'true': [0.101, 0, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.383, 2, 3], 'false,true,true': [0.282, 6, 1], 'false,true,false': [0.009, 2, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B)', 'false,false': 'follows(F, A)', 'false': 'follows(A, E), follows(E, E)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.381, 2, 3], 'true,false': [0.012, 8, 0], 'true,true': [0.095, 0, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false': 'follows(F, A), tweets(F, G)', 'false,true,false': 'follows(D, E), follows(E, D)', 'false,true': 'follows(D, D)', 'false': 'follows(A, D)'}, {'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.935, 9, 4], 'true': [0.048, 0, 5], 'false,false,true,false': [0.0, 1, 0]}]]
[{'': [-1.4802973661668753e-16, 0.20408163265306123], 'false,false': [nan, 0.17751479289940816], 'true': [-1.4802973661668753e-16, nan], 'false,true': [nan, 0.0], 'false': [0.0, 0.17751479289940816], 'false,false,false': [-6.938893903907228e-18, 0.23999999999999994]}, {'': [-1.7763568394002506e-16, 0.18325438423618054], 'false,false,true': [0.0, 0.1652777894847444], 'false,false': [0.180655644172566, 0.17847162811629397], 'true': [-1.7763568394002506e-16, nan], 'false': [nan, 0.18325438423618054], 'false,false,false': [nan, 0.17847162811629397]}, {'': [0.001402241429833399, 0.16068706220915793], 'true': [8.881784197001253e-17, 0.0], 'false,false': [nan, 0.16068706220915793], 'false': [nan, 0.16068706220915788]}, {'': [0.002089063284000581, 0.15346418798564446], 'false,false,true': [0.0015893824152728164, nan], 'false,false': [0.0015893824152728164, 0.15425950982776396], 'true': [0.002089063284000581, nan], 'false': [nan, 0.15346418798564448], 'true,true': [0.002089063284000581, nan], 'false,false,false': [8.492565243131342e-05, 0.23999999999999994]}, {'': [nan, 0.10991628771468079], 'false,false': [nan, 0.12840602470652812], 'false,true,true': [0.0018185074112999188, nan], 'false,true': [0.0018185074112999188, nan], 'false': [0.0018185074112999188, 0.12840602470652812], 'false,false,false': [0.13664029151741677, 0.0727377871093325]}, {'': [0.0014490014210314817, 0.12670572973788727], 'false,false,true': [0.0, nan], 'false,false': [0.0, 0.22748908743753718], 'false,true': [nan, 0.02070328165532885], 'false': [0.02070328165532885, 0.19802466612477737], 'false,false,false': [0.0, 0.23999999999999994]}, {'': [0.0021808257802005404, 0.11676669832046571], 'true': [0.0021808257802005404, nan], 'false,false': [0.01996509374853217, 0.010701349560508111], 'false': [nan, 0.11676669832046564], 'false,false,false': [4.3601092095373745e-05, 0.0]}, {'': [0.0016986529494578129, 0.07278969786283172], 'false,true': [0.01132222701169778, 8.222493647271761e-05], 'false,false': [nan, 0.14679250675452904], 'false': [0.009300980052129919, 0.14679250675452904]}, {'': [0.019991799266012224, 0.14482796179827154], 'true': [0.0013006557600877902, 1.9128040741164115e-05], 'false,false': [nan, 0.14482796179827154], 'false': [nan, 0.14482796179827154]}, {'': [0.00046124870573273634, 0.06108855887791101], 'false,false,true': [0.0, 0.0], 'false,false': [0.0201474753438337, nan], 'false,true,false': [0.06724274457879563, nan], 'false,true': [nan, 0.06724274457879563], 'false': [0.06724274457879563, 0.0201474753438337]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false,false;follows(G, A), tweets(G, H).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false,true;follows(F, A), recursion_accounttype(F, B).;true;true
1;false;follows(A, E).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false,false;follows(G, A).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;follows(F, A), recursion_accounttype(F, B).;true;true
5;false;follows(A, D), follows(E, A).;true;true
5;false,false,false;follows(H, A), tweets(H, I).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false,false;follows(F, A).;true;true
6;false;recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false,true;follows(A, E).;true;true
7;false;follows(D, A), follows(E, D).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
8;true;recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(F, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A), tweets(E, F) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.2970143868412815;  // std dev = 0,597, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462843;  // std dev = 2,11e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6558459784192016;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( tweets(A, F), follows(A, E) )
%   | | then return -0.001035909036957915;  // std dev = 0,610, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.12881358844459284;  // std dev = 0,040, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.32092546969114216;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.44513531208518575;  // std dev = 0,124, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.45738064343376716;  // std dev = 0,056, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(E, A) )
%   | | then return -0.113294437636272;  // std dev = 0,037, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.25206564481433;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.34073856845477063;  // std dev = 0,116, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return -0.04695852335816402;  // std dev = 0,136, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.2595905310482807;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.10981297420973987;  // std dev = 0,797, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.26957352297199577;  // std dev = 0,104, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), follows(E, A) )
%   | then return -0.042116002609703614;  // std dev = 0,138, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.3593462069526464;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return -0.14465766879731162;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14392065643789656;  // std dev = 1,089, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2352584965869411;  // std dev = 0,128, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0.45500957472226095;  // std dev = 0,178, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(E, A) )
%   | | then return -0.09526670443489599;  // std dev = 0,037, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.4881579867253937;  // std dev = 0,026, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19612146112140305;  // std dev = 0,113, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.04128127465819973;  // std dev = 0,105, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.09686079297977868;  // std dev = 0,029, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.08843405359707429;  // std dev = 0,837, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17538843768779597;  // std dev = 0,043, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.08300550120629877;  // std dev = 0,030, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0.06759041492724016;  // std dev = 0,837, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1346621186159241;  // std dev = 0,067, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A) )
%   | | then return -0.03780569479522337;  // std dev = 0,095, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.05173374165767921;  // std dev = 0,837, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( recursion_accounttype(F, B) )
%   | | then return 0.17590851066865776;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.10002719948633347;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.961061
   AUC PR    = 0.348132
   CLL	      = -0.233235
   Precision = 0.344059 at threshold = 0.5
   Recall    = 0.891026
   F1        = 0.496429


Total learning time: 1.608 seconds
Total inference time: 5.94 seconds
AUC ROC: 0.961061


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.201163
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.572 seconds
Refined model CLL: -0.201163


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.961061
   AUC PR    = 0.348132
   CLL	      = -0.233235
   Precision = 0.344059 at threshold = 0.5
   Recall    = 0.891026
   F1        = 0.496429


Total learning time: 3.8310000000000004 seconds
Total inference time: 5.94 seconds
AUC ROC: 0.961061
Total revision time: 3.8310000000000004
Best scored revision CLL: -0.201163


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:20:25
{'CLL': -0.233235, 'AUC ROC': 0.961061, 'F1': 0.496429, 'Recall': 0.891026, 'Precision': [0.344059, 0.5], 'Inference time': 5.94, 'Learning time': 3.8310000000000004, 'AUC PR': 0.348132, 'parameter_10': {'CLL': -0.233656, 'AUC ROC': 0.959921, 'F1': 0.491921, 'Recall': 0.878205, 'Precision': [0.341646, 0.5], 'Inference time': 8.643, 'Learning time': 1.05, 'AUC PR': 0.439463}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.02176788419240575;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.6147697906526564;  // std dev = 0,266, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return -0.050918786031276225;  // std dev = 0,230, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.38759213635780876;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2212252494837406;  // std dev = 0,850, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.4467927328694121;  // std dev = 0,159, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.00846838932675012;  // std dev = 0,820, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.11700433273965131;  // std dev = 0,024, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2518065352798353;  // std dev = 1,089, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3925395516138873;  // std dev = 0,406, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return -0.05603805698224043;  // std dev = 0,195, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.24346849846847576;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.12522019674378124;  // std dev = 0,795, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3159996646575102;  // std dev = 0,403, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return -0.04890963651313059;  // std dev = 0,197, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.18320805581908176;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.0993396413348003;  // std dev = 0,790, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2538304122894838;  // std dev = 0,290, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return -0.007701019225876428;  // std dev = 0,670, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.10840093432630156;  // std dev = 0,050, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.10748209770940172;  // std dev = 1,083, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.23447277128471983;  // std dev = 0,415, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return -0.048091149990674785;  // std dev = 0,178, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.11077610160241451;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.05494234974461044;  // std dev = 0,768, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19447297975795794;  // std dev = 0,296, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return -0.011768407777649212;  // std dev = 0,614, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.09833881552203938;  // std dev = 0,054, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.059072592144818484;  // std dev = 1,082, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18793101977059407;  // std dev = 0,406, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), follows(A, D) )
%   | then return -0.04585376822416803;  // std dev = 0,164, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.06933744128311418;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.030001703300024683;  // std dev = 0,755, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.870616
   AUC PR    = 0.264994
   CLL	      = -0.349386
   Precision = 0.017008 at threshold = 0.5
   Recall    = 0.852564
   F1        = 0.03335


Total learning time: 2.129 seconds
Total inference time: 4.685 seconds
AUC ROC: 0.870616


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:20:32
{'CLL': -0.349386, 'AUC ROC': 0.870616, 'F1': 0.03335, 'Recall': 0.852564, 'Precision': [0.017008, 0.5], 'Inference time': 4.685, 'Learning time': 2.129, 'AUC PR': 0.264994}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */


Results
   AUC ROC   = 0.861315
   AUC PR    = 0.262612
   CLL	      = -0.182918
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.832 seconds
Total inference time: 2.336 seconds
AUC ROC: 0.861315


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:20:35
{'CLL': -0.182918, 'AUC ROC': 0.861315, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.336, 'Learning time': 0.832, 'AUC PR': 0.262612}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, A).;false;true
0;true,false;phenotype(A, E), interaction(F, C).;false;false
0;false,true,false;complex(A, I), complex(G, I).;false;false
0;true;complex(A, D), complex(C, D).;false;true
0;false,true;interaction(H, A), interaction(H, H).;false;true
0;false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,false;interaction(J, A), enzyme(J, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,true;interaction(I, A), recursion_proteinclass(I, B).;false;false
1;false,false;complex(A, G), interaction(A, H).;true;true
1;true,false;complex(C, E), complex(A, E).;false;true
1;true;interaction(C, D), interaction(A, D).;false;true
1;false;interaction(A, A).;false;true
1;false,false,false;interaction(A, J), interaction(J, K).;false;false
1;true,false,false;complex(C, F).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;false,false,true;complex(G, H), phenotype(A, I).;false;false
2;false,false;interaction(G, A), interaction(G, G).;true;true
2;true,false;phenotype(A, F).;false;false
2;true;interaction(A, D), complex(A, E).;true;true
2;false;interaction(A, A).;false;true
2;true,true;complex(D, E), complex(C, E).;false;false
2;false,false,false;location(A, J).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;false,false,true;phenotype(A, G), enzyme(F, H).;false;false
3;false,false;interaction(F, A), recursion_proteinclass(F, B).;true;true
3;true,false;interaction(E, A), recursion_proteinclass(E, B).;false;false
3;true;interaction(C, D), interaction(D, C).;true;true
3;false;interaction(A, A).;false;true
3;true,true;recursion_proteinclass(D, B).;false;false
3;false,false,false;interaction(I, A), phenotype(I, J).;false;false
4;;proteinclass(A, B) :- interaction(A, A).;true;true
4;false,false,true;complex(H, I), location(A, J).;false;false
4;false,false;interaction(H, A), interaction(H, H).;true;true
4;false,true,true;complex(D, F), enzyme(E, G).;false;false
4;true;interaction(C, A), recursion_proteinclass(C, B).;false;false
4;false,true;interaction(E, A), interaction(A, E).;true;false
4;false;interaction(A, D), recursion_proteinclass(D, B).;true;true
4;false,false,false;interaction(A, K), complex(A, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false,false,true;enzyme(A, I), phenotype(H, J).;false;false
5;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
5;false,true,true;complex(D, F), location(A, G).;false;false
5;false,true;complex(E, F), complex(A, F).;true;true
5;false;interaction(A, D), interaction(E, A).;true;true
5;false,false,false;interaction(K, A), enzyme(K, L).;false;false
5;false,true,false;interaction(E, E), interaction(D, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,false,true;complex(I, G), recursion_proteinclass(I, B).;false;false
6;false,false;complex(A, G), location(A, H).;true;true
6;true,false;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true;phenotype(A, D), phenotype(C, D).;false;true
6;false;interaction(A, A).;false;true
6;false,false,false;interaction(J, A), location(J, K).;false;false
6;true,false,false;interaction(F, C), interaction(C, F).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false,false,true;interaction(I, K), recursion_proteinclass(K, B).;false;false
7;false,false;interaction(I, A), enzyme(A, J).;true;true
7;false,true,true;interaction(A, E), complex(D, F).;false;false
7;false,true;complex(E, F).;true;true
7;false;interaction(D, A), interaction(E, D).;true;true
7;false,false,false;location(A, L).;false;false
7;false,true,false;complex(D, G), complex(A, H).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
8;false,false,true;enzyme(J, L).;false;false
8;false,false;interaction(J, A), phenotype(J, K).;true;true
8;false,true,true;phenotype(A, H), enzyme(E, I).;false;false
8;true;recursion_proteinclass(D, B).;false;false
8;false,true;complex(E, F), phenotype(E, G).;true;false
8;false;interaction(A, E), interaction(E, E).;true;true
8;false,false,false;phenotype(A, M).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false,false,true;recursion_proteinclass(H, B).;false;false
9;false,false;interaction(H, A), enzyme(H, I).;true;true
9;false,true,true;interaction(D, A), phenotype(D, F).;false;false
9;false,true;interaction(D, D).;true;true
9;false;interaction(A, D), complex(D, E).;true;true
9;false,false,false;phenotype(A, J), interaction(K, A).;false;false
9;false,true,false;interaction(D, G), interaction(G, D).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return 0.001006077956655051;  // std dev = 1,309, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.11937577087911883;  // std dev = 1,868, 18,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.28874991698507424;  // std dev = 0,861, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6577089586025978;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09739848198984458;  // std dev = 0,428, 21,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4337550987547751;  // std dev = 0,105, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.4717365609636901;  // std dev = 0,066, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.031239106436563493;  // std dev = 1,315, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.2729557398194435;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.33235955585970167;  // std dev = 0,098, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.08657670241655845;  // std dev = 1,848, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0.09610105115040983;  // std dev = 0,574, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.26349106156014024;  // std dev = 0,088, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, E), follows(D, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.011495169092685255;  // std dev = 1,323, 13,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3606727479937947;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.2062002275848205;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.20381772900934303;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.23066386496582864;  // std dev = 0,114, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6511269100832656;  // std dev = 0,435, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.17919865794240072;  // std dev = 0,007, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.3403518523712825;  // std dev = 7,45e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19256002257534582;  // std dev = 0,100, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return 0.015399414461266232;  // std dev = 1,111, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return -0.1518282063103428;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.11705847337070163;  // std dev = 0,386, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.2544762031788524;  // std dev = 0,696, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.15122557761560254;  // std dev = 0,036, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09063591683259897;  // std dev = 0,383, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.118425746949513;  // std dev = 0,022, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return 0.027120176584518176;  // std dev = 1,390, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.166475039717648;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.11543011413315246;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.984911
   AUC PR    = 0.442486
   CLL	      = -0.234983
   Precision = 0.341646 at threshold = 0.5
   Recall    = 0.878205
   F1        = 0.491921


Total learning time: 1.211 seconds
Total inference time: 7.881 seconds
AUC ROC: 0.984911


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.264886
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.681 seconds
Parameter learned model CLL: -0.264886


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C)', 'false,true': 'follows(F, A), follows(F, F)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [1.309, 12, 2], 'false,true,true': [0.0, 0, 0], 'false,false,false,false': [1.225, 3, 3], 'true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)', 'false': 'follows(A, A)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'false,false,true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.861, 2, 2], 'false,true': [0.0, 0, 0], 'false,false,true,false': [1.868, 13, 5], 'true,true': [0.0, 0, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.428, 15, 6], 'true,false': [0.0, 0, 2], 'true,true': [0.0, 0, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(E, F)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'true,true': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.066, 0, 3], 'true,false': [0.0, 0, 0], 'false,false,false,true': [1.315, 12, 2], 'false,true': [0.0, 0, 0], 'true,true,true': [0.105, 0, 7], 'false,false,false,false': [1.225, 3, 3], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false': 'follows(F, A), follows(F, F)', 'false,true,true': 'tweets(D, E)', 'false,true': 'follows(D, A), follows(A, D)', 'false': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,false': 'follows(A, G)'}, {'false,true,true,true': [0.098, 0, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.848, 13, 6], 'false,true,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false,false,false': [0.574, 2, 2], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(A, G)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(E, E), follows(D, A)', 'false': 'follows(A, D), follows(E, A)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'false,false,true,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 2, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.088, 0, 7], 'false,false,false,false': [1.225, 3, 3], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [1.323, 10, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false,false': 'follows(F, A)'}, {'false,false,true': [0.435, 0, 6], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.007, 12, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 3, 0], 'true,true': [0.114, 0, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,true': 'follows(A, E)', 'false,false': 'follows(F, A), tweets(A, G)', 'false': 'follows(D, A), follows(E, D)'}, {'true': [0.1, 0, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.386, 3, 3], 'false,true,true': [1.111, 9, 3], 'false,true,false': [0.002, 3, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B)', 'false,false': 'follows(F, A)', 'false': 'follows(A, E), follows(E, E)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.383, 3, 3], 'true,false': [0.036, 12, 0], 'true,true': [0.696, 0, 12]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false': 'follows(F, A), tweets(F, G)', 'false,true,false': 'follows(D, E), follows(E, D)', 'false,true': 'follows(D, D)', 'false': 'follows(A, D)'}, {'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.39, 13, 6], 'true': [0.022, 0, 7], 'false,false,true,false': [0.0, 2, 0]}]]
[{'': [-2.9605947323337506e-16, 0.20408163265306115], 'false,false': [nan, 0.18749999999999983], 'true': [-2.9605947323337506e-16, nan], 'false,true': [nan, 0.0], 'false': [0.0, 0.18749999999999983], 'false,false,false': [0.12244897959183677, 0.24999999999999992]}, {'': [-6.344131569286608e-17, 0.20153874262402088], 'false,false,true': [0.0, 0.19385554663901491], 'false,false': [0.2016086043626585, 0.1855227293395988], 'true': [-6.344131569286608e-17, nan], 'false': [nan, 0.2015387426240208], 'false,false,false': [nan, 0.1855227293395988]}, {'': [0.001810319566897947, 0.18312416593895078], 'true': [-6.344131569286608e-17, 0.0], 'false,false': [nan, 0.18312416593895078], 'false': [nan, 0.18312416593895076]}, {'': [0.0015827207783231576, 0.17674351570371497], 'false,false,true': [0.0014700656068183566, nan], 'false,false': [0.0014700656068183566, 0.18092439444718228], 'true': [0.0015827207783231576, nan], 'false': [nan, 0.17674351570371502], 'true,true': [0.0015827207783231576, nan], 'false,false,false': [0.12356021214936, 0.24999999999999992]}, {'': [nan, 0.1357851057370342], 'false,false': [nan, 0.16278432322096242], 'false,true,true': [0.00138180494535283, nan], 'false,true': [0.00138180494535283, nan], 'false': [0.00138180494535283, 0.16278432322096248], 'false,false,false': [0.17969631615251375, 0.08237741978925579]}, {'': [0.001107010296618178, 0.1619337780370873], 'false,false,true': [0.0, nan], 'false,false': [0.0, 0.21902151088681002], 'false,true': [nan, 0.13470797879035917], 'false': [0.13470797879035917, 0.18597998542288607], 'false,false,false': [0.0, 0.25]}, {'': [0.0014441309981318244, 0.16380541760217304], 'true': [0.0014441309981318244, nan], 'false,false': [0.03149106077457442, 0.004158814595653763], 'false': [nan, 0.16380541760217304], 'false,false,false': [4.447829640615482e-06, 1.850371707708594e-17]}, {'': [0.0011194129325031905, 0.10817335491732359], 'false,true': [0.10284956214556808, 5.5963163876858e-06], 'false,false': [nan, 0.14868075435542097], 'false': [0.08675518132356129, 0.14868075435542097]}, {'': [0.061413639540406156, 0.1465163220044564], 'true': [0.04042198681898861, 0.00010832479192769695], 'false,false': [nan, 0.1465163220044564], 'false': [nan, 0.1465163220044564]}, {'': [6.891227706507757e-05, 0.08746496695581263], 'false,false,true': [0.0, 0.0], 'false,false': [0.019867628941910867, nan], 'false,true,false': [0.10169554153907912, nan], 'false,true': [nan, 0.10169554153907912], 'false': [0.10169554153907912, 0.019867628941910867]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false,true;follows(F, A), recursion_accounttype(F, B).;true;true
1;false;follows(A, E).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;follows(F, A), recursion_accounttype(F, B).;true;true
5;false;follows(A, D), follows(E, A).;true;true
5;false,false,false;follows(H, A), tweets(H, I).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false,false;follows(F, A).;true;true
6;false;recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false,true;follows(A, E).;true;true
7;false;follows(D, A), follows(E, D).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
8;true;recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(F, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return -0.050941973991396876;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(F, A), tweets(A, G) )
%   | | | then return -0.02465122529336012;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.2613403653787173;  // std dev = 1,486, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else return 0.29185553790324154;  // std dev = 0,855, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6570094546918428;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), tweets(A, F) )
%   | then return 9.79005775042512E-4;  // std dev = 0,324, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then return 0.12700111231818587;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.26503961647183866;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.4371723111789807;  // std dev = 0,048, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4713355448960282;  // std dev = 0,066, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return -0.04953775357478727;  // std dev = 0,290, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.10542789868001508;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.21411840963960485;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.33499006596078906;  // std dev = 0,045, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.644905089964693;  // std dev = 0,420, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.15131676990354487;  // std dev = 0,048, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, F) )
%   | | then return 0.1684876090170577;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1078630716802092;  // std dev = 0,550, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2654775765954699;  // std dev = 0,041, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then return 0.008040897111363876;  // std dev = 0,273, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.05849449834216284;  // std dev = 0,682, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.35750434360423566;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.18245802324621838;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.13015109448715934;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.20251828337494837;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.24972849967339952;  // std dev = 0,075, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.5811568511583672;  // std dev = 0,342, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return -0.11230320667221404;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.19346512431565943;  // std dev = 0,073, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.400660454452072;  // std dev = 7,45e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.1681252550244994;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20220575950371855;  // std dev = 0,061, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), follows(G, F) )
%   | then if ( follows(A, G) )
%   | | then return 0.025960105176594677;  // std dev = 0,259, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return -0.1544725719735075;  // std dev = 0,053, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.07310155905423947;  // std dev = 0,937, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.1477269094738359;  // std dev = 0,005, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17665472294355442;  // std dev = 0,054, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4351758821070768;  // std dev = 0,330, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return -0.10397937016876359;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.15205862671060794;  // std dev = 0,075, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.056154272215379;  // std dev = 0,934, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13076365205690055;  // std dev = 0,006, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.08220048678638113;  // std dev = 0,221, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.25026554124037004;  // std dev = 0,516, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.04305066148370823;  // std dev = 0,932, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.171887920148459;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10135704109258438;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.990341
   AUC PR    = 0.365837
   CLL	      = -0.230389
   Precision = 0.34689 at threshold = 0.5
   Recall    = 0.929487
   F1        = 0.505226


Total learning time: 4.531 seconds
Total inference time: 9.866 seconds
AUC ROC: 0.990341


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.218345
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.735 seconds
Refined model CLL: -0.218345


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.990341
   AUC PR    = 0.365837
   CLL	      = -0.230389
   Precision = 0.34689 at threshold = 0.5
   Recall    = 0.929487
   F1        = 0.505226


Total learning time: 7.158 seconds
Total inference time: 9.866 seconds
AUC ROC: 0.990341
Total revision time: 7.158
Best scored revision CLL: -0.218345


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:21:01
{'CLL': -0.230389, 'AUC ROC': 0.990341, 'F1': 0.505226, 'Recall': 0.929487, 'Precision': [0.34689, 0.5], 'parameter_15': {'CLL': -0.234983, 'AUC ROC': 0.984911, 'F1': 0.491921, 'Recall': 0.878205, 'Precision': [0.341646, 0.5], 'Inference time': 7.881, 'Learning time': 1.211, 'AUC PR': 0.442486}, 'Inference time': 9.866, 'Learning time': 7.158, 'AUC PR': 0.365837}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then return 0.024815601766178853;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then return 0.021767884192405756;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.30874113578563506;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then return 0.019049872944810385;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.2564123687585864;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5616657593474143;  // std dev = 0,353, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.6844330884860214;  // std dev = 0,330, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.16286079790467559;  // std dev = 0,081, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, G) )
%   | | then return 0.2061374073445397;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1337418469419664;  // std dev = 0,568, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.447977773798171;  // std dev = 0,387, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.5518251356210052;  // std dev = 0,357, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14194763099479363;  // std dev = 0,073, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, G) )
%   | | then return 0.16162857548414666;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1087480206770195;  // std dev = 0,553, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.36260041499320117;  // std dev = 0,381, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.2974236664316213;  // std dev = 0,153, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return -0.060588342701577515;  // std dev = 0,217, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.06041594061239503;  // std dev = 0,558, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.12455597792081963;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2990401104269405;  // std dev = 0,356, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.24107630718121684;  // std dev = 0,131, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return -0.05329714842401661;  // std dev = 0,219, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.049657966283884906;  // std dev = 0,553, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.09492800936730683;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.25109182622598;  // std dev = 0,324, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.20086864029729126;  // std dev = 0,113, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return -0.047120423991296116;  // std dev = 0,221, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.040643790231815004;  // std dev = 0,548, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.0718608885005586;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2143036995430377;  // std dev = 0,293, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.2932067596853165;  // std dev = 0,434, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11193133551712889;  // std dev = 0,077, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(H, A) )
%   | | then return 0.033153310727596356;  // std dev = 0,545, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.05418307375954945;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.18559364235669576;  // std dev = 0,264, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.13424638359584706;  // std dev = 0,080, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return -0.03844594410154991;  // std dev = 0,200, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.02696984949924716;  // std dev = 0,543, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.040760253233056216;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */


Results
   AUC ROC   = 0.921651
   AUC PR    = 0.311636
   CLL	      = -0.296913
   Precision = 0.303951 at threshold = 0.5
   Recall    = 0.641026
   F1        = 0.412371


Total learning time: 3.889 seconds
Total inference time: 18.657 seconds
AUC ROC: 0.921651


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:21:24
{'CLL': -0.296913, 'AUC ROC': 0.921651, 'F1': 0.412371, 'Recall': 0.641026, 'Precision': [0.303951, 0.5], 'Inference time': 18.657, 'Learning time': 3.889, 'AUC PR': 0.311636}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then return 0.024815601766178853;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */


Results
   AUC ROC   = 0.849471
   AUC PR    = 0.262421
   CLL	      = -0.18561
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.193 seconds
Total inference time: 1.971 seconds
AUC ROC: 0.849471


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:21:27
{'CLL': -0.18561, 'AUC ROC': 0.849471, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 1.971, 'Learning time': 1.193, 'AUC PR': 0.262421}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, A).;false;true
0;true,false;phenotype(A, E), interaction(F, C).;false;false
0;false,true,false;complex(A, I), complex(G, I).;false;false
0;true;complex(A, D), complex(C, D).;false;true
0;false,true;interaction(H, A), interaction(H, H).;false;true
0;false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,false;interaction(J, A), enzyme(J, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,true;interaction(I, A), recursion_proteinclass(I, B).;false;false
1;false,false;complex(A, G), interaction(A, H).;true;true
1;true,false;complex(C, E), complex(A, E).;false;true
1;true;interaction(C, D), interaction(A, D).;false;true
1;false;interaction(A, A).;false;true
1;false,false,false;interaction(A, J), interaction(J, K).;false;false
1;true,false,false;complex(C, F).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;false,false,true;complex(G, H), phenotype(A, I).;false;false
2;false,false;interaction(G, A), interaction(G, G).;true;true
2;true,false;phenotype(A, F).;false;false
2;true;interaction(A, D), complex(A, E).;true;true
2;false;interaction(A, A).;false;true
2;true,true;complex(D, E), complex(C, E).;false;false
2;false,false,false;location(A, J).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;false,false,true;phenotype(A, G), enzyme(F, H).;false;false
3;false,false;interaction(F, A), recursion_proteinclass(F, B).;true;true
3;true,false;interaction(E, A), recursion_proteinclass(E, B).;false;false
3;true;interaction(C, D), interaction(D, C).;true;true
3;false;interaction(A, A).;false;true
3;true,true;recursion_proteinclass(D, B).;false;false
3;false,false,false;interaction(I, A), phenotype(I, J).;false;false
4;;proteinclass(A, B) :- interaction(A, A).;true;true
4;false,false,true;complex(H, I), location(A, J).;false;false
4;false,false;interaction(H, A), interaction(H, H).;true;true
4;false,true,true;complex(D, F), enzyme(E, G).;false;false
4;true;interaction(C, A), recursion_proteinclass(C, B).;false;false
4;false,true;interaction(E, A), interaction(A, E).;true;false
4;false;interaction(A, D), recursion_proteinclass(D, B).;true;true
4;false,false,false;interaction(A, K), complex(A, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false,false,true;enzyme(A, I), phenotype(H, J).;false;false
5;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
5;false,true,true;complex(D, F), location(A, G).;false;false
5;false,true;complex(E, F), complex(A, F).;true;true
5;false;interaction(A, D), interaction(E, A).;true;true
5;false,false,false;interaction(K, A), enzyme(K, L).;false;false
5;false,true,false;interaction(E, E), interaction(D, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,false,true;complex(I, G), recursion_proteinclass(I, B).;false;false
6;false,false;complex(A, G), location(A, H).;true;true
6;true,false;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true;phenotype(A, D), phenotype(C, D).;false;true
6;false;interaction(A, A).;false;true
6;false,false,false;interaction(J, A), location(J, K).;false;false
6;true,false,false;interaction(F, C), interaction(C, F).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false,false,true;interaction(I, K), recursion_proteinclass(K, B).;false;false
7;false,false;interaction(I, A), enzyme(A, J).;true;true
7;false,true,true;interaction(A, E), complex(D, F).;false;false
7;false,true;complex(E, F).;true;true
7;false;interaction(D, A), interaction(E, D).;true;true
7;false,false,false;location(A, L).;false;false
7;false,true,false;complex(D, G), complex(A, H).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
8;false,false,true;enzyme(J, L).;false;false
8;false,false;interaction(J, A), phenotype(J, K).;true;true
8;false,true,true;phenotype(A, H), enzyme(E, I).;false;false
8;true;recursion_proteinclass(D, B).;false;false
8;false,true;complex(E, F), phenotype(E, G).;true;false
8;false;interaction(A, E), interaction(E, E).;true;true
8;false,false,false;phenotype(A, M).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false,false,true;recursion_proteinclass(H, B).;false;false
9;false,false;interaction(H, A), enzyme(H, I).;true;true
9;false,true,true;interaction(D, A), phenotype(D, F).;false;false
9;false,true;interaction(D, D).;true;true
9;false;interaction(A, D), complex(D, E).;true;true
9;false,false,false;phenotype(A, J), interaction(K, A).;false;false
9;false,true,false;interaction(D, G), interaction(G, D).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return 0.024815601766178884;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.30259337954395676;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.12145223033954945;  // std dev = 2,222, 25,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.37372453433686825;  // std dev = 0,947, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.6383307695682322;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09912781369480654;  // std dev = 0,436, 28,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.43009802082149634;  // std dev = 0,107, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.4662205049860643;  // std dev = 0,056, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.012127867309684558;  // std dev = 1,590, 18,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.22635354979888303;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.32974399459898646;  // std dev = 0,100, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.08519470675002973;  // std dev = 2,209, 26,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.13671520329702033;  // std dev = 0,636, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2616335611783451;  // std dev = 0,090, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, E), follows(D, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.01936124760982855;  // std dev = 1,586, 17,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3377941110090303;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.23545794489860242;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.16862181154980277;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.22748336080993284;  // std dev = 0,111, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6852558054469127;  // std dev = 0,453, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.18914732418906238;  // std dev = 0,010, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.3107411780666913;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19018533267018242;  // std dev = 0,098, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.016421181870509248;  // std dev = 1,117, 14,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else return 0.005569776279742017;  // std dev = 0,340, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.0966115383494411;  // std dev = 0,386, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.261643315105146;  // std dev = 0,822, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.16041383541869886;  // std dev = 0,013, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.07562875026940048;  // std dev = 0,383, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11822318086029732;  // std dev = 0,021, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return 0.02402012106276233;  // std dev = 1,572, 24,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | | else return 0.10145761533588568;  // std dev = 0,542, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.15574348267599603;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14714211457426443;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993844
   AUC PR    = 0.459834
   CLL	      = -0.231803
   Precision = 0.343284 at threshold = 0.5
   Recall    = 0.884615
   F1        = 0.494624


Total learning time: 1.31 seconds
Total inference time: 7.816 seconds
AUC ROC: 0.993844


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.277658
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.85
   F1        = 0.918919


Total scoring time: 0.678 seconds
Parameter learned model CLL: -0.277658


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C)', 'false,true': 'follows(F, A), follows(F, F)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [1.581, 15, 3], 'false,true,true': [0.0, 0, 0], 'false,false,false,false': [1.491, 5, 4], 'true,true': [0.0, 0, 12], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)', 'false': 'follows(A, A)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'false,false,true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.947, 2, 3], 'false,true': [0.0, 0, 0], 'false,false,true,false': [2.222, 18, 7], 'true,true': [0.0, 0, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.436, 20, 8], 'true,false': [0.0, 0, 3], 'true,true': [0.0, 0, 9]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(E, F)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'true,true': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.056, 0, 4], 'true,false': [0.0, 0, 0], 'false,false,false,true': [1.59, 15, 3], 'false,true': [0.0, 0, 0], 'true,true,true': [0.107, 0, 9], 'false,false,false,false': [1.491, 5, 4], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false': 'follows(F, A), follows(F, F)', 'false,true,true': 'tweets(D, E)', 'false,true': 'follows(D, A), follows(A, D)', 'false': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,false': 'follows(A, G)'}, {'false,true,true,true': [0.1, 0, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.209, 18, 8], 'false,true,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false,false,false': [0.636, 2, 3], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(A, G)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(E, E), follows(D, A)', 'false': 'follows(A, D), follows(E, A)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'false,false,true,true': [0.0, 0, 3], 'false,false,false,true': [0.0, 2, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.09, 0, 9], 'false,false,false,false': [1.491, 5, 4], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [1.586, 13, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false,false': 'follows(F, A)'}, {'false,false,true': [0.453, 0, 8], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.01, 15, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 5, 0], 'true,true': [0.111, 0, 12]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,true': 'follows(A, E)', 'false,false': 'follows(F, A), tweets(A, G)', 'false': 'follows(D, A), follows(E, D)'}, {'true': [0.098, 0, 12], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.386, 5, 4], 'false,true,true': [1.117, 11, 3], 'false,true,false': [0.34, 4, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B)', 'false,false': 'follows(F, A)', 'false': 'follows(A, E), follows(E, E)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.383, 5, 4], 'true,false': [0.013, 15, 0], 'true,true': [0.822, 0, 16]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false': 'follows(F, A), tweets(F, G)', 'false,true,false': 'follows(D, E), follows(E, D)', 'false,true': 'follows(D, D)', 'false': 'follows(A, D)'}, {'false,true,false,false': [0.542, 1, 1], 'false,false,true,true': [0.0, 0, 3], 'false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.572, 17, 7], 'true': [0.021, 0, 9], 'false,false,true,false': [0.0, 2, 0]}]]
[{'': [-1.4802973661668753e-16, 0.20408163265306106], 'false,false': [nan, 0.19204389574759959], 'true': [-1.4802973661668753e-16, nan], 'false,true': [nan, 0.0], 'false': [0.0, 0.19204389574759956], 'false,false,false': [0.13888888888888876, 0.2469135802469134]}, {'': [0.0, 0.20635264157477354], 'false,false,true': [0.0, 0.19744219061646873], 'false,false': [0.20307419711520222, 0.1793134298267846], 'true': [0.0, nan], 'false': [nan, 0.20635264157477357], 'false,false,false': [nan, 0.1793134298267846]}, {'': [0.0012905775976107536, 0.18975608225914803], 'true': [-1.4802973661668753e-16, -7.401486830834377e-17], 'false,false': [nan, 0.18975608225914803], 'false': [nan, 0.18975608225914803]}, {'': [0.0012669443690381194, 0.18225302290995596], 'false,false,true': [0.0007907880455070293, nan], 'false,false': [0.0007907880455070293, 0.1886092246682057], 'true': [0.0012669443690381194, nan], 'false': [nan, 0.182253022909956], 'true,true': [0.0012669443690381194, nan], 'false,false,false': [0.1404992514434816, 0.24691358024691354]}, {'': [nan, 0.14237282790392153], 'false,false': [nan, 0.1708282047904085], 'false,true,true': [0.0011077984083544485, nan], 'false,true': [0.0011077984083544485, nan], 'false': [0.0011077984083544485, 0.17082820479040853], 'false,false,false': [0.18768472762819782, 0.08094804730243123]}, {'': [0.0008900766752633565, 0.17000591497256795], 'false,false,true': [-1.850371707708594e-17, nan], 'false,false': [-1.850371707708594e-17, 0.226309855675452], 'false,true': [nan, 0.1480371655041989], 'false': [0.1480371655041989, 0.18772748432360728], 'false,false,false': [0.0, 0.2469135802469136]}, {'': [0.0010271584993737832, 0.17637423933609245], 'true': [0.0010271584993737832, nan], 'false,false': [0.025605467582581698, 0.0027771986414858564], 'false': [nan, 0.17637423933609253], 'false,false,false': [6.665196777618417e-06, -1.1102230246251566e-17]}, {'': [0.0007965512841085071, 0.11558983848448356], 'false,true': [0.08918610392749453, 0.11542084130475924], 'false,false': [nan, 0.14875356232956674], 'false': [0.09618375547227505, 0.14875356232956674]}, {'': [0.06628511466294938, 0.14659409438631557], 'true': [0.0422241923298268, 1.0878712917220905e-05], 'false,false': [nan, 0.14659409438631557], 'false': [nan, 0.14659409438631557]}, {'': [5.085156417795426e-05, 0.09315188401894685], 'false,false,true': [0.0, 0.0], 'false,false': [0.022017524405195277, nan], 'false,true,false': [0.10302359173632365, 0.1469473920791867], 'false,true': [nan, 0.1068281372433581], 'false': [0.1068281372433581, 0.022017524405195277]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false,true;follows(F, A), recursion_accounttype(F, B).;true;true
1;false;follows(A, E).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;follows(F, A), recursion_accounttype(F, B).;true;true
5;false;follows(A, D), follows(E, A).;true;true
5;false,false,false;follows(H, A), tweets(H, I).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false,false;follows(F, A).;true;true
6;false;recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
8;true;recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(F, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.30259337954395676;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.006956956418613243;  // std dev = 1,194, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.2378585626476297;  // std dev = 1,706, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else return 0.38150619191521606;  // std dev = 0,926, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.6365323334800129;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), tweets(A, F) )
%   | then if ( follows(E, G), follows(G, A) )
%   | | then return -0.1341077485718796;  // std dev = 0,061, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.4741709823272138;  // std dev = 0,822, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return 0.1308199646818334;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.22339274308206689;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.41972120246282263;  // std dev = 0,019, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.46510015306853114;  // std dev = 0,055, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.11932051632273842;  // std dev = 0,056, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.35536833343255986;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.10886935753244627;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.18255193497183456;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32222295077069735;  // std dev = 0,017, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.35352469157584354;  // std dev = 0,050, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.10736716781709049;  // std dev = 0,051, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.27461305975628963;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.08935116978933372;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.145766931336447;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.25621148376775044;  // std dev = 0,015, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.44068281868222564;  // std dev = 0,246, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12489807437087111;  // std dev = 0,350, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.07249554344765737;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.29011773579328315;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return -0.12773446137661135;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.11436736231518976;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21194356902620806;  // std dev = 0,058, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then return 0.3617600751623479;  // std dev = 0,170, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6603175119670809;  // std dev = 0,072, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return -0.11385605239249125;  // std dev = 0,250, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.21886251206110618;  // std dev = 0,256, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.35583928133950915;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17874736238283076;  // std dev = 0,051, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.28586088182228947;  // std dev = 0,146, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.07347855015351802;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.18778729613863732;  // std dev = 0,230, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(G, A) )
%   | | then return 0.023569468367108198;  // std dev = 0,677, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.05978408624182902;  // std dev = 0,379, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1540274732989744;  // std dev = 0,045, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3173518310435893;  // std dev = 0,318, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return -0.09264421446878938;  // std dev = 0,076, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.16822887990089422;  // std dev = 0,178, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.04638848819918098;  // std dev = 0,377, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1290374332165969;  // std dev = 0,032, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.18462428820263851;  // std dev = 0,097, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08563093349905475;  // std dev = 0,238, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.012927261092747491;  // std dev = 0,587, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.0358928377507845;  // std dev = 1,130, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.15063255292560007;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.06762524602463746;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.992751
   AUC PR    = 0.320863
   CLL	      = -0.265731
   Precision = 0.353075 at threshold = 0.5
   Recall    = 0.99359
   F1        = 0.521008


Total learning time: 18.961 seconds
Total inference time: 307.462 seconds
AUC ROC: 0.992751


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.213556
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.512 seconds
Refined model CLL: -0.213556


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992751
   AUC PR    = 0.320863
   CLL	      = -0.265731
   Precision = 0.353075 at threshold = 0.5
   Recall    = 0.99359
   F1        = 0.521008


Total learning time: 22.461 seconds
Total inference time: 307.462 seconds
AUC ROC: 0.992751
Total revision time: 22.461
Best scored revision CLL: -0.213556


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:27:06
{'CLL': -0.265731, 'AUC ROC': 0.992751, 'F1': 0.521008, 'Recall': 0.99359, 'Precision': [0.353075, 0.5], 'Inference time': 307.462, 'Learning time': 22.461, 'AUC PR': 0.320863, 'parameter_20': {'CLL': -0.231803, 'AUC ROC': 0.993844, 'F1': 0.494624, 'Recall': 0.884615, 'Precision': [0.343284, 0.5], 'Inference time': 7.816, 'Learning time': 1.31, 'AUC PR': 0.459834}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(G, A) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.30259337954395676;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(G, A) )
%   | | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.2616318086752123;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.774827702904826;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.14241128990069105;  // std dev = 0,193, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.08125566235560983;  // std dev = 0,806, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10223514124197292;  // std dev = 0,028, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(G, A) )
%   | | then return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.1727983740294359;  // std dev = 0,429, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09323149139243626;  // std dev = 0,026, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5715428522852819;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.2305181566343142;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1500278506004607;  // std dev = 1,089, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08564741616700237;  // std dev = 0,024, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.4296218601225183;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.19218014659823054;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.12091697773932446;  // std dev = 1,089, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3289327622196867;  // std dev = 7,45e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.09915745949457885;  // std dev = 0,150, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return 0.1285046791360223;  // std dev = 0,415, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17912207418644302;  // std dev = 0,016, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07224645045904168;  // std dev = 0,021, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.26077415831448136;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1509405072409802;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.06821030162612374;  // std dev = 1,088, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15428181063170407;  // std dev = 0,014, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.2823280125102255;  // std dev = 0,449, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return -0.06523951713301135;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.20459942071284942;  // std dev = 0,249, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.04024965388947602;  // std dev = 0,284, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13520866817073662;  // std dev = 0,013, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then return 0.11966896745203515;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.06214743671479421;  // std dev = 0,007, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2070216484768701;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13729577730809214;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05355191302379736;  // std dev = 1,021, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.982131
   AUC PR    = 0.285026
   CLL	      = -0.190917
   Precision = 0.351206 at threshold = 0.5
   Recall    = 0.839744
   F1        = 0.495274


Total learning time: 6.69 seconds
Total inference time: 115.768 seconds
AUC ROC: 0.982131


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:29:08
{'CLL': -0.190917, 'AUC ROC': 0.982131, 'F1': 0.495274, 'Recall': 0.839744, 'Precision': [0.351206, 0.5], 'Inference time': 115.768, 'Learning time': 6.69, 'AUC PR': 0.285026}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(G, A) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.30259337954395676;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.943541
   AUC PR    = 0.31576
   CLL	      = -0.169847
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.339 seconds
Total inference time: 15.52 seconds
AUC ROC: 0.943541


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:29:25
{'CLL': -0.169847, 'AUC ROC': 0.943541, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 15.52, 'Learning time': 1.339, 'AUC PR': 0.31576}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, A).;false;true
0;true,false;phenotype(A, E), interaction(F, C).;false;false
0;false,true,false;complex(A, I), complex(G, I).;false;false
0;true;complex(A, D), complex(C, D).;false;true
0;false,true;interaction(H, A), interaction(H, H).;false;true
0;false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,false;interaction(J, A), enzyme(J, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,true;interaction(I, A), recursion_proteinclass(I, B).;false;false
1;false,false;complex(A, G), interaction(A, H).;true;true
1;true,false;complex(C, E), complex(A, E).;false;true
1;true;interaction(C, D), interaction(A, D).;false;true
1;false;interaction(A, A).;false;true
1;false,false,false;interaction(A, J), interaction(J, K).;false;false
1;true,false,false;complex(C, F).;false;false
2;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
2;false,false,true;complex(G, H), phenotype(A, I).;false;false
2;false,false;interaction(G, A), interaction(G, G).;true;true
2;true,false;phenotype(A, F).;false;false
2;true;interaction(A, D), complex(A, E).;true;true
2;false;interaction(A, A).;false;true
2;true,true;complex(D, E), complex(C, E).;false;false
2;false,false,false;location(A, J).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;false,false,true;phenotype(A, G), enzyme(F, H).;false;false
3;false,false;interaction(F, A), recursion_proteinclass(F, B).;true;true
3;true,false;interaction(E, A), recursion_proteinclass(E, B).;false;false
3;true;interaction(C, D), interaction(D, C).;true;true
3;false;interaction(A, A).;false;true
3;true,true;recursion_proteinclass(D, B).;false;false
3;false,false,false;interaction(I, A), phenotype(I, J).;false;false
4;;proteinclass(A, B) :- interaction(A, A).;true;true
4;false,false,true;complex(H, I), location(A, J).;false;false
4;false,false;interaction(H, A), interaction(H, H).;true;true
4;false,true,true;complex(D, F), enzyme(E, G).;false;false
4;true;interaction(C, A), recursion_proteinclass(C, B).;false;false
4;false,true;interaction(E, A), interaction(A, E).;true;false
4;false;interaction(A, D), recursion_proteinclass(D, B).;true;true
4;false,false,false;interaction(A, K), complex(A, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
5;false,false,true;enzyme(A, I), phenotype(H, J).;false;false
5;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
5;false,true,true;complex(D, F), location(A, G).;false;false
5;false,true;complex(E, F), complex(A, F).;true;true
5;false;interaction(A, D), interaction(E, A).;true;true
5;false,false,false;interaction(K, A), enzyme(K, L).;false;false
5;false,true,false;interaction(E, E), interaction(D, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,false,true;complex(I, G), recursion_proteinclass(I, B).;false;false
6;false,false;complex(A, G), location(A, H).;true;true
6;true,false;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true;phenotype(A, D), phenotype(C, D).;false;true
6;false;interaction(A, A).;false;true
6;false,false,false;interaction(J, A), location(J, K).;false;false
6;true,false,false;interaction(F, C), interaction(C, F).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false,false,true;interaction(I, K), recursion_proteinclass(K, B).;false;false
7;false,false;interaction(I, A), enzyme(A, J).;true;true
7;false,true,true;interaction(A, E), complex(D, F).;false;false
7;false,true;complex(E, F).;true;true
7;false;interaction(D, A), interaction(E, D).;true;true
7;false,false,false;location(A, L).;false;false
7;false,true,false;complex(D, G), complex(A, H).;false;false
8;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
8;false,false,true;enzyme(J, L).;false;false
8;false,false;interaction(J, A), phenotype(J, K).;true;true
8;false,true,true;phenotype(A, H), enzyme(E, I).;false;false
8;true;recursion_proteinclass(D, B).;false;false
8;false,true;complex(E, F), phenotype(E, G).;true;false
8;false;interaction(A, E), interaction(E, E).;true;true
8;false,false,false;phenotype(A, M).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
9;false,false,true;recursion_proteinclass(H, B).;false;false
9;false,false;interaction(H, A), enzyme(H, I).;true;true
9;false,true,true;interaction(D, A), phenotype(D, F).;false;false
9;false,true;interaction(D, D).;true;true
9;false;interaction(A, D), complex(D, E).;true;true
9;false,false,false;phenotype(A, J), interaction(K, A).;false;false
9;false,true,false;interaction(D, G), interaction(G, D).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return 0.03206197857777315;  // std dev = 1,818, 23,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.3126943896449669;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.7194734122109543;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.12220721406314217;  // std dev = 2,516, 32,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.373364469901985;  // std dev = 0,948, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.638413891558277;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.10071556112088964;  // std dev = 0,438, 35,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.42777399120236215;  // std dev = 0,108, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.4565206112450172;  // std dev = 0,071, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.005319834335632119;  // std dev = 1,826, 23,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.23432512024130456;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.32807917147790855;  // std dev = 0,101, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.08985148682168047;  // std dev = 2,509, 34,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | | else return 0.1370860744031414;  // std dev = 0,642, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2604477213108462;  // std dev = 0,090, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, E), follows(D, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.027406941898076832;  // std dev = 1,842, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3399461988436007;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.23828741101324333;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.17368676719634066;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.22933078917376087;  // std dev = 0,130, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6933511950450235;  // std dev = 0,464, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.19316041065574616;  // std dev = 0,007, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.3172324972323135;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1915369129187051;  // std dev = 0,114, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E) )
%   | | then return -0.005576480043320947;  // std dev = 1,335, 18,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | else return -0.025646108255671915;  // std dev = 0,314, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.0976945135390129;  // std dev = 0,384, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.2671853472364515;  // std dev = 0,927, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1633340661216634;  // std dev = 0,005, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.07629042476081263;  // std dev = 0,381, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11720871882139443;  // std dev = 0,020, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, E), follows(E, D) )
%   | | | then return 0.022446396275431744;  // std dev = 1,709, 30,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return 0.09388482179488739;  // std dev = 0,762, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.15557431181489512;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1439922752405865;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993626
   AUC PR    = 0.459449
   CLL	      = -0.235469
   Precision = 0.343284 at threshold = 0.5
   Recall    = 0.884615
   F1        = 0.494624


Total learning time: 1.353 seconds
Total inference time: 8.076 seconds
AUC ROC: 0.993626


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.279443
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.84
   F1        = 0.913043


Total scoring time: 0.722 seconds
Parameter learned model CLL: -0.279443


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C)', 'false,true': 'follows(F, A), follows(F, F)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [1.818, 19, 4], 'false,true,true': [0.0, 0, 0], 'false,false,false,false': [1.651, 6, 5], 'true,true': [0.0, 0, 15], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)', 'false': 'follows(A, A)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'false,false,true,true': [0.0, 0, 2], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.948, 2, 3], 'false,true': [0.0, 0, 0], 'false,false,true,false': [2.516, 23, 9], 'true,true': [0.0, 0, 11]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.438, 25, 10], 'true,false': [0.0, 0, 3], 'true,true': [0.0, 0, 12]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(E, F)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'true,true': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.071, 0, 5], 'true,false': [0.0, 0, 0], 'false,false,false,true': [1.826, 19, 4], 'false,true': [0.0, 0, 0], 'true,true,true': [0.108, 0, 11], 'false,false,false,false': [1.651, 6, 5], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false': 'follows(F, A), follows(F, F)', 'false,true,true': 'tweets(D, E)', 'false,true': 'follows(D, A), follows(A, D)', 'false': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,false': 'follows(A, G)'}, {'false,true,true,true': [0.101, 0, 11], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.509, 23, 11], 'false,true,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false,false,false': [0.642, 2, 3], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'tweets(A, G)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(E, E), follows(D, A)', 'false': 'follows(A, D), follows(E, A)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'false,false,true,true': [0.0, 0, 3], 'false,false,false,true': [0.0, 2, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.09, 0, 11], 'false,false,false,false': [1.651, 6, 5], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [1.842, 17, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false,false': 'follows(F, A)'}, {'false,false,true': [0.464, 0, 10], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.007, 19, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 6, 0], 'true,true': [0.13, 0, 15]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,true': 'follows(A, E)', 'false,false': 'follows(F, A), tweets(A, G)', 'false': 'follows(D, A), follows(E, D)'}, {'true': [0.114, 0, 15], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.384, 6, 5], 'false,true,true': [1.335, 14, 4], 'false,true,false': [0.314, 5, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B)', 'false,false': 'follows(F, A)', 'false': 'follows(A, E), follows(E, E)'}, {'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.381, 6, 5], 'true,false': [0.005, 19, 0], 'true,true': [0.927, 0, 20]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'recursion_accounttype(F, B)', 'false,false': 'follows(F, A), tweets(F, G)', 'false,true,false': 'follows(D, E), follows(E, D)', 'false,true': 'follows(D, D)', 'false': 'follows(A, D)'}, {'false,true,false,false': [0.762, 2, 2], 'false,false,true,true': [0.0, 0, 3], 'false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.709, 21, 9], 'true': [0.02, 0, 11], 'false,false,true,false': [0.0, 2, 0]}]]
[{'': [-2.3684757858670006e-16, 0.2040816326530611], 'false,false': [nan, 0.19463667820069216], 'true': [-2.3684757858670006e-16, nan], 'false,true': [nan, 0.0], 'false': [0.0, 0.19463667820069214], 'false,false,false': [0.14366729678638926, 0.24793388429752045]}, {'': [0.0, 0.20784404910715137], 'false,false,true': [0.0, 0.19789309545654335], 'false,false': [0.20600191192864625, 0.17968709991935028], 'true': [0.0, nan], 'false': [nan, 0.2078440491071519], 'false,false,false': [nan, 0.17968709991935028]}, {'': [0.001103500760119817, 0.19168193769378755], 'true': [-2.590520390792032e-16, 0.0], 'false,false': [nan, 0.19168193769378755], 'false': [nan, 0.19168193769378722]}, {'': [0.001052759527096502, 0.18302727944517247], 'false,false,true': [0.0010143654414286995, nan], 'false,false': [0.0010143654414286995, 0.1908589056770874], 'true': [0.001052759527096502, nan], 'false': [nan, 0.18302727944517244], 'true,true': [0.001052759527096502, nan], 'false,false,false': [0.14498197833648632, 0.2479338842975206]}, {'': [nan, 0.14376253902881073], 'false,false': [nan, 0.17219224979483228], 'false,true,true': [0.000921309933443425, nan], 'false,true': [0.000921309933443425, nan], 'false': [0.000921309933443425, 0.17219224979483244], 'false,false,false': [0.18512324952595116, 0.08231638462384885]}, {'': [0.000741546809051434, 0.17142845005542237], 'false,false,true': [-1.850371707708594e-17, nan], 'false,false': [-1.850371707708594e-17, 0.2318842921408142], 'false,true': [nan, 0.14752051734196203], 'false': [0.14752051734196203, 0.19643976856722403], 'false,false,false': [0.0, 0.24793388429752056]}, {'': [0.0011200303064058319, 0.1794977305394505], 'true': [0.0011200303064058319, nan], 'false,false': [0.02151389700663877, 0.0028097324849324944], 'false': [nan, 0.17949773053945028], 'false,false,false': [2.4845873516424345e-06, 0.0]}, {'': [0.0008683484074759902, 0.11672185896104995], 'false,true': [0.09894945603558866, 0.09872839499904118], 'false,false': [nan, 0.1474128671110131], 'false': [0.098969713897061, 0.1474128671110131]}, {'': [0.06833987000461399, 0.14530971157517403], 'true': [0.042964148508499424, 1.430006297621414e-06], 'false,false': [nan, 0.14530971157517403], 'false': [nan, 0.14530971157517403]}, {'': [3.5011215360049436e-05, 0.09299926018227041], 'false,false,true': [-4.625929269271485e-18, 0.0], 'false,false': [0.02153763361921666, nan], 'false,true,false': [0.09735761690668676, 0.14510944488048533], 'false,true': [nan, 0.10350524877634115], 'false': [0.10350524877634115, 0.02153763361921666]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false,true;follows(F, A), recursion_accounttype(F, B).;true;true
1;false;follows(A, E).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;follows(F, A), recursion_accounttype(F, B).;true;true
5;false;follows(A, D), follows(E, A).;true;true
5;false,false,false;follows(H, A), tweets(H, I).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false,false;follows(F, A).;true;true
6;false;recursion_accounttype(E, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
8;true;recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(F, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.3581489350995123;  // std dev = 1,414, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.015375036594832933;  // std dev = 1,336, 18,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.24779728811959795;  // std dev = 1,845, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.38150619191521606;  // std dev = 0,926, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.6365323334800129;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.6761114602763371;  // std dev = 0,139, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.13260655811169755;  // std dev = 0,062, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7674652948729508;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.2325347051270492;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.12921009703669148;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.4148735662761402;  // std dev = 0,028, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.45558283928648696;  // std dev = 0,070, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.5622662314683222;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11810846548138952;  // std dev = 0,056, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.20571397049412066;  // std dev = 1,130, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.10741614422108776;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.31894698035883695;  // std dev = 0,025, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3470526338030865;  // std dev = 0,063, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.42265063239060274;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10636958638383155;  // std dev = 0,051, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.16360631948580362;  // std dev = 1,107, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.08808069229109623;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2539818153975524;  // std dev = 0,021, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2917677953792487;  // std dev = 0,089, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09249364425556528;  // std dev = 5,27e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.0714134113780865;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.29342175535325354;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return -0.12814848665660544;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.11274230622137771;  // std dev = 1,366, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21354840989933105;  // std dev = 0,050, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then return 0.2456755088759858;  // std dev = 0,063, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.564048358324556;  // std dev = 0,270, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return -0.08501699742026665;  // std dev = 5,27e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.1952290452375388;  // std dev = 0,161, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.2814219723562159;  // std dev = 0,005, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17990075667544084;  // std dev = 0,044, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.20322259313759053;  // std dev = 0,054, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08069300595269047;  // std dev = 0,023, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3498900653631001;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.22689143215994687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.04149884772120752;  // std dev = 0,957, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.15488697937164986;  // std dev = 0,039, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.25569168353605876;  // std dev = 0,375, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return -0.07298172001043615;  // std dev = 6,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.16783952531201854;  // std dev = 0,157, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.37625489856021815;  // std dev = 0,248, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.2016955717113633;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.030585724485547493;  // std dev = 0,490, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13101101249116756;  // std dev = 0,028, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.13899272073581162;  // std dev = 0,031, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.06819540103173671;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.03440540047744334;  // std dev = 0,579, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.02184306934749514;  // std dev = 0,839, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.1517963635836923;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07660890478381453;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.992775
   AUC PR    = 0.281768
   CLL	      = -0.159034
   Precision = 0.336427 at threshold = 0.5
   Recall    = 0.929487
   F1        = 0.494037


Total learning time: 8.38 seconds
Total inference time: 345.242 seconds
AUC ROC: 0.992775


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.156357
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.979592


Total scoring time: 1.66 seconds
Refined model CLL: -0.156357


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992775
   AUC PR    = 0.281768
   CLL	      = -0.159034
   Precision = 0.336427 at threshold = 0.5
   Recall    = 0.929487
   F1        = 0.494037


Total learning time: 12.115000000000002 seconds
Total inference time: 345.242 seconds
AUC ROC: 0.992775
Total revision time: 12.115000000000002
Best scored revision CLL: -0.156357


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:35:32
{'CLL': -0.159034, 'AUC ROC': 0.992775, 'F1': 0.494037, 'Recall': 0.929487, 'parameter_25': {'CLL': -0.235469, 'AUC ROC': 0.993626, 'F1': 0.494624, 'Recall': 0.884615, 'Precision': [0.343284, 0.5], 'Inference time': 8.076, 'Learning time': 1.353, 'AUC PR': 0.459449}, 'Precision': [0.336427, 0.5], 'Inference time': 345.242, 'Learning time': 12.115000000000002, 'AUC PR': 0.281768}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.16653882456488173;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.20876090948223144;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.1386239489683271;  // std dev = 0,064, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1013167801908084;  // std dev = 0,003, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10159632948783633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.11686606566235887;  // std dev = 1,140, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09245721527348573;  // std dev = 0,003, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A) )
%   | | then return 0.08664474378153948;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.1242818123784184;  // std dev = 0,867, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.09020899000555771;  // std dev = 0,466, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08498611124142416;  // std dev = 0,003, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A) )
%   | | then return 0.07019245752980947;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.10520794568266581;  // std dev = 0,856, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.07503945845628934;  // std dev = 0,458, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07860619189947105;  // std dev = 0,003, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2793589156083975;  // std dev = 0,013, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11229793898933328;  // std dev = 0,005, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.061856465444507826;  // std dev = 1,134, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07309826928527519;  // std dev = 0,002, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.46198429260699736;  // std dev = 0,482, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.19880867634735067;  // std dev = 0,235, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.035607088722782655;  // std dev = 0,404, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.06829747474645567;  // std dev = 0,002, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.18887761700196098;  // std dev = 0,074, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.0896419001829875;  // std dev = 0,012, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.03343606830544164;  // std dev = 0,979, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0640775849744434;  // std dev = 0,002, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3596993909632252;  // std dev = 0,462, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1703456107923458;  // std dev = 0,223, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.014889775848551855;  // std dev = 0,374, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.992422
   AUC PR    = 0.389906
   CLL	      = -0.139289
   Precision = 0.354523 at threshold = 0.5
   Recall    = 0.929487
   F1        = 0.513274


Total learning time: 7.357 seconds
Total inference time: 126.972 seconds
AUC ROC: 0.992422


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:37:46
{'CLL': -0.139289, 'AUC ROC': 0.992422, 'F1': 0.513274, 'Recall': 0.929487, 'Precision': [0.354523, 0.5], 'Inference time': 126.972, 'Learning time': 7.357, 'AUC PR': 0.389906}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */


Results
   AUC ROC   = 0.974204
   AUC PR    = 0.371505
   CLL	      = -0.156246
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.49 seconds
Total inference time: 15.198 seconds
AUC ROC: 0.974204


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:38:03
{'CLL': -0.156246, 'AUC ROC': 0.974204, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 15.198, 'Learning time': 1.49, 'AUC PR': 0.371505}


