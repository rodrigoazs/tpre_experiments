Starting experiment #3 for 53_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 249953

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2221223434349712;  // std dev = 0,481, 7.822,000 (wgt'ed) examples reached here.  /* #neg=4.975 #pos=2.847 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.024815601766178853;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.1914822684328457;  // std dev = 3,162, 45,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | else return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return -0.0237856310455802;  // std dev = 8,556, 703,000 (wgt'ed) examples reached here.  /* #neg=620 #pos=83 */
%   | | | else return 0.060072012022589036;  // std dev = 4,094, 104,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.05398226843284526;  // std dev = 6,148, 240,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=47 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18661198715747584;  // std dev = 0,479, 7.959,000 (wgt'ed) examples reached here.  /* #neg=5.112 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7612464565784677;  // std dev = 2,700, 92,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=84 */
%   | | | else return -0.1469415718506322;  // std dev = 1,016, 329,000 (wgt'ed) examples reached here.  /* #neg=328 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.20927420865893676;  // std dev = 3,126, 43,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | | else return -0.05225826145821885;  // std dev = 4,380, 237,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=21 */
%   | else return -0.024315237178247264;  // std dev = 0,319, 426,000 (wgt'ed) examples reached here.  /* #neg=377 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.8007942231918295;  // std dev = 8,43e-08, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.21295638535399145;  // std dev = 5,988, 148,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=61 */
%   | | | else return -0.14038224739640587;  // std dev = 2,169, 85,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=5 */
%   | else return 0.1652950155848734;  // std dev = 0,481, 7.572,000 (wgt'ed) examples reached here.  /* #neg=4.812 #pos=2.760 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.667011470266266;  // std dev = 2,163, 89,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=84 */
%   | | | else return -0.12947479217848962;  // std dev = 1,014, 344,000 (wgt'ed) examples reached here.  /* #neg=343 #pos=1 */
%   | | else if ( haswordauthor(K, G) )
%   | | | then return 0.19101686762592107;  // std dev = 3,104, 42,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | | else return -0.048206004274883994;  // std dev = 4,385, 243,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=21 */
%   | else return -0.01865321561565751;  // std dev = 0,323, 415,000 (wgt'ed) examples reached here.  /* #neg=366 #pos=49 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5565167882960455;  // std dev = 0,282, 23,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.2743724313229959;  // std dev = 4,405, 78,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=39 */
%   | | | else return -0.010494355703863513;  // std dev = 4,599, 125,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=27 */
%   | else return 0.13564730319279428;  // std dev = 0,480, 7.619,000 (wgt'ed) examples reached here.  /* #neg=4.859 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordtitle(J, H) )
%   | | then if ( author(K, I), title(K, J) )
%   | | | then return 0.03361098248769645;  // std dev = 0,847, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.11198318339807284;  // std dev = 3,214, 50,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
%   | | else return -0.029915118016320907;  // std dev = 0,299, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.0024250937510707686;  // std dev = 0,288, 638,000 (wgt'ed) examples reached here.  /* #neg=534 #pos=104 */
%   | | else return -0.022149677571716663;  // std dev = 0,315, 420,000 (wgt'ed) examples reached here.  /* #neg=373 #pos=47 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10248923504777786;  // std dev = 0,477, 8.035,000 (wgt'ed) examples reached here.  /* #neg=5.188 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.13645623516187316;  // std dev = 0,457, 49,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.5361807470297013;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.12617565328884844;  // std dev = 0,031, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.01957213650946645;  // std dev = 5,753, 407,000 (wgt'ed) examples reached here.  /* #neg=324 #pos=83 */
%   | | | else return -0.04346928162418423;  // std dev = 4,386, 247,000 (wgt'ed) examples reached here.  /* #neg=226 #pos=21 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.01718266048937576;  // std dev = 6,453, 410,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=47 */
%   | | | else return -0.1203507812482205;  // std dev = 0,022, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08672467239935713;  // std dev = 0,478, 7.947,000 (wgt'ed) examples reached here.  /* #neg=5.100 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.657770611527124;  // std dev = 0,277, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.16551626327930002;  // std dev = 0,037, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.04341739032364874;  // std dev = 3,284, 54,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return -0.11346302714575149;  // std dev = 0,019, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.019833496609737565;  // std dev = 8,110, 714,000 (wgt'ed) examples reached here.  /* #neg=632 #pos=82 */
%   | | | else return 0.026684048709697213;  // std dev = 2,874, 94,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=21 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.007545800917594671;  // std dev = 4,498, 258,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=48 */
%   | | | else return -0.1112184142112141;  // std dev = 0,031, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.678680520381436;  // std dev = 0,529, 44,000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.2850220568295732;  // std dev = 0,137, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.0718608792899805;  // std dev = 4,749, 159,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=36 */
%   | | | else return 0.5162832081743184;  // std dev = 0,917, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.07144308394801963;  // std dev = 0,480, 7.665,000 (wgt'ed) examples reached here.  /* #neg=4.905 #pos=2.760 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then return 0.003400989260204161;  // std dev = 0,301, 696,000 (wgt'ed) examples reached here.  /* #neg=575 #pos=121 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.0044897485382326885;  // std dev = 6,372, 379,000 (wgt'ed) examples reached here.  /* #neg=332 #pos=47 */
%   | | | else return -0.0947479093025412;  // std dev = 1,394, 57,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=2 */
%   | | else return -0.09914087278808661;  // std dev = 0,025, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.423744819907548;  // std dev = 0,079, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.03561245731557569;  // std dev = 6,298, 181,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=61 */
%   | | | else return -0.14986030914712198;  // std dev = 2,030, 36,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   | else return 0.05789915434415879;  // std dev = 0,479, 7.642,000 (wgt'ed) examples reached here.  /* #neg=4.882 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then return -0.01039343233231292;  // std dev = 0,278, 595,000 (wgt'ed) examples reached here.  /* #neg=495 #pos=100 */
%   | | else if ( haswordtitle(I, L), haswordvenue(A, L) )
%   | | | then return 0.05954599588253379;  // std dev = 4,099, 115,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=21 */
%   | | | else return -0.13697429789736984;  // std dev = 0,010, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.0871794874648489;  // std dev = 0,214, 21,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else return -0.007339188037463185;  // std dev = 0,319, 407,000 (wgt'ed) examples reached here.  /* #neg=359 #pos=48 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( venue(E, B), title(E, D) )
%   | then if ( haswordvenue(B, C) )
%   | | then return 0.038200400243138186;  // std dev = 0,476, 7.363,000 (wgt'ed) examples reached here.  /* #neg=4.754 #pos=2.609 */
%   | | else return 0.050516483668572;  // std dev = 0,369, 664,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=134 */
%   | else if ( title(F, D), venue(F, A) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return -0.20457474905808948;  // std dev = 4,896, 244,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=27 */
%   | | | else return -0.09591727032470662;  // std dev = 1,448, 61,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=3 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.365990496254773;  // std dev = 4,885, 113,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   | | | else return 0.06226842048017144;  // std dev = 4,467, 190,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=49 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.5097586695758024;  // std dev = 0,366, 44,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=37 */
%   | | else return 0.6699263066361608;  // std dev = 0,077, 31,000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return -0.002814013081017769;  // std dev = 0,269, 287,000 (wgt'ed) examples reached here.  /* #neg=238 #pos=49 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.031094328897814293;  // std dev = 0,473, 7.995,000 (wgt'ed) examples reached here.  /* #neg=5.148 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5122293866032239;  // std dev = 1,957, 88,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=84 */
%   | | | else return -0.11912279554107974;  // std dev = 1,010, 320,000 (wgt'ed) examples reached here.  /* #neg=319 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.06894831601746419;  // std dev = 3,185, 47,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
%   | | | else return -0.052644015649597184;  // std dev = 4,389, 274,000 (wgt'ed) examples reached here.  /* #neg=253 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 1.8641984411728308E-4;  // std dev = 6,332, 356,000 (wgt'ed) examples reached here.  /* #neg=309 #pos=47 */
%   | | | else return -0.08456835476137398;  // std dev = 1,383, 72,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=2 */
%   | | else return -0.08723821396683565;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
0;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
0;false,true;haswordtitle(F, D).;true;false
0;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,true;title(F, E), venue(F, A).;true;true
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
1;false,true,false;haswordauthor(H, D).;false;false
1;false,true,true;samebib(F, G), venue(G, B).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true,false;haswordtitle(F, D).;false;false
2;false;haswordvenue(B, G), haswordtitle(H, G).;true;false
2;false,true,false;haswordauthor(K, G).;false;false
2;false,true;title(I, H), venue(I, A).;true;true
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
2;true,true;haswordvenue(A, D).;false;true
2;false,true,true;samebib(I, J), venue(J, B).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true,false;author(G, E), venue(G, B).;false;false
3;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
3;false,true;haswordtitle(J, H).;true;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;false,true,true;author(K, I), title(K, J).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,false,true;title(J, I), venue(J, A).;false;false
4;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,true;haswordtitle(F, D).;false;true
4;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
4;false,true,false;author(G, E), venue(G, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,true;haswordtitle(J, K), haswordauthor(L, K).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true,false;haswordtitle(H, D).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;haswordtitle(H, C).;false;false
6;false;haswordvenue(B, I), haswordtitle(J, I).;false;true
6;false,false,true;title(M, L), venue(M, B).;false;false
6;true,true,true;samebib(F, G), venue(G, B).;false;false
6;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;true,true;author(F, E), venue(F, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true,false;haswordtitle(G, D).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
7;false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;false,true,false;haswordtitle(I, L), haswordvenue(A, L).;false;false
7;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;true,true;haswordauthor(F, C).;false;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;false,true;haswordvenue(B, H), haswordtitle(I, H).;false;false
8;false;haswordvenue(A, G), haswordvenue(B, G).;true;false
8;true,false,false;haswordvenue(B, C).;false;false
8;true,false,true;haswordvenue(B, C).;false;false
8;true,false;title(F, D), venue(F, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,true;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,false;haswordauthor(H, D).;false;false
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46684458727342615;  // std dev = 4,681, 92,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=56 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048766;  // std dev = 6,83e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4425248887561865;  // std dev = 4,420, 86,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=56 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839147;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.4003782981309994;  // std dev = 4,157, 81,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.11231637819360621;  // std dev = 7,79e-09, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.22886150067884475;  // std dev = 4,681, 92,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(H, I) )
%   | | then return -0.10159632948783617;  // std dev = 5,27e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.23967692724890374;  // std dev = 4,268, 83,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.09269127618926108;  // std dev = 0,000, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18012703138082897;  // std dev = 4,268, 83,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.0851847513883968;  // std dev = 5,82e-09, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return 0.08969278707338309;  // std dev = 0,483, 89,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109168;  // std dev = 3,65e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14715048626842347;  // std dev = 0,454, 79,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( movie(F, A) )
%   | | then return -0.07324622576333707;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.024674768941283905;  // std dev = 4,600, 90,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=56 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 3,87e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07123199054181965;  // std dev = 4,268, 83,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.871431
   AUC PR    = 0.103954
   CLL	      = -0.300648
   Precision = 0.103954 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18833


Total learning time: 1.776 seconds
Total inference time: 3.291 seconds
AUC ROC: 0.871431


Results scoring model
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.323024
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total scoring time: 1.957 seconds
Parameter learned model CLL: -0.323024


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'true': [4.681, 36, 56], 'false,true,true': [6.83e-08, 68, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,true': [0.0, 82, 0], 'true': [4.42, 30, 56], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'true,true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,true': [7.79e-09, 90, 0], 'true,true,true': [4.157, 25, 56], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(H, I)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)', 'true': 'movie(D, A)'}, {'true,true,false': [0.0, 0, 0], 'true,true,true': [4.681, 36, 56], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,true,true': [5.27e-08, 69, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'true': [4.268, 27, 56], 'false,true,true': [0.0, 84, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'true': [4.268, 27, 56], 'false,true,true': [5.82e-09, 114, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,true': [3.65e-08, 71, 0], 'true,true,true': [0.483, 33, 56], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'movie(F, A)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 85, 0], 'true,true': [0.454, 23, 56], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [4.6, 34, 56], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [3.87e-08, 82, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,true': [0.0, 75, 0], 'true': [4.268, 27, 56], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2381852551984874, 6.857259857978908e-17], 'false,true': [6.857259857978908e-17, nan], 'false': [6.857259857978908e-17, nan]}, {'': [0.22714981070849, -2.166288828536891e-17], 'false': [-2.166288828536891e-17, nan]}, {'': [0.213382106386221, 5.921189464667501e-17], 'true': [0.213382106386221, nan], 'false': [5.921189464667501e-17, nan], 'true,true': [0.213382106386221, nan]}, {'': [0.23818525519848793, 4.022547190670857e-17], 'false,true': [4.022547190670857e-17, nan], 'true': [0.23818525519848793, nan], 'false': [4.022547190670857e-17, nan], 'true,true': [0.23818525519848793, nan]}, {'': [0.21948033096240352, 0.0], 'false,true': [0.0, nan], 'false': [0.0, nan]}, {'': [0.21948033096240357, 3.311191476952221e-17], 'false,true': [3.311191476952221e-17, nan], 'false': [3.311191476952221e-17, nan]}, {'': [0.23330387577326067, 1.8764332810566026e-17], 'true': [0.23330387577326067, nan], 'false': [1.8764332810566026e-17, nan], 'true,true': [0.23330387577326067, nan]}, {'': [0.20637718314372716, -7.836868409118752e-18], 'false,true': [-7.836868409118752e-18, nan], 'true': [0.20637718314372716, nan], 'false': [-7.836868409118752e-18, nan]}, {'': [0.12515971192988906, nan], 'true,false': [nan, 1.8278061990780017e-17], 'true': [0.23506172839506168, 1.8278061990780017e-17], 'true,false,false': [nan, 1.8278061990780017e-17]}, {'': [0.219480330962404, -7.401486830834377e-18], 'false': [-7.401486830834377e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 3,94e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.14185106490048766;  // std dev = 6,66e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.1296360425624632;  // std dev = 0,153, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.12544463852839147;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.11189916785612863;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.11231637819360621;  // std dev = 7,15e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10125235940726805;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.10159632948783621;  // std dev = 5,27e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09240319851628372;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.09269127618926107;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08494020820803082;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.08518475138839682;  // std dev = 5,05e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.07856672935660095;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.07877675473109168;  // std dev = 3,65e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07306399885355036;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07324622576333707;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06837643358855439;  // std dev = 0,000746, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0.14149788338496536;  // std dev = 0,373, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13531749576505117;  // std dev = 4,94e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( actor(A) )
%   | | then return -0.06404453447437645;  // std dev = 1,83e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.23107437243362186;  // std dev = 0,579, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0643501734851564;  // std dev = 0,014, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076789
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 2.554 seconds
Total inference time: 3.359 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064694
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total scoring time: 2.266 seconds
Refined model CLL: -0.064694


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076789
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 8.553 seconds
Total inference time: 3.359 seconds
AUC ROC: 1.0
Total revision time: 8.553
Best scored revision CLL: -0.064694


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 04:48:12
{'F1': 0.847854, 'parameter': {'F1': 0.18833, 'Precision': [0.103954, 0.5], 'Inference time': 3.291, 'AUC PR': 0.103954, 'CLL': -0.300648, 'Learning time': 1.776, 'AUC ROC': 0.871431, 'Recall': 1.0}, 'Precision': [0.735892, 0.5], 'Inference time': 3.359, 'AUC PR': 1.0, 'CLL': -0.076789, 'Learning time': 8.553, 'AUC ROC': 1.0, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.822434649385226;  // std dev = 0,186, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.8248156017661784;  // std dev = 0,180, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   else return -0.1418510649004877;  // std dev = 5,58e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7263798063385707;  // std dev = 0,002, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.27361174347778155;  // std dev = 0,000473, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1254446385283911;  // std dev = 7,30e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360622;  // std dev = 7,60e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5621648003949385;  // std dev = 0,002, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.22263383048401575;  // std dev = 0,000337, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783626;  // std dev = 4,59e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.4225748726926922;  // std dev = 0,002, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.1864543879895656;  // std dev = 0,000313, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926092;  // std dev = 6,05e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else if ( female(A) )
%   | then return 0.30712450951336406;  // std dev = 0,090, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.3077623393750651;  // std dev = 0,087, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 5,67e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return 0.2607177474377921;  // std dev = 0,002, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109161;  // std dev = 5,58e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2136674378963225;  // std dev = 0,002, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.2514463750428112;  // std dev = 0,000568, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17995883743978797;  // std dev = 0,002, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.20720495378145018;  // std dev = 0,000405, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07351126508315274;  // std dev = 0,030, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1549117874412457;  // std dev = 0,001, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.17511806035964997;  // std dev = 0,000571, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06865945334936405;  // std dev = 0,028, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06416196022491352;  // std dev = 4,59e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13569723752315274;  // std dev = 0,001, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.15146282737351582;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076586
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.713 seconds
Total inference time: 3.345 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 04:48:18
{'Inference time': 3.345, 'F1': 1.0, 'Learning time': 2.713, 'Precision': [1.0, 0.5], 'AUC PR': 1.0, 'CLL': -0.076586, 'Recall': 1.0, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 4,71e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.994647
   AUC PR    = 0.735892
   CLL	      = -0.169006
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.025 seconds
Total inference time: 2.135 seconds
AUC ROC: 0.994647


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 04:48:22
{'Inference time': 2.135, 'F1': nan, 'Learning time': 1.025, 'Precision': [nan, 0.5], 'AUC PR': 0.735892, 'CLL': -0.169006, 'Recall': 0.0, 'AUC ROC': 0.994647}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
0;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
0;false,true;haswordtitle(F, D).;true;false
0;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,true;title(F, E), venue(F, A).;true;true
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
1;false,true,false;haswordauthor(H, D).;false;false
1;false,true,true;samebib(F, G), venue(G, B).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true,false;haswordtitle(F, D).;false;false
2;false;haswordvenue(B, G), haswordtitle(H, G).;true;false
2;false,true,false;haswordauthor(K, G).;false;false
2;false,true;title(I, H), venue(I, A).;true;true
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
2;true,true;haswordvenue(A, D).;false;true
2;false,true,true;samebib(I, J), venue(J, B).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true,false;author(G, E), venue(G, B).;false;false
3;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
3;false,true;haswordtitle(J, H).;true;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;false,true,true;author(K, I), title(K, J).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,false,true;title(J, I), venue(J, A).;false;false
4;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,true;haswordtitle(F, D).;false;true
4;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
4;false,true,false;author(G, E), venue(G, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,true;haswordtitle(J, K), haswordauthor(L, K).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true,false;haswordtitle(H, D).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;haswordtitle(H, C).;false;false
6;false;haswordvenue(B, I), haswordtitle(J, I).;false;true
6;false,false,true;title(M, L), venue(M, B).;false;false
6;true,true,true;samebib(F, G), venue(G, B).;false;false
6;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;true,true;author(F, E), venue(F, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true,false;haswordtitle(G, D).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
7;false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;false,true,false;haswordtitle(I, L), haswordvenue(A, L).;false;false
7;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;true,true;haswordauthor(F, C).;false;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;false,true;haswordvenue(B, H), haswordtitle(I, H).;false;false
8;false;haswordvenue(A, G), haswordvenue(B, G).;true;false
8;true,false,false;haswordvenue(B, C).;false;false
8;true,false,true;haswordvenue(B, C).;false;false
8;true,false;title(F, D), venue(F, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,true;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,false;haswordauthor(H, D).;false;false
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5405018762759836;  // std dev = 4,292, 85,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048763;  // std dev = 8,94e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4694158909515815;  // std dev = 4,237, 84,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=58 */
%   else if ( movie(D, B) )
%   | then return -0.1254446385283914;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.42202620247081785;  // std dev = 3,927, 79,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.1123163781936062;  // std dev = 8,01e-09, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.2283518007990316;  // std dev = 4,586, 91,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(H, I) )
%   | | then return -0.10159632948783615;  // std dev = 5,67e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18655475617090783;  // std dev = 4,495, 89,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=58 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.09269127618926107;  // std dev = 1,83e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15495617693750277;  // std dev = 4,397, 87,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=58 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839682;  // std dev = 5,59e-09, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return 0.02971885398388439;  // std dev = 0,494, 100,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109162;  // std dev = 4,94e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04031393301158522;  // std dev = 0,490, 97,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( movie(F, A) )
%   | | then return -0.07324622576333707;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.09912222529486903;  // std dev = 4,397, 87,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=58 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 3,57e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.06739956664814767;  // std dev = 4,447, 88,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=58 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.86826
   AUC PR    = 0.102112
   CLL	      = -0.298547
   Precision = 0.102112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185302


Total learning time: 1.877 seconds
Total inference time: 3.339 seconds
AUC ROC: 0.86826


Results scoring model
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.296275
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total scoring time: 2.27 seconds
Parameter learned model CLL: -0.296275


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'true': [4.292, 27, 58], 'false,true,true': [8.94e-08, 99, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,true': [0.0, 89, 0], 'true': [4.237, 26, 58], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'true,true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,true': [8.01e-09, 101, 0], 'true,true,true': [3.927, 21, 58], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(H, I)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)', 'true': 'movie(D, A)'}, {'true,true,false': [0.0, 0, 0], 'true,true,true': [4.586, 33, 58], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,true,true': [5.67e-08, 75, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'true': [4.495, 31, 58], 'false,true,true': [1.83e-08, 89, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'true': [4.397, 29, 58], 'false,true,true': [5.59e-09, 101, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,true': [4.94e-08, 86, 0], 'true,true,true': [0.494, 42, 58], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'movie(F, A)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 75, 0], 'true,true': [0.49, 39, 58], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [4.397, 29, 58], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [3.57e-08, 77, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,true': [0.0, 78, 0], 'true': [4.447, 30, 58], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21674740484429023, 8.074349270001139e-17], 'false,true': [8.074349270001139e-17, nan], 'false': [8.074349270001139e-17, nan]}, {'': [0.21371882086167973, -1.7464182409833923e-17], 'false': [-1.7464182409833923e-17, nan]}, {'': [0.19516103188591666, 6.5953843047039e-17], 'true': [0.19516103188591666, nan], 'false': [6.5953843047039e-17, nan], 'true,true': [0.19516103188591666, nan]}, {'': [0.23113150585678086, 4.2928623618839385e-17], 'false,true': [4.2928623618839385e-17, nan], 'true': [0.23113150585678086, nan], 'false': [4.2928623618839385e-17, nan], 'true,true': [0.23113150585678086, nan]}, {'': [0.2269915414720367, 3.742324802107269e-18], 'false,true': [3.742324802107269e-18, nan], 'false': [3.742324802107269e-18, nan]}, {'': [0.2222222222222222, 3.0778460088618204e-17], 'false,true': [3.0778460088618204e-17, nan], 'false': [3.0778460088618204e-17, nan]}, {'': [0.24360000000000043, 2.840105411831796e-17], 'true': [0.24360000000000043, nan], 'false': [2.840105411831796e-17, nan], 'true,true': [0.24360000000000043, nan]}, {'': [0.2404081198852164, -5.921189464667502e-18], 'false,true': [-5.921189464667502e-18, nan], 'true': [0.2404081198852164, nan], 'false': [-5.921189464667502e-18, nan]}, {'': [0.12487826894695132, nan], 'true,false': [nan, 1.658125296518091e-17], 'true': [0.22222222222222202, 1.658125296518091e-17], 'true,false,false': [nan, 1.658125296518091e-17]}, {'': [0.22469008264462823, -9.963539964584738e-18], 'false': [-9.963539964584738e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 2,58e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839136;  // std dev = 1,05e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.1254446385283914;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.11231637819360622;  // std dev = 6,32e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.4175135841583103;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.10159632948783616;  // std dev = 5,77e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 5,27e-09, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.09269127618926105;  // std dev = 2,36e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0851847513883968;  // std dev = 2,24e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.08518475138839682;  // std dev = 5,37e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(A) )
%   | | then return -0.07877675473109179;  // std dev = 5,27e-09, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.31593193127654934;  // std dev = 0,581, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109161;  // std dev = 5,27e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07227576208774686;  // std dev = 0,020, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.17709649774527733;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.07324622576333707;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06809451603059737;  // std dev = 0,023, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else if ( female(A) )
%   | | then return 0.1238954881887308;  // std dev = 0,074, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return 0.13656062619577766;  // std dev = 0,058, 41,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06306340416291353;  // std dev = 0,021, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.1364114415694289;  // std dev = 0,005, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.06517501916281797;  // std dev = 0,033, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.082031
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 2.601 seconds
Total inference time: 2.747 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065768
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total scoring time: 1.934 seconds
Refined model CLL: -0.065768


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.082031
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 8.682 seconds
Total inference time: 2.747 seconds
AUC ROC: 1.0
Total revision time: 8.682
Best scored revision CLL: -0.065768


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 04:48:38
{'F1': 0.848168, 'parameter': {'F1': 0.185302, 'Precision': [0.102112, 0.5], 'Inference time': 3.339, 'AUC PR': 0.102112, 'CLL': -0.298547, 'Learning time': 1.877, 'AUC ROC': 0.86826, 'Recall': 1.0}, 'Precision': [0.736364, 0.5], 'Inference time': 2.747, 'AUC PR': 1.0, 'CLL': -0.082031, 'Learning time': 8.682, 'AUC ROC': 1.0, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8,16e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360621;  // std dev = 8,16e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783628;  // std dev = 2,98e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else if ( female(A) )
%   | then return 0.3927940644608743;  // std dev = 0,111, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.40420307355199875;  // std dev = 0,082, 39,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926083;  // std dev = 7,30e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32448138161557954;  // std dev = 0,009, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1446698594445541;  // std dev = 0,001, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0851847513883968;  // std dev = 6,32e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2577431154218976;  // std dev = 0,008, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12759941468608185;  // std dev = 0,001, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21157233224596037;  // std dev = 0,007, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11399973529989339;  // std dev = 0,000996, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.079108627941459;  // std dev = 0,035, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07322370099654921;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else if ( female(A) )
%   | then return 0.17952342232662502;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.16379437199003902;  // std dev = 0,061, 40,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06840726114472245;  // std dev = 5,58e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15495288586139938;  // std dev = 0,002, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11951631590749479;  // std dev = 0,000407, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13572924021835875;  // std dev = 0,002, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10762455580530626;  // std dev = 0,000415, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06461027629952558;  // std dev = 0,046, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.080304
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 2.949 seconds
Total inference time: 2.325 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 04:48:43
{'Inference time': 2.325, 'F1': 0.848168, 'Learning time': 2.949, 'Precision': [0.736364, 0.5], 'AUC PR': 1.0, 'CLL': -0.080304, 'Recall': 1.0, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.167119
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.209 seconds
Total inference time: 1.853 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 04:48:47
{'Inference time': 1.853, 'F1': nan, 'Learning time': 1.209, 'Precision': [nan, 0.5], 'AUC PR': 1.0, 'CLL': -0.167119, 'Recall': 0.0, 'AUC ROC': 1.0}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
0;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
0;false,true;haswordtitle(F, D).;true;false
0;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,true;title(F, E), venue(F, A).;true;true
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
1;false,true,false;haswordauthor(H, D).;false;false
1;false,true,true;samebib(F, G), venue(G, B).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true,false;haswordtitle(F, D).;false;false
2;false;haswordvenue(B, G), haswordtitle(H, G).;true;false
2;false,true,false;haswordauthor(K, G).;false;false
2;false,true;title(I, H), venue(I, A).;true;true
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
2;true,true;haswordvenue(A, D).;false;true
2;false,true,true;samebib(I, J), venue(J, B).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true,false;author(G, E), venue(G, B).;false;false
3;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
3;false,true;haswordtitle(J, H).;true;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;false,true,true;author(K, I), title(K, J).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,false,true;title(J, I), venue(J, A).;false;false
4;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,true;haswordtitle(F, D).;false;true
4;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
4;false,true,false;author(G, E), venue(G, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,true;haswordtitle(J, K), haswordauthor(L, K).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true,false;haswordtitle(H, D).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;haswordtitle(H, C).;false;false
6;false;haswordvenue(B, I), haswordtitle(J, I).;false;true
6;false,false,true;title(M, L), venue(M, B).;false;false
6;true,true,true;samebib(F, G), venue(G, B).;false;false
6;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;true,true;author(F, E), venue(F, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true,false;haswordtitle(G, D).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
7;false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;false,true,false;haswordtitle(I, L), haswordvenue(A, L).;false;false
7;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;true,true;haswordauthor(F, C).;false;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;false,true;haswordvenue(B, H), haswordtitle(I, H).;false;false
8;false;haswordvenue(A, G), haswordvenue(B, G).;true;false
8;true,false,false;haswordvenue(B, C).;false;false
8;true,false,true;haswordvenue(B, C).;false;false
8;true,false;title(F, D), venue(F, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,true;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,false;haswordauthor(H, D).;false;false
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5298470483070559;  // std dev = 7,644, 265,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=178 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048807;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.45501135383783653;  // std dev = 7,615, 264,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=178 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839194;  // std dev = 0,000, 271,000 (wgt'ed) examples reached here.  /* #neg=271 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.41385183735499875;  // std dev = 7,052, 247,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.11231637819360696;  // std dev = 0,000, 280,000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.2783868124287671;  // std dev = 7,554, 262,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(H, I) )
%   | | then return -0.1015963294878366;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1899463782428808;  // std dev = 7,788, 270,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=178 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.09269127618926043;  // std dev = 1,41e-07, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19810485547612303;  // std dev = 7,124, 249,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=178 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,89e-09, 280,000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return 0.1007652360077117;  // std dev = 0,471, 267,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109143;  // std dev = 5,16e-08, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09678751387653649;  // std dev = 0,464, 259,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( movie(F, A) )
%   | | then return -0.07324622576333684;  // std dev = 1,13e-07, 263,000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.0709606436951594;  // std dev = 7,493, 260,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=178 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442028;  // std dev = 0,000, 262,000 (wgt'ed) examples reached here.  /* #neg=262 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08166326516500062;  // std dev = 7,160, 250,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=178 */
%   else if ( movie(D, B) )
%   | then return -0.0641918400820262;  // std dev = 3,23e-09, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.861638
   AUC PR    = 0.064496
   CLL	      = -0.336754
   Precision = 0.064496 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121176


Total learning time: 2.447 seconds
Total inference time: 3.435 seconds
AUC ROC: 0.861638


Results scoring model
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.289964
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total scoring time: 2.377 seconds
Parameter learned model CLL: -0.289964


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'true': [7.644, 87, 178], 'false,true,true': [0.0, 269, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,true': [0.0, 271, 0], 'true': [7.615, 86, 178], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'true,true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,true': [0.0, 280, 0], 'true,true,true': [7.052, 69, 178], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(H, I)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)', 'true': 'movie(D, A)'}, {'true,true,false': [0.0, 0, 0], 'true,true,true': [7.554, 84, 178], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,true,true': [0.0, 268, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'true': [7.788, 92, 178], 'false,true,true': [1.41e-07, 285, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'true': [7.124, 71, 178], 'false,true,true': [5.89e-09, 280, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,true': [5.16e-08, 278, 0], 'true,true,true': [0.471, 89, 178], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'movie(F, A)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [1.13e-07, 263, 0], 'true,true': [0.464, 81, 178], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [7.493, 82, 178], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 262, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,true': [3.23e-09, 257, 0], 'true': [7.16, 72, 178], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2205197579209737, -5.943201321413477e-17], 'false,true': [-5.943201321413477e-17, nan], 'false': [-5.943201321413477e-17, nan]}, {'': [0.2196395775941257, -7.210304514170758e-17], 'false': [-7.210304514170758e-17, nan]}, {'': [0.20131456014686752, -1.1419436824715895e-16], 'true': [0.20131456014686752, nan], 'false': [-1.1419436824715895e-16, nan], 'true,true': [0.20131456014686752, nan]}, {'': [0.21781947438960153, -6.462492232892702e-17], 'false,true': [-6.462492232892702e-17, nan], 'true': [0.21781947438960153, nan], 'false': [-6.462492232892702e-17, nan], 'true,true': [0.21781947438960153, nan]}, {'': [0.22463648834019243, 7.011934892369409e-17], 'false,true': [7.011934892369409e-17, nan], 'false': [7.011934892369409e-17, nan]}, {'': [0.20383542200932214, 3.489272363107635e-17], 'false,true': [3.489272363107635e-17, nan], 'false': [3.489272363107635e-17, nan]}, {'': [0.22222222222222093, 9.584659205397035e-18], 'true': [0.22222222222222093, nan], 'false': [9.584659205397035e-18, nan], 'true,true': [0.22222222222222093, nan]}, {'': [0.21493418404615305, 4.896801173251641e-17], 'false,true': [4.896801173251641e-17, nan], 'true': [0.21493418404615305, nan], 'false': [4.896801173251641e-17, nan]}, {'': [0.11240210143264492, nan], 'true,false': [nan, -2.1187462302006806e-17], 'true': [0.21591715976331347, -2.1187462302006806e-17], 'true,false,false': [nan, -2.1187462302006806e-17]}, {'': [0.2050559999999987, 1.0367841475098738e-17], 'false': [1.0367841475098738e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.14185106490048768;  // std dev = 6,50e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.14185106490048785;  // std dev = 8,43e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.12544463852839197;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360633;  // std dev = 3,33e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.11231637819360696;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783627;  // std dev = 2,79e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.10159632948783659;  // std dev = 0,000, 256,000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926103;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.09269127618926043;  // std dev = 1,50e-07, 294,000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.08518475138839679;  // std dev = 1,97e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839678;  // std dev = 9,54e-08, 265,000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109177;  // std dev = 1,05e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.07877675473109143;  // std dev = 5,16e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.07324622576333685;  // std dev = 1,12e-07, 266,000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.09560805880972052;  // std dev = 0,097, 120,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=89 */
%   | | else return 0.11383417399348976;  // std dev = 0,084, 108,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=89 */
%   | else return -0.06842697784420267;  // std dev = 3,65e-08, 267,000 (wgt'ed) examples reached here.  /* #neg=267 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13968221795147162;  // std dev = 0,015, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.06663462740075188;  // std dev = 0,074, 259,000 (wgt'ed) examples reached here.  /* #neg=259 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06404
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.393 seconds
Total inference time: 3.313 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067385
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.169 seconds
Refined model CLL: -0.067385


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06404
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.386 seconds
Total inference time: 3.313 seconds
AUC ROC: 1.0
Total revision time: 10.386
Best scored revision CLL: -0.067385


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 04:49:05
{'F1': 1.0, 'parameter': {'F1': 0.121176, 'Precision': [0.064496, 0.5], 'Inference time': 3.435, 'AUC PR': 0.064496, 'CLL': -0.336754, 'Learning time': 2.447, 'AUC ROC': 0.861638, 'Recall': 1.0}, 'Precision': [1.0, 0.5], 'Inference time': 3.313, 'AUC PR': 1.0, 'CLL': -0.06404, 'Learning time': 10.386, 'AUC ROC': 1.0, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.14185106490048766;  // std dev = 6,66e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.1418510649004881;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.12544463852839186;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360626;  // std dev = 4,94e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.11231637819360686;  // std dev = 0,000, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783617;  // std dev = 5,05e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.10159632948783644;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.09269127618926061;  // std dev = 5,16e-08, 311,000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839679;  // std dev = 8,16e-08, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0787767547310917;  // std dev = 2,79e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.07877675473109146;  // std dev = 5,96e-08, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.07324622576333684;  // std dev = 9,77e-08, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0684269778442027;  // std dev = 1,97e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.06842697784420279;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.06419184008202623;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.329 seconds
Total inference time: 3.168 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 04:49:12
{'Inference time': 3.168, 'F1': 1.0, 'Learning time': 4.329, 'Precision': [1.0, 0.5], 'AUC PR': 1.0, 'CLL': -0.063555, 'Recall': 1.0, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1418510649004877;  // std dev = 4,21e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.14185106490048793;  // std dev = 0,000, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.155326
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.861 seconds
Total inference time: 2.333 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 04:49:17
{'Inference time': 2.333, 'F1': nan, 'Learning time': 1.861, 'Precision': [nan, 0.5], 'AUC PR': 1.0, 'CLL': -0.155326, 'Recall': 0.0, 'AUC ROC': 1.0}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
0;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
0;false,true;haswordtitle(F, D).;true;false
0;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,true;title(F, E), venue(F, A).;true;true
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
1;false,true,false;haswordauthor(H, D).;false;false
1;false,true,true;samebib(F, G), venue(G, B).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true,false;haswordtitle(F, D).;false;false
2;false;haswordvenue(B, G), haswordtitle(H, G).;true;false
2;false,true,false;haswordauthor(K, G).;false;false
2;false,true;title(I, H), venue(I, A).;true;true
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
2;true,true;haswordvenue(A, D).;false;true
2;false,true,true;samebib(I, J), venue(J, B).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true,false;author(G, E), venue(G, B).;false;false
3;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
3;false,true;haswordtitle(J, H).;true;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;false,true,true;author(K, I), title(K, J).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,false,true;title(J, I), venue(J, A).;false;false
4;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,true;haswordtitle(F, D).;false;true
4;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
4;false,true,false;author(G, E), venue(G, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,true;haswordtitle(J, K), haswordauthor(L, K).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true,false;haswordtitle(H, D).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;haswordtitle(H, C).;false;false
6;false;haswordvenue(B, I), haswordtitle(J, I).;false;true
6;false,false,true;title(M, L), venue(M, B).;false;false
6;true,true,true;samebib(F, G), venue(G, B).;false;false
6;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;true,true;author(F, E), venue(F, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true,false;haswordtitle(G, D).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
7;false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;false,true,false;haswordtitle(I, L), haswordvenue(A, L).;false;false
7;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;true,true;haswordauthor(F, C).;false;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;false,true;haswordvenue(B, H), haswordtitle(I, H).;false;false
8;false;haswordvenue(A, G), haswordvenue(B, G).;true;false
8;true,false,false;haswordvenue(B, C).;false;false
8;true,false,true;haswordvenue(B, C).;false;false
8;true,false;title(F, D), venue(F, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,true;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,false;haswordauthor(H, D).;false;false
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5958538531322994;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=45 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048766;  // std dev = 6,83e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.37736964676821877;  // std dev = 4,199, 74,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839155;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.37749108844263796;  // std dev = 3,784, 66,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.11231637819360625;  // std dev = 6,45e-09, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.22690767690600883;  // std dev = 4,155, 73,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(H, I) )
%   | | then return -0.1015963294878362;  // std dev = 4,34e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19822359986719862;  // std dev = 4,009, 70,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=45 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.09269127618926105;  // std dev = 2,11e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12247659631785224;  // std dev = 4,155, 73,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=45 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839679;  // std dev = 2,28e-09, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return 0.03793916787833146;  // std dev = 0,496, 80,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109169;  // std dev = 3,33e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15829489565726615;  // std dev = 0,462, 65,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( movie(F, A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.06069153897073503;  // std dev = 4,059, 71,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 2,98e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.020218468522352193;  // std dev = 4,199, 74,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.870352
   AUC PR    = 0.095252
   CLL	      = -0.285609
   Precision = 0.095252 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173935


Total learning time: 1.514 seconds
Total inference time: 3.723 seconds
AUC ROC: 0.870352


Results scoring model
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.310999
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total scoring time: 1.766 seconds
Parameter learned model CLL: -0.310999


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'true': [3.436, 16, 45], 'false,true,true': [6.83e-08, 69, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,true': [0.0, 70, 0], 'true': [4.199, 29, 45], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'true,true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,true': [6.45e-09, 67, 0], 'true,true,true': [3.784, 21, 45], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(H, I)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)', 'true': 'movie(D, A)'}, {'true,true,false': [0.0, 0, 0], 'true,true,true': [4.155, 28, 45], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,true,true': [4.34e-08, 60, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'true': [4.009, 25, 45], 'false,true,true': [2.11e-08, 88, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'true': [4.155, 28, 45], 'false,true,true': [2.28e-09, 60, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,true': [3.33e-08, 68, 0], 'true,true,true': [0.496, 35, 45], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'movie(F, A)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 67, 0], 'true,true': [0.462, 20, 45], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [4.059, 26, 45], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [2.98e-08, 71, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,true': [0.0, 72, 0], 'true': [4.199, 29, 45], 'false,false': [0.0, 0, 0]}]]
[{'': [0.19349637194302646, 6.75787928032704e-17], 'false,true': [6.75787928032704e-17, nan], 'false': [6.75787928032704e-17, nan]}, {'': [0.23831263696128563, -3.172065784643304e-17], 'false': [-3.172065784643304e-17, nan]}, {'': [0.21694214876033088, 4.142623226213271e-17], 'true': [0.21694214876033088, nan], 'false': [4.142623226213271e-17, nan], 'true,true': [0.21694214876033088, nan]}, {'': [0.23644210921373615, 3.14563190310461e-17], 'false,true': [3.14563190310461e-17, nan], 'true': [0.23644210921373615, nan], 'false': [3.14563190310461e-17, nan], 'true,true': [0.23644210921373615, nan]}, {'': [0.22959183673469422, 5.046468293750712e-18], 'false,true': [5.046468293750712e-18, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.236442109213736, 5.551115123125783e-18], 'false,true': [5.551115123125783e-18, nan], 'false': [5.551115123125783e-18, nan]}, {'': [0.24609375, 1.6326809185664067e-17], 'true': [0.24609375, nan], 'false': [1.6326809185664067e-17, nan], 'true,true': [0.24609375, nan]}, {'': [0.21301775147928986, -2.4855739357279623e-18], 'false,true': [-2.4855739357279623e-18, nan], 'true': [0.21301775147928986, nan], 'false': [-2.4855739357279623e-18, nan]}, {'': [0.12021630094074662, nan], 'true,false': [nan, 1.2509555207044018e-17], 'true': [0.23209680618924797, 1.2509555207044018e-17], 'true,false,false': [nan, 1.2509555207044018e-17]}, {'': [0.23831263696128543, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048774;  // std dev = 1,29e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.14185106490048766;  // std dev = 6,99e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.12544463852839155;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360626;  // std dev = 4,94e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783617;  // std dev = 5,27e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926105;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.08518475138839682;  // std dev = 1,75e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.08518475138839679;  // std dev = 1,67e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.07877675473109169;  // std dev = 3,33e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.14333233316014432;  // std dev = 0,306, 47,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else return -0.06842697784420268;  // std dev = 3,33e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202623;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.13510299646196317;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06544434919889922;  // std dev = 0,035, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.075109
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 2.228 seconds
Total inference time: 3.231 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06692
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total scoring time: 1.748 seconds
Refined model CLL: -0.06692


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.075109
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 7.256000000000001 seconds
Total inference time: 3.231 seconds
AUC ROC: 1.0
Total revision time: 7.256000000000001
Best scored revision CLL: -0.06692


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 04:49:32
{'F1': 0.853165, 'parameter': {'F1': 0.173935, 'Precision': [0.095252, 0.5], 'Inference time': 3.723, 'AUC PR': 0.095252, 'CLL': -0.285609, 'Learning time': 1.514, 'AUC ROC': 0.870352, 'Recall': 1.0}, 'Precision': [0.743929, 0.5], 'Inference time': 3.231, 'AUC PR': 1.0, 'CLL': -0.075109, 'Learning time': 7.256000000000001, 'AUC ROC': 1.0, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 7,30e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839155;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360621;  // std dev = 7,45e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783615;  // std dev = 5,96e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09269127618926107;  // std dev = 0,000, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0851847513883968;  // std dev = 3,33e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0787767547310916;  // std dev = 5,37e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07324622576333707;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420267;  // std dev = 3,73e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202625;  // std dev = 0,000, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else if ( female(A) )
%   | then return 0.11749045750050806;  // std dev = 0,055, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.12834420514829578;  // std dev = 0,033, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076645
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 2.48 seconds
Total inference time: 2.758 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 04:49:38
{'Inference time': 2.758, 'F1': 0.853165, 'Learning time': 2.48, 'Precision': [0.743929, 0.5], 'AUC PR': 1.0, 'CLL': -0.076645, 'Recall': 1.0, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8,69e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return 0.8155957436101503;  // std dev = 0,202, 47,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */


Results
   AUC ROC   = 0.946983
   AUC PR    = 0.204739
   CLL	      = -0.184007
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.921 seconds
Total inference time: 1.884 seconds
AUC ROC: 0.946983


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 04:49:41
{'Inference time': 1.884, 'F1': nan, 'Learning time': 0.921, 'Precision': [nan, 0.5], 'AUC PR': 0.204739, 'CLL': -0.184007, 'Recall': 0.0, 'AUC ROC': 0.946983}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
0;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
0;false,true;haswordtitle(F, D).;true;false
0;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,true;title(F, E), venue(F, A).;true;true
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
1;false,true,false;haswordauthor(H, D).;false;false
1;false,true,true;samebib(F, G), venue(G, B).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true,false;haswordtitle(F, D).;false;false
2;false;haswordvenue(B, G), haswordtitle(H, G).;true;false
2;false,true,false;haswordauthor(K, G).;false;false
2;false,true;title(I, H), venue(I, A).;true;true
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
2;true,true;haswordvenue(A, D).;false;true
2;false,true,true;samebib(I, J), venue(J, B).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true,false;author(G, E), venue(G, B).;false;false
3;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
3;false,true;haswordtitle(J, H).;true;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;false,true,true;author(K, I), title(K, J).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,false,true;title(J, I), venue(J, A).;false;false
4;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,true;haswordtitle(F, D).;false;true
4;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
4;false,true,false;author(G, E), venue(G, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,true;haswordtitle(J, K), haswordauthor(L, K).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true,false;haswordtitle(H, D).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;haswordtitle(H, C).;false;false
6;false;haswordvenue(B, I), haswordtitle(J, I).;false;true
6;false,false,true;title(M, L), venue(M, B).;false;false
6;true,true,true;samebib(F, G), venue(G, B).;false;false
6;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;true,true;author(F, E), venue(F, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true,false;haswordtitle(G, D).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
7;false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;false,true,false;haswordtitle(I, L), haswordvenue(A, L).;false;false
7;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;true,true;haswordauthor(F, C).;false;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;false,true;haswordvenue(B, H), haswordtitle(I, H).;false;false
8;false;haswordvenue(A, G), haswordvenue(B, G).;true;false
8;true,false,false;haswordvenue(B, C).;false;false
8;true,false,true;haswordvenue(B, C).;false;false
8;true,false;title(F, D), venue(F, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,true;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,false;haswordauthor(H, D).;false;false
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5399671169176945;  // std dev = 3,784, 66,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=45 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048766;  // std dev = 6,66e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3871398764754825;  // std dev = 4,199, 74,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839158;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.3482044585768985;  // std dev = 4,009, 70,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.11231637819360626;  // std dev = 6,18e-09, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.29988524151174045;  // std dev = 3,844, 67,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(H, I) )
%   | | then return -0.10159632948783619;  // std dev = 4,83e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2177300396584995;  // std dev = 3,901, 68,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.09269127618926107;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10987641745049642;  // std dev = 4,199, 74,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839679;  // std dev = 2,28e-09, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return 0.05873740774346468;  // std dev = 0,493, 77,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 2,36e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08470245388133921;  // std dev = 0,484, 72,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( movie(F, A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.03085369998838646;  // std dev = 4,284, 76,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=45 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420268;  // std dev = 1,67e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1342906989899078;  // std dev = 3,655, 64,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=45 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.868927
   AUC PR    = 0.095576
   CLL	      = -0.293102
   Precision = 0.095576 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174476


Total learning time: 1.608 seconds
Total inference time: 4.116 seconds
AUC ROC: 0.868927


Results scoring model
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.299987
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total scoring time: 1.798 seconds
Parameter learned model CLL: -0.299987


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'true': [3.784, 21, 45], 'false,true,true': [6.66e-08, 66, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,true': [0.0, 55, 0], 'true': [4.199, 29, 45], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'true,true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,true': [6.18e-09, 64, 0], 'true,true,true': [4.009, 25, 45], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(H, I)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)', 'true': 'movie(D, A)'}, {'true,true,false': [0.0, 0, 0], 'true,true,true': [3.844, 22, 45], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,true,true': [4.83e-08, 65, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'true': [3.901, 23, 45], 'false,true,true': [0.0, 70, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'true': [4.199, 29, 45], 'false,true,true': [2.28e-09, 59, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,true': [2.36e-08, 60, 0], 'true,true,true': [0.493, 32, 45], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'movie(F, A)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 76, 0], 'true,true': [0.484, 27, 45], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [4.284, 31, 45], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [1.67e-08, 56, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,true': [0.0, 58, 0], 'true': [3.655, 19, 45], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21694214876033094, 6.728624391667616e-17], 'false,true': [6.728624391667616e-17, nan], 'false': [6.728624391667616e-17, nan]}, {'': [0.23831263696128543, -3.633457171500512e-17], 'false': [-3.633457171500512e-17, nan]}, {'': [0.2295918367346939, 3.8163916471489756e-17], 'true': [0.2295918367346939, nan], 'false': [3.8163916471489756e-17, nan], 'true,true': [0.2295918367346939, nan]}, {'': [0.2205390955669411, 3.586874387250506e-17], 'false,true': [3.586874387250506e-17, nan], 'true': [0.2205390955669411, nan], 'false': [3.586874387250506e-17, nan], 'true,true': [0.2205390955669411, nan]}, {'': [0.2238321799307958, 0.0], 'false,true': [0.0, nan], 'false': [0.0, nan]}, {'': [0.23831263696128543, 5.645201820127915e-18], 'false,true': [5.645201820127915e-18, nan], 'false': [5.645201820127915e-18, nan]}, {'': [0.24287400910777532, 9.25185853854297e-18], 'true': [0.24287400910777532, nan], 'false': [9.25185853854297e-18, nan], 'true,true': [0.24287400910777532, nan]}, {'': [0.2343750000000001, -4.382459307730881e-18], 'false,true': [-4.382459307730881e-18, nan], 'true': [0.2343750000000001, nan], 'false': [-4.382459307730881e-18, nan]}, {'': [0.14146261776695204, nan], 'true,false': [nan, 4.956352788505163e-18], 'true': [0.24151662049861491, 4.956352788505163e-18], 'true,false,false': [nan, 4.956352788505163e-18]}, {'': [0.20874023437499992, -3.3498108501621104e-18], 'false': [-3.3498108501621104e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.14185106490048766;  // std dev = 6,32e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.1254446385283916;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936064;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360628;  // std dev = 4,21e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.1015963294878362;  // std dev = 4,21e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 5,27e-09, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926105;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0851847513883968;  // std dev = 2,17e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.07877675473109172;  // std dev = 2,58e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07324622576333704;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420267;  // std dev = 3,57e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202622;  // std dev = 3,73e-09, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06419184008202625;  // std dev = 0,000, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */


Results
   AUC ROC   = 0.995191
   AUC PR    = 0.742291
   CLL	      = -0.083408
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 2.834 seconds
Total inference time: 2.909 seconds
AUC ROC: 0.995191


Results scoring model
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 1.703 seconds
Refined model CLL: -0.066646


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.995191
   AUC PR    = 0.742291
   CLL	      = -0.083408
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 7.9430000000000005 seconds
Total inference time: 2.909 seconds
AUC ROC: 0.995191
Total revision time: 7.9430000000000005
Best scored revision CLL: -0.066646


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 04:49:57
{'F1': 0.852086, 'parameter': {'F1': 0.174476, 'Precision': [0.095576, 0.5], 'Inference time': 4.116, 'AUC PR': 0.095576, 'CLL': -0.293102, 'Learning time': 1.608, 'AUC ROC': 0.868927, 'Recall': 1.0}, 'Precision': [0.742291, 0.5], 'Inference time': 2.909, 'AUC PR': 0.742291, 'CLL': -0.083408, 'Learning time': 7.9430000000000005, 'AUC ROC': 0.995191, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 6,32e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839147;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360624;  // std dev = 6,14e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.10159632948783619;  // std dev = 5,58e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926104;  // std dev = 2,36e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 4,83e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109165;  // std dev = 4,28e-08, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333707;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420265;  // std dev = 4,41e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( female(A) )
%   | then return 0.14352840659625943;  // std dev = 0,044, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.14312773479202415;  // std dev = 0,045, 23,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202626;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13510297603594618;  // std dev = 0,000157, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07815768598018073;  // std dev = 2,63e-05, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.075812
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 2.774 seconds
Total inference time: 3.316 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 04:50:03
{'Inference time': 3.316, 'F1': 0.852086, 'Learning time': 2.774, 'Precision': [0.742291, 0.5], 'AUC PR': 1.0, 'CLL': -0.075812, 'Recall': 1.0, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 7,60e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.995191
   AUC PR    = 0.742291
   CLL	      = -0.166516
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.033 seconds
Total inference time: 1.873 seconds
AUC ROC: 0.995191


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 04:50:06
{'Inference time': 1.873, 'F1': nan, 'Learning time': 1.033, 'Precision': [nan, 0.5], 'AUC PR': 0.742291, 'CLL': -0.166516, 'Recall': 0.0, 'AUC ROC': 0.995191}


