Starting experiment #4 for 54_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 698
Source train neg examples: 27996

WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5814918745807763;  // std dev = 0,447, 347,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.10416262268943255;  // std dev = 3,799, 398,000 (wgt'ed) examples reached here.  /* #neg=383 #pos=15 */
%   | | | else return 0.12841920536978263;  // std dev = 2,701, 37,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04381184921421343;  // std dev = 4,749, 255,000 (wgt'ed) examples reached here.  /* #neg=230 #pos=25 */
%   | | | else return 0.2963387805741213;  // std dev = 14,934, 906,000 (wgt'ed) examples reached here.  /* #neg=509 #pos=397 */
%   else return -0.14185106490048777;  // std dev = 2,98e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4808404486782207;  // std dev = 0,454, 354,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.09156700662363264;  // std dev = 3,799, 394,000 (wgt'ed) examples reached here.  /* #neg=379 #pos=15 */
%   | | | else return 0.10494436306582562;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.0404472491356463;  // std dev = 4,754, 260,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=25 */
%   | | | else return 0.25923101041430996;  // std dev = 14,896, 900,000 (wgt'ed) examples reached here.  /* #neg=503 #pos=397 */
%   else return -0.12544463852839105;  // std dev = 8,02e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3422681243310328;  // std dev = 0,472, 377,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.07911147261568728;  // std dev = 3,794, 370,000 (wgt'ed) examples reached here.  /* #neg=355 #pos=15 */
%   | | | else return 0.2119189608144994;  // std dev = 2,481, 26,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.025968226833415278;  // std dev = 4,728, 236,000 (wgt'ed) examples reached here.  /* #neg=211 #pos=25 */
%   | | | else return 0.20738741778553255;  // std dev = 15,029, 921,000 (wgt'ed) examples reached here.  /* #neg=524 #pos=397 */
%   else return -0.1123163781936062;  // std dev = 9,54e-08, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.30066308554241106;  // std dev = 0,457, 357,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.07330098294637188;  // std dev = 3,798, 392,000 (wgt'ed) examples reached here.  /* #neg=377 #pos=15 */
%   | | | else return 0.19489980684527594;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.03704355079386038;  // std dev = 4,765, 272,000 (wgt'ed) examples reached here.  /* #neg=247 #pos=25 */
%   | | | else return 0.20369518595425976;  // std dev = 14,568, 853,000 (wgt'ed) examples reached here.  /* #neg=456 #pos=397 */
%   else return -0.10159632948783667;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.19478941351096266;  // std dev = 0,470, 374,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.06237013447364009;  // std dev = 3,791, 356,000 (wgt'ed) examples reached here.  /* #neg=341 #pos=15 */
%   | | | else return 0.02445747658214935;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.0248512464207533;  // std dev = 4,743, 250,000 (wgt'ed) examples reached here.  /* #neg=225 #pos=25 */
%   | | | else return 0.13046841126559133;  // std dev = 14,998, 916,000 (wgt'ed) examples reached here.  /* #neg=519 #pos=397 */
%   else return -0.09269127618926076;  // std dev = 8,02e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.16837777466011006;  // std dev = 0,461, 362,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.059645961373498084;  // std dev = 3,796, 383,000 (wgt'ed) examples reached here.  /* #neg=368 #pos=15 */
%   | | | else return 0.06932674563477564;  // std dev = 2,622, 32,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.025636036048823887;  // std dev = 4,753, 259,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=25 */
%   | | | else return 0.10653254260162182;  // std dev = 14,941, 907,000 (wgt'ed) examples reached here.  /* #neg=510 #pos=397 */
%   else return -0.0851847513883968;  // std dev = 7,15e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then if ( samebib(E, F), title(F, B) )
%   | | | then return 0.4332923911544687;  // std dev = 2,58e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.5667076088455312;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.12275108061315686;  // std dev = 0,463, 351,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.05362478828732386;  // std dev = 3,795, 375,000 (wgt'ed) examples reached here.  /* #neg=360 #pos=15 */
%   | | | else return 0.16050852120690326;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.022162237426109815;  // std dev = 4,751, 257,000 (wgt'ed) examples reached here.  /* #neg=232 #pos=25 */
%   | | | else return 0.07447371321759177;  // std dev = 15,048, 924,000 (wgt'ed) examples reached here.  /* #neg=527 #pos=397 */
%   else return -0.07877675473109154;  // std dev = 7,38e-08, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.10464605275975672;  // std dev = 0,454, 358,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), title(G, A) )
%   | | | then return 0.04126245626893228;  // std dev = 1,615, 23,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return -0.05358680088500022;  // std dev = 4,360, 406,000 (wgt'ed) examples reached here.  /* #neg=384 #pos=22 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.013392782529172113;  // std dev = 4,734, 241,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=25 */
%   | | | else return 0.06967915870754454;  // std dev = 14,883, 898,000 (wgt'ed) examples reached here.  /* #neg=501 #pos=397 */
%   else return -0.07324622576333722;  // std dev = 0,000, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(B, D) )
%   | | then if ( author(F, E), title(F, B) )
%   | | | then return -0.17353090184268505;  // std dev = 2,060, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return 0.0867080621595943;  // std dev = 8,382, 342,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=242 */
%   | | else if ( haswordvenue(G, D) )
%   | | | then return -0.048355286930299606;  // std dev = 3,797, 404,000 (wgt'ed) examples reached here.  /* #neg=389 #pos=15 */
%   | | | else return 0.04552456686052918;  // std dev = 2,603, 31,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.05871516092741867;  // std dev = 3,761, 263,000 (wgt'ed) examples reached here.  /* #neg=248 #pos=15 */
%   | | | else return 0.5092506185402619;  // std dev = 1,936, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else return 0.060764321907723136;  // std dev = 0,497, 883,000 (wgt'ed) examples reached here.  /* #neg=486 #pos=397 */
%   else return -0.06842697784420264;  // std dev = 5,96e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.09326173485252245;  // std dev = 0,438, 343,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), title(G, B) )
%   | | | then return 0.02342707883646611;  // std dev = 2,108, 47,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   | | | else return -0.0470238410015305;  // std dev = 4,116, 371,000 (wgt'ed) examples reached here.  /* #neg=351 #pos=20 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.009046364477577066;  // std dev = 4,614, 237,000 (wgt'ed) examples reached here.  /* #neg=212 #pos=25 */
%   | | | else return 0.02861805957875739;  // std dev = 15,017, 919,000 (wgt'ed) examples reached here.  /* #neg=522 #pos=397 */
%   else return -0.06419184008202626;  // std dev = 0,000, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
0;true,false,true;haswordvenue(G, E).;false;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true,false,true;haswordvenue(G, E).;false;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true,false,true;haswordvenue(G, E).;false;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true,false,true;haswordvenue(G, E).;false;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true,false,true;haswordvenue(G, E).;false;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordvenue(I, G).;false;false
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;samebib(E, F), title(F, B).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true,false,true;author(G, F), title(G, A).;false;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true,false;haswordvenue(G, D).;false;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
9;true,false,true;author(G, F), title(G, B).;false;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4602994727339217;  // std dev = 0,489, 93,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 5,96e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4837987136363946;  // std dev = 0,462, 81,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839152;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3381673516011373;  // std dev = 0,481, 88,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360622;  // std dev = 6,99e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.30954468461317514;  // std dev = 0,465, 82,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783615;  // std dev = 5,96e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.22655905982561747;  // std dev = 0,468, 83,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1390859694450544;  // std dev = 0,479, 87,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 2,98e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09708094842972043;  // std dev = 0,481, 88,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109162;  // std dev = 4,71e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.1033739690163941;  // std dev = 4,320, 84,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.10282357368278527;  // std dev = 4,157, 81,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=56 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 4,01e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.053478440736966934;  // std dev = 4,320, 84,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */


Results
   AUC ROC   = 0.871431
   AUC PR    = 0.103954
   CLL	      = -0.303982
   Precision = 0.103954 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18833


Total learning time: 1.194 seconds
Total inference time: 2.466 seconds
AUC ROC: 0.871431


Results scoring model
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.326901
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total scoring time: 1.567 seconds
Parameter learned model CLL: -0.326901


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.96e-08, 57, 0], 'true,true': [0.489, 37, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 74, 0], 'true,true': [0.462, 25, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [6.99e-08, 85, 0], 'true,true': [0.481, 32, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.96e-08, 80, 0], 'true,true': [0.465, 26, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 74, 0], 'true,true': [0.468, 27, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.98e-08, 82, 0], 'true,true': [0.479, 31, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [4.71e-08, 85, 0], 'true,true': [0.481, 32, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 89, 0], 'true,true,true': [4.32, 28, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [4.01e-08, 85, 0], 'true,true,true,true': [4.157, 25, 56], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 81, 0], 'true,true,true': [4.32, 28, 56]}]]
[{'': [0.23956526766100097, 6.232831015439475e-17], 'true': [0.23956526766100097, nan]}, {'': [0.21338210638622176, -2.700542492331462e-17], 'true': [0.21338210638622176, nan]}, {'': [0.2314049586776852, 5.747036833353752e-17], 'true': [0.2314049586776852, nan]}, {'': [0.21653777513384953, 4.4408920985006264e-17], 'true': [0.21653777513384953, nan]}, {'': [0.21948033096240357, 0.0], 'true': [0.21948033096240357, nan]}, {'': [0.2293565860747787, 1.0831444142684454e-17], 'true': [0.2293565860747787, nan]}, {'': [0.23140495867768632, 2.6122894697062506e-17], 'true': [0.23140495867768632, nan]}, {'': [0.2222222222222221, -7.484649604214538e-18], 'true': [0.2222222222222221, nan], 'true,true': [0.2222222222222221, nan]}, {'': [0.2133821063862216, 1.8939098655370318e-17], 'true': [0.2133821063862216, nan], 'true,true': [0.2133821063862216, nan], 'true,true,true': [0.2133821063862216, nan]}, {'': [0.2222222222222221, -1.02798428206033e-17], 'true': [0.2222222222222221, nan], 'true,true': [0.2222222222222221, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 3,80e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.14185106490048766;  // std dev = 6,99e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1254446385283915;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.12544463852839155;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( actor(A) )
%   | | then return -0.1123163781936064;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.1953956744586337;  // std dev = 0,288, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1123163781936062;  // std dev = 7,74e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10078121961432863;  // std dev = 0,014, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.10159632948783619;  // std dev = 5,58e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09255503088250076;  // std dev = 0,007, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.09269127618926107;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08525891815267597;  // std dev = 5,27e-09, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.08518475138839679;  // std dev = 2,11e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0786163448152213;  // std dev = 0,006, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07877675473109165;  // std dev = 4,08e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07295347347811283;  // std dev = 0,007, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07324622576333704;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06835196608987106;  // std dev = 0,005, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.06842697784420267;  // std dev = 3,25e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06411566182530593;  // std dev = 0,005, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.13400703000801079;  // std dev = 5,16e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.06419184008202625;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.079058
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 1.906 seconds
Total inference time: 2.683 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064649
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total scoring time: 1.363 seconds
Refined model CLL: -0.064649


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.079058
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 6.029999999999999 seconds
Total inference time: 2.683 seconds
AUC ROC: 1.0
Total revision time: 6.029999999999999
Best scored revision CLL: -0.064649


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:44:35
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.103954, 'AUC ROC': 0.871431, 'Inference time': 2.466, 'CLL': -0.303982, 'Precision': [0.103954, 0.5], 'F1': 0.18833, 'Learning time': 1.194, 'Recall': 1.0}, 'Inference time': 2.683, 'CLL': -0.079058, 'Precision': [0.735892, 0.5], 'F1': 0.847854, 'Learning time': 6.029999999999999, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048768;  // std dev = 6,66e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else if ( female(A) )
%   | then return 0.822434649385226;  // std dev = 0,186, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.8581489350995117;  // std dev = 1,79e-07, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1254446385283913;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7229214324831331;  // std dev = 0,027, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.27909629789836415;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360618;  // std dev = 8,82e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5587597968977284;  // std dev = 0,033, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.22776977528964718;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.42004580917628775;  // std dev = 0,033, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.18911106493725166;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926082;  // std dev = 7,45e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32243584472955655;  // std dev = 0,029, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.15795244444395604;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0851847513883968;  // std dev = 6,50e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else if ( female(A) )
%   | then return 0.25987900300011185;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.23988763464067453;  // std dev = 0,071, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109157;  // std dev = 6,50e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else if ( female(A) )
%   | then return 0.19932478753911423;  // std dev = 0,071, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.19762961597043957;  // std dev = 0,069, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.1815618706076636;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.16668637851166881;  // std dev = 0,069, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   else return -0.07446174858741994;  // std dev = 0,131, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06834953530904103;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15618077660491372;  // std dev = 0,000418, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.23304194543633353;  // std dev = 0,000198, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641235080780345;  // std dev = 3,57e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13668449591360624;  // std dev = 0,000374, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.19400477661969814;  // std dev = 0,000133, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095232
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 2.002 seconds
Total inference time: 3.387 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:44:41
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 3.387, 'CLL': -0.095232, 'Precision': [0.735892, 0.5], 'F1': 0.847854, 'Learning time': 2.002, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8,16e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.994647
   AUC PR    = 0.735892
   CLL	      = -0.169006
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.08 seconds
Total inference time: 1.917 seconds
AUC ROC: 0.994647


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:44:44
{'AUC PR': 0.735892, 'AUC ROC': 0.994647, 'Inference time': 1.917, 'CLL': -0.169006, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 1.08, 'Recall': 0.0}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
0;true,false,true;haswordvenue(G, E).;false;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true,false,true;haswordvenue(G, E).;false;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true,false,true;haswordvenue(G, E).;false;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true,false,true;haswordvenue(G, E).;false;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true,false,true;haswordvenue(G, E).;false;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordvenue(I, G).;false;false
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;samebib(E, F), title(F, B).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true,false,true;author(G, F), title(G, A).;false;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true,false;haswordvenue(G, D).;false;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
9;true,false,true;author(G, F), title(G, B).;false;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5569441158224046;  // std dev = 0,459, 83,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,94e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4748906679015409;  // std dev = 0,459, 83,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839144;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.33480925285152036;  // std dev = 0,476, 89,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360622;  // std dev = 6,23e-08, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.28902769730131395;  // std dev = 0,466, 85,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783617;  // std dev = 5,58e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14654587811390435;  // std dev = 0,488, 95,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926101;  // std dev = 3,33e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1368082345921694;  // std dev = 0,481, 91,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0851847513883968;  // std dev = 5,37e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11698480523462398;  // std dev = 0,476, 89,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109165;  // std dev = 4,28e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.07370726734235304;  // std dev = 4,586, 91,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.11710444007721076;  // std dev = 4,180, 83,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=58 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 4,01e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.007137820283404728;  // std dev = 4,713, 94,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */


Results
   AUC ROC   = 0.86826
   AUC PR    = 0.102112
   CLL	      = -0.300803
   Precision = 0.102112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185302


Total learning time: 1.545 seconds
Total inference time: 4.189 seconds
AUC ROC: 0.86826


Results scoring model
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.298641
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total scoring time: 2.975 seconds
Parameter learned model CLL: -0.298641


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [8.94e-08, 100, 0], 'true,true': [0.459, 25, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 85, 0], 'true,true': [0.459, 25, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [6.23e-08, 78, 0], 'true,true': [0.476, 31, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.58e-08, 84, 0], 'true,true': [0.466, 27, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.33e-08, 92, 0], 'true,true': [0.488, 37, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.37e-08, 92, 0], 'true,true': [0.481, 33, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [4.28e-08, 79, 0], 'true,true': [0.476, 31, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 90, 0], 'true,true,true': [4.586, 33, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [4.01e-08, 85, 0], 'true,true,true,true': [4.18, 25, 58], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 91, 0], 'true,true,true': [4.713, 36, 58]}]]
[{'': [0.21048047612135246, 7.993605777301127e-17], 'true': [0.21048047612135246, nan]}, {'': [0.21048047612135165, -2.0898315757650005e-17], 'true': [0.21048047612135165, nan]}, {'': [0.2269915414720348, 4.981769982292369e-17], 'true': [0.2269915414720348, nan]}, {'': [0.21674740484429064, 3.700743415417188e-17], 'true': [0.21674740484429064, nan]}, {'': [0.23778393351800514, 1.206764157201257e-17], 'true': [0.23778393351800514, nan]}, {'': [0.23113150585678055, 3.137586808723268e-17], 'true': [0.23113150585678055, nan]}, {'': [0.22699154147203662, 2.3188202413057067e-17], 'true': [0.22699154147203662, nan]}, {'': [0.23113150585678086, -8.018277400070574e-18], 'true': [0.23113150585678086, nan], 'true,true': [0.23113150585678086, nan]}, {'': [0.2104804761213528, 1.8939098655370318e-17], 'true': [0.2104804761213528, nan], 'true,true': [0.2104804761213528, nan], 'true,true,true': [0.2104804761213528, nan]}, {'': [0.23630602082390215, -1.2810265668751807e-17], 'true': [0.23630602082390215, nan], 'true,true': [0.23630602082390215, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 3,16e-08, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.12544463852839138;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1123163781936062;  // std dev = 8,16e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583103;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(A) )
%   | | then return -0.10159632948783635;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.26189302493912087;  // std dev = 0,393, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.10159632948783619;  // std dev = 5,48e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09225578348880771;  // std dev = 0,012, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.09269127618926105;  // std dev = 2,36e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08404932994055363;  // std dev = 0,019, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.08518475138839682;  // std dev = 5,27e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.07889083296937428;  // std dev = 1,97e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109164;  // std dev = 4,71e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07253102875510026;  // std dev = 0,014, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.17709649774527733;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.07324622576333707;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367078;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(A) )
%   | | then return -0.06856556334291733;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.2852259375021684;  // std dev = 0,784, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420265;  // std dev = 4,21e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.061456514583779764;  // std dev = 0,036, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.13400703000801098;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.06419184008202626;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.075885
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 2.176 seconds
Total inference time: 3.561 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064516
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total scoring time: 2.646 seconds
Refined model CLL: -0.064516


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.075885
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 9.341999999999999 seconds
Total inference time: 3.561 seconds
AUC ROC: 1.0
Total revision time: 9.341999999999999
Best scored revision CLL: -0.064516


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:45:02
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.102112, 'AUC ROC': 0.86826, 'Inference time': 4.189, 'CLL': -0.300803, 'Precision': [0.102112, 0.5], 'F1': 0.185302, 'Learning time': 1.545, 'Recall': 1.0}, 'Inference time': 3.561, 'CLL': -0.075885, 'Precision': [0.736364, 0.5], 'F1': 0.848168, 'Learning time': 9.341999999999999, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8,69e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839127;  // std dev = 0,000, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360625;  // std dev = 7,30e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.3915580884760029;  // std dev = 0,113, 40,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   else return -0.10159632948783635;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3244336656668728;  // std dev = 0,021, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.14491959396749005;  // std dev = 0,005, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09269127618926094;  // std dev = 5,16e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0851847513883968;  // std dev = 6,32e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2577121574311515;  // std dev = 0,018, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12690421593349935;  // std dev = 0,003, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109162;  // std dev = 5,05e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.21155144297487796;  // std dev = 0,016, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11349624422556993;  // std dev = 0,002, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333707;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17841173348765244;  // std dev = 0,014, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10276851387354305;  // std dev = 0,002, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420264;  // std dev = 5,37e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15374135172545825;  // std dev = 0,012, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09367197665927941;  // std dev = 0,002, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13478561152576157;  // std dev = 0,011, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.0868712986009411;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06412160125237318;  // std dev = 0,007, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.073481
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 3.636 seconds
Total inference time: 2.595 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:45:08
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.595, 'CLL': -0.073481, 'Precision': [0.736364, 0.5], 'F1': 0.848168, 'Learning time': 3.636, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.14185106490048766;  // std dev = 8,43e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.167119
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.345 seconds
Total inference time: 1.988 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:45:12
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 1.988, 'CLL': -0.167119, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 1.345, 'Recall': 0.0}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
0;true,false,true;haswordvenue(G, E).;false;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true,false,true;haswordvenue(G, E).;false;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true,false,true;haswordvenue(G, E).;false;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true,false,true;haswordvenue(G, E).;false;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true,false,true;haswordvenue(G, E).;false;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordvenue(I, G).;false;false
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;samebib(E, F), title(F, B).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true,false,true;author(G, F), title(G, A).;false;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true,false;haswordvenue(G, D).;false;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
9;true,false,true;author(G, F), title(G, B).;false;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5273218674303357;  // std dev = 0,471, 266,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 1,15e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4932008553349566;  // std dev = 0,453, 250,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839197;  // std dev = 0,000, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3701828288967622;  // std dev = 0,465, 260,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936069;  // std dev = 0,000, 255,000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.312918688735348;  // std dev = 0,453, 250,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783659;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2418172434044397;  // std dev = 0,450, 248,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926044;  // std dev = 1,28e-07, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1405096723341692;  // std dev = 0,468, 263,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12160238264575708;  // std dev = 0,461, 257,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 3,94e-08, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.05391064618148447;  // std dev = 7,843, 272,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333688;  // std dev = 1,10e-07, 273,000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.050817640495552784;  // std dev = 7,732, 268,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=178 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420294;  // std dev = 0,000, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.09823600067429517;  // std dev = 7,015, 246,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202615;  // std dev = 6,83e-08, 265,000 (wgt'ed) examples reached here.  /* #neg=265 */


Results
   AUC ROC   = 0.861638
   AUC PR    = 0.064496
   CLL	      = -0.335939
   Precision = 0.064496 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121176


Total learning time: 2.828 seconds
Total inference time: 2.989 seconds
AUC ROC: 0.861638


Results scoring model
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.289381
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total scoring time: 1.716 seconds
Parameter learned model CLL: -0.289381


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.15e-07, 305, 0], 'true,true': [0.471, 88, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 285, 0], 'true,true': [0.453, 72, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 255, 0], 'true,true': [0.465, 82, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 252, 0], 'true,true': [0.453, 72, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.28e-07, 272, 0], 'true,true': [0.45, 70, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [9.88e-08, 282, 0], 'true,true': [0.468, 85, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.94e-08, 290, 0], 'true,true': [0.461, 79, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [1.1e-07, 273, 0], 'true,true,true': [7.843, 94, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 289, 0], 'true,true,true,true': [7.732, 90, 178], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [6.83e-08, 265, 0], 'true,true,true': [7.015, 68, 178]}]]
[{'': [0.22138051896659483, 4.3680905886891404e-17], 'true': [0.22138051896659483, nan]}, {'': [0.2050559999999964, -8.102680320071318e-17], 'true': [0.2050559999999964, nan]}, {'': [0.21591715976331807, -8.533478934373753e-17], 'true': [0.21591715976331807, nan]}, {'': [0.20505599999999857, -6.696583323135864e-17], 'true': [0.20505599999999857, nan]}, {'': [0.20258844953173613, 6.040919398695704e-17], 'true': [0.20258844953173613, nan]}, {'': [0.21873960878428125, 3.4645257506033254e-17], 'true': [0.21873960878428125, nan]}, {'': [0.21290254205211193, 5.359697360259376e-18], 'true': [0.21290254205211193, nan]}, {'': [0.22615700692041543, 4.3920910864291905e-17], 'true': [0.22615700692041543, nan], 'true,true': [0.22615700692041543, nan]}, {'': [0.22304522165292912, -4.763586680052575e-17], 'true': [0.22304522165292912, nan], 'true,true': [0.22304522165292912, nan], 'true,true,true': [0.22304522165292912, nan]}, {'': [0.20001321964439114, 1.759598756009682e-17], 'true': [0.20001321964439114, nan], 'true,true': [0.20001321964439114, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.14185106490048768;  // std dev = 6,32e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.14185106490048816;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.12544463852839194;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360636;  // std dev = 1,83e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.11231637819360696;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783626;  // std dev = 2,98e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.10159632948783662;  // std dev = 0,000, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.09269127618926042;  // std dev = 1,56e-07, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.08518475138839679;  // std dev = 2,36e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109177;  // std dev = 1,05e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.07877675473109141;  // std dev = 4,94e-08, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.07324622576333677;  // std dev = 1,20e-07, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.06842697784420286;  // std dev = 0,000, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.06419184008202612;  // std dev = 7,45e-08, 269,000 (wgt'ed) examples reached here.  /* #neg=269 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.011 seconds
Total inference time: 3.865 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.627 seconds
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.182 seconds
Total inference time: 3.865 seconds
AUC ROC: 1.0
Total revision time: 10.182
Best scored revision CLL: -0.065435


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:45:30
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.064496, 'AUC ROC': 0.861638, 'Inference time': 2.989, 'CLL': -0.335939, 'Precision': [0.064496, 0.5], 'F1': 0.121176, 'Learning time': 2.828, 'Recall': 1.0}, 'Inference time': 3.865, 'CLL': -0.063555, 'Precision': [1.0, 0.5], 'F1': 1.0, 'Learning time': 10.182, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.1418510649004884;  // std dev = 0,000, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.1254446385283919;  // std dev = 0,000, 313,000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360628;  // std dev = 4,34e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.11231637819360683;  // std dev = 0,000, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783628;  // std dev = 2,69e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.10159632948783642;  // std dev = 0,000, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926058;  // std dev = 5,58e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0851847513883968;  // std dev = 1,97e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.08518475138839678;  // std dev = 8,16e-08, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109176;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109146;  // std dev = 5,58e-08, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.07324622576333681;  // std dev = 1,08e-07, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06842697784420268;  // std dev = 1,83e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.06842697784420268;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.06419184008202625;  // std dev = 0,000, 314,000 (wgt'ed) examples reached here.  /* #neg=314 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.455 seconds
Total inference time: 2.466 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:45:36
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.466, 'CLL': -0.063555, 'Precision': [1.0, 0.5], 'F1': 1.0, 'Learning time': 3.455, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.14185106490048766;  // std dev = 6,66e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.1418510649004881;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.155326
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.025 seconds
Total inference time: 1.524 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:45:39
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 1.524, 'CLL': -0.155326, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 1.025, 'Recall': 0.0}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
0;true,false,true;haswordvenue(G, E).;false;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true,false,true;haswordvenue(G, E).;false;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true,false,true;haswordvenue(G, E).;false;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true,false,true;haswordvenue(G, E).;false;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true,false,true;haswordvenue(G, E).;false;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordvenue(I, G).;false;false
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;samebib(E, F), title(F, B).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true,false,true;author(G, F), title(G, A).;false;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true,false;haswordvenue(G, D).;false;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
9;true,false,true;author(G, F), title(G, B).;false;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4581489350995129;  // std dev = 0,490, 75,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.37720976799263334;  // std dev = 0,493, 77,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839158;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3240501070973905;  // std dev = 0,490, 75,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360624;  // std dev = 5,77e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2629951957496518;  // std dev = 0,488, 74,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783623;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.201401263442782;  // std dev = 0,488, 74,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.21557687028091224;  // std dev = 0,470, 67,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 1,67e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.059775990548273344;  // std dev = 0,495, 79,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 2,58e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.10903357597938192;  // std dev = 4,059, 71,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.09099640120591884;  // std dev = 4,009, 70,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=45 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420268;  // std dev = 1,97e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.050755969068927334;  // std dev = 4,108, 72,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */


Results
   AUC ROC   = 0.870352
   AUC PR    = 0.095252
   CLL	      = -0.282089
   Precision = 0.095252 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173935


Total learning time: 1.055 seconds
Total inference time: 3.27 seconds
AUC ROC: 0.870352


Results scoring model
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.306959
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total scoring time: 1.457 seconds
Parameter learned model CLL: -0.306959


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.96e-08, 58, 0], 'true,true': [0.49, 30, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 53, 0], 'true,true': [0.493, 32, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.77e-08, 72, 0], 'true,true': [0.49, 30, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.8e-08, 55, 0], 'true,true': [0.488, 29, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 72, 0], 'true,true': [0.488, 29, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.67e-08, 66, 0], 'true,true': [0.47, 22, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.58e-08, 61, 0], 'true,true': [0.495, 34, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [7.45e-09, 56, 0], 'true,true,true': [4.059, 26, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [1.97e-08, 58, 0], 'true,true,true,true': [4.009, 25, 45], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 58, 0], 'true,true,true': [4.108, 27, 45]}]]
[{'': [0.2400000000000003, 6.125368411725002e-17], 'true': [0.2400000000000003, nan]}, {'': [0.242874009107775, -3.561092720495785e-17], 'true': [0.242874009107775, nan]}, {'': [0.23999999999999985, 4.625929269271486e-17], 'true': [0.23999999999999985, nan]}, {'': [0.23831263696128469, 2.62416351275037e-17], 'true': [0.23831263696128469, nan]}, {'': [0.23831263696128505, 0.0], 'true': [0.23831263696128505, nan]}, {'': [0.22053909556694168, 4.20539024479226e-18], 'true': [0.22053909556694168, nan]}, {'': [0.24515302034930272, 1.0920226471722851e-17], 'true': [0.24515302034930272, nan]}, {'': [0.2320968061892479, 9.912705577010326e-19], 'true': [0.2320968061892479, nan], 'true,true': [0.2320968061892479, nan]}, {'': [0.22959183673469405, 6.699621700324221e-18], 'true': [0.22959183673469405, nan], 'true,true': [0.22959183673469405, nan], 'true,true,true': [0.22959183673469405, nan]}, {'': [0.2343749999999998, -3.3498108501621104e-18], 'true': [0.2343749999999998, nan], 'true,true': [0.2343749999999998, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839136;  // std dev = 1,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1254446385283916;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.13077844403027908;  // std dev = 0,076, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.11231637819360626;  // std dev = 4,71e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10039193881784401;  // std dev = 0,004, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783621;  // std dev = 4,08e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09185607502524573;  // std dev = 0,004, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926107;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08413368865337433;  // std dev = 0,003, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07793501523710869;  // std dev = 0,003, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.07877675473109165;  // std dev = 4,15e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07257792421907514;  // std dev = 0,003, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.07324622576333704;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06779543039639793;  // std dev = 0,003, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.06842697784420268;  // std dev = 1,97e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06370655535895978;  // std dev = 0,003, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06419184008202625;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.077608
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 2.056 seconds
Total inference time: 2.35 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066778
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total scoring time: 1.29 seconds
Refined model CLL: -0.066778


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.077608
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 5.858 seconds
Total inference time: 2.35 seconds
AUC ROC: 1.0
Total revision time: 5.858
Best scored revision CLL: -0.066778


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:45:51
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.095252, 'AUC ROC': 0.870352, 'Inference time': 3.27, 'CLL': -0.282089, 'Precision': [0.095252, 0.5], 'F1': 0.173935, 'Learning time': 1.055, 'Recall': 1.0}, 'Inference time': 2.35, 'CLL': -0.077608, 'Precision': [0.743929, 0.5], 'F1': 0.853165, 'Learning time': 5.858, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 7,60e-08, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.11231637819360624;  // std dev = 6,66e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783617;  // std dev = 5,77e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.28626158688103215;  // std dev = 0,114, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.30890032935016637;  // std dev = 0,069, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else return -0.09269127618926107;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2584872570875116;  // std dev = 0,013, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12214119210396035;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839682;  // std dev = 4,71e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21209741442328994;  // std dev = 0,011, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10854225553990096;  // std dev = 0,002, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109164;  // std dev = 5,05e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17881112888556586;  // std dev = 0,010, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09925885990579794;  // std dev = 0,002, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07324622576333707;  // std dev = 0,000, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1540436450681924;  // std dev = 0,009, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.0905659097127373;  // std dev = 0,002, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420268;  // std dev = 3,25e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202626;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1350211496164739;  // std dev = 0,008, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.08353097762840762;  // std dev = 0,002, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.070378
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.048 seconds
Total inference time: 2.902 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:45:56
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.902, 'CLL': -0.070378, 'Precision': [1.0, 0.5], 'F1': 1.0, 'Learning time': 2.048, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8,69e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.995302
   AUC PR    = 0.743929
   CLL	      = -0.16604
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.792 seconds
Total inference time: 1.416 seconds
AUC ROC: 0.995302


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:45:59
{'AUC PR': 0.743929, 'AUC ROC': 0.995302, 'Inference time': 1.416, 'CLL': -0.16604, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.792, 'Recall': 0.0}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
0;true,false,true;haswordvenue(G, E).;false;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true,false,true;haswordvenue(G, E).;false;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true,false,true;haswordvenue(G, E).;false;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true,false,true;haswordvenue(G, E).;false;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true,false,true;haswordvenue(G, E).;false;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordvenue(I, G).;false;false
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;samebib(E, F), title(F, B).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true,false,true;author(G, F), title(G, A).;false;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true,false;haswordvenue(G, D).;false;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
9;true,false,true;author(G, F), title(G, B).;false;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4581489350995129;  // std dev = 0,490, 75,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 6,99e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3552941835770489;  // std dev = 0,496, 80,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839155;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.41022548757823596;  // std dev = 0,466, 66,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360626;  // std dev = 5,05e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.30198752982442745;  // std dev = 0,473, 68,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783619;  // std dev = 4,71e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.22992371072432666;  // std dev = 0,473, 68,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14490602956854223;  // std dev = 0,482, 71,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.06700491122619058;  // std dev = 0,491, 76,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109169;  // std dev = 3,33e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.17251063202453445;  // std dev = 3,586, 63,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return -0.021690867778721656;  // std dev = 4,437, 80,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=45 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420271;  // std dev = 7,45e-09, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.254420867733759;  // std dev = 2,739, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */


Results
   AUC ROC   = 0.868927
   AUC PR    = 0.095576
   CLL	      = -0.31699
   Precision = 0.095576 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174476


Total learning time: 1.431 seconds
Total inference time: 3.109 seconds
AUC ROC: 0.868927


Results scoring model
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.325323
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total scoring time: 1.257 seconds
Parameter learned model CLL: -0.325323


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [6.99e-08, 72, 0], 'true,true': [0.49, 30, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 70, 0], 'true,true': [0.496, 35, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.05e-08, 65, 0], 'true,true': [0.466, 21, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [4.71e-08, 64, 0], 'true,true': [0.473, 23, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 61, 0], 'true,true': [0.473, 23, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.83e-08, 59, 0], 'true,true': [0.482, 26, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.33e-08, 68, 0], 'true,true': [0.491, 31, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [7.45e-09, 56, 0], 'true,true,true': [3.586, 18, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [7.45e-09, 42, 0], 'true,true,true,true': [4.437, 35, 45], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 61, 0], 'true,true,true': [2.739, 9, 45]}]]
[{'': [0.2400000000000003, 6.78469626159818e-17], 'true': [0.2400000000000003, nan]}, {'': [0.2460937499999997, -3.172065784643304e-17], 'true': [0.2460937499999997, nan]}, {'': [0.21694214876033083, 3.928481471750554e-17], 'true': [0.21694214876033083, nan]}, {'': [0.22383217993079563, 3.469446951953614e-17], 'true': [0.22383217993079563, nan]}, {'': [0.22383217993079582, -1.820037745287142e-18], 'true': [0.22383217993079582, nan]}, {'': [0.23209680618924808, 5.645201820127915e-18], 'true': [0.23209680618924808, nan]}, {'': [0.2415166204986148, 1.6326809185664067e-17], 'true': [0.2415166204986148, nan]}, {'': [0.204081632653061, 9.912705577010326e-19], 'true': [0.204081632653061, nan], 'true,true': [0.204081632653061, nan]}, {'': [0.24609375000000017, 1.32169407693471e-18], 'true': [0.24609375000000017, nan], 'true,true': [0.24609375000000017, nan], 'true,true,true': [0.24609375000000017, nan]}, {'': [0.13888888888888892, -2.7300566179307128e-18], 'true': [0.13888888888888892, nan], 'true,true': [0.13888888888888892, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.14185106490048766;  // std dev = 5,77e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1254446385283916;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360628;  // std dev = 4,34e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783616;  // std dev = 5,27e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 9,13e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926107;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109176;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07877675473109172;  // std dev = 2,58e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06842697784420268;  // std dev = 2,24e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( actor(A) )
%   | | then return -0.06419184008202622;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.26464212255951686;  // std dev = 0,694, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06419184008202625;  // std dev = 0,000, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.079911
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.686 seconds
Total inference time: 3.081 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065927
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 1.336 seconds
Refined model CLL: -0.065927


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.079911
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 5.71 seconds
Total inference time: 3.081 seconds
AUC ROC: 1.0
Total revision time: 5.71
Best scored revision CLL: -0.065927


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:46:11
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.095576, 'AUC ROC': 0.868927, 'Inference time': 3.109, 'CLL': -0.31699, 'Precision': [0.095576, 0.5], 'F1': 0.174476, 'Learning time': 1.431, 'Recall': 1.0}, 'Inference time': 3.081, 'CLL': -0.079911, 'Precision': [0.742291, 0.5], 'F1': 0.852086, 'Learning time': 5.71, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 7,88e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else if ( female(A) )
%   | then return 0.8581489350995121;  // std dev = 8,43e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.7748156017661786;  // std dev = 0,276, 24,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839152;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 5,96e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.6925029655650506;  // std dev = 0,204, 23,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360622;  // std dev = 6,32e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.4990783339884503;  // std dev = 0,276, 24,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4375496727727087;  // std dev = 0,137, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.5532129097492244;  // std dev = 0,049, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1073094097193219;  // std dev = 0,437, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09221192515461761;  // std dev = 2,79e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3344899841155297;  // std dev = 0,124, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.43499505908665675;  // std dev = 0,035, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08477778019552655;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.26464738758376705;  // std dev = 0,109, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.3235968637303255;  // std dev = 0,036, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21648569763088152;  // std dev = 0,095, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.2604075981705967;  // std dev = 0,035, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08130780776530257;  // std dev = 0,252, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07274833421422644;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else if ( female(A) )
%   | then return 0.1534873047363762;  // std dev = 0,079, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.1947290587912964;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15749026320190132;  // std dev = 0,056, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.23332772461708196;  // std dev = 0,021, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(A) )
%   | then return -0.06799098663845263;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( female(B) )
%   | | then return -0.0679909866384525;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.2732862823259223;  // std dev = 0,503, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06368236534465846;  // std dev = 0,011, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13771088962284925;  // std dev = 0,050, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.19589054942224776;  // std dev = 0,017, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.087034
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 2.297 seconds
Total inference time: 2.69 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:46:17
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.69, 'CLL': -0.087034, 'Precision': [0.742291, 0.5], 'F1': 0.852086, 'Learning time': 2.297, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.8581489350995121;  // std dev = 8,43e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.7748156017661786;  // std dev = 0,276, 24,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   else return -0.14185106490048766;  // std dev = 7,15e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */


Results
   AUC ROC   = 0.959529
   AUC PR    = 0.254744
   CLL	      = -0.179944
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.795 seconds
Total inference time: 2.298 seconds
AUC ROC: 0.959529


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:46:20
{'AUC PR': 0.254744, 'AUC ROC': 0.959529, 'Inference time': 2.298, 'CLL': -0.179944, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.795, 'Recall': 0.0}


