Starting experiment #3 for 54_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 698
Source train neg examples: 27996

WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5328801178952072;  // std dev = 0,468, 372,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.10425707993808181;  // std dev = 3,799, 399,000 (wgt'ed) examples reached here.  /* #neg=384 #pos=15 */
%   | | | else return 0.1914822684328457;  // std dev = 2,582, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04925847230789533;  // std dev = 4,763, 270,000 (wgt'ed) examples reached here.  /* #neg=245 #pos=25 */
%   | | | else return 0.2958556605680853;  // std dev = 14,941, 907,000 (wgt'ed) examples reached here.  /* #neg=510 #pos=397 */
%   else return -0.1418510649004878;  // std dev = 0,000, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.48928886861513077;  // std dev = 0,454, 354,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.09145947625070619;  // std dev = 3,798, 393,000 (wgt'ed) examples reached here.  /* #neg=378 #pos=15 */
%   | | | else return 0.14570549123154838;  // std dev = 2,622, 32,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04635424959623565;  // std dev = 4,771, 279,000 (wgt'ed) examples reached here.  /* #neg=254 #pos=25 */
%   | | | else return 0.25018307126704104;  // std dev = 15,017, 919,000 (wgt'ed) examples reached here.  /* #neg=522 #pos=397 */
%   else return -0.12544463852839108;  // std dev = 7,88e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3691361652490738;  // std dev = 0,465, 367,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.08252467735467964;  // std dev = 3,800, 404,000 (wgt'ed) examples reached here.  /* #neg=389 #pos=15 */
%   | | | else return 0.08223269309545064;  // std dev = 2,701, 37,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04163786243092534;  // std dev = 4,772, 281,000 (wgt'ed) examples reached here.  /* #neg=256 #pos=25 */
%   | | | else return 0.21909593347016043;  // std dev = 14,896, 900,000 (wgt'ed) examples reached here.  /* #neg=503 #pos=397 */
%   else return -0.1123163781936062;  // std dev = 9,66e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(A, D) )
%   | | then if ( author(F, E), title(F, A) )
%   | | | then return 0.2436320295470762;  // std dev = 1,793, 14,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.29418462881027424;  // std dev = 8,614, 349,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=242 */
%   | | else if ( haswordvenue(G, D) )
%   | | | then return -0.07155363941017022;  // std dev = 3,775, 268,000 (wgt'ed) examples reached here.  /* #neg=253 #pos=15 */
%   | | | else return 0.2769938812084818;  // std dev = 2,438, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | else if ( haswordtitle(A, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.06775145454193184;  // std dev = 3,788, 345,000 (wgt'ed) examples reached here.  /* #neg=330 #pos=15 */
%   | | | else return 0.0768618397251793;  // std dev = 2,687, 36,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | else return 0.1834248334852362;  // std dev = 0,497, 891,000 (wgt'ed) examples reached here.  /* #neg=494 #pos=397 */
%   else return -0.1015963294878364;  // std dev = 0,000, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.2282510865530148;  // std dev = 0,459, 359,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.06582197280531207;  // std dev = 3,798, 382,000 (wgt'ed) examples reached here.  /* #neg=367 #pos=15 */
%   | | | else return 0.0952761268793603;  // std dev = 2,619, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.02716313250987793;  // std dev = 4,687, 268,000 (wgt'ed) examples reached here.  /* #neg=243 #pos=25 */
%   | | | else return 0.1183245433452121;  // std dev = 15,208, 951,000 (wgt'ed) examples reached here.  /* #neg=554 #pos=397 */
%   else return -0.09269127618926072;  // std dev = 8,43e-08, 150,000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.1771475874010344;  // std dev = 0,456, 356,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.05850001890972441;  // std dev = 3,796, 368,000 (wgt'ed) examples reached here.  /* #neg=353 #pos=15 */
%   | | | else return 0.04574748296685734;  // std dev = 2,682, 37,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else return 0.06590676693267529;  // std dev = 0,457, 1.227,000 (wgt'ed) examples reached here.  /* #neg=805 #pos=422 */
%   else return -0.0851847513883968;  // std dev = 6,50e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.13517840680132148;  // std dev = 0,455, 355,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=251 */
%   | | else if ( haswordvenue(G, D) )
%   | | | then return -0.05879448533392703;  // std dev = 3,806, 428,000 (wgt'ed) examples reached here.  /* #neg=413 #pos=15 */
%   | | | else return 0.03838654511145052;  // std dev = 2,679, 37,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | else return 0.05702535262438551;  // std dev = 0,461, 1.199,000 (wgt'ed) examples reached here.  /* #neg=777 #pos=422 */
%   else return -0.07877675473109153;  // std dev = 7,96e-08, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.09072679613890723;  // std dev = 0,460, 361,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.0490774911109066;  // std dev = 3,797, 375,000 (wgt'ed) examples reached here.  /* #neg=360 #pos=15 */
%   | | | else return 0.08589061680297091;  // std dev = 2,571, 31,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.03611344002657303;  // std dev = 4,679, 263,000 (wgt'ed) examples reached here.  /* #neg=238 #pos=25 */
%   | | | else return 0.07717192613240918;  // std dev = 15,054, 925,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=397 */
%   else return -0.07324622576333707;  // std dev = 4,94e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.0890750648419609;  // std dev = 0,451, 351,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.050701043301009156;  // std dev = 3,808, 433,000 (wgt'ed) examples reached here.  /* #neg=418 #pos=15 */
%   | | | else return 0.007519095874831162;  // std dev = 2,694, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.03362203518018132;  // std dev = 4,684, 268,000 (wgt'ed) examples reached here.  /* #neg=243 #pos=25 */
%   | | | else return 0.049847051893893886;  // std dev = 15,179, 946,000 (wgt'ed) examples reached here.  /* #neg=549 #pos=397 */
%   else return -0.06842697784420265;  // std dev = 6,32e-08, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.36204752372307525;  // std dev = 0,015, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.64699782679683;  // std dev = 2,98e-08, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.07772716925680348;  // std dev = 0,447, 334,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), title(I, A) )
%   | | | then return 0.0769133852067018;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return -0.03872088669422148;  // std dev = 4,335, 373,000 (wgt'ed) examples reached here.  /* #neg=351 #pos=22 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.02584188538359261;  // std dev = 4,676, 256,000 (wgt'ed) examples reached here.  /* #neg=231 #pos=25 */
%   | | | else return 0.06157528856231953;  // std dev = 14,869, 896,000 (wgt'ed) examples reached here.  /* #neg=499 #pos=397 */
%   else return -0.06419184008202626;  // std dev = 3,94e-08, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
0;true,false,true;haswordvenue(G, E).;false;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true,false,true;haswordvenue(G, E).;false;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true,false,true;haswordvenue(G, E).;false;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true;haswordtitle(A, D).;true;true
3;true,true,true;author(F, E), title(F, A).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true;haswordauthor(D, C).;false;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true,false;haswordvenue(G, D).;false;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
6;true,true;haswordauthor(F, C).;false;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true,false,true;haswordvenue(G, E).;false;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;true,false,true;haswordvenue(G, E).;false;false
8;true;haswordauthor(D, C).;false;true
8;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,false,true;author(I, H), title(I, A).;false;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,true;author(E, D), title(E, B).;true;false
9;true,true,true;samebib(E, F), title(F, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.48736241824558046;  // std dev = 0,483, 89,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 6,66e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.44677771345341816;  // std dev = 0,474, 85,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839147;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2872168264058505;  // std dev = 0,493, 96,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360622;  // std dev = 6,50e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.299578639971936;  // std dev = 4,371, 85,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=56 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783617;  // std dev = 5,77e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16506151554803378;  // std dev = 0,491, 94,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1576833769605353;  // std dev = 0,483, 89,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 3,16e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.23574827997519548;  // std dev = 0,435, 75,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109166;  // std dev = 3,87e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07427198704767143;  // std dev = 0,479, 87,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08718408078506351;  // std dev = 0,468, 83,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 3,57e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11880287745803807;  // std dev = 0,445, 77,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */


Results
   AUC ROC   = 0.871431
   AUC PR    = 0.103954
   CLL	      = -0.310662
   Precision = 0.103954 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18833


Total learning time: 1.201 seconds
Total inference time: 2.183 seconds
AUC ROC: 0.871431


Results scoring model
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.334658
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total scoring time: 1.629 seconds
Parameter learned model CLL: -0.334658


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [6.66e-08, 66, 0], 'true,true': [0.483, 33, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 79, 0], 'true,true': [0.474, 29, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [6.5e-08, 81, 0], 'true,true': [0.493, 40, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)', 'true,true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [5.77e-08, 83, 0], 'true,true,true,true': [4.371, 29, 56], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 81, 0], 'true,true': [0.491, 38, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.16e-08, 85, 0], 'true,true': [0.483, 33, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.87e-08, 73, 0], 'true,true': [0.435, 19, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 66, 0], 'true,true': [0.479, 31, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.57e-08, 80, 0], 'true,true': [0.468, 27, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 83, 0], 'true,true': [0.445, 21, 56]}]]
[{'': [0.23330387577326067, 6.728624391667616e-17], 'true': [0.23330387577326067, nan]}, {'': [0.22477508650519173, -2.5296220814244072e-17], 'true': [0.22477508650519173, nan]}, {'': [0.2430555555555548, 5.208453695772339e-17], 'true': [0.2430555555555548, nan]}, {'': [0.22477508650519126, 4.01285430587406e-17], 'true': [0.22477508650519126, nan], 'true,true': [0.22477508650519126, nan], 'true,true,true': [0.22477508650519126, nan]}, {'': [0.24083295608872785, 0.0], 'true': [0.24083295608872785, nan]}, {'': [0.23330387577326114, 1.1755302613678128e-17], 'true': [0.23330387577326114, nan]}, {'': [0.18915555555555613, 2.0531521688273442e-17], 'true': [0.18915555555555613, nan]}, {'': [0.22935658607477824, -1.6821560979169039e-18], 'true': [0.22935658607477824, nan]}, {'': [0.21948033096240405, 1.5959455978986624e-17], 'true': [0.21948033096240405, nan]}, {'': [0.19834710743801634, -1.070094481566416e-17], 'true': [0.19834710743801634, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 3,80e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.14185106490048766;  // std dev = 7,74e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839144;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.12544463852839147;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.11231637819360621;  // std dev = 7,30e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.10159632948783613;  // std dev = 5,96e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 9,13e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.09269127618926108;  // std dev = 1,49e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839679;  // std dev = 2,24e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.08518475138839683;  // std dev = 4,21e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109179;  // std dev = 5,27e-09, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07877675473109164;  // std dev = 4,47e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,05e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07324622576333704;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.13332940818271324;  // std dev = 0,746, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.06842697784420267;  // std dev = 3,87e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06303371338619174;  // std dev = 0,010, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.13400703000801079;  // std dev = 5,16e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.06419184008202626;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.08274
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 2.28 seconds
Total inference time: 3.185 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064674
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total scoring time: 1.435 seconds
Refined model CLL: -0.064674


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.08274
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 6.545 seconds
Total inference time: 3.185 seconds
AUC ROC: 1.0
Total revision time: 6.545
Best scored revision CLL: -0.064674


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:34:11
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.103954, 'AUC ROC': 0.871431, 'Inference time': 2.183, 'CLL': -0.310662, 'Precision': [0.103954, 0.5], 'F1': 0.18833, 'Learning time': 1.201, 'Recall': 1.0}, 'Inference time': 3.185, 'CLL': -0.08274, 'Precision': [0.735892, 0.5], 'F1': 0.847854, 'Learning time': 6.545, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839136;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else if ( female(A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.6649625702277708;  // std dev = 0,208, 31,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1123163781936062;  // std dev = 8,16e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5623144202428033;  // std dev = 0,050, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.2204398266984711;  // std dev = 0,008, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1015963294878363;  // std dev = 1,49e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.4227119259348037;  // std dev = 0,050, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.1828243333304039;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926096;  // std dev = 4,71e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( female(A) )
%   | then return 0.3008393488050777;  // std dev = 0,090, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.3137742476441966;  // std dev = 0,087, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 5,87e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.260792347395679;  // std dev = 0,030, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.21002039827003116;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109157;  // std dev = 6,50e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.21372332394258525;  // std dev = 0,026, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.17529479394717307;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0732462257633371;  // std dev = 0,000, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else if ( female(A) )
%   | then return 0.165040873509051;  // std dev = 0,061, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.17193249281151643;  // std dev = 0,059, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420265;  // std dev = 4,41e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( female(A) )
%   | then return 0.15406804269485616;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.14766051282552348;  // std dev = 0,059, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13756299505292643;  // std dev = 0,018, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.19708837686296465;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.0652908123753331;  // std dev = 0,128, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.088691
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 2.346 seconds
Total inference time: 2.122 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:34:15
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.122, 'CLL': -0.088691, 'Precision': [0.735892, 0.5], 'F1': 0.847854, 'Learning time': 2.346, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else if ( female(A) )
%   | then return 0.822434649385226;  // std dev = 0,186, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.8248156017661784;  // std dev = 0,180, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */


Results
   AUC ROC   = 0.932197
   AUC PR    = 0.175943
   CLL	      = -0.189517
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.863 seconds
Total inference time: 1.264 seconds
AUC ROC: 0.932197


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:34:18
{'AUC PR': 0.175943, 'AUC ROC': 0.932197, 'Inference time': 1.264, 'CLL': -0.189517, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.863, 'Recall': 0.0}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
0;true,false,true;haswordvenue(G, E).;false;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true,false,true;haswordvenue(G, E).;false;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true,false,true;haswordvenue(G, E).;false;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true;haswordtitle(A, D).;true;true
3;true,true,true;author(F, E), title(F, A).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true;haswordauthor(D, C).;false;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true,false;haswordvenue(G, D).;false;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
6;true,true;haswordauthor(F, C).;false;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true,false,true;haswordvenue(G, E).;false;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;true,false,true;haswordvenue(G, E).;false;false
8;true;haswordauthor(D, C).;false;true
8;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,false,true;author(I, H), title(I, A).;false;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,true;author(E, D), title(E, B).;true;false
9;true,true,true;samebib(E, F), title(F, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.49551157246215044;  // std dev = 0,481, 91,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 7,60e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.42395204625297495;  // std dev = 0,481, 91,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283914;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3442959975047697;  // std dev = 0,481, 91,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360618;  // std dev = 8,43e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.24146371837783168;  // std dev = 4,753, 95,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=58 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878362;  // std dev = 5,27e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.27196031618702005;  // std dev = 0,459, 83,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926108;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1573892331195541;  // std dev = 0,476, 89,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12549836917230806;  // std dev = 0,474, 88,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109165;  // std dev = 4,28e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.052367469288920054;  // std dev = 0,486, 94,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.03954086288477539;  // std dev = 0,486, 94,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 3,07e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12021953244127141;  // std dev = 0,455, 82,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */


Results
   AUC ROC   = 0.86826
   AUC PR    = 0.102112
   CLL	      = -0.303462
   Precision = 0.102112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185302


Total learning time: 1.156 seconds
Total inference time: 2.602 seconds
AUC ROC: 0.86826


Results scoring model
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.301427
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total scoring time: 1.497 seconds
Parameter learned model CLL: -0.301427


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.6e-08, 80, 0], 'true,true': [0.481, 33, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 90, 0], 'true,true': [0.481, 33, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [8.43e-08, 107, 0], 'true,true': [0.481, 33, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)', 'true,true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [5.27e-08, 88, 0], 'true,true,true,true': [4.753, 37, 58], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 86, 0], 'true,true': [0.459, 25, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.58e-08, 98, 0], 'true,true': [0.476, 31, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [4.28e-08, 79, 0], 'true,true': [0.474, 30, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 87, 0], 'true,true': [0.486, 36, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.07e-08, 70, 0], 'true,true': [0.486, 36, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 74, 0], 'true,true': [0.455, 24, 58]}]]
[{'': [0.2311315058567802, 7.216449660063518e-17], 'true': [0.2311315058567802, nan]}, {'': [0.23113150585678266, -1.7270135938613546e-17], 'true': [0.23113150585678266, nan]}, {'': [0.2311315058567818, 6.640586315514955e-17], 'true': [0.2311315058567818, nan]}, {'': [0.23778393351800542, 3.154042683594195e-17], 'true': [0.23778393351800542, nan], 'true,true': [0.23778393351800542, nan], 'true,true,true': [0.23778393351800542, nan]}, {'': [0.2104804761213526, 0.0], 'true': [0.2104804761213526, nan]}, {'': [0.2269915414720365, 3.172065784643304e-17], 'true': [0.2269915414720365, nan]}, {'': [0.22469008264462803, 2.3188202413057067e-17], 'true': [0.22469008264462803, nan]}, {'': [0.23630602082390217, -7.656710514656252e-18], 'true': [0.23630602082390217, nan]}, {'': [0.2363060208239019, 1.3481279584734044e-17], 'true': [0.2363060208239019, nan]}, {'': [0.2070196311719215, -7.50150692314295e-18], 'true': [0.2070196311719215, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.14185106490048766;  // std dev = 7,30e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.1254446385283914;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(A) )
%   | | then return -0.1123163781936064;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.22308877321364282;  // std dev = 0,271, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1123163781936062;  // std dev = 8,16e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10123803771370474;  // std dev = 0,009, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.4175135841583103;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.10159632948783617;  // std dev = 5,58e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09210709165757691;  // std dev = 0,012, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.09269127618926108;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08425804023064444;  // std dev = 0,015, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.08518475138839682;  // std dev = 5,05e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(A) )
%   | | then return -0.07891251033972706;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.29619858536580734;  // std dev = 0,616, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109158;  // std dev = 6,23e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0727573755615089;  // std dev = 0,019, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.17709649774527733;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.07324622576333707;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367078;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.06856877253989604;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.06842697784420267;  // std dev = 3,33e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06431693092765099;  // std dev = 7,45e-09, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.13400703000801098;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.06419184008202626;  // std dev = 0,000, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074706
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 1.706 seconds
Total inference time: 2.615 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064376
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total scoring time: 1.597 seconds
Refined model CLL: -0.064376


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074706
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 5.9559999999999995 seconds
Total inference time: 2.615 seconds
AUC ROC: 1.0
Total revision time: 5.9559999999999995
Best scored revision CLL: -0.064376


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:34:30
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.102112, 'AUC ROC': 0.86826, 'Inference time': 2.602, 'CLL': -0.303462, 'Precision': [0.102112, 0.5], 'F1': 0.185302, 'Learning time': 1.156, 'Recall': 1.0}, 'Inference time': 2.615, 'CLL': -0.074706, 'Precision': [0.736364, 0.5], 'F1': 0.848168, 'Learning time': 5.9559999999999995, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048785;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.12544463852839108;  // std dev = 8,43e-08, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360621;  // std dev = 8,30e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583103;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10373027511212791;  // std dev = 0,272, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09485976171981646;  // std dev = 0,257, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08485006803203916;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07848885999892545;  // std dev = 3,39e-05, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07299682480035923;  // std dev = 0,000, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527733;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0682086280918215;  // std dev = 1,83e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367078;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801098;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A) )
%   | then return -0.06399915498381865;  // std dev = 3,65e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.1602936743131425;  // std dev = 0,334, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06399114638292734;  // std dev = 4,39e-05, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068747
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.146 seconds
Total inference time: 2.437 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:34:34
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.437, 'CLL': -0.068747, 'Precision': [1.0, 0.5], 'F1': 1.0, 'Learning time': 2.146, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.1418510649004877;  // std dev = 5,16e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.167119
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.729 seconds
Total inference time: 1.482 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:34:37
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 1.482, 'CLL': -0.167119, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.729, 'Recall': 0.0}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
0;true,false,true;haswordvenue(G, E).;false;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true,false,true;haswordvenue(G, E).;false;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true,false,true;haswordvenue(G, E).;false;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true;haswordtitle(A, D).;true;true
3;true,true,true;author(F, E), title(F, A).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true;haswordauthor(D, C).;false;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true,false;haswordvenue(G, D).;false;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
6;true,true;haswordauthor(F, C).;false;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true,false,true;haswordvenue(G, E).;false;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;true,false,true;haswordvenue(G, E).;false;false
8;true;haswordauthor(D, C).;false;true
8;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,false,true;author(I, H), title(I, A).;false;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,true;author(E, D), title(E, B).;true;false
9;true,true,true;samebib(E, F), title(F, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5534614350995087;  // std dev = 0,460, 256,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048818;  // std dev = 0,000, 255,000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4458730274300232;  // std dev = 0,471, 266,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839197;  // std dev = 0,000, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3992801746565795;  // std dev = 0,454, 251,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360688;  // std dev = 0,000, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.27840977583891496;  // std dev = 7,554, 262,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=178 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.22874442595146804;  // std dev = 0,459, 255,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,43e-07, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.20011302580918539;  // std dev = 0,446, 245,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.10092632955691588;  // std dev = 0,468, 263,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 5,58e-08, 271,000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08167003980425099;  // std dev = 0,466, 261,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333688;  // std dev = 1,10e-07, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.059641435245366796;  // std dev = 0,467, 262,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420297;  // std dev = 0,000, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.05091615460745768;  // std dev = 0,465, 260,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202615;  // std dev = 6,66e-08, 264,000 (wgt'ed) examples reached here.  /* #neg=264 */


Results
   AUC ROC   = 0.861638
   AUC PR    = 0.064496
   CLL	      = -0.333999
   Precision = 0.064496 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121176


Total learning time: 1.959 seconds
Total inference time: 2.699 seconds
AUC ROC: 0.861638


Results scoring model
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.287992
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total scoring time: 1.49 seconds
Parameter learned model CLL: -0.287992


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 255, 0], 'true,true': [0.46, 78, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 285, 0], 'true,true': [0.471, 88, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 257, 0], 'true,true': [0.454, 73, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)', 'true,true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 301, 0], 'true,true,true,true': [7.554, 84, 178], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.43e-07, 287, 0], 'true,true': [0.459, 77, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [9.88e-08, 278, 0], 'true,true': [0.446, 67, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.58e-08, 271, 0], 'true,true': [0.468, 85, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.1e-07, 272, 0], 'true,true': [0.466, 83, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 295, 0], 'true,true': [0.467, 84, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.66e-08, 264, 0], 'true,true': [0.465, 82, 178]}]]
[{'': [0.2118530273437555, -1.0797463141452503e-16], 'true': [0.2118530273437555, nan]}, {'': [0.22138051896659153, -8.102680320071318e-17], 'true': [0.22138051896659153, nan]}, {'': [0.20625069443342306, -9.676652043425489e-17], 'true': [0.20625069443342306, nan]}, {'': [0.21781947438960558, -5.458903908455919e-17], 'true': [0.21781947438960558, nan], 'true,true': [0.21781947438960558, nan], 'true,true,true': [0.21781947438960558, nan]}, {'': [0.2107804690503647, 7.117806150906926e-17], 'true': [0.2107804690503647, nan]}, {'': [0.19868388171595208, 3.5143750419789125e-17], 'true': [0.19868388171595208, nan]}, {'': [0.2187396087842827, 1.1470938999817116e-17], 'true': [0.2187396087842827, nan]}, {'': [0.21687878921331158, 4.408238480129298e-17], 'true': [0.21687878921331158, nan]}, {'': [0.21781947438960417, -5.3441243897210927e-17], 'true': [0.21781947438960417, nan]}, {'': [0.21591715976331435, 1.682156097916904e-17], 'true': [0.21591715976331435, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.14185106490048768;  // std dev = 6,66e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.14185106490048824;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.12544463852839197;  // std dev = 0,000, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.11231637819360696;  // std dev = 0,000, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783626;  // std dev = 3,33e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.10159632948783659;  // std dev = 0,000, 263,000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.09269127618926044;  // std dev = 1,33e-07, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0851847513883968;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.07877675473109141;  // std dev = 3,94e-08, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.0732462257633369;  // std dev = 1,06e-07, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06842697784420272;  // std dev = 1,05e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.06842697784420296;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.06419184008202596;  // std dev = 1,13e-07, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.48 seconds
Total inference time: 2.415 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.284 seconds
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.213 seconds
Total inference time: 2.415 seconds
AUC ROC: 1.0
Total revision time: 7.213
Best scored revision CLL: -0.065435


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:34:50
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.064496, 'AUC ROC': 0.861638, 'Inference time': 2.699, 'CLL': -0.333999, 'Precision': [0.064496, 0.5], 'F1': 0.121176, 'Learning time': 1.959, 'Recall': 1.0}, 'Inference time': 2.415, 'CLL': -0.063555, 'Precision': [1.0, 0.5], 'F1': 1.0, 'Learning time': 7.213, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.14185106490048766;  // std dev = 5,58e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.14185106490048813;  // std dev = 0,000, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.12544463852839174;  // std dev = 0,000, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360628;  // std dev = 4,59e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.11231637819360682;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783619;  // std dev = 4,47e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.10159632948783653;  // std dev = 0,000, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.09269127618926064;  // std dev = 2,98e-08, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.08518475138839679;  // std dev = 8,43e-08, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109179;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.07877675473109147;  // std dev = 6,32e-08, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.0732462257633369;  // std dev = 7,15e-08, 256,000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0684269778442027;  // std dev = 1,97e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.06842697784420283;  // std dev = 0,000, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.06419184008202623;  // std dev = 0,000, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.26 seconds
Total inference time: 2.107 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:34:56
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.107, 'CLL': -0.063555, 'Precision': [1.0, 0.5], 'F1': 1.0, 'Learning time': 3.26, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.14185106490048766;  // std dev = 6,83e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.1418510649004881;  // std dev = 0,000, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.155326
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.111 seconds
Total inference time: 1.369 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:34:58
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 1.369, 'CLL': -0.155326, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 1.111, 'Recall': 0.0}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
0;true,false,true;haswordvenue(G, E).;false;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true,false,true;haswordvenue(G, E).;false;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true,false,true;haswordvenue(G, E).;false;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true;haswordtitle(A, D).;true;true
3;true,true,true;author(F, E), title(F, A).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true;haswordauthor(D, C).;false;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true,false;haswordvenue(G, D).;false;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
6;true,true;haswordauthor(F, C).;false;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true,false,true;haswordvenue(G, E).;false;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;true,false,true;haswordvenue(G, E).;false;false
8;true;haswordauthor(D, C).;false;true
8;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,false,true;author(I, H), title(I, A).;false;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,true;author(E, D), title(E, B).;true;false
9;true,true,true;samebib(E, F), title(F, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5504566274072049;  // std dev = 0,462, 65,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 6,83e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.48034580677592253;  // std dev = 0,457, 64,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.23890284110710683;  // std dev = 0,497, 81,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360626;  // std dev = 5,05e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.3326768492031747;  // std dev = 3,655, 64,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=45 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783615;  // std dev = 5,87e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18304712920038232;  // std dev = 0,482, 71,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1959503144383977;  // std dev = 0,462, 65,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 1,67e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0172790154365924;  // std dev = 0,496, 80,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0787767547310917;  // std dev = 3,07e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.006053603187510014;  // std dev = 0,497, 81,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.033415518769341755;  // std dev = 0,493, 77,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420268;  // std dev = 2,69e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12256598154780433;  // std dev = 0,466, 66,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */


Results
   AUC ROC   = 0.870352
   AUC PR    = 0.095252
   CLL	      = -0.283566
   Precision = 0.095252 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173935


Total learning time: 1.035 seconds
Total inference time: 3.004 seconds
AUC ROC: 0.870352


Results scoring model
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.308654
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total scoring time: 1.156 seconds
Parameter learned model CLL: -0.308654


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [6.83e-08, 68, 0], 'true,true': [0.462, 20, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 62, 0], 'true,true': [0.457, 19, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.05e-08, 65, 0], 'true,true': [0.497, 36, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)', 'true,true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [5.87e-08, 77, 0], 'true,true,true,true': [3.655, 19, 45], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 72, 0], 'true,true': [0.482, 26, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.67e-08, 67, 0], 'true,true': [0.462, 20, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.07e-08, 65, 0], 'true,true': [0.496, 35, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 71, 0], 'true,true': [0.497, 36, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.69e-08, 67, 0], 'true,true': [0.493, 32, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 58, 0], 'true,true': [0.466, 21, 45]}]]
[{'': [0.21301775147929028, 6.857259857978908e-17], 'true': [0.21301775147929028, nan]}, {'': [0.2087402343750004, -4.118569284899774e-17], 'true': [0.2087402343750004, nan]}, {'': [0.24691358024691287, 3.928481471750554e-17], 'true': [0.24691358024691287, nan]}, {'': [0.20874023437500006, 4.469729060179202e-17], 'true': [0.20874023437500006, nan], 'true,true': [0.20874023437500006, nan], 'true,true,true': [0.20874023437500006, nan]}, {'': [0.23209680618924816, 0.0], 'true': [0.23209680618924816, nan]}, {'': [0.21301775147929014, 4.14262322621327e-18], 'true': [0.21301775147929014, nan]}, {'': [0.24609375000000006, 1.4518301091252048e-17], 'true': [0.24609375000000006, nan]}, {'': [0.24691358024691346, -3.1273888017610044e-18], 'true': [0.24691358024691346, nan]}, {'': [0.2428740091077756, 1.0770820388154504e-17], 'true': [0.2428740091077756, nan]}, {'': [0.21694214876033074, -3.3498108501621104e-18], 'true': [0.21694214876033074, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.14185106490048766;  // std dev = 6,14e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1254446385283916;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( actor(A) )
%   | | then return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -0.17877981520562825;  // std dev = 0,297, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360626;  // std dev = 4,94e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783617;  // std dev = 4,83e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09214724900426499;  // std dev = 0,007, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926107;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08504045599540791;  // std dev = 0,005, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.08518475138839679;  // std dev = 1,67e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( female(B) )
%   | | then return -0.07824009435050025;  // std dev = 0,004, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.12229228040262;  // std dev = 0,151, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.07877675473109173;  // std dev = 2,24e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07112610903235667;  // std dev = 0,005, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07324622576333704;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06629174999553268;  // std dev = 0,004, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06842697784420267;  // std dev = 3,07e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06166064625967297;  // std dev = 0,010, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06419184008202625;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07473
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 1.703 seconds
Total inference time: 2.408 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065819
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total scoring time: 1.18 seconds
Refined model CLL: -0.065819


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07473
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 5.074 seconds
Total inference time: 2.408 seconds
AUC ROC: 1.0
Total revision time: 5.074
Best scored revision CLL: -0.065819


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:35:10
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.095252, 'AUC ROC': 0.870352, 'Inference time': 3.004, 'CLL': -0.283566, 'Precision': [0.095252, 0.5], 'F1': 0.173935, 'Learning time': 1.035, 'Recall': 1.0}, 'Inference time': 2.408, 'CLL': -0.07473, 'Precision': [0.743929, 0.5], 'F1': 0.853165, 'Learning time': 5.074, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8,43e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360625;  // std dev = 5,27e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else if ( female(A) )
%   | then return 0.4997262021679602;  // std dev = 0,185, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.5362897848908588;  // std dev = 0,111, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783621;  // std dev = 5,27e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else if ( female(A) )
%   | then return 0.3807983432695074;  // std dev = 0,167, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.40501707225016736;  // std dev = 0,100, 35,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926108;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3309354684898436;  // std dev = 0,039, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.24490210454530312;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 4,71e-08, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2621458673415293;  // std dev = 0,034, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.19765702124179804;  // std dev = 0,014, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21467742383604446;  // std dev = 0,030, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.16958970097982062;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A) )
%   | then return -0.07877675473109166;  // std dev = 4,15e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.18596047522499437;  // std dev = 0,479, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08729009414880894;  // std dev = 0,089, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07303015228416901;  // std dev = 0,010, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.18070004492740321;  // std dev = 0,026, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14522560839377768;  // std dev = 0,010, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06819919825100566;  // std dev = 0,011, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return 0.1432412758121927;  // std dev = 0,058, 47,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06411114199339778;  // std dev = 0,006, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1375816293748666;  // std dev = 0,021, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1474083333073634;  // std dev = 0,007, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.081143
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 1.983 seconds
Total inference time: 2.704 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:35:14
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.704, 'CLL': -0.081143, 'Precision': [0.743929, 0.5], 'F1': 0.853165, 'Learning time': 1.983, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.14185106490048766;  // std dev = 7,30e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.164255
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.704 seconds
Total inference time: 1.317 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:35:17
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 1.317, 'CLL': -0.164255, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.704, 'Recall': 0.0}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
0;true,false,true;haswordvenue(G, E).;false;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true,false,true;haswordvenue(G, E).;false;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true,false,true;haswordvenue(G, E).;false;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true;haswordtitle(A, D).;true;true
3;true,true,true;author(F, E), title(F, A).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true;haswordauthor(D, C).;false;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true,false;haswordvenue(G, D).;false;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
6;true,true;haswordauthor(F, C).;false;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true,false,true;haswordvenue(G, E).;false;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;true,false,true;haswordvenue(G, E).;false;false
8;true;haswordauthor(D, C).;false;true
8;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,false,true;author(I, H), title(I, A).;false;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,true;author(E, D), title(E, B).;true;false
9;true,true,true;samebib(E, F), title(F, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4581489350995129;  // std dev = 0,490, 75,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 6,32e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34157467138192693;  // std dev = 0,498, 82,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.42342060973112716;  // std dev = 0,462, 65,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360624;  // std dev = 5,77e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.2741464186823745;  // std dev = 4,059, 71,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783617;  // std dev = 5,05e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.23686941554929805;  // std dev = 0,473, 68,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17821874981585997;  // std dev = 0,473, 68,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 1,67e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11479197281752174;  // std dev = 0,479, 70,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109166;  // std dev = 3,87e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08630743532731044;  // std dev = 0,479, 70,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.159970893518242;  // std dev = 0,440, 61,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420268;  // std dev = 2,47e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return -0.016199786994714933;  // std dev = 0,490, 75,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */


Results
   AUC ROC   = 0.868927
   AUC PR    = 0.095576
   CLL	      = -0.299716
   Precision = 0.095576 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174476


Total learning time: 1.09 seconds
Total inference time: 2.613 seconds
AUC ROC: 0.868927


Results scoring model
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.307009
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total scoring time: 1.2 seconds
Parameter learned model CLL: -0.307009


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [6.32e-08, 62, 0], 'true,true': [0.49, 30, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 60, 0], 'true,true': [0.498, 37, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.77e-08, 72, 0], 'true,true': [0.462, 20, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)', 'true,true,true': 'genre(E, F)'}, {'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [5.05e-08, 67, 0], 'true,true,true,true': [4.059, 26, 45], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 70, 0], 'true,true': [0.473, 23, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.67e-08, 66, 0], 'true,true': [0.473, 23, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.87e-08, 73, 0], 'true,true': [0.479, 25, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 73, 0], 'true,true': [0.479, 25, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.47e-08, 65, 0], 'true,true': [0.44, 16, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 60, 0], 'true,true': [0.49, 30, 45]}]]
[{'': [0.2400000000000003, 6.446456272017038e-17], 'true': [0.2400000000000003, nan]}, {'': [0.24762046400951784, -4.070817756958907e-17], 'true': [0.24762046400951784, nan]}, {'': [0.2130177514792899, 4.625929269271486e-17], 'true': [0.2130177514792899, nan]}, {'': [0.23209680618924827, 3.811213368116209e-17], 'true': [0.23209680618924827, nan], 'true,true': [0.23209680618924827, nan], 'true,true,true': [0.23209680618924827, nan]}, {'': [0.22383217993079568, 0.0], 'true': [0.22383217993079568, nan]}, {'': [0.2238321799307963, 4.20539024479226e-18], 'true': [0.2238321799307963, nan]}, {'': [0.2295918367346939, 2.0531521688273442e-17], 'true': [0.2295918367346939, nan]}, {'': [0.22959183673469416, -3.802133645976563e-18], 'true': [0.22959183673469416, nan]}, {'': [0.19349637194302585, 9.394194823751325e-18], 'true': [0.19349637194302585, nan]}, {'': [0.24000000000000013, -3.23815048849004e-18], 'true': [0.24000000000000013, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.14185106490048766;  // std dev = 6,32e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1254446385283915;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360624;  // std dev = 5,87e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783616;  // std dev = 5,58e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926107;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839683;  // std dev = 1,18e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.08518475138839679;  // std dev = 1,67e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07877675473109165;  // std dev = 4,08e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.07324622576333704;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06842697784420268;  // std dev = 2,58e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202622;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06419184008202625;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */


Results
   AUC ROC   = 0.995191
   AUC PR    = 0.742291
   CLL	      = -0.083408
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.575 seconds
Total inference time: 1.936 seconds
AUC ROC: 0.995191


Results scoring model
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 1.244 seconds
Refined model CLL: -0.066646


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.995191
   AUC PR    = 0.742291
   CLL	      = -0.083408
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 5.109 seconds
Total inference time: 1.936 seconds
AUC ROC: 0.995191
Total revision time: 5.109
Best scored revision CLL: -0.066646


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:35:27
{'AUC PR': 0.742291, 'AUC ROC': 0.995191, 'parameter': {'AUC PR': 0.095576, 'AUC ROC': 0.868927, 'Inference time': 2.613, 'CLL': -0.299716, 'Precision': [0.095576, 0.5], 'F1': 0.174476, 'Learning time': 1.09, 'Recall': 1.0}, 'Inference time': 1.936, 'CLL': -0.083408, 'Precision': [0.742291, 0.5], 'F1': 0.852086, 'Learning time': 5.109, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 7,88e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12726913204910503;  // std dev = 0,154, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11213460224350766;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10144648933655342;  // std dev = 5,16e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else if ( female(A) )
%   | then return 0.3759847910666182;  // std dev = 0,141, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | else return 0.4175135841583099;  // std dev = 3,65e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09256580210953236;  // std dev = 5,67e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.325370029525757;  // std dev = 0,031, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14396890157397804;  // std dev = 0,006, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.2312781865393799;  // std dev = 0,105, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | else return 0.25428792149259455;  // std dev = 1,49e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.08561654043084682;  // std dev = 0,044, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07864628449453906;  // std dev = 2,79e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.21469108022014202;  // std dev = 0,036, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.15405054737565166;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1807117489006782;  // std dev = 0,032, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.13808534979462803;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.07313303151032625;  // std dev = 3,65e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( female(B) )
%   | | then return -0.07313303151032635;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.2449572539782607;  // std dev = 0,421, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.15962450180368137;  // std dev = 2,98e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.12812478832006624;  // std dev = 0,076, 24,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   else return -0.07326437886971648;  // std dev = 0,458, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13744174282096744;  // std dev = 0,013, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.13769439972534864;  // std dev = 0,005, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06399697192159601;  // std dev = 0,014, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074728
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.998 seconds
Total inference time: 2.374 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:35:32
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.374, 'CLL': -0.074728, 'Precision': [1.0, 0.5], 'F1': 1.0, 'Learning time': 1.998, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 7,30e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.995191
   AUC PR    = 0.742291
   CLL	      = -0.166516
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.731 seconds
Total inference time: 1.305 seconds
AUC ROC: 0.995191


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:35:34
{'AUC PR': 0.742291, 'AUC ROC': 0.995191, 'Inference time': 1.305, 'CLL': -0.166516, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.731, 'Recall': 0.0}


