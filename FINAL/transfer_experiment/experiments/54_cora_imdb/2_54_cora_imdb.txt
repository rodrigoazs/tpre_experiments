Starting experiment #2 for 54_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 698
Source train neg examples: 27996

WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.5636882937000914;  // std dev = 0,456, 343,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.10206326649199987;  // std dev = 3,795, 377,000 (wgt'ed) examples reached here.  /* #neg=362 #pos=15 */
%   | | | else return 0.14386322081379807;  // std dev = 2,673, 35,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | else return 0.22038069475615982;  // std dev = 0,481, 1.165,000 (wgt'ed) examples reached here.  /* #neg=743 #pos=422 */
%   else return -0.14185106490048774;  // std dev = 4,71e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.5172526492703414;  // std dev = 0,437, 326,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.09364324743504478;  // std dev = 3,802, 414,000 (wgt'ed) examples reached here.  /* #neg=399 #pos=15 */
%   | | | else return 0.10998900000516808;  // std dev = 2,701, 37,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.07203517519146023;  // std dev = 4,747, 253,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=25 */
%   | | | else return 0.256032315989649;  // std dev = 15,084, 930,000 (wgt'ed) examples reached here.  /* #neg=533 #pos=397 */
%   else return -0.12544463852839113;  // std dev = 7,60e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.3811492817704032;  // std dev = 0,446, 356,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=251 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.10550961432542139;  // std dev = 3,765, 273,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=15 */
%   | | | else return 0.3676003759364051;  // std dev = 2,167, 19,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.0799719083637339;  // std dev = 3,795, 378,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=15 */
%   | | | else return 0.20897203951810223;  // std dev = 2,481, 26,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else return 0.2227113477607917;  // std dev = 0,495, 917,000 (wgt'ed) examples reached here.  /* #neg=520 #pos=397 */
%   else return -0.1123163781936062;  // std dev = 9,31e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.30715177130434196;  // std dev = 0,438, 349,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.07414556635708071;  // std dev = 3,800, 401,000 (wgt'ed) examples reached here.  /* #neg=386 #pos=15 */
%   | | | else return 0.11041133630037017;  // std dev = 2,601, 32,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.06329078731967815;  // std dev = 4,657, 284,000 (wgt'ed) examples reached here.  /* #neg=259 #pos=25 */
%   | | | else return 0.1964915542102579;  // std dev = 14,829, 890,000 (wgt'ed) examples reached here.  /* #neg=493 #pos=397 */
%   else return -0.10159632948783641;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.21783619829127449;  // std dev = 0,444, 356,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.0642194766473174;  // std dev = 3,798, 367,000 (wgt'ed) examples reached here.  /* #neg=352 #pos=15 */
%   | | | else return 0.055780043798296666;  // std dev = 2,659, 37,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.05553330775546989;  // std dev = 4,664, 283,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=25 */
%   | | | else return 0.16349920185866937;  // std dev = 14,754, 879,000 (wgt'ed) examples reached here.  /* #neg=482 #pos=397 */
%   else return -0.09269127618926087;  // std dev = 6,75e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.33542271633893167;  // std dev = 2,11e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.2384568521095725;  // std dev = 1,83e-08, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.14677612219542596;  // std dev = 0,461, 349,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.05946945268696763;  // std dev = 3,799, 380,000 (wgt'ed) examples reached here.  /* #neg=365 #pos=15 */
%   | | | else return 0.0959823565969588;  // std dev = 2,566, 31,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.04341808507207014;  // std dev = 4,651, 268,000 (wgt'ed) examples reached here.  /* #neg=243 #pos=25 */
%   | | | else return 0.09997952834605829;  // std dev = 15,138, 939,000 (wgt'ed) examples reached here.  /* #neg=542 #pos=397 */
%   else return -0.0851847513883968;  // std dev = 6,91e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then if ( samebib(E, F), title(F, B) )
%   | | | then return 0.29899035045855427;  // std dev = 0,190, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.5826968948296776;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.12159562770140363;  // std dev = 0,450, 347,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), title(I, B) )
%   | | | then return 0.007492576856585964;  // std dev = 2,135, 47,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   | | | else return -0.05884291991222563;  // std dev = 4,165, 386,000 (wgt'ed) examples reached here.  /* #neg=366 #pos=20 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.03988772374135266;  // std dev = 4,656, 274,000 (wgt'ed) examples reached here.  /* #neg=249 #pos=25 */
%   | | | else return 0.09074294093831137;  // std dev = 14,966, 911,000 (wgt'ed) examples reached here.  /* #neg=514 #pos=397 */
%   else return -0.07877675473109154;  // std dev = 7,22e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.21802360462980577;  // std dev = 0,039, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.21788750700033446;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.09129158379354521;  // std dev = 0,455, 345,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.05411449318749906;  // std dev = 3,801, 425,000 (wgt'ed) examples reached here.  /* #neg=410 #pos=15 */
%   | | | else return 0.10602119594884549;  // std dev = 2,543, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | else return 0.05624448818761527;  // std dev = 0,464, 1.134,000 (wgt'ed) examples reached here.  /* #neg=712 #pos=422 */
%   else return -0.07324622576333714;  // std dev = 3,80e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.18316584914169468;  // std dev = 0,034, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.18303674646871884;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.08602067406382788;  // std dev = 0,448, 337,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.0486536821373433;  // std dev = 3,801, 407,000 (wgt'ed) examples reached here.  /* #neg=392 #pos=15 */
%   | | | else return -0.011353792346879304;  // std dev = 2,723, 41,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.035571615384303076;  // std dev = 4,639, 256,000 (wgt'ed) examples reached here.  /* #neg=231 #pos=25 */
%   | | | else return 0.034140303104655906;  // std dev = 15,264, 961,000 (wgt'ed) examples reached here.  /* #neg=564 #pos=397 */
%   else return -0.06842697784420264;  // std dev = 5,67e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.05611275370405476;  // std dev = 0,435, 364,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.04457832309003316;  // std dev = 3,800, 403,000 (wgt'ed) examples reached here.  /* #neg=388 #pos=15 */
%   | | | else return 0.01512084089049542;  // std dev = 2,669, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.03027321450833962;  // std dev = 4,639, 252,000 (wgt'ed) examples reached here.  /* #neg=227 #pos=25 */
%   | | | else return 0.03984314167661004;  // std dev = 15,084, 930,000 (wgt'ed) examples reached here.  /* #neg=533 #pos=397 */
%   else return -0.06419184008202626;  // std dev = 0,000, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true,false;haswordvenue(F, D).;false;false
2;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
2;true,true;haswordauthor(E, C).;false;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true,false,true;haswordvenue(G, E).;false;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true;haswordauthor(D, C).;true;true
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;author(I, H), title(I, B).;false;false
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;samebib(E, F), title(F, B).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
7;true,false,true;haswordvenue(I, G).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
8;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), title(E, B).;true;false
8;true,true,true;samebib(E, F), title(F, A).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
9;true,false,true;haswordvenue(G, E).;false;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4735335504841285;  // std dev = 0,487, 91,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 7,74e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3860002242668385;  // std dev = 0,491, 94,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839147;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.341416045345643;  // std dev = 0,485, 90,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360621;  // std dev = 7,30e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2411836531562669;  // std dev = 0,491, 94,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783616;  // std dev = 5,77e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17185721574807075;  // std dev = 0,493, 96,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926108;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.19753150110353226;  // std dev = 0,477, 86,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 4,47e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07443907197098762;  // std dev = 0,494, 97,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109168;  // std dev = 3,65e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12968569867572882;  // std dev = 0,477, 86,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08997437792840925;  // std dev = 0,479, 87,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 3,87e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06786203956953607;  // std dev = 0,479, 87,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */


Results
   AUC ROC   = 0.871431
   AUC PR    = 0.103954
   CLL	      = -0.284171
   Precision = 0.103954 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18833


Total learning time: 1.204 seconds
Total inference time: 2.492 seconds
AUC ROC: 0.871431


Results scoring model
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.303812
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total scoring time: 1.44 seconds
Parameter learned model CLL: -0.303812


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.74e-08, 81, 0], 'true,true': [0.487, 35, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 82, 0], 'true,true': [0.491, 38, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [7.3e-08, 89, 0], 'true,true': [0.485, 34, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.77e-08, 82, 0], 'true,true': [0.491, 38, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 72, 0], 'true,true': [0.493, 40, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [4.47e-08, 75, 0], 'true,true': [0.477, 30, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.65e-08, 71, 0], 'true,true': [0.494, 41, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 83, 0], 'true,true': [0.477, 30, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.87e-08, 82, 0], 'true,true': [0.479, 31, 56]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 92, 0], 'true,true': [0.479, 31, 56]}]]
[{'': [0.2366863905325441, 7.401486830834377e-17], 'true': [0.2366863905325441, nan]}, {'': [0.24083295608872676, -2.166288828536891e-17], 'true': [0.24083295608872676, nan]}, {'': [0.23506172839506248, 5.98771968337163e-17], 'true': [0.23506172839506248, nan]}, {'': [0.2408329560887279, 4.06179155350667e-17], 'true': [0.2408329560887279, nan]}, {'': [0.24305555555555558, -1.5419764230904951e-18], 'true': [0.24305555555555558, nan]}, {'': [0.22714981070849125, 2.6645352591003756e-17], 'true': [0.22714981070849125, nan]}, {'': [0.24402168136890287, 1.8764332810566026e-17], 'true': [0.24402168136890287, nan]}, {'': [0.2271498107084916, -6.6880905097900996e-18], 'true': [0.2271498107084916, nan]}, {'': [0.2293565860747788, 1.8278061990780017e-17], 'true': [0.2293565860747788, nan]}, {'': [0.22935658607477863, -1.2671023650613199e-17], 'true': [0.22935658607477863, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 2,98e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839133;  // std dev = 2,11e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.12544463852839158;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.11231637819360622;  // std dev = 6,66e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( actor(A) )
%   | | then return -0.10159632948783635;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.1977743467586071;  // std dev = 0,430, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783615;  // std dev = 5,67e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09191349139575432;  // std dev = 0,015, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.09269127618926107;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0848214534377897;  // std dev = 0,010, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.08518475138839679;  // std dev = 2,58e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07842673250183632;  // std dev = 0,009, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.0787767547310917;  // std dev = 3,07e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07316823167152608;  // std dev = 0,006, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07324622576333704;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.06813438886954679;  // std dev = 0,008, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.06842697784420267;  // std dev = 3,41e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801079;  // std dev = 5,16e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( actor(A) )
%   | | then return -0.0643037647820281;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.29830927384901434;  // std dev = 0,587, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202626;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07639
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 2.071 seconds
Total inference time: 2.434 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064249
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total scoring time: 1.656 seconds
Refined model CLL: -0.064249


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07639
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 6.3709999999999996 seconds
Total inference time: 2.434 seconds
AUC ROC: 1.0
Total revision time: 6.3709999999999996
Best scored revision CLL: -0.064249


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:18:47
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.103954, 'AUC ROC': 0.871431, 'Inference time': 2.492, 'CLL': -0.284171, 'Precision': [0.103954, 0.5], 'F1': 0.18833, 'Learning time': 1.204, 'Recall': 1.0}, 'Inference time': 2.434, 'CLL': -0.07639, 'Precision': [0.735892, 0.5], 'F1': 0.847854, 'Learning time': 6.3709999999999996, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004877;  // std dev = 5,58e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839105;  // std dev = 8,02e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360622;  // std dev = 7,88e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783665;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.09269127618926093;  // std dev = 5,67e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 5,58e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12341331800382295;  // std dev = 3,73e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109155;  // std dev = 6,66e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.11067055982680468;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333707;  // std dev = 0,000, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else if ( female(A) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.15920393505075417;  // std dev = 0,068, 31,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420265;  // std dev = 5,16e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15395043820560342;  // std dev = 0,009, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.11576849454004882;  // std dev = 0,002, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202626;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13494846237987906;  // std dev = 0,008, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.10506544874617871;  // std dev = 0,002, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.078581
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 2.218 seconds
Total inference time: 2.321 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:18:51
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.321, 'CLL': -0.078581, 'Precision': [0.735892, 0.5], 'F1': 0.847854, 'Learning time': 2.218, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.994647
   AUC PR    = 0.735892
   CLL	      = -0.169006
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.77 seconds
Total inference time: 1.428 seconds
AUC ROC: 0.994647


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:18:54
{'AUC PR': 0.735892, 'AUC ROC': 0.994647, 'Inference time': 1.428, 'CLL': -0.169006, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.77, 'Recall': 0.0}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true,false;haswordvenue(F, D).;false;false
2;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
2;true,true;haswordauthor(E, C).;false;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true,false,true;haswordvenue(G, E).;false;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true;haswordauthor(D, C).;true;true
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;author(I, H), title(I, B).;false;false
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;samebib(E, F), title(F, B).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
7;true,false,true;haswordvenue(I, G).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
8;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), title(E, B).;true;false
8;true,true,true;samebib(E, F), title(F, A).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
9;true,false,true;haswordvenue(G, E).;false;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4381489350995132;  // std dev = 0,494, 100,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 7,30e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4627270462287736;  // std dev = 0,471, 87,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839136;  // std dev = 0,000, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.3624548481921327;  // std dev = 0,476, 89,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360618;  // std dev = 8,82e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.36521445746824327;  // std dev = 0,442, 79,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 3,94e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16641489570330367;  // std dev = 0,484, 93,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 5,05e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15294534491856476;  // std dev = 0,476, 89,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,05e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09352566165271563;  // std dev = 0,483, 92,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109164;  // std dev = 4,71e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.04410035350310588;  // std dev = 0,489, 96,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11957436008804212;  // std dev = 0,462, 84,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 3,41e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05917712144768028;  // std dev = 0,474, 88,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */


Results
   AUC ROC   = 0.86826
   AUC PR    = 0.102112
   CLL	      = -0.302305
   Precision = 0.102112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185302


Total learning time: 1.726 seconds
Total inference time: 2.445 seconds
AUC ROC: 0.86826


Results scoring model
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.300215
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total scoring time: 1.549 seconds
Parameter learned model CLL: -0.300215


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.3e-08, 75, 0], 'true,true': [0.494, 42, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 100, 0], 'true,true': [0.471, 29, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [8.82e-08, 113, 0], 'true,true': [0.476, 31, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.94e-08, 99, 0], 'true,true': [0.442, 21, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.05e-08, 102, 0], 'true,true': [0.484, 35, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.05e-08, 85, 0], 'true,true': [0.476, 31, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [4.71e-08, 83, 0], 'true,true': [0.483, 34, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 86, 0], 'true,true': [0.489, 38, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.41e-08, 74, 0], 'true,true': [0.462, 26, 58]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 88, 0], 'true,true': [0.474, 30, 58]}]]
[{'': [0.24359999999999968, 7.105427357601002e-17], 'true': [0.24359999999999968, nan]}, {'': [0.22222222222222282, -1.3322676295501878e-17], 'true': [0.22222222222222282, nan]}, {'': [0.2269915414720371, 6.877487763164686e-17], 'true': [0.2269915414720371, nan]}, {'': [0.19516103188591555, 1.570012358055777e-17], 'true': [0.19516103188591555, nan]}, {'': [0.23470921493814353, 2.503444075135157e-17], 'true': [0.23470921493814353, nan]}, {'': [0.22699154147203632, 3.004132890162188e-17], 'true': [0.22699154147203632, nan]}, {'': [0.2329867674858222, 2.6752362039160398e-17], 'true': [0.2329867674858222, nan]}, {'': [0.23914930555555555, -7.10026352957949e-18], 'true': [0.23914930555555555, nan]}, {'': [0.2137188208616784, 1.5753164538600193e-17], 'true': [0.2137188208616784, nan]}, {'': [0.2246900826446282, -1.2616170734376778e-17], 'true': [0.2246900826446282, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.14185106490048766;  // std dev = 7,15e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.12544463852839147;  // std dev = 0,000, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1123163781936062;  // std dev = 8,16e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783634;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.4175135841583103;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.10159632948783621;  // std dev = 5,27e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.092691276189261;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.09269127618926092;  // std dev = 5,77e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839686;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839683;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.1291609517912044;  // std dev = 0,637, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.08518475138839682;  // std dev = 4,94e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(A) )
%   | | then return -0.07739829697070133;  // std dev = 0,008, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.1834777599862727;  // std dev = 0,587, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109162;  // std dev = 5,16e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527733;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.07184373246822862;  // std dev = 0,011, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07324622576333707;  // std dev = 0,000, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367078;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( female(B) )
%   | | then return -0.06860446170758895;  // std dev = 5,27e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( female(A) )
%   | | | then return -0.06860446170758895;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.103855765115962;  // std dev = 0,633, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.06842697784420267;  // std dev = 4,01e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801098;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.06216175268529889;  // std dev = 0,015, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.06419184008202626;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076444
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 1.854 seconds
Total inference time: 3.191 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064268
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total scoring time: 1.59 seconds
Refined model CLL: -0.064268


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076444
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 6.718999999999999 seconds
Total inference time: 3.191 seconds
AUC ROC: 1.0
Total revision time: 6.718999999999999
Best scored revision CLL: -0.064268


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:07
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.102112, 'AUC ROC': 0.86826, 'Inference time': 2.445, 'CLL': -0.302305, 'Precision': [0.102112, 0.5], 'F1': 0.185302, 'Learning time': 1.726, 'Recall': 1.0}, 'Inference time': 3.191, 'CLL': -0.076444, 'Precision': [0.736364, 0.5], 'F1': 0.848168, 'Learning time': 6.718999999999999, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839133;  // std dev = 0,000, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360618;  // std dev = 8,69e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783634;  // std dev = 0,000, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583103;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926101;  // std dev = 3,49e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 5,27e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109157;  // std dev = 6,32e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333707;  // std dev = 0,000, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527733;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367078;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420265;  // std dev = 5,05e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202626;  // std dev = 0,000, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801098;  // std dev = 3,94e-08, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.072871
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 1.854 seconds
Total inference time: 1.732 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:19:11
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 1.732, 'CLL': -0.072871, 'Precision': [0.736364, 0.5], 'F1': 0.848168, 'Learning time': 1.854, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8,69e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.994636
   AUC PR    = 0.736364
   CLL	      = -0.169152
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.804 seconds
Total inference time: 1.414 seconds
AUC ROC: 0.994636


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:19:13
{'AUC PR': 0.736364, 'AUC ROC': 0.994636, 'Inference time': 1.414, 'CLL': -0.169152, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.804, 'Recall': 0.0}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true,false;haswordvenue(F, D).;false;false
2;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
2;true,true;haswordauthor(E, C).;false;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true,false,true;haswordvenue(G, E).;false;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true;haswordauthor(D, C).;true;true
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;author(I, H), title(I, B).;false;false
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;samebib(E, F), title(F, B).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
7;true,false,true;haswordvenue(I, G).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
8;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), title(E, B).;true;false
8;true,true,true;samebib(E, F), title(F, A).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
9;true,false,true;haswordvenue(G, E).;false;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.517408194358768;  // std dev = 0,474, 270,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004879;  // std dev = 5,96e-08, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5006325715874204;  // std dev = 0,450, 248,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839202;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.4067499933200893;  // std dev = 0,449, 247,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360693;  // std dev = 0,000, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.30757655013805646;  // std dev = 0,451, 249,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878366;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17861176768376483;  // std dev = 0,473, 269,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,46e-07, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.17307107347771758;  // std dev = 0,458, 254,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 9,31e-08, 255,000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13862445526826098;  // std dev = 0,454, 251,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 5,77e-08, 262,000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07011934216487352;  // std dev = 0,469, 264,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333686;  // std dev = 1,12e-07, 269,000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.04590227279551892;  // std dev = 0,471, 267,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420286;  // std dev = 0,000, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09206816239632931;  // std dev = 0,447, 246,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202604;  // std dev = 9,77e-08, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */


Results
   AUC ROC   = 0.861638
   AUC PR    = 0.064496
   CLL	      = -0.339382
   Precision = 0.064496 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121176


Total learning time: 1.806 seconds
Total inference time: 2.771 seconds
AUC ROC: 0.861638


Results scoring model
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.291848
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total scoring time: 1.475 seconds
Parameter learned model CLL: -0.291848


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.96e-08, 292, 0], 'true,true': [0.474, 92, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 303, 0], 'true,true': [0.45, 70, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 272, 0], 'true,true': [0.449, 69, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 269, 0], 'true,true': [0.451, 71, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.46e-07, 289, 0], 'true,true': [0.473, 91, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [9.31e-08, 255, 0], 'true,true': [0.458, 76, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.77e-08, 262, 0], 'true,true': [0.454, 73, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.12e-07, 269, 0], 'true,true': [0.469, 86, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 272, 0], 'true,true': [0.471, 89, 178]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [9.77e-08, 284, 0], 'true,true': [0.447, 68, 178]}]]
[{'': [0.22463648834019734, 1.2166827667125003e-17], 'true': [0.22463648834019734, nan]}, {'': [0.20258844953173752, -8.500717548285028e-17], 'true': [0.20258844953173752, nan]}, {'': [0.20131456014686372, -1.0938962154394925e-16], 'true': [0.20131456014686372, nan]}, {'': [0.20383542200932644, -6.438468098197934e-17], 'true': [0.20383542200932644, nan]}, {'': [0.22384986387694883, 7.375876149758825e-17], 'true': [0.22384986387694883, nan]}, {'': [0.20968441936883953, 3.395976310618126e-17], 'true': [0.20968441936883953, nan]}, {'': [0.20625069443342045, 1.2712477381204082e-17], 'true': [0.20625069443342045, nan]}, {'': [0.21963957759412248, 4.622489916654927e-17], 'true': [0.21963957759412248, nan]}, {'': [0.22222222222222307, -3.102093745276173e-17], 'true': [0.22222222222222307, nan]}, {'': [0.20001321964439256, 3.3619429618930795e-17], 'true': [0.20001321964439256, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.14185106490048768;  // std dev = 5,37e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.14185106490048813;  // std dev = 0,000, 261,000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.12544463852839194;  // std dev = 0,000, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360632;  // std dev = 4,47e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.11231637819360694;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783628;  // std dev = 2,98e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.1015963294878366;  // std dev = 0,000, 279,000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.09269127618926044;  // std dev = 1,25e-07, 269,000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0851847513883968;  // std dev = 1,83e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.08518475138839678;  // std dev = 8,94e-08, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.07877675473109143;  // std dev = 6,14e-08, 249,000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.07324622576333688;  // std dev = 1,10e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06842697784420271;  // std dev = 1,29e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.06842697784420301;  // std dev = 0,000, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.06419184008202612;  // std dev = 6,99e-08, 270,000 (wgt'ed) examples reached here.  /* #neg=270 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.251 seconds
Total inference time: 2.319 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.411 seconds
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.943 seconds
Total inference time: 2.319 seconds
AUC ROC: 1.0
Total revision time: 6.943
Best scored revision CLL: -0.065435


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:19:26
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.064496, 'AUC ROC': 0.861638, 'Inference time': 2.771, 'CLL': -0.339382, 'Precision': [0.064496, 0.5], 'F1': 0.121176, 'Learning time': 1.806, 'Recall': 1.0}, 'Inference time': 2.319, 'CLL': -0.063555, 'Precision': [1.0, 0.5], 'F1': 1.0, 'Learning time': 6.943, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1418510649004877;  // std dev = 4,71e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.14185106490048777;  // std dev = 1,33e-07, 309,000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839116;  // std dev = 6,41e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.12544463852839186;  // std dev = 0,000, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360633;  // std dev = 3,65e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.1123163781936069;  // std dev = 0,000, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783621;  // std dev = 3,94e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.10159632948783646;  // std dev = 0,000, 322,000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.09269127618926064;  // std dev = 1,15e-07, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.08518475138839683;  // std dev = 3,94e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.08518475138839678;  // std dev = 8,94e-08, 309,000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109176;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.0787767547310915;  // std dev = 4,94e-08, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527825;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07324622576333695;  // std dev = 1,03e-07, 325,000 (wgt'ed) examples reached here.  /* #neg=325 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06842697784420268;  // std dev = 1,67e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.06842697784420279;  // std dev = 0,000, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801098;  // std dev = 7,60e-08, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.06419184008202625;  // std dev = 0,000, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.081 seconds
Total inference time: 2.505 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:19:32
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.505, 'CLL': -0.063555, 'Precision': [1.0, 0.5], 'F1': 1.0, 'Learning time': 3.081, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.14185106490048766;  // std dev = 5,58e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.1418510649004883;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #neg=269 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.155326
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.008 seconds
Total inference time: 1.302 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:19:34
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 1.302, 'CLL': -0.155326, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 1.008, 'Recall': 0.0}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true,false;haswordvenue(F, D).;false;false
2;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
2;true,true;haswordauthor(E, C).;false;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true,false,true;haswordvenue(G, E).;false;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true;haswordauthor(D, C).;true;true
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;author(I, H), title(I, B).;false;false
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;samebib(E, F), title(F, B).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
7;true,false,true;haswordvenue(I, G).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
8;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), title(E, B).;true;false
8;true,true,true;samebib(E, F), title(F, A).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
9;true,false,true;haswordvenue(G, E).;false;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4831489350995128;  // std dev = 0,484, 72,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 6,32e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.405095684872695;  // std dev = 0,486, 73,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.34716205035506736;  // std dev = 0,482, 71,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360628;  // std dev = 4,59e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4708480138826998;  // std dev = 0,373, 54,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783624;  // std dev = 3,16e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15722199735445902;  // std dev = 0,482, 71,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07624141907694888;  // std dev = 0,491, 76,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08156554233440923;  // std dev = 0,486, 73,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0787767547310917;  // std dev = 3,07e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11654551944059455;  // std dev = 0,470, 67,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return -0.0067400274230846585;  // std dev = 0,494, 78,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 3,16e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11028333576646555;  // std dev = 0,462, 65,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */


Results
   AUC ROC   = 0.870352
   AUC PR    = 0.095252
   CLL	      = -0.294902
   Precision = 0.095252 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173935


Total learning time: 1.097 seconds
Total inference time: 2.494 seconds
AUC ROC: 0.870352


Results scoring model
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.321655
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total scoring time: 1.249 seconds
Parameter learned model CLL: -0.321655


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.32e-08, 63, 0], 'true,true': [0.484, 27, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 60, 0], 'true,true': [0.486, 28, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [4.59e-08, 61, 0], 'true,true': [0.482, 26, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.16e-08, 54, 0], 'true,true': [0.373, 9, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 65, 0], 'true,true': [0.482, 26, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.83e-08, 69, 0], 'true,true': [0.491, 31, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.07e-08, 65, 0], 'true,true': [0.486, 28, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 72, 0], 'true,true': [0.47, 22, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.16e-08, 73, 0], 'true,true': [0.494, 33, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 68, 0], 'true,true': [0.462, 20, 45]}]]
[{'': [0.2343750000000003, 6.344131569286608e-17], 'true': [0.2343750000000003, nan]}, {'': [0.2364421092137379, -4.070817756958907e-17], 'true': [0.2364421092137379, nan]}, {'': [0.2320968061892486, 3.45807171604557e-17], 'true': [0.2320968061892486, nan]}, {'': [0.13888888888888962, 1.850371707708594e-17], 'true': [0.13888888888888962, nan]}, {'': [0.23209680618924847, 0.0], 'true': [0.23209680618924847, nan]}, {'': [0.241516620498615, 4.827056628805028e-18], 'true': [0.241516620498615, nan]}, {'': [0.23644210921373615, 1.4518301091252048e-17], 'true': [0.23644210921373615, nan]}, {'': [0.22053909556694126, -3.854941057726238e-18], 'true': [0.22053909556694126, nan]}, {'': [0.24408284023668628, 1.3687681125515628e-17], 'true': [0.24408284023668628, nan]}, {'': [0.21301775147929009, -5.714383214982423e-18], 'true': [0.21301775147929009, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 2,58e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.14185106490048766;  // std dev = 7,30e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.12544463852839152;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360626;  // std dev = 5,16e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.10159632948783619;  // std dev = 4,83e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.09269127618926107;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.08518475138839679;  // std dev = 1,67e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.07877675473109179;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 9,13e-09, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( actor(A) )
%   | | then return -0.06842697784420276;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.3280366991982449;  // std dev = 0,636, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420267;  // std dev = 3,16e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06286424635879327;  // std dev = 0,019, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06419184008202625;  // std dev = 0,000, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.078847
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 1.578 seconds
Total inference time: 2.248 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066965
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total scoring time: 1.184 seconds
Refined model CLL: -0.066965


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.078847
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 5.1080000000000005 seconds
Total inference time: 2.248 seconds
AUC ROC: 1.0
Total revision time: 5.1080000000000005
Best scored revision CLL: -0.066965


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:19:45
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.095252, 'AUC ROC': 0.870352, 'Inference time': 2.494, 'CLL': -0.294902, 'Precision': [0.095252, 0.5], 'F1': 0.173935, 'Learning time': 1.097, 'Recall': 1.0}, 'Inference time': 2.248, 'CLL': -0.078847, 'Precision': [0.743929, 0.5], 'F1': 0.853165, 'Learning time': 5.1080000000000005, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 7,88e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1273592304945724;  // std dev = 0,154, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11212563231671363;  // std dev = 5,77e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10143909429750654;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09647131504559761;  // std dev = 0,381, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08476901904280672;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07841965565837918;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07293552237761673;  // std dev = 7,53e-05, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06815431732930964;  // std dev = 9,96e-05, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06395254497405367;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.070921
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 2.041 seconds
Total inference time: 2.541 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:19:50
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.541, 'CLL': -0.070921, 'Precision': [0.743929, 0.5], 'F1': 0.853165, 'Learning time': 2.041, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 7,30e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.995302
   AUC PR    = 0.743929
   CLL	      = -0.16604
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.703 seconds
Total inference time: 1.522 seconds
AUC ROC: 0.995302


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:19:52
{'AUC PR': 0.743929, 'AUC ROC': 0.995302, 'Inference time': 1.522, 'CLL': -0.16604, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.703, 'Recall': 0.0}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true,false;haswordvenue(F, D).;false;false
2;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
2;true,true;haswordauthor(E, C).;false;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true,false,true;haswordvenue(G, E).;false;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordvenue(G, E).;false;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true;haswordauthor(D, C).;true;true
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;author(I, H), title(I, B).;false;false
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;samebib(E, F), title(F, B).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
7;true,false,true;haswordvenue(I, G).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
8;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), title(E, B).;true;false
8;true,true,true;samebib(E, F), title(F, A).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
9;true,false,true;haswordvenue(G, E).;false;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5724346493852269;  // std dev = 0,452, 63,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4876778839172633;  // std dev = 0,452, 63,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.31982839067068264;  // std dev = 0,479, 70,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360632;  // std dev = 2,79e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.20349738615265717;  // std dev = 0,490, 75,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783623;  // std dev = 3,33e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1620379240935963;  // std dev = 0,488, 74,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926104;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21675256556356354;  // std dev = 0,457, 64,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 1,05e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16265651589671398;  // std dev = 0,457, 64,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109164;  // std dev = 3,94e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12261062255295141;  // std dev = 0,457, 64,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12766121188321639;  // std dev = 0,440, 61,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420268;  // std dev = 2,79e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.012221606024499834;  // std dev = 0,476, 69,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */


Results
   AUC ROC   = 0.868927
   AUC PR    = 0.095576
   CLL	      = -0.319243
   Precision = 0.095576 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174476


Total learning time: 1.016 seconds
Total inference time: 2.313 seconds
AUC ROC: 0.868927


Results scoring model
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.32771
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total scoring time: 1.153 seconds
Parameter learned model CLL: -0.32771


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.66e-08, 65, 0], 'true,true': [0.452, 18, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 60, 0], 'true,true': [0.452, 18, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [2.79e-08, 49, 0], 'true,true': [0.479, 25, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.33e-08, 56, 0], 'true,true': [0.49, 30, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 57, 0], 'true,true': [0.488, 29, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 69, 0], 'true,true': [0.457, 19, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.94e-08, 76, 0], 'true,true': [0.457, 19, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 54, 0], 'true,true': [0.457, 19, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.79e-08, 68, 0], 'true,true': [0.44, 16, 45]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 73, 0], 'true,true': [0.476, 24, 45]}]]
[{'': [0.20408163265306156, 6.832141690000964e-17], 'true': [0.20408163265306156, nan]}, {'': [0.20408163265306045, -4.070817756958907e-17], 'true': [0.20408163265306045, nan]}, {'': [0.22959183673469288, 1.586032892321652e-17], 'true': [0.22959183673469288, nan]}, {'': [0.23999999999999996, 1.9825411154020653e-17], 'true': [0.23999999999999996, nan]}, {'': [0.23831263696128555, -2.434699615406045e-17], 'true': [0.23831263696128555, nan]}, {'': [0.20874023437499964, 1.6090188762683428e-18], 'true': [0.20874023437499964, nan]}, {'': [0.2087402343749999, 2.0451476769410777e-17], 'true': [0.2087402343749999, nan]}, {'': [0.20874023437500014, 1.02798428206033e-18], 'true': [0.20874023437500014, nan]}, {'': [0.19349637194302607, 1.1428766429964846e-17], 'true': [0.19349637194302607, nan]}, {'': [0.22684310018903592, -7.604267291953127e-18], 'true': [0.22684310018903592, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 2,58e-08, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.14185106490048766;  // std dev = 6,32e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.12544463852839155;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.11231637819360629;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783616;  // std dev = 5,27e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926103;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926107;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0851847513883968;  // std dev = 1,97e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.08518475138839679;  // std dev = 2,11e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( actor(A) )
%   | | then return -0.07877675473109179;  // std dev = 5,27e-09, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.25664313714018494;  // std dev = 0,616, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109168;  // std dev = 3,49e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07273738195263056;  // std dev = 0,011, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( female(B) )
%   | | then return -0.06750408280680813;  // std dev = 0,010, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.18650824077981673;  // std dev = 0,647, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420268;  // std dev = 2,79e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.05994589384856713;  // std dev = 0,026, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06419184008202625;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.075993
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.66 seconds
Total inference time: 2.307 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064665
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 1.302 seconds
Refined model CLL: -0.064665


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.075993
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 5.131 seconds
Total inference time: 2.307 seconds
AUC ROC: 1.0
Total revision time: 5.131
Best scored revision CLL: -0.064665


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:20:03
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'parameter': {'AUC PR': 0.095576, 'AUC ROC': 0.868927, 'Inference time': 2.313, 'CLL': -0.319243, 'Precision': [0.095576, 0.5], 'F1': 0.174476, 'Learning time': 1.016, 'Recall': 1.0}, 'Inference time': 2.307, 'CLL': -0.075993, 'Precision': [0.742291, 0.5], 'F1': 0.852086, 'Learning time': 5.131, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8,56e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.1254446385283915;  // std dev = 0,000, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360622;  // std dev = 6,50e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.10159632948783617;  // std dev = 5,77e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926105;  // std dev = 2,11e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839679;  // std dev = 2,98e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109162;  // std dev = 4,59e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333707;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420267;  // std dev = 3,49e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801104;  // std dev = 2,36e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return -0.17593727625743724;  // std dev = 0,500, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.070836
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.882 seconds
Total inference time: 2.654 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:20:08
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Inference time': 2.654, 'CLL': -0.070836, 'Precision': [0.742291, 0.5], 'F1': 0.852086, 'Learning time': 1.882, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8,16e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.995191
   AUC PR    = 0.742291
   CLL	      = -0.166516
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.708 seconds
Total inference time: 1.408 seconds
AUC ROC: 0.995191


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:20:10
{'AUC PR': 0.742291, 'AUC ROC': 0.995191, 'Inference time': 1.408, 'CLL': -0.166516, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.708, 'Recall': 0.0}


