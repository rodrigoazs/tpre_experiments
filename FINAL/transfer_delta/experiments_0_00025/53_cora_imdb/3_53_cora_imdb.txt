Starting experiment #3 for 53_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 249953

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21898543700064782;  // std dev = 0,480, 7.890,000 (wgt'ed) examples reached here.  /* #neg=5.043 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), title(G, E) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.24276431971489698;  // std dev = 3,038, 39,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return 0.0849248913836657;  // std dev = 8,011, 366,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=83 */
%   | | | else return -0.05683082198550799;  // std dev = 4,383, 247,000 (wgt'ed) examples reached here.  /* #neg=226 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.009456698703304837;  // std dev = 6,386, 355,000 (wgt'ed) examples reached here.  /* #neg=308 #pos=47 */
%   | | | else return -0.10185106490048773;  // std dev = 1,386, 50,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.255274082777207;  // std dev = 6,294, 162,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=69 */
%   | | | else return 0.22934815685127916;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | else return 0.8293481568512792;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.22037379787692205;  // std dev = 6,095, 156,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=61 */
%   | | | else return -0.11447206786782192;  // std dev = 2,172, 89,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=5 */
%   | | else return 0.19251882279891994;  // std dev = 0,481, 7.418,000 (wgt'ed) examples reached here.  /* #neg=4.724 #pos=2.694 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then return 0.05357259649251015;  // std dev = 0,405, 411,000 (wgt'ed) examples reached here.  /* #neg=326 #pos=85 */
%   | | else return -0.014785469552084898;  // std dev = 0,328, 286,000 (wgt'ed) examples reached here.  /* #neg=250 #pos=36 */
%   | else return -0.01816364397734604;  // std dev = 0,325, 406,000 (wgt'ed) examples reached here.  /* #neg=357 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15913325489429808;  // std dev = 0,479, 7.934,000 (wgt'ed) examples reached here.  /* #neg=5.087 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7940731778344202;  // std dev = 1,953, 88,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=84 */
%   | | | else return -0.15696907664257082;  // std dev = 1,002, 305,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.19392520683328718;  // std dev = 3,084, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | | else return -0.04798896122538032;  // std dev = 4,383, 246,000 (wgt'ed) examples reached here.  /* #neg=225 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -6.920901637696344E-4;  // std dev = 6,366, 341,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=47 */
%   | | | else return -0.09396162101242315;  // std dev = 1,390, 59,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=2 */
%   | | else return -0.12346545573609972;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.7467006299976297;  // std dev = 0,192, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.3281540432832545;  // std dev = 4,117, 69,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=39 */
%   | | | else return 0.008915239374510971;  // std dev = 4,407, 107,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=27 */
%   | else return 0.1316437689836232;  // std dev = 0,479, 7.718,000 (wgt'ed) examples reached here.  /* #neg=4.958 #pos=2.760 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordtitle(J, H) )
%   | | then if ( author(K, I), venue(K, B) )
%   | | | then return 0.011737678418123874;  // std dev = 1,259, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.08107760955203637;  // std dev = 2,799, 57,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | else return -0.009283661183662863;  // std dev = 0,305, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 6.047041273521446E-4;  // std dev = 0,329, 647,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=103 */
%   | | else return -0.018323797990326296;  // std dev = 0,320, 411,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=48 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10942016798601072;  // std dev = 0,479, 7.907,000 (wgt'ed) examples reached here.  /* #neg=5.060 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.1382088907653312;  // std dev = 0,907, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.21751864599580542;  // std dev = 2,946, 36,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.26373167400190367;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.1361214641594708;  // std dev = 0,029, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.018569813117372064;  // std dev = 8,250, 692,000 (wgt'ed) examples reached here.  /* #neg=610 #pos=82 */
%   | | | else return 0.057105020645818225;  // std dev = 3,381, 91,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.015359039988607687;  // std dev = 5,349, 262,000 (wgt'ed) examples reached here.  /* #neg=214 #pos=48 */
%   | | | else return -0.10892160918541592;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5135498043786594;  // std dev = 0,210, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.24845569876290097;  // std dev = 4,079, 68,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=39 */
%   | | | else return -0.016633249898624906;  // std dev = 4,407, 109,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=27 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.3262984385301993;  // std dev = 3,926, 66,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=39 */
%   | | | else return -0.05811213908987306;  // std dev = 4,554, 141,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=27 */
%   | | else return 0.09050813480263166;  // std dev = 0,481, 7.447,000 (wgt'ed) examples reached here.  /* #neg=4.753 #pos=2.694 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.09952228842723132;  // std dev = 0,463, 50,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   | | else return -0.003031758081733269;  // std dev = 0,318, 671,000 (wgt'ed) examples reached here.  /* #neg=567 #pos=104 */
%   | else return -0.011839574715728838;  // std dev = 0,323, 411,000 (wgt'ed) examples reached here.  /* #neg=362 #pos=49 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07237640419232008;  // std dev = 0,479, 7.850,000 (wgt'ed) examples reached here.  /* #neg=5.003 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), title(G, E) )
%   | | | then return 0.3144844431350283;  // std dev = 0,646, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15802401064538582;  // std dev = 2,938, 37,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return 0.047320477825711214;  // std dev = 6,771, 365,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=83 */
%   | | | else return -0.0451616622025234;  // std dev = 4,394, 259,000 (wgt'ed) examples reached here.  /* #neg=238 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.001643534061754178;  // std dev = 6,379, 359,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=47 */
%   | | | else return -0.08066500476729947;  // std dev = 1,392, 60,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=2 */
%   | | else return -0.097572881010721;  // std dev = 0,002, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( venue(E, A), title(E, D) )
%   | then if ( haswordvenue(B, C) )
%   | | then return 0.041527429716662304;  // std dev = 0,474, 7.528,000 (wgt'ed) examples reached here.  /* #neg=4.919 #pos=2.609 */
%   | | else return 0.03280052820320391;  // std dev = 0,365, 720,000 (wgt'ed) examples reached here.  /* #neg=585 #pos=135 */
%   | else if ( title(F, D), venue(F, B) )
%   | | then return -0.12620667638813943;  // std dev = 0,366, 177,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=29 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.4037198166972118;  // std dev = 4,684, 109,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=78 */
%   | | | else return 0.06339964240644191;  // std dev = 5,087, 185,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=49 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.6258600648987942;  // std dev = 2,196, 83,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=78 */
%   | | | else return -0.1452535173611702;  // std dev = 1,276, 178,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=2 */
%   | | else return -0.0022493936006844823;  // std dev = 0,337, 38,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | else return 0.3798225606369986;  // std dev = 0,381, 51,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=31 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.38416024163654894;  // std dev = 0,070, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.07854576577552322;  // std dev = 4,472, 80,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=39 */
%   | | | else return -0.09654312722926515;  // std dev = 4,579, 145,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=27 */
%   | else return 0.04576389913676786;  // std dev = 0,477, 7.671,000 (wgt'ed) examples reached here.  /* #neg=4.911 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then return -0.015200049884712852;  // std dev = 0,299, 566,000 (wgt'ed) examples reached here.  /* #neg=466 #pos=100 */
%   | | else return 0.03206310698302742;  // std dev = 0,361, 133,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=21 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return -0.003801396809587924;  // std dev = 6,373, 355,000 (wgt'ed) examples reached here.  /* #neg=308 #pos=47 */
%   | | | else return -0.07150874682054836;  // std dev = 1,385, 52,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | else return -0.12497952032833379;  // std dev = 0,005, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( venue(E, B), title(E, D) )
%   | then if ( haswordvenue(B, C) )
%   | | then return 0.02150703365048175;  // std dev = 0,473, 7.574,000 (wgt'ed) examples reached here.  /* #neg=4.965 #pos=2.609 */
%   | | else if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.7020867767750245;  // std dev = 3,210, 142,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=131 */
%   | | | else return -0.138068908287655;  // std dev = 1,740, 510,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=3 */
%   | else if ( title(G, D), venue(G, A) )
%   | | then return -0.17031190159510753;  // std dev = 0,305, 281,000 (wgt'ed) examples reached here.  /* #neg=251 #pos=30 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.27125521410362513;  // std dev = 4,943, 113,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=78 */
%   | | | else return 0.042263198449099204;  // std dev = 5,115, 198,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=49 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then return 0.04325420505597844;  // std dev = 0,319, 286,000 (wgt'ed) examples reached here.  /* #neg=206 #pos=80 */
%   | | else return 0.10166751196326845;  // std dev = 0,408, 22,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | else return 0.42782116099610734;  // std dev = 0,299, 40,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=31 */


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,true,false;title(H, E), venue(H, A).;false;false
0;false,true;haswordauthor(F, D).;true;true
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,true;author(G, F), title(G, E).;false;false
0;false,false,true;title(K, J), venue(K, B).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordtitle(F, D).;false;false
1;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
1;true,false,true;haswordtitle(I, G).;false;false
1;false,true;title(L, K), venue(L, A).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,true,false;haswordauthor(H, D).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,false,true;title(K, J), venue(K, B).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false,true,true;author(K, I), venue(K, B).;false;false
3;true,true;haswordauthor(F, C).;false;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
3;false,true;haswordtitle(J, H).;true;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
3;true,true,false;author(G, E), venue(G, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,true,false;author(H, E), venue(H, A).;false;false
4;false,true;haswordtitle(F, D).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,true,true;author(G, E), venue(G, A).;false;false
4;false,false,true;haswordtitle(J, K), haswordauthor(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true,true;haswordauthor(F, C).;false;true
5;false,true;haswordauthor(M, K).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;true,false,true;author(J, I), venue(J, A).;false;false
5;true,true,false;author(G, E), venue(G, B).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,true,false;title(H, E), venue(H, A).;false;false
6;false,true;haswordauthor(F, D).;true;true
6;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,true,true;author(G, F), title(G, E).;false;false
6;false,false,true;title(K, J), venue(K, B).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
7;false,true,true;samebib(I, J), venue(J, B).;false;false
7;true,true;haswordvenue(B, C).;false;false
7;true,false;title(F, D), venue(F, B).;false;true
7;true;venue(E, A), title(E, D).;true;true
7;false;haswordvenue(B, G), haswordtitle(H, G).;true;false
7;false,true;title(I, H), venue(I, A).;true;false
7;true,false,false;haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true,true;haswordauthor(F, C).;false;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
8;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;true,true,false;author(G, E), venue(G, B).;false;false
8;false,false,true;title(N, M), venue(N, B).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false,true;title(J, I), venue(J, A).;false;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true;venue(E, B), title(E, D).;true;true
9;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4538936159505769;  // std dev = 4,758, 94,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=56 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.42270582375363813;  // std dev = 0,483, 89,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.12544463852839147;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.40709251101192223;  // std dev = 4,157, 81,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=56 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360624;  // std dev = 7,09e-09, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.2699622212134285;  // std dev = 4,467, 87,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( genre(H, I) )
%   | | then return -0.10159632948783619;  // std dev = 5,58e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1976405175975904;  // std dev = 4,513, 88,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=56 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.09269127618926107;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.1143244587590823;  // std dev = 4,720, 93,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839678;  // std dev = 3,95e-09, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12727925772476392;  // std dev = 4,467, 87,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=56 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109166;  // std dev = 3,80e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.041398064004128876;  // std dev = 4,795, 95,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=56 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.09285516178519501;  // std dev = 4,420, 86,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3,61e-09, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.07009662668321562;  // std dev = 4,420, 86,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=56 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0,000, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.871431
   AUC PR    = 0.103954
   CLL	      = -0.287424
   Precision = 0.103954 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18833


Total learning time: 1.262 seconds
Total inference time: 3.307 seconds
AUC ROC: 0.871431


Results scoring model
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.307613
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total scoring time: 1.526 seconds
Parameter learned model CLL: -0.307613


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [4.758, 38, 56], 'false,true,true': [5.77e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,false': [0.0, 0, 0], 'true,true': [0.483, 33, 56], 'false,true': [0.0, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'true': [4.157, 25, 56], 'false,true': [7.09e-09, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, A)', 'true,true': 'genre(E, F)', 'false,true': 'genre(H, I)'}, {'false,true,false': [0.0, 0, 0], 'false,true,true': [5.58e-08, 85, 0], 'true,true,true': [4.467, 31, 56], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [4.513, 32, 56], 'false,true,true': [0.0, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'false,true': [3.95e-09, 91, 0], 'true,true,true': [4.72, 37, 56], 'true,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [4.467, 31, 56], 'false,true,true': [3.8e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [4.795, 39, 56], 'true,false,false': [0.0, 79, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'false,true': [3.61e-09, 72, 0], 'true,true,true': [4.42, 30, 56], 'true,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [4.42, 30, 56], 'true,false,false': [0.0, 84, 0]}]]
[{'': [0.24083295608872768, 5.947623346206196e-17], 'false': [5.947623346206196e-17, nan], 'false,true': [5.947623346206196e-17, nan]}, {'': [0.23330387577325887, -2.166288828536891e-17], 'true': [0.23330387577325887, nan], 'false': [-2.166288828536891e-17, nan]}, {'': [0.213382106386222, 4.966787215428332e-17], 'false': [4.966787215428332e-17, nan]}, {'': [0.22935658607477852, 3.657205257588751e-17], 'true': [0.22935658607477852, nan], 'false': [3.657205257588751e-17, nan], 'true,true': [0.22935658607477852, nan], 'false,true': [3.657205257588751e-17, nan]}, {'': [0.2314049586776851, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.23956526766100106, 1.4640303621430636e-17], 'true': [0.23956526766100106, nan], 'false': [1.4640303621430636e-17, nan], 'true,true': [0.23956526766100106, nan]}, {'': [0.22935658607477896, 2.0045693500176437e-17], 'false': [2.0045693500176437e-17, nan], 'false,true': [2.0045693500176437e-17, nan]}, {'': [0.13538145681201796, nan], 'true,false': [nan, -4.216036802374012e-18], 'true': [0.24199445983379528, -4.216036802374012e-18]}, {'': [0.22714981070849116, 1.3106799596269209e-17], 'true': [0.22714981070849116, nan], 'false': [1.3106799596269209e-17, nan], 'true,true': [0.22714981070849116, nan]}, {'': [0.11941880479508075, nan], 'true,false': [nan, -1.057355261547768e-17], 'true': [0.2271498107084911, -1.057355261547768e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995124;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.14185106490048766;  // std dev = 7,88e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.12544463852839152;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936064;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.5553664367462837;  // std dev = 1,03e-07, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.11231637819360625;  // std dev = 5,27e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.4175135841583103;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.10159632948783615;  // std dev = 5,67e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.09269127618926107;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839679;  // std dev = 2,24e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.08518475138839679;  // std dev = 2,98e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109179;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.07877675473109164;  // std dev = 4,47e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.06842697784420267;  // std dev = 3,57e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.13400703000801079;  // std dev = 5,16e-08, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.071612
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 1.85 seconds
Total inference time: 2.382 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064055
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total scoring time: 1.565 seconds
Refined model CLL: -0.064055


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.071612
   Precision = 0.735892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.847854


Total learning time: 6.202999999999999 seconds
Total inference time: 2.382 seconds
AUC ROC: 1.0
Total revision time: 6.202999999999999
Best scored revision CLL: -0.064055


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:23:31
{'Precision': [0.735892, 0.5], 'Recall': 1.0, 'F1': 0.847854, 'parameter': {'Precision': [0.103954, 0.5], 'Recall': 1.0, 'F1': 0.18833, 'AUC PR': 0.103954, 'Learning time': 1.262, 'Inference time': 3.307, 'CLL': -0.287424, 'AUC ROC': 0.871431}, 'AUC PR': 1.0, 'Learning time': 6.202999999999999, 'Inference time': 2.382, 'CLL': -0.071612, 'AUC ROC': 1.0}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,true,false;title(H, E), venue(H, A).;false;false
0;false,true;haswordauthor(F, D).;true;true
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,true;author(G, F), title(G, E).;false;false
0;false,false,true;title(K, J), venue(K, B).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordtitle(F, D).;false;false
1;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
1;true,false,true;haswordtitle(I, G).;false;false
1;false,true;title(L, K), venue(L, A).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,true,false;haswordauthor(H, D).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,false,true;title(K, J), venue(K, B).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false,true,true;author(K, I), venue(K, B).;false;false
3;true,true;haswordauthor(F, C).;false;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
3;false,true;haswordtitle(J, H).;true;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
3;true,true,false;author(G, E), venue(G, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,true,false;author(H, E), venue(H, A).;false;false
4;false,true;haswordtitle(F, D).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,true,true;author(G, E), venue(G, A).;false;false
4;false,false,true;haswordtitle(J, K), haswordauthor(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true,true;haswordauthor(F, C).;false;true
5;false,true;haswordauthor(M, K).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;true,false,true;author(J, I), venue(J, A).;false;false
5;true,true,false;author(G, E), venue(G, B).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,true,false;title(H, E), venue(H, A).;false;false
6;false,true;haswordauthor(F, D).;true;true
6;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,true,true;author(G, F), title(G, E).;false;false
6;false,false,true;title(K, J), venue(K, B).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
7;false,true,true;samebib(I, J), venue(J, B).;false;false
7;true,true;haswordvenue(B, C).;false;false
7;true,false;title(F, D), venue(F, B).;false;true
7;true;venue(E, A), title(E, D).;true;true
7;false;haswordvenue(B, G), haswordtitle(H, G).;true;false
7;false,true;title(I, H), venue(I, A).;true;false
7;true,false,false;haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true,true;haswordauthor(F, C).;false;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
8;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;true,true,false;author(G, E), venue(G, B).;false;false
8;false,false,true;title(N, M), venue(N, B).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false,true;title(J, I), venue(J, A).;false;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true;venue(E, B), title(E, D).;true;true
9;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5831489350995129;  // std dev = 3,994, 80,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=58 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048763;  // std dev = 8,69e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3820352364319987;  // std dev = 0,488, 95,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.1254446385283914;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3278070300847345;  // std dev = 4,630, 92,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=58 */
%   else if ( movie(D, B) )
%   | then return -0.1123163781936062;  // std dev = 8,01e-09, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.298523610284083;  // std dev = 4,346, 86,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( genre(H, I) )
%   | | then return -0.10159632948783626;  // std dev = 4,59e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20361871495141615;  // std dev = 4,495, 89,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=58 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.09269127618926107;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.15290200914444296;  // std dev = 4,495, 89,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839682;  // std dev = 5,43e-09, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08671446818949709;  // std dev = 4,672, 93,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=58 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109161;  // std dev = 5,37e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.1757577476104071;  // std dev = 3,927, 79,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=58 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.05047577130578831;  // std dev = 4,495, 89,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4,47e-09, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.0037738073884525255;  // std dev = 4,713, 94,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=58 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.86826
   AUC PR    = 0.102112
   CLL	      = -0.302374
   Precision = 0.102112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185302


Total learning time: 1.337 seconds
Total inference time: 2.458 seconds
AUC ROC: 0.86826


Results scoring model
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.300288
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total scoring time: 1.464 seconds
Parameter learned model CLL: -0.300288


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [3.994, 22, 58], 'false,true,true': [8.69e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,false': [0.0, 0, 0], 'true,true': [0.488, 37, 58], 'false,true': [0.0, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'true': [4.63, 34, 58], 'false,true': [8.01e-09, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, A)', 'true,true': 'genre(E, F)', 'false,true': 'genre(H, I)'}, {'false,true,false': [0.0, 0, 0], 'false,true,true': [4.59e-08, 96, 0], 'true,true,true': [4.346, 28, 58], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [4.495, 31, 58], 'false,true,true': [0.0, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'false,true': [5.43e-09, 87, 0], 'true,true,true': [4.495, 31, 58], 'true,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [4.672, 35, 58], 'false,true,true': [5.37e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.927, 21, 58], 'true,false,false': [0.0, 93, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'false,true': [4.47e-09, 86, 0], 'true,true,true': [4.495, 31, 58], 'true,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [4.713, 36, 58], 'true,false,false': [0.0, 82, 0]}]]
[{'': [0.19937499999999955, 7.946859544685331e-17], 'false': [7.946859544685331e-17, nan], 'false,true': [7.946859544685331e-17, nan]}, {'': [0.23778393351800703, -1.68946982008176e-17], 'true': [0.23778393351800703, nan], 'false': [-1.68946982008176e-17, nan]}, {'': [0.23298676748582162, 6.180623023686439e-17], 'false': [6.180623023686439e-17, nan]}, {'': [0.21957815035154246, 2.1973164029039556e-17], 'true': [0.21957815035154246, nan], 'false': [2.1973164029039556e-17, nan], 'true,true': [0.21957815035154246, nan], 'false,true': [2.1973164029039556e-17, nan]}, {'': [0.22699154147203668, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.2269915414720366, 2.9350723639515634e-17], 'true': [0.2269915414720366, nan], 'false': [2.9350723639515634e-17, nan], 'true,true': [0.2269915414720366, nan]}, {'': [0.23470921493814334, 3.1038493161563513e-17], 'false': [3.1038493161563513e-17, nan], 'false,true': [3.1038493161563513e-17, nan]}, {'': [0.10503596491973695, nan], 'true,false': [nan, -8.356517389651716e-18], 'true': [0.19516103188591577, -8.356517389651716e-18]}, {'': [0.22699154147203643, 2.0009833583360378e-17], 'true': [0.22699154147203643, nan], 'false': [2.0009833583360378e-17, nan], 'true,true': [0.22699154147203643, nan]}, {'': [0.12735836125588681, nan], 'true,false': [nan, -1.1508409401602232e-17], 'true': [0.23630602082390215, -1.1508409401602232e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.8581489350995125;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.14185106490048766;  // std dev = 7,45e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.12544463852839138;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.5553664367462838;  // std dev = 1,19e-07, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.1123163781936062;  // std dev = 7,74e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.4175135841583103;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.10159632948783616;  // std dev = 5,96e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.092691276189261;  // std dev = 4,21e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.08518475138839682;  // std dev = 5,27e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109176;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.07877675473109166;  // std dev = 3,94e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333706;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else if ( female(A) )
%   | | then return 0.1353727104938417;  // std dev = 0,093, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0.15877873748854962;  // std dev = 0,065, 41,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420274;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.1561959113569654;  // std dev = 0,011, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.06947732604628974;  // std dev = 0,037, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.11884206359719553;  // std dev = 0,062, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.12497731188575864;  // std dev = 0,047, 40,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | else return -0.06439156090585825;  // std dev = 0,022, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.086644
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 1.717 seconds
Total inference time: 2.55 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06706
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total scoring time: 1.383 seconds
Refined model CLL: -0.06706


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.086644
   Precision = 0.736364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.848168


Total learning time: 5.901000000000001 seconds
Total inference time: 2.55 seconds
AUC ROC: 1.0
Total revision time: 5.901000000000001
Best scored revision CLL: -0.06706


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:23:43
{'Precision': [0.736364, 0.5], 'Recall': 1.0, 'F1': 0.848168, 'parameter': {'Precision': [0.102112, 0.5], 'Recall': 1.0, 'F1': 0.185302, 'AUC PR': 0.102112, 'Learning time': 1.337, 'Inference time': 2.458, 'CLL': -0.302374, 'AUC ROC': 0.86826}, 'AUC PR': 1.0, 'Learning time': 5.901000000000001, 'Inference time': 2.55, 'CLL': -0.086644, 'AUC ROC': 1.0}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,true,false;title(H, E), venue(H, A).;false;false
0;false,true;haswordauthor(F, D).;true;true
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,true;author(G, F), title(G, E).;false;false
0;false,false,true;title(K, J), venue(K, B).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordtitle(F, D).;false;false
1;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
1;true,false,true;haswordtitle(I, G).;false;false
1;false,true;title(L, K), venue(L, A).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,true,false;haswordauthor(H, D).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,false,true;title(K, J), venue(K, B).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false,true,true;author(K, I), venue(K, B).;false;false
3;true,true;haswordauthor(F, C).;false;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
3;false,true;haswordtitle(J, H).;true;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
3;true,true,false;author(G, E), venue(G, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,true,false;author(H, E), venue(H, A).;false;false
4;false,true;haswordtitle(F, D).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,true,true;author(G, E), venue(G, A).;false;false
4;false,false,true;haswordtitle(J, K), haswordauthor(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true,true;haswordauthor(F, C).;false;true
5;false,true;haswordauthor(M, K).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;true,false,true;author(J, I), venue(J, A).;false;false
5;true,true,false;author(G, E), venue(G, B).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,true,false;title(H, E), venue(H, A).;false;false
6;false,true;haswordauthor(F, D).;true;true
6;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,true,true;author(G, F), title(G, E).;false;false
6;false,false,true;title(K, J), venue(K, B).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
7;false,true,true;samebib(I, J), venue(J, B).;false;false
7;true,true;haswordvenue(B, C).;false;false
7;true,false;title(F, D), venue(F, B).;false;true
7;true;venue(E, A), title(E, D).;true;true
7;false;haswordvenue(B, G), haswordtitle(H, G).;true;false
7;false,true;title(I, H), venue(I, A).;true;false
7;true,false,false;haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true,true;haswordauthor(F, C).;false;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
8;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;true,true,false;author(G, E), venue(G, B).;false;false
8;false,false,true;title(N, M), venue(N, B).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false,true;title(J, I), venue(J, A).;false;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true;venue(E, B), title(E, D).;true;true
9;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5323913593419329;  // std dev = 7,615, 264,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=178 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048807;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.47025559243089904;  // std dev = 0,463, 258,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=178 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.125444638528392;  // std dev = 0,000, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4129852237173327;  // std dev = 7,015, 246,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=178 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360697;  // std dev = 0,000, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.30408948226917515;  // std dev = 7,195, 251,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( genre(H, I) )
%   | | then return -0.1015963294878366;  // std dev = 0,000, 270,000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18923174644133836;  // std dev = 7,674, 266,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=178 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.09269127618926046;  // std dev = 1,17e-07, 262,000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.13945522885399442;  // std dev = 7,703, 267,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839678;  // std dev = 5,82e-09, 259,000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1502152274347248;  // std dev = 7,160, 250,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=178 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109143;  // std dev = 4,94e-08, 280,000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.08625840166440978;  // std dev = 7,493, 260,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=178 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333695;  // std dev = 1,00e-07, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.09026326139908254;  // std dev = 7,195, 251,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=178 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420293;  // std dev = 0,000, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.0836276076730842;  // std dev = 7,015, 246,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=178 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202604;  // std dev = 9,06e-08, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.861638
   AUC PR    = 0.064496
   CLL	      = -0.34419
   Precision = 0.064496 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121176


Total learning time: 1.696 seconds
Total inference time: 2.7 seconds
AUC ROC: 0.861638


Results scoring model
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.295302
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total scoring time: 1.599 seconds
Parameter learned model CLL: -0.295302


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [7.615, 86, 178], 'false,true,true': [0.0, 268, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,false': [0.0, 0, 0], 'true,true': [0.463, 80, 178], 'false,true': [0.0, 291, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'true': [7.015, 68, 178], 'false,true': [0.0, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, A)', 'true,true': 'genre(E, F)', 'false,true': 'genre(H, I)'}, {'false,true,false': [0.0, 0, 0], 'false,true,true': [0.0, 270, 0], 'true,true,true': [7.195, 73, 178], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [7.674, 88, 178], 'false,true,true': [1.17e-07, 262, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'false,true': [5.82e-09, 259, 0], 'true,true,true': [7.703, 89, 178], 'true,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [7.16, 72, 178], 'false,true,true': [4.94e-08, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [7.493, 82, 178], 'true,false,false': [1e-07, 293, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'false,true': [0.0, 286, 0], 'true,true,true': [7.195, 73, 178], 'true,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [7.015, 68, 178], 'true,false,false': [9.06e-08, 283, 0]}]]
[{'': [0.21963957759412847, -6.296787303844171e-17], 'false': [-6.296787303844171e-17, nan], 'false,true': [-6.296787303844171e-17, nan]}, {'': [0.21392945135508892, -8.240830698248585e-17], 'true': [0.21392945135508892, nan], 'false': [-8.240830698248585e-17, nan]}, {'': [0.2000132196443945, -1.1571338566515715e-16], 'false': [-1.1571338566515715e-16, nan]}, {'': [0.20625069443342464, -6.41462192005646e-17], 'true': [0.20625069443342464, nan], 'false': [-6.41462192005646e-17, nan], 'true,true': [0.20625069443342464, nan], 'false,true': [-6.41462192005646e-17, nan]}, {'': [0.22138051896658803, 5.2544906508976876e-17], 'false': [5.2544906508976876e-17, nan], 'false,true': [5.2544906508976876e-17, nan]}, {'': [0.2222222222222222, 3.429260307722491e-17], 'true': [0.2222222222222222, nan], 'false': [3.429260307722491e-17, nan], 'true,true': [0.2222222222222222, nan]}, {'': [0.20505599999999968, 8.723180907769087e-18], 'false': [8.723180907769087e-18, nan], 'false,true': [8.723180907769087e-18, nan]}, {'': [0.10785398706534284, nan], 'true,false': [nan, 3.4102413725687404e-17], 'true': [0.21591715976331288, 3.4102413725687404e-17]}, {'': [0.20625069443342062, -4.5030024775006347e-17], 'true': [0.20625069443342062, nan], 'false': [-4.5030024775006347e-17, nan], 'true,true': [0.20625069443342062, nan]}, {'': [0.09844774225212766, nan], 'true,false': [nan, 2.9030566721647206e-17], 'true': [0.200013219644392, 2.9030566721647206e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995095;  // std dev = 1,09e-06, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1418510649004877;  // std dev = 4,94e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.14185106490048804;  // std dev = 0,000, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109567;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839127;  // std dev = 5,16e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.1254446385283919;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360635;  // std dev = 2,98e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.11231637819360694;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583096;  // std dev = 3,77e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783631;  // std dev = 2,11e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.10159632948783663;  // std dev = 0,000, 313,000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014917;  // std dev = 3,58e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.09269127618926044;  // std dev = 1,33e-07, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694888;  // std dev = 3,63e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.08518475138839679;  // std dev = 2,11e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.08518475138839678;  // std dev = 9,54e-08, 267,000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253506;  // std dev = 3,00e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.07877675473109143;  // std dev = 5,16e-08, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.11242462750555271;  // std dev = 0,110, 120,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=89 */
%   | | else return 0.10789607010875055;  // std dev = 0,112, 123,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=89 */
%   | else return -0.07324622576333682;  // std dev = 1,06e-07, 294,000 (wgt'ed) examples reached here.  /* #neg=294 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.16160926471015113;  // std dev = 0,004, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.07098800482460131;  // std dev = 0,081, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.07001652931436078;  // std dev = 0,102, 132,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=89 */
%   | | else return 0.08378791573228254;  // std dev = 0,096, 121,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=89 */
%   | else return -0.06407304720645302;  // std dev = 0,001, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06471
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.744 seconds
Total inference time: 2.233 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.069676
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.558 seconds
Refined model CLL: -0.069676


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06471
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.5969999999999995 seconds
Total inference time: 2.233 seconds
AUC ROC: 1.0
Total revision time: 7.5969999999999995
Best scored revision CLL: -0.069676


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:23:56
{'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'parameter': {'Precision': [0.064496, 0.5], 'Recall': 1.0, 'F1': 0.121176, 'AUC PR': 0.064496, 'Learning time': 1.696, 'Inference time': 2.7, 'CLL': -0.34419, 'AUC ROC': 0.861638}, 'AUC PR': 1.0, 'Learning time': 7.5969999999999995, 'Inference time': 2.233, 'CLL': -0.06471, 'AUC ROC': 1.0}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,true,false;title(H, E), venue(H, A).;false;false
0;false,true;haswordauthor(F, D).;true;true
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,true;author(G, F), title(G, E).;false;false
0;false,false,true;title(K, J), venue(K, B).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordtitle(F, D).;false;false
1;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
1;true,false,true;haswordtitle(I, G).;false;false
1;false,true;title(L, K), venue(L, A).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,true,false;haswordauthor(H, D).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,false,true;title(K, J), venue(K, B).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false,true,true;author(K, I), venue(K, B).;false;false
3;true,true;haswordauthor(F, C).;false;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
3;false,true;haswordtitle(J, H).;true;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
3;true,true,false;author(G, E), venue(G, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,true,false;author(H, E), venue(H, A).;false;false
4;false,true;haswordtitle(F, D).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,true,true;author(G, E), venue(G, A).;false;false
4;false,false,true;haswordtitle(J, K), haswordauthor(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true,true;haswordauthor(F, C).;false;true
5;false,true;haswordauthor(M, K).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;true,false,true;author(J, I), venue(J, A).;false;false
5;true,true,false;author(G, E), venue(G, B).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,true,false;title(H, E), venue(H, A).;false;false
6;false,true;haswordauthor(F, D).;true;true
6;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,true,true;author(G, F), title(G, E).;false;false
6;false,false,true;title(K, J), venue(K, B).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
7;false,true,true;samebib(I, J), venue(J, B).;false;false
7;true,true;haswordvenue(B, C).;false;false
7;true,false;title(F, D), venue(F, B).;false;true
7;true;venue(E, A), title(E, D).;true;true
7;false;haswordvenue(B, G), haswordtitle(H, G).;true;false
7;false,true;title(I, H), venue(I, A).;true;false
7;true,false,false;haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true,true;haswordauthor(F, C).;false;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
8;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;true,true,false;author(G, E), venue(G, B).;false;false
8;false,false,true;title(N, M), venue(N, B).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false,true;title(J, I), venue(J, A).;false;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true;venue(E, B), title(E, D).;true;true
9;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4919517520009212;  // std dev = 4,059, 71,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048766;  // std dev = 6,99e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3641094507948342;  // std dev = 0,494, 78,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.12544463852839158;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3627517319093882;  // std dev = 4,009, 70,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=45 */
%   else if ( movie(D, B) )
%   | then return -0.1123163781936063;  // std dev = 4,93e-09, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.26634050427955813;  // std dev = 4,108, 72,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( genre(H, I) )
%   | | then return -0.10159632948783617;  // std dev = 5,27e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17017307189098316;  // std dev = 4,284, 76,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=45 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.09269127618926107;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.2179236009290393;  // std dev = 3,784, 66,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2,79e-09, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18482065576724224;  // std dev = 3,655, 64,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=45 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109179;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.18583801525809324;  // std dev = 3,354, 60,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=45 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.03366712255107692;  // std dev = 4,009, 70,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0684269778442027;  // std dev = 1,86e-09, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return -0.01717529697306463;  // std dev = 4,243, 75,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=45 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.870352
   AUC PR    = 0.095252
   CLL	      = -0.297639
   Precision = 0.095252 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173935


Total learning time: 1.175 seconds
Total inference time: 3.215 seconds
AUC ROC: 0.870352


Results scoring model
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.324791
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total scoring time: 1.192 seconds
Parameter learned model CLL: -0.324791


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [4.059, 26, 45], 'false,true,true': [6.99e-08, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,false': [0.0, 0, 0], 'true,true': [0.494, 33, 45], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'true': [4.009, 25, 45], 'false,true': [4.93e-09, 53, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, A)', 'true,true': 'genre(E, F)', 'false,true': 'genre(H, I)'}, {'false,true,false': [0.0, 0, 0], 'false,true,true': [5.27e-08, 69, 0], 'true,true,true': [4.108, 27, 45], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [4.284, 31, 45], 'false,true,true': [0.0, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'false,true': [2.79e-09, 75, 0], 'true,true,true': [3.784, 21, 45], 'true,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [3.655, 19, 45], 'false,true,true': [7.45e-09, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.354, 15, 45], 'true,false,false': [0.0, 72, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'false,true': [1.86e-09, 51, 0], 'true,true,true': [4.009, 25, 45], 'true,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [4.243, 30, 45], 'true,false,false': [0.0, 63, 0]}]]
[{'': [0.23209680618924847, 6.880255363874209e-17], 'false': [6.880255363874209e-17, nan], 'false,true': [6.880255363874209e-17, nan]}, {'': [0.24408284023668742, -3.766828119263924e-17], 'true': [0.24408284023668742, nan], 'false': [-3.766828119263924e-17, nan]}, {'': [0.22959183673469497, 2.3042364662031552e-17], 'false': [2.3042364662031552e-17, nan]}, {'': [0.23437500000000064, 4.022547190670857e-17], 'true': [0.23437500000000064, nan], 'false': [4.022547190670857e-17, nan], 'true,true': [0.23437500000000064, nan], 'false,true': [4.022547190670857e-17, nan]}, {'': [0.24151662049861541, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.21694214876033066, 7.401486830834377e-18], 'true': [0.21694214876033066, nan], 'false': [7.401486830834377e-18, nan], 'true,true': [0.21694214876033066, nan]}, {'': [0.20874023437499978, 1.0675221390626506e-18], 'false': [1.0675221390626506e-18, nan], 'false,true': [1.0675221390626506e-18, nan]}, {'': [0.10186974643280533, nan], 'true,false': [nan, -3.854941057726238e-18], 'true': [0.18749999999999975, -3.854941057726238e-18]}, {'': [0.229591836734694, 3.8095888099882826e-18], 'true': [0.229591836734694, nan], 'false': [3.8095888099882826e-18, nan], 'true,true': [0.229591836734694, nan]}, {'': [0.1309832426966475, nan], 'true,false': [nan, -2.64338815386942e-18], 'true': [0.23999999999999996, -2.64338815386942e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.14185106490048766;  // std dev = 6,66e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.12544463852839158;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360622;  // std dev = 6,83e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783617;  // std dev = 5,27e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.09269127618926107;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.07877675473109173;  // std dev = 2,24e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.1385822325901059;  // std dev = 0,090, 13,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.15074463211279177;  // std dev = 0,077, 38,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=34 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420276;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.15657889154899685;  // std dev = 0,005, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06926820674640147;  // std dev = 0,026, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.09460334292973942;  // std dev = 0,086, 56,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=45 */
%   | else return -0.06415455509239876;  // std dev = 0,000204, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.081702
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 1.752 seconds
Total inference time: 2.427 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.069116
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total scoring time: 1.231 seconds
Refined model CLL: -0.069116


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.081702
   Precision = 0.743929 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.853165


Total learning time: 5.35 seconds
Total inference time: 2.427 seconds
AUC ROC: 1.0
Total revision time: 5.35
Best scored revision CLL: -0.069116


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:24:08
{'Precision': [0.743929, 0.5], 'Recall': 1.0, 'F1': 0.853165, 'parameter': {'Precision': [0.095252, 0.5], 'Recall': 1.0, 'F1': 0.173935, 'AUC PR': 0.095252, 'Learning time': 1.175, 'Inference time': 3.215, 'CLL': -0.297639, 'AUC ROC': 0.870352}, 'AUC PR': 1.0, 'Learning time': 5.35, 'Inference time': 2.427, 'CLL': -0.081702, 'AUC ROC': 1.0}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,true,false;title(H, E), venue(H, A).;false;false
0;false,true;haswordauthor(F, D).;true;true
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,true;author(G, F), title(G, E).;false;false
0;false,false,true;title(K, J), venue(K, B).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordtitle(F, D).;false;false
1;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
1;true,false,true;haswordtitle(I, G).;false;false
1;false,true;title(L, K), venue(L, A).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,true,false;haswordauthor(H, D).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,false,true;title(K, J), venue(K, B).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false,true,true;author(K, I), venue(K, B).;false;false
3;true,true;haswordauthor(F, C).;false;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
3;false,true;haswordtitle(J, H).;true;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
3;true,true,false;author(G, E), venue(G, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,true,false;author(H, E), venue(H, A).;false;false
4;false,true;haswordtitle(F, D).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,true,true;author(G, E), venue(G, A).;false;false
4;false,false,true;haswordtitle(J, K), haswordauthor(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true,true;haswordauthor(F, C).;false;true
5;false,true;haswordauthor(M, K).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;true,false,true;author(J, I), venue(J, A).;false;false
5;true,true,false;author(G, E), venue(G, B).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,true,false;title(H, E), venue(H, A).;false;false
6;false,true;haswordauthor(F, D).;true;true
6;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,true,true;author(G, F), title(G, E).;false;false
6;false,false,true;title(K, J), venue(K, B).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
7;false,true,true;samebib(I, J), venue(J, B).;false;false
7;true,true;haswordvenue(B, C).;false;false
7;true,false;title(F, D), venue(F, B).;false;true
7;true;venue(E, A), title(E, D).;true;true
7;false;haswordvenue(B, G), haswordtitle(H, G).;true;false
7;false,true;title(I, H), venue(I, A).;true;false
7;true,false,false;haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true,true;haswordauthor(F, C).;false;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
8;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;true,true,false;author(G, E), venue(G, B).;false;false
8;false,false,true;title(N, M), venue(N, B).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false,true;title(J, I), venue(J, A).;false;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true;venue(E, B), title(E, D).;true;true
9;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5297907261442888;  // std dev = 3,844, 67,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=45 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048766;  // std dev = 6,99e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.405778570040439;  // std dev = 0,484, 72,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=45 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.1254446385283916;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.33738834027344244;  // std dev = 4,059, 71,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360628;  // std dev = 5,59e-09, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.39150489085174245;  // std dev = 3,268, 59,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( genre(H, I) )
%   | | then return -0.10159632948783617;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1419406989275336;  // std dev = 4,199, 74,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.09269127618926107;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.22420565052311606;  // std dev = 3,513, 62,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2,95e-09, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12442010875234509;  // std dev = 3,784, 66,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=45 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109169;  // std dev = 3,33e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.01216343875219387;  // std dev = 4,243, 75,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=45 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.01732771275417185;  // std dev = 4,199, 74,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 2,95e-09, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.06680186511377062;  // std dev = 3,901, 68,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.868927
   AUC PR    = 0.095576
   CLL	      = -0.298853
   Precision = 0.095576 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174476


Total learning time: 1.055 seconds
Total inference time: 3.559 seconds
AUC ROC: 0.868927


Results scoring model
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.306094
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total scoring time: 1.232 seconds
Parameter learned model CLL: -0.306094


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [3.844, 22, 45], 'false,true,true': [6.99e-08, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,false': [0.0, 0, 0], 'true,true': [0.484, 27, 45], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'true': [4.059, 26, 45], 'false,true': [5.59e-09, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, A)', 'true,true': 'genre(E, F)', 'false,true': 'genre(H, I)'}, {'false,true,false': [0.0, 0, 0], 'false,true,true': [4.71e-08, 67, 0], 'true,true,true': [3.268, 14, 45], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [4.199, 29, 45], 'false,true,true': [0.0, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'false,true': [2.95e-09, 78, 0], 'true,true,true': [3.513, 17, 45], 'true,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)', 'false,true': 'genre(E, F)'}, {'false,true,false': [0.0, 0, 0], 'true': [3.784, 21, 45], 'false,true,true': [3.33e-08, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [4.243, 30, 45], 'true,false,false': [0.0, 68, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(G, B)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'false,true': [2.95e-09, 65, 0], 'true,true,true': [4.199, 29, 45], 'true,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.901, 23, 45], 'true,false,false': [0.0, 60, 0]}]]
[{'': [0.22053909556694173, 6.97854472621527e-17], 'false': [6.97854472621527e-17, nan], 'false,true': [6.97854472621527e-17, nan]}, {'': [0.2343749999999999, -4.118569284899774e-17], 'true': [0.2343749999999999, nan], 'false': [-4.118569284899774e-17, nan]}, {'': [0.23209680618924786, 3.062684205862501e-17], 'false': [3.062684205862501e-17, nan]}, {'': [0.18098247629991393, 3.314098580970616e-17], 'true': [0.18098247629991393, nan], 'false': [3.314098580970616e-17, nan], 'true,true': [0.18098247629991393, nan], 'false,true': [3.314098580970616e-17, nan]}, {'': [0.23831263696128593, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.19901144640998983, 9.963539964584738e-18], 'true': [0.19901144640998983, nan], 'false': [9.963539964584738e-18, nan], 'true,true': [0.19901144640998983, nan]}, {'': [0.21694214876033102, 1.657049290485308e-17], 'false': [1.657049290485308e-17, nan], 'false,true': [1.657049290485308e-17, nan]}, {'': [0.12769345860641285, nan], 'true,false': [nan, -2.44902137784961e-18], 'true': [0.24000000000000005, -2.44902137784961e-18]}, {'': [0.2383126369612855, 9.394194823751325e-18], 'true': [0.2383126369612855, nan], 'false': [9.394194823751325e-18, nan], 'true,true': [0.2383126369612855, nan]}, {'': [0.12318392610994935, nan], 'true,false': [nan, -3.23815048849004e-18], 'true': [0.22383217993079557, -3.23815048849004e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 2,23e-07, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.14185106490048766;  // std dev = 6,32e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.719473412210955;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1254446385283915;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.5553664367462839;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360629;  // std dev = 4,08e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831025;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( actor(A) )
%   | | then return -0.10159632948783635;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.22181885107629978;  // std dev = 0,416, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783617;  // std dev = 4,83e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09233469728537849;  // std dev = 0,009, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.09269127618926107;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08455208729450456;  // std dev = 0,012, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325355;  // std dev = 5,58e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( actor(A) )
%   | | then return -0.07884857498364711;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.18949981878852767;  // std dev = 0,532, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.0787767547310917;  // std dev = 3,07e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17165426462552502;  // std dev = 0,248, 46,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( actor(A) )
%   | | then return -0.07326379760296554;  // std dev = 0,000248, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return -0.17731066185627298;  // std dev = 0,497, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0672073202809353;  // std dev = 0,025, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.15344948653347498;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06857200164196244;  // std dev = 0,028, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0634883907016171;  // std dev = 0,027, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return 0.13455766246279935;  // std dev = 4,59e-08, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.08055878601553144;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07347
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.804 seconds
Total inference time: 2.232 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06517
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 1.231 seconds
Refined model CLL: -0.06517


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07347
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 5.322 seconds
Total inference time: 2.232 seconds
AUC ROC: 1.0
Total revision time: 5.322
Best scored revision CLL: -0.06517


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:24:19
{'Precision': [0.742291, 0.5], 'Recall': 1.0, 'F1': 0.852086, 'parameter': {'Precision': [0.095576, 0.5], 'Recall': 1.0, 'F1': 0.174476, 'AUC PR': 0.095576, 'Learning time': 1.055, 'Inference time': 3.559, 'CLL': -0.298853, 'AUC ROC': 0.868927}, 'AUC PR': 1.0, 'Learning time': 5.322, 'Inference time': 2.232, 'CLL': -0.07347, 'AUC ROC': 1.0}


