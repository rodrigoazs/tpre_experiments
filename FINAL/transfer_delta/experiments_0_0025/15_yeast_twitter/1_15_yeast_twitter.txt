Starting experiment #1 for 15_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 51477

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( interaction(C, D), interaction(E, A) )
%   | then return 0.8337586911970727;  // std dev = 0,154, 41,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else return 0.6676727446233218;  // std dev = 0,393, 21,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   else if ( interaction(F, A), interaction(A, F) )
%   | then if ( interaction(A, A) )
%   | | then return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( complex(F, G), enzyme(A, H) )
%   | | | then return 0.011995088945666114;  // std dev = 1,840, 26,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | | | else return 0.1678834483738485;  // std dev = 4,915, 113,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=35 */
%   | else if ( interaction(A, I), complex(I, J) )
%   | | then if ( complex(A, J), location(A, K) )
%   | | | then return 0.06449814144871872;  // std dev = 3,212, 63,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
%   | | | else return 0.17633075328133066;  // std dev = 5,780, 154,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=49 */
%   | | else if ( interaction(L, A), interaction(L, L) )
%   | | | then return 0.14538297765270278;  // std dev = 4,387, 94,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=27 */
%   | | | else return 0.18789803904216051;  // std dev = 11,105, 558,000 (wgt'ed) examples reached here.  /* #neg=374 #pos=184 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.7383769917252864;  // std dev = 0,184, 59,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   else if ( interaction(A, D), interaction(D, D) )
%   | then if ( interaction(E, A), interaction(D, E) )
%   | | then if ( interaction(A, A) )
%   | | | then return -0.12544463852839152;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return 0.15081571190834075;  // std dev = 3,461, 57,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=18 */
%   | | else if ( complex(A, F), enzyme(D, G) )
%   | | | then return 0.2784688546493701;  // std dev = 2,090, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | else return 0.13282130416074003;  // std dev = 4,378, 94,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=28 */
%   | else if ( interaction(H, A), complex(H, I) )
%   | | then if ( complex(A, I), location(H, J) )
%   | | | then return 0.047306347513517255;  // std dev = 3,351, 71,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | | | else return 0.18058711215744574;  // std dev = 9,053, 363,000 (wgt'ed) examples reached here.  /* #neg=237 #pos=126 */
%   | | else if ( enzyme(A, K), complex(A, L) )
%   | | | then return 0.31705065667469395;  // std dev = 2,927, 35,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=17 */
%   | | | else return 0.18374222298920187;  // std dev = 8,017, 285,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=100 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( phenotype(A, C) )
%   then if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then return 0.5464196498275077;  // std dev = 0,265, 35,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | else if ( phenotype(E, C), recursion_proteinclass(E, B) )
%   | | then if ( interaction(F, A), interaction(F, E) )
%   | | | then return 0.7890201344045468;  // std dev = 1,427, 143,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=141 */
%   | | | else return 0.17556790673097164;  // std dev = 3,936, 68,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=25 */
%   | | else return -0.18172383586431412;  // std dev = 0,482, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
%   else if ( interaction(A, A) )
%   | then if ( interaction(G, A), recursion_proteinclass(G, B) )
%   | | then return 0.5567208689469246;  // std dev = 3,65e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11651027467549381;  // std dev = 0,107, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | | then return 0.6683585765453676;  // std dev = 0,067, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( complex(A, I), interaction(A, J) )
%   | | | then return 0.07740330942164404;  // std dev = 3,811, 77,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=20 */
%   | | | else return 0.15247739272217137;  // std dev = 8,945, 358,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=124 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(C, A), location(C, D) )
%   then if ( interaction(E, C), recursion_proteinclass(E, B) )
%   | then return 0.5245449855551604;  // std dev = 0,269, 94,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=86 */
%   | else if ( interaction(A, C) )
%   | | then return -0.15488764270363292;  // std dev = 0,438, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( location(A, D), complex(C, F) )
%   | | | then return 0.053737468441119374;  // std dev = 7,564, 369,000 (wgt'ed) examples reached here.  /* #neg=269 #pos=100 */
%   | | | else return 0.10299101898839076;  // std dev = 8,499, 398,000 (wgt'ed) examples reached here.  /* #neg=267 #pos=131 */
%   else if ( phenotype(A, G), complex(A, H) )
%   | then if ( complex(I, H), recursion_proteinclass(I, B) )
%   | | then return 0.7460034146877368;  // std dev = 0,057, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.18127200501996651;  // std dev = 0,134, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( interaction(A, J), recursion_proteinclass(J, B) )
%   | | then return 0.43623115801051116;  // std dev = 0,335, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( interaction(A, K), phenotype(K, L) )
%   | | | then return 0.04782002594073131;  // std dev = 3,387, 67,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=16 */
%   | | | else return 0.18530698768049117;  // std dev = 3,040, 41,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( interaction(C, A), interaction(A, D) )
%   then if ( interaction(D, E), recursion_proteinclass(E, B) )
%   | then return 0.37680014710984233;  // std dev = 0,283, 93,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=81 */
%   | else if ( interaction(A, C) )
%   | | then return -0.13300409675402758;  // std dev = 0,479, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else if ( interaction(D, F), enzyme(F, G) )
%   | | | then return -0.019448432908174336;  // std dev = 3,692, 112,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=23 */
%   | | | else return 0.10467873149587568;  // std dev = 4,864, 135,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=48 */
%   else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | then if ( phenotype(H, I), location(A, J) )
%   | | then return 0.489607907841517;  // std dev = 0,127, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.20838804168558842;  // std dev = 0,863, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( interaction(K, A), recursion_proteinclass(K, B) )
%   | | then return 0.5616754352069194;  // std dev = 0,057, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( complex(A, L), interaction(M, A) )
%   | | | then return 0.0487927756335584;  // std dev = 5,017, 158,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=45 */
%   | | | else return 0.0920260641523745;  // std dev = 9,310, 461,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=149 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.28800095461063313;  // std dev = 0,227, 60,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   else if ( interaction(D, A), complex(D, E) )
%   | then if ( interaction(A, F), interaction(F, D) )
%   | | then if ( complex(F, G), phenotype(F, H) )
%   | | | then return -0.05934003302060267;  // std dev = 2,468, 95,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=15 */
%   | | | else return 0.07629018810724879;  // std dev = 1,907, 36,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else if ( enzyme(D, I), enzyme(A, I) )
%   | | | then return -0.11382329216104954;  // std dev = 1,158, 28,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | | else return 0.07108578173054594;  // std dev = 8,467, 423,000 (wgt'ed) examples reached here.  /* #neg=287 #pos=136 */
%   | else if ( location(A, J) )
%   | | then if ( location(K, J), recursion_proteinclass(K, B) )
%   | | | then return 0.3457828224667277;  // std dev = 6,247, 214,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=139 */
%   | | | else return -0.20924474881064786;  // std dev = 0,641, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | else if ( interaction(L, A), interaction(M, L) )
%   | | | then return -0.12018792077701175;  // std dev = 1,337, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.06271239002506385;  // std dev = 2,183, 22,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(A, C), interaction(C, A) )
%   then if ( interaction(C, C), recursion_proteinclass(C, B) )
%   | then return 0.18394432673680963;  // std dev = 0,069, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.004759090230585728;  // std dev = 0,257, 199,000 (wgt'ed) examples reached here.  /* #neg=152 #pos=47 */
%   else if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), enzyme(E, F) )
%   | | then if ( interaction(D, E) )
%   | | | then return -0.3203502262976044;  // std dev = 0,682, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.340656436977804;  // std dev = 0,028, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.38953753151311926;  // std dev = 0,087, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( phenotype(A, G) )
%   | | then if ( phenotype(H, G), recursion_proteinclass(H, B) )
%   | | | then return 0.4568183758526621;  // std dev = 3,710, 158,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=137 */
%   | | | else return -0.1796917868253165;  // std dev = 0,457, 238,000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else if ( interaction(A, I), interaction(J, A) )
%   | | | then return 0.004366041310361938;  // std dev = 4,572, 120,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=32 */
%   | | | else return 0.05541815657583354;  // std dev = 7,779, 315,000 (wgt'ed) examples reached here.  /* #neg=214 #pos=101 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then return 0.1800302941493903;  // std dev = 0,221, 61,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   else if ( interaction(A, D), location(A, E) )
%   | then if ( enzyme(D, F), location(D, E) )
%   | | then if ( phenotype(A, G), complex(D, H) )
%   | | | then return 0.026458020784896872;  // std dev = 2,064, 56,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=15 */
%   | | | else return -0.06573487992718462;  // std dev = 3,071, 120,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=20 */
%   | | else if ( enzyme(A, I), complex(A, J) )
%   | | | then return 0.16649889732300857;  // std dev = 2,097, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.022714839267116593;  // std dev = 5,909, 288,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=83 */
%   | else if ( interaction(K, A), complex(K, L) )
%   | | then if ( recursion_proteinclass(K, B) )
%   | | | then return 0.2730193583809366;  // std dev = 0,120, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.06428374361449336;  // std dev = 6,483, 258,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=89 */
%   | | else if ( phenotype(A, M) )
%   | | | then return -9.220171758059498E-4;  // std dev = 2,764, 110,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=34 */
%   | | | else return 0.05991459744949898;  // std dev = 5,160, 139,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=48 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.2039447640456917;  // std dev = 0,086, 57,000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( interaction(D, A), phenotype(A, E) )
%   | then if ( interaction(F, D), recursion_proteinclass(F, B) )
%   | | then if ( interaction(D, F), interaction(A, D) )
%   | | | then return 0.4059432522237943;  // std dev = 0,358, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.1626482869754547;  // std dev = 1,221, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( interaction(A, D) )
%   | | | then return -0.11772683672235391;  // std dev = 0,503, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | | else return 0.008795855725022486;  // std dev = 5,568, 363,000 (wgt'ed) examples reached here.  /* #neg=254 #pos=109 */
%   | else if ( interaction(G, A), phenotype(G, H) )
%   | | then if ( interaction(G, I), recursion_proteinclass(I, B) )
%   | | | then return 0.6111683508108277;  // std dev = 2,373, 90,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=84 */
%   | | | else return -0.24243676980959816;  // std dev = 0,756, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else if ( interaction(A, J), interaction(J, K) )
%   | | | then return 0.059667541011486976;  // std dev = 4,293, 135,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=47 */
%   | | | else return -0.02107360390101999;  // std dev = 4,940, 148,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=40 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( interaction(D, C), interaction(C, D) )
%   | then if ( interaction(A, E), interaction(E, F) )
%   | | then if ( interaction(C, E) )
%   | | | then return 0.1292213546561504;  // std dev = 0,294, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.0848767982354607;  // std dev = 0,816, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.22684529010283488;  // std dev = 0,089, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2219959995292085;  // std dev = 0,062, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( interaction(A, A) )
%   | then return -0.07218007860147124;  // std dev = 0,135, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( interaction(G, A), enzyme(G, H) )
%   | | then if ( interaction(I, G), recursion_proteinclass(I, B) )
%   | | | then return 0.28806257042448274;  // std dev = 0,894, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.02831271203635387;  // std dev = 4,679, 250,000 (wgt'ed) examples reached here.  /* #neg=192 #pos=58 */
%   | | else if ( interaction(A, J), recursion_proteinclass(J, B) )
%   | | | then return 0.19121034434115955;  // std dev = 0,781, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.01810771570414371;  // std dev = 9,368, 729,000 (wgt'ed) examples reached here.  /* #neg=505 #pos=224 */


Starting fold 1

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, I), complex(I, J).;true;true
0;false,false,true;complex(A, J), location(A, K).;false;false
0;false,true,false;complex(F, G), enzyme(A, H).;false;false
0;false,true;interaction(A, A).;false;true
0;true;interaction(C, D), interaction(E, A).;false;false
0;false;interaction(F, A), interaction(A, F).;true;true
0;false,false,false;interaction(L, A), interaction(L, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false,false;interaction(H, A), complex(H, I).;true;true
1;false,false,true;complex(A, I), location(H, J).;false;false
1;false,true,false;complex(A, F), enzyme(D, G).;false;false
1;false,true;interaction(E, A), interaction(D, E).;true;true
1;false;interaction(A, D), interaction(D, D).;true;true
1;false,true,true;interaction(A, A).;false;false
1;false,false,false;enzyme(A, K), complex(A, L).;false;false
2;;proteinclass(A, B) :- phenotype(A, C).;true;true
2;true,false,true;interaction(F, A), interaction(F, E).;false;false
2;false,false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;true,false;phenotype(E, C), recursion_proteinclass(E, B).;true;false
2;false,true;interaction(G, A), recursion_proteinclass(G, B).;false;false
2;true;interaction(D, A), recursion_proteinclass(D, B).;false;true
2;false;interaction(A, A).;true;true
2;false,false,false;complex(A, I), interaction(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), location(C, D).;true;true
3;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
3;false,false,false;interaction(A, K), phenotype(K, L).;false;false
3;true,false;interaction(A, C).;false;true
3;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;phenotype(A, G), complex(A, H).;true;true
3;true,false,false;location(A, D), complex(C, F).;false;false
4;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
4;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
4;false,false,false;complex(A, L), interaction(M, A).;false;false
4;true,false;interaction(A, C).;false;true
4;false,true;phenotype(H, I), location(A, J).;false;false
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
4;true,false,false;interaction(D, F), enzyme(F, G).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
5;false,false;location(A, J).;true;true
5;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
5;false,true,false;enzyme(D, I), enzyme(A, I).;false;false
5;false,true;interaction(A, F), interaction(F, D).;true;true
5;false;interaction(D, A), complex(D, E).;true;true
5;false,true,true;complex(F, G), phenotype(F, H).;false;false
5;false,false,false;interaction(L, A), interaction(M, L).;false;false
6;;proteinclass(A, B) :- interaction(A, C), interaction(C, A).;true;true
6;false,false;phenotype(A, G).;true;true
6;false,false,true;phenotype(H, G), recursion_proteinclass(H, B).;false;false
6;false,true;interaction(E, D), enzyme(E, F).;true;false
6;true;interaction(C, C), recursion_proteinclass(C, B).;false;false
6;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
6;false,true,true;interaction(D, E).;false;false
6;false,false,false;interaction(A, I), interaction(J, A).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
7;false,false;interaction(K, A), complex(K, L).;true;true
7;false,false,true;recursion_proteinclass(K, B).;false;false
7;false,true,false;enzyme(A, I), complex(A, J).;false;false
7;false,true;enzyme(D, F), location(D, E).;true;true
7;false;interaction(A, D), location(A, E).;true;true
7;false,true,true;phenotype(A, G), complex(D, H).;false;false
7;false,false,false;phenotype(A, M).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
8;false,true,false;interaction(A, D).;false;false
8;false,true;interaction(F, D), recursion_proteinclass(F, B).;true;true
8;false;interaction(D, A), phenotype(A, E).;true;true
8;false,true,true;interaction(D, F), interaction(A, D).;false;false
8;false,false,false;interaction(A, J), interaction(J, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
9;true,true;interaction(A, E), interaction(E, F).;true;false
9;false,false;interaction(G, A), enzyme(G, H).;true;true
9;true,true,true;interaction(C, E).;false;false
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;true;interaction(D, C), interaction(C, D).;true;false
9;false;interaction(A, A).;false;true
9;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, E) )
%   | then return 0.806200883151461;  // std dev = 1,947, 77,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(F, G) )
%   | | | then return -0.03758566205688594;  // std dev = 4,439, 211,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=22 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.10851773156715441;  // std dev = 0,983, 30,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, J), follows(J, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13087620782678475;  // std dev = 3,908, 77,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=21 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.738039432625426;  // std dev = 0,970, 78,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.02072563375960473;  // std dev = 4,621, 210,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=26 */
%   | | | else return 0.06419295704092369;  // std dev = 3,323, 70,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1794419424224503;  // std dev = 1,915, 22,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5448388369213251;  // std dev = 1,917, 81,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.7995464416776179;  // std dev = 1,033, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.5893673976460315;  // std dev = 0,785, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14126296613810568;  // std dev = 0,171, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.4581270290053436;  // std dev = 2,942, 114,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=107 */
%   | else if ( follows(C, A) )
%   | | then return -0.12137530568196031;  // std dev = 0,060, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else if ( tweets(C, E) )
%   | | | then return -0.013155341854330725;  // std dev = 2,492, 72,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.5431528062906289;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.13350253059051304;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.3987259570652468;  // std dev = 1,189, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( follows(C, A) )
%   | | then return -0.10936622331938804;  // std dev = 0,226, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else if ( follows(F, D) )
%   | | | then return -0.018964508918026517;  // std dev = 0,606, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.09975573701717716;  // std dev = 0,298, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4085141806433255;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.5111639435250042;  // std dev = 0,101, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.09861492494537832;  // std dev = 2,017, 29,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return -0.00971174132357579;  // std dev = 2,046, 52,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2463663979241613;  // std dev = 1,446, 79,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( follows(F, A), follows(D, F) )
%   | | then if ( tweets(F, G) )
%   | | | then return -0.04682783242793723;  // std dev = 2,123, 158,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=14 */
%   | | | else return -0.10476212134559165;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.07858467294160215;  // std dev = 0,331, 90,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=27 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.20350513804609538;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11778726889252902;  // std dev = 7,45e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, C), recursion_accounttype(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.028128829695873277;  // std dev = 3,345, 263,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=91 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.09127788845415992;  // std dev = 0,753, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.303769446220326;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.31884493976094813;  // std dev = 0,122, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(F, B) )
%   | | then return 0.4888335212507535;  // std dev = 0,908, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(G, A), follows(A, H) )
%   | | | then return -0.11805762877085238;  // std dev = 0,005, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.14639802435046553;  // std dev = 0,178, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19288181894089637;  // std dev = 1,059, 83,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then return -0.045274243282352675;  // std dev = 2,801, 232,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=23 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.09727572503409897;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), tweets(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.08861466442163016;  // std dev = 0,844, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.05633809581894956;  // std dev = 2,233, 56,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1802651880868097;  // std dev = 1,188, 78,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(D, A) )
%   | | | then return 0.4872730964277315;  // std dev = 0,503, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.28562293036030156;  // std dev = 0,961, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(D, A) )
%   | | | then return -0.09411774077731096;  // std dev = 0,067, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | | else return -0.018875519092978237;  // std dev = 1,907, 56,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=10 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.01277912009889693;  // std dev = 0,585, 26,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, C) )
%   | | | then return 0.11108049213575866;  // std dev = 1,745, 66,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   | | | else return 0.07995571893790336;  // std dev = 0,811, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.23333592331154818;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.06977530311625298;  // std dev = 0,879, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.34876497170996457;  // std dev = 0,572, 31,000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.06920983460765064;  // std dev = 1,966, 240,000 (wgt'ed) examples reached here.  /* #neg=230 #pos=10 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.16096484490773144;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08820177095722856;  // std dev = 6,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.995044
   AUC PR    = 0.438607
   CLL	      = -0.119396
   Precision = 0.341346 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.496503


Total learning time: 4.077 seconds
Total inference time: 16.128 seconds
AUC ROC: 0.995044


Results scoring model
   AUC ROC   = 0.993489
   AUC PR    = 0.424145
   CLL	      = -0.119208
   Precision = 0.335244 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.492632


Total scoring time: 14.057 seconds
Parameter learned model CLL: -0.119208


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(H, A), tweets(H, I)', 'false,false,true': 'tweets(A, I)', 'false,true,false': 'tweets(F, G)', 'false,true': 'follows(A, A)', 'true': 'follows(D, C), follows(A, E)', 'false': 'follows(A, F), follows(F, A)', 'false,false,false': 'follows(A, J), follows(J, J)'}, {'true,true': [1.947, 4, 73], 'false,false,true,false': [0.0, 1, 0], 'true,false': [0.0, 0, 9], 'false,true,false,false': [0.0, 6, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.908, 56, 21], 'false,true,false,true': [4.439, 189, 22], 'false,true,true': [0.0, 0, 0], 'false,false,true,true': [0.983, 29, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(D, A), follows(D, D)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [1.915, 14, 8], 'false,false,true,false': [3.323, 55, 15], 'false,true': [0.0, 0, 0], 'true': [0.97, 1, 77], 'false,false,true,true': [4.621, 184, 26]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'false,true': 'follows(A, E), follows(D, E)', 'false': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(F, A), recursion_accounttype(F, B)'}, {'false,true,false': [0.785, 1, 8], 'false,false,false,false': [0.171, 268, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true': [1.917, 4, 77], 'false,true,true': [1.033, 1, 41]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(C, A)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'tweets(A, F)', 'true,false,false': 'tweets(C, E)'}, {'true,true': [2.942, 7, 107], 'true,false,true': [0.06, 209, 0], 'true,false,false,true': [2.492, 61, 11], 'false,true,false': [0.0, 14, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 8], 'true,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'true,false': 'follows(C, A)', 'true,false,false': 'follows(F, D)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, I), follows(A, J)', 'false': 'follows(G, A), recursion_accounttype(G, B)'}, {'true,true': [1.189, 0, 95], 'true,false,true': [0.226, 182, 0], 'true,false,false,true': [0.606, 6, 1], 'false,false,false,false': [2.046, 44, 8], 'false,false,true': [0.101, 0, 4], 'false,false,false,true': [2.017, 20, 9], 'false,true': [7.45e-09, 0, 8], 'true,false,false,false': [0.298, 1, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,true': 'follows(F, A), follows(D, F)', 'false': 'follows(A, D), tweets(D, E)', 'false,true,true': 'tweets(F, G)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'false,true,false': [0.331, 63, 27], 'false,false,false,false': [7.45e-09, 7, 0], 'false,false,true': [0.943, 1, 8], 'false,false,false,true': [0.0, 0, 0], 'false,true,true,true': [2.123, 144, 14], 'false,true,true,false': [0.0, 2, 0], 'true': [1.446, 2, 77]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'false,false': 'recursion_accounttype(F, B)', 'false,true': 'follows(D, E)', 'true': 'follows(C, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,true,true': 'follows(E, D)', 'false,false,false': 'follows(G, A), follows(A, H)'}, {'false,true,false': [0.122, 0, 3], 'true,true': [0.0, 0, 0], 'false,false,false,false': [0.178, 68, 0], 'true,false': [3.345, 172, 91], 'false,true,true,false': [0.0, 0, 1], 'false,false,false,true': [0.005, 4, 0], 'false,true,true,true': [0.753, 1, 2], 'false,false,true': [0.908, 0, 29]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, G), tweets(G, H)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'tweets(A, F)', 'false,true': 'tweets(D, E)', 'false': 'follows(D, A)'}, {'false,false,true,false': [2.233, 39, 17], 'false,true,false,true': [0.0, 1, 0], 'false,true,false,false': [0.0, 0, 0], 'true': [1.059, 1, 82], 'false,false,false': [0.0, 0, 0], 'false,true,true': [2.801, 209, 23], 'false,false,true,true': [0.844, 1, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'follows(A, F)', 'false,true,false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false': 'follows(A, D)', 'false,true,true': 'follows(E, D), follows(D, A)', 'false,false,false': 'follows(G, A), follows(H, G)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true,false,true': [0.067, 173, 0], 'false,true,false,false': [1.907, 46, 10], 'false,true,true,false': [0.961, 1, 11], 'false,false,false,true': [0.585, 18, 8], 'false,true,true,true': [0.503, 0, 20], 'false,false,true': [0.0, 0, 0], 'true': [1.188, 1, 77]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true,true': 'follows(E, A), follows(F, E)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'true,true,true': 'follows(E, C)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'false,false,true,false': [1.966, 230, 10], 'true,true,false': [0.0, 0, 1], 'true,true,true,false': [0.811, 1, 9], 'true,false': [0.879, 1, 5], 'false,false,false,true': [7.45e-09, 0, 8], 'false,false,false,false': [6.45e-09, 15, 0], 'false,true': [0.0, 0, 0], 'true,true,true,true': [1.745, 4, 62], 'false,false,true,true': [0.572, 0, 31]}]]
[{'': [0.044348296376419516, 0.117055621301776], 'false,false': [0.031217481789802347, 0.19834710743801678], 'false,false,true': [0.03222222222222228, 0.0], 'false,true,false': [0.09339412861346434, -6.938893903907228e-18], 'false,true': [nan, 0.09110407950901588], 'true': [0.04924945184685313, -2.9605947323337506e-16], 'false': [0.09110407950901588, 0.16220850480109808], 'false,false,false': [nan, 0.19834710743801678]}, {'': [0.012052214921071553, 0.12281776097084822], 'false,false': [0.11704146292707758, 0.16664799334967545], 'false': [nan, 0.12281776097084843], 'false,false,true': [0.10166694695432141, 0.15775663554768576], 'false,false,false': [0.16664799334967545, nan]}, {'': [0.04534583960520628, 0.11609294801654471], 'false,false': [nan, 0.00010965740092834872], 'false,true': [0.025420950179535665, 0.068463548640296], 'false': [0.03943663254839422, 0.00010965740092834872], 'false,false,false': [nan, 0.00010965740092837855]}, {'': [0.10173947225732555, 0.10595164014902886], 'true,false': [1.727524795971922e-05, 0.0862224012921096], 'false,true': [0.0, -5.9476233462061954e-18], 'true': [0.07594274353331044, 0.0243373531800457], 'false': [0.10595164014902886, nan], 'true,false,false': [0.0862224012921096, nan]}, {'': [0.06323656725911857, 0.11078813970834404], 'false,false': [0.002545074113715684, 0.10464943452603431], 'true,false': [0.0002798451644886689, 0.053042257405617535], 'true,false,false': [0.05241093222454105, 0.04428950914334003], 'true': [0.014891266815339789, 0.003378401965434521], 'false': [5.551115123125783e-17, 0.11026690871010997], 'false,false,false': [0.1403488738289799, 0.08053883144126767]}, {'': [0.026461077438678263, 0.06264170146774606], 'false,false': [0.09876543209876548, 7.93016446160826e-18], 'false,true': [0.0281985040951228, 0.10972712987101486], 'false': [0.06121458006017949, 0.08095952070264197], 'false,true,true': [0.02851349241202955, 0.0], 'false,false,false': [nan, 7.93016446160826e-18]}, {'': [0.04253215036378248, 0.093010630924101], 'false,false': [0.028423109374342958, 0.00048073154629853693], 'false,true': [0.1503983724435642, 0.004933674809289024], 'true': [nan, 0.04253215036378248], 'false': [0.09550879156574055, 0.0906895038745111], 'false,true,true': [0.18924299772761258, 0.0], 'false,false,false': [5.515332125583319e-06, 0.0004640644400494113]}, {'': [0.013511368738888323, 0.047887093604174896], 'false,false': [0.09347601347447072, nan], 'false,false,true': [0.1424708254558358, 0.08901608514281668], 'false,true,false': [0.0, nan], 'false,true': [0.033820444642994635, 0.0], 'false': [0.033686848521319854, 0.09347601347447072]}, {'': [0.018087204413692295, 0.043118744256198015], 'false,false': [nan, 0.013152350648526344], 'false,true,false': [2.6133820359650913e-05, 0.06496991220746513], 'false,true': [0.046295182452161604, 0.01695347271542067], 'false': [0.04610298363623008, 0.013152350648526344], 'false,true,true': [0.012673399166644072, 0.07691724450613513], 'false,false,false': [0.013152350648526344, nan]}, {'': [0.05430883618724915, 0.03169578773837015], 'true,true': [0.04883288215532191, 0.0], 'false,false': [0.03315970970919248, 0.014083327590532298], 'true,true,true': [0.04614754911355798, 0.06571479602784823], 'false,false,true': [0.010542446262475883, 0.01609663723328516], 'true': [0.0484033277402058, 0.12869592614332068], 'false': [nan, 0.03169578773837009], 'false,false,false': [6.938893903907228e-18, 2.7755575615628915e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false,false;follows(H, A), tweets(H, I).;true;true
0;false,false,true;tweets(A, I).;true;true
0;false,true;tweets(F, G).;true;true
0;true;follows(D, C), follows(A, E).;true;true
0;false;follows(A, F), follows(F, A).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(C, D), recursion_accounttype(D, B).;true;true
3;false;tweets(G, F), recursion_accounttype(G, B).;true;true
3;true,false;follows(C, A).;true;true
4;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
4;true;follows(E, D), recursion_accounttype(E, B).;true;true
4;false;follows(G, A), recursion_accounttype(G, B).;true;true
4;true,false;follows(C, A).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;recursion_accounttype(H, B).;true;true
5;false,true;follows(F, A), follows(D, F).;true;true
5;false;follows(A, D), tweets(D, E).;true;true
5;false,true,true;tweets(F, G).;true;true
6;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
6;false,false;recursion_accounttype(F, B).;true;true
6;false,true;follows(D, E).;true;true
6;false;follows(A, D), recursion_accounttype(D, B).;true;true
6;false,true,true;follows(E, D).;true;true
6;false,false,false;follows(G, A), follows(A, H).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false,true;tweets(D, E).;true;true
7;false;follows(D, A).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false,true,false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false;follows(A, D).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true,true;follows(E, A), follows(F, E).;true;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;true;true
9;true;follows(C, D), follows(D, C).;true;true
9;false;follows(A, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, E) )
%   | then return 0.8446354215859994;  // std dev = 0,115, 74,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.02541270873610409;  // std dev = 3,876, 146,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=17 */
%   | | | else return -0.016851064900487718;  // std dev = 2,092, 40,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(I, A), tweets(I, J) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.10185106490048777;  // std dev = 0,980, 25,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2129876447769317;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
%   | | | else return 0.18072958026080266;  // std dev = 2,603, 31,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.7217633870055501;  // std dev = 0,006, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.6574134658212867;  // std dev = 1,367, 31,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else return 0.8617080393626699;  // std dev = 0,009, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.13734877674632606;  // std dev = 0,044, 167,000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.7617760731698383;  // std dev = 0,057, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.10902625985505324;  // std dev = 0,846, 28,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | | else return 0.06420745154293069;  // std dev = 1,718, 19,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07514096766947437;  // std dev = 2,611, 37,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.12250831356903388;  // std dev = 2,489, 31,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return 0.5243170834516037;  // std dev = 1,371, 54,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return -0.09662642007773521;  // std dev = 0,785, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.6446172147598792;  // std dev = 0,316, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.4589279590485536;  // std dev = 0,801, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.31189651237466365;  // std dev = 0,466, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.5641369303973622;  // std dev = 0,034, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7165387279752043;  // std dev = 0,034, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7861962122307965;  // std dev = 0,279, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.13543404885540714;  // std dev = 0,372, 261,000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.4314063119112068;  // std dev = 0,203, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.47836756622104154;  // std dev = 0,174, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5560389417398125;  // std dev = 0,867, 27,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.47360090140012534;  // std dev = 1,287, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(C, A) )
%   | | then return -0.11278346024352214;  // std dev = 0,154, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.150893276158023;  // std dev = 0,144, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.1112362506476192;  // std dev = 2,199, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   else if ( tweets(I, J), recursion_accounttype(I, B) )
%   | then return 0.4187515239612586;  // std dev = 0,019, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10205161350754867;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3099249648660783;  // std dev = 1,477, 71,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | | | else return -0.05072608218512531;  // std dev = 1,080, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.3822603638332856;  // std dev = 0,166, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.527475382980455;  // std dev = 0,232, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.09523304893128504;  // std dev = 0,053, 193,000 (wgt'ed) examples reached here.  /* #neg=191 #pos=2 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3215678179729795;  // std dev = 0,017, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.5187237944069463;  // std dev = 0,102, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.056952343114487596;  // std dev = 2,669, 59,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
%   | | | else return -0.1125521706923058;  // std dev = 0,438, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.25046535369060474;  // std dev = 0,125, 65,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.4101350283113274;  // std dev = 0,062, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(E, A) )
%   | | then return 0.13750719512824686;  // std dev = 0,746, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1863590107284346;  // std dev = 0,926, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, F), tweets(F, G) )
%   | then if ( follows(H, A), follows(F, H) )
%   | | then return -0.0590658787691602;  // std dev = 0,114, 181,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=14 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.004575625327154588;  // std dev = 1,168, 46,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | | else return 0.04601575043333764;  // std dev = 2,648, 60,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.2557660842899577;  // std dev = 0,015, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.08399706779749526;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1574127902405478;  // std dev = 1,672, 45,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return -0.11483039619588216;  // std dev = 0,830, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22602927439678436;  // std dev = 0,034, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, G) )
%   | | then return -0.047567736810092374;  // std dev = 0,134, 162,000 (wgt'ed) examples reached here.  /* #neg=145 #pos=17 */
%   | | else return -0.044086556550312114;  // std dev = 0,164, 52,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.36873763390810427;  // std dev = 0,054, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.23204334225590528;  // std dev = 0,125, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5763694067344696;  // std dev = 0,220, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.14489155351989916;  // std dev = 0,047, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.17400596442966138;  // std dev = 0,130, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return -0.4279524033228272;  // std dev = 0,844, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.21823876224166136;  // std dev = 0,079, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20916263486158373;  // std dev = 0,040, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(G, A) )
%   | then return -0.0376148878476485;  // std dev = 0,142, 216,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2511258351987002;  // std dev = 1,067, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.13846145948389865;  // std dev = 0,013, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0360290852740739;  // std dev = 1,096, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.06331746544844738;  // std dev = 1,228, 16,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1578346669090293;  // std dev = 0,097, 66,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.1703021764714466;  // std dev = 0,773, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.24465174474013449;  // std dev = 0,144, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3746545449589098;  // std dev = 0,106, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.09386786580387768;  // std dev = 0,911, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.36061960056446707;  // std dev = 0,306, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.08243929621928893;  // std dev = 0,083, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | | else return -0.042591087297946126;  // std dev = 1,739, 60,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=10 */
%   | else return 0.01505123437253483;  // std dev = 0,103, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.13202922305547846;  // std dev = 1,009, 65,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.17163646928804335;  // std dev = 0,802, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.16626992304139188;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.07623033291937753;  // std dev = 0,883, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.19219218629015936;  // std dev = 0,030, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.05456247081649194;  // std dev = 1,925, 271,000 (wgt'ed) examples reached here.  /* #neg=248 #pos=23 */
%   | | | else return 0.07105315084423619;  // std dev = 1,550, 25,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | else if ( follows(L, A), recursion_accounttype(L, B) )
%   | | then return 0.03296545228059544;  // std dev = 0,315, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.06656515326982129;  // std dev = 6,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.995383
   AUC PR    = 0.477843
   CLL	      = -0.107667
   Precision = 0.332609 at threshold = 0.5
   Recall    = 0.980769
   F1        = 0.496753


Total learning time: 28.5 seconds
Total inference time: 88.985 seconds
AUC ROC: 0.995383


Results scoring model
   AUC ROC   = 0.99457
   AUC PR    = 0.473347
   CLL	      = -0.111194
   Precision = 0.339623 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.507042


Total scoring time: 67.128 seconds
Refined model CLL: -0.111194


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.995383
   AUC PR    = 0.477843
   CLL	      = -0.107667
   Precision = 0.332609 at threshold = 0.5
   Recall    = 0.980769
   F1        = 0.496753


Total learning time: 113.762 seconds
Total inference time: 88.985 seconds
AUC ROC: 0.995383
Total revision time: 113.762
Best scored revision CLL: -0.111194


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:04:27
{'AUC ROC': 0.995383, 'parameter': {'AUC ROC': 0.995044, 'Precision': [0.341346, 0.5], 'Recall': 0.910256, 'AUC PR': 0.438607, 'Learning time': 4.077, 'CLL': -0.119396, 'Inference time': 16.128, 'F1': 0.496503}, 'Precision': [0.332609, 0.5], 'Recall': 0.980769, 'AUC PR': 0.477843, 'Learning time': 113.762, 'CLL': -0.107667, 'Inference time': 88.985, 'F1': 0.496753}


Starting fold 2

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;false,false;interaction(A, I), complex(I, J).;true;true
0;false,false,true;complex(A, J), location(A, K).;false;false
0;false,true,false;complex(F, G), enzyme(A, H).;false;false
0;false,true;interaction(A, A).;false;true
0;true;interaction(C, D), interaction(E, A).;false;false
0;false;interaction(F, A), interaction(A, F).;true;true
0;false,false,false;interaction(L, A), interaction(L, L).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false,false;interaction(H, A), complex(H, I).;true;true
1;false,false,true;complex(A, I), location(H, J).;false;false
1;false,true,false;complex(A, F), enzyme(D, G).;false;false
1;false,true;interaction(E, A), interaction(D, E).;true;true
1;false;interaction(A, D), interaction(D, D).;true;true
1;false,true,true;interaction(A, A).;false;false
1;false,false,false;enzyme(A, K), complex(A, L).;false;false
2;;proteinclass(A, B) :- phenotype(A, C).;true;true
2;true,false,true;interaction(F, A), interaction(F, E).;false;false
2;false,false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;true,false;phenotype(E, C), recursion_proteinclass(E, B).;true;false
2;false,true;interaction(G, A), recursion_proteinclass(G, B).;false;false
2;true;interaction(D, A), recursion_proteinclass(D, B).;false;true
2;false;interaction(A, A).;true;true
2;false,false,false;complex(A, I), interaction(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), location(C, D).;true;true
3;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
3;false,false,false;interaction(A, K), phenotype(K, L).;false;false
3;true,false;interaction(A, C).;false;true
3;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;phenotype(A, G), complex(A, H).;true;true
3;true,false,false;location(A, D), complex(C, F).;false;false
4;;proteinclass(A, B) :- interaction(C, A), interaction(A, D).;true;true
4;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
4;false,false,false;complex(A, L), interaction(M, A).;false;false
4;true,false;interaction(A, C).;false;true
4;false,true;phenotype(H, I), location(A, J).;false;false
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
4;true,false,false;interaction(D, F), enzyme(F, G).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
5;false,false;location(A, J).;true;true
5;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
5;false,true,false;enzyme(D, I), enzyme(A, I).;false;false
5;false,true;interaction(A, F), interaction(F, D).;true;true
5;false;interaction(D, A), complex(D, E).;true;true
5;false,true,true;complex(F, G), phenotype(F, H).;false;false
5;false,false,false;interaction(L, A), interaction(M, L).;false;false
6;;proteinclass(A, B) :- interaction(A, C), interaction(C, A).;true;true
6;false,false;phenotype(A, G).;true;true
6;false,false,true;phenotype(H, G), recursion_proteinclass(H, B).;false;false
6;false,true;interaction(E, D), enzyme(E, F).;true;false
6;true;interaction(C, C), recursion_proteinclass(C, B).;false;false
6;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
6;false,true,true;interaction(D, E).;false;false
6;false,false,false;interaction(A, I), interaction(J, A).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
7;false,false;interaction(K, A), complex(K, L).;true;true
7;false,false,true;recursion_proteinclass(K, B).;false;false
7;false,true,false;enzyme(A, I), complex(A, J).;false;false
7;false,true;enzyme(D, F), location(D, E).;true;true
7;false;interaction(A, D), location(A, E).;true;true
7;false,true,true;phenotype(A, G), complex(D, H).;false;false
7;false,false,false;phenotype(A, M).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
8;false,true,false;interaction(A, D).;false;false
8;false,true;interaction(F, D), recursion_proteinclass(F, B).;true;true
8;false;interaction(D, A), phenotype(A, E).;true;true
8;false,true,true;interaction(D, F), interaction(A, D).;false;false
8;false,false,false;interaction(A, J), interaction(J, K).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
9;true,true;interaction(A, E), interaction(E, F).;true;false
9;false,false;interaction(G, A), enzyme(G, H).;true;true
9;true,true,true;interaction(C, E).;false;false
9;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
9;true;interaction(D, C), interaction(C, D).;true;false
9;false;interaction(A, A).;false;true
9;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, E) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.8025933795439567;  // std dev = 0,972, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(F, G) )
%   | | | then return -0.03629550934493211;  // std dev = 4,122, 180,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=19 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.10338952643894926;  // std dev = 1,387, 52,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | | else return 0.058148935099512175;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( follows(A, J), follows(J, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.1961771041135958;  // std dev = 5,637, 142,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=48 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.6955441817461367;  // std dev = 1,924, 82,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.0021861928565447904;  // std dev = 5,234, 227,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=34 */
%   | | | else return 0.044619620328064546;  // std dev = 3,504, 80,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.20497438079258054;  // std dev = 3,012, 47,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=18 */
%   | | | else return 0.18831354369265244;  // std dev = 2,472, 28,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5375314688219615;  // std dev = 2,067, 83,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=78 */
%   else if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.806702818811868;  // std dev = 1,004, 51,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else return 0.7444148634410778;  // std dev = 0,319, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.15397951789484057;  // std dev = 0,330, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.5201543907094077;  // std dev = 2,021, 124,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else if ( follows(C, A) )
%   | | then return -0.12131740334169404;  // std dev = 0,024, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else if ( tweets(C, E) )
%   | | | then return -0.07695270050655807;  // std dev = 2,057, 84,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.5561100537368657;  // std dev = 0,307, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.14478873561757252;  // std dev = 0,097, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.5161639188852716;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.012584617763107578;  // std dev = 0,772, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.1520586314656765;  // std dev = 1,725, 18,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.3778196789572968;  // std dev = 1,136, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   | else if ( follows(C, A) )
%   | | then return -0.10885643211383833;  // std dev = 0,019, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | else if ( follows(F, D) )
%   | | | then return -0.028159703838892887;  // std dev = 1,104, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.13134282528744745;  // std dev = 0,480, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3148116067204532;  // std dev = 0,243, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4627175409893799;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.06709993843690543;  // std dev = 2,383, 53,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | | | else return 0.01677594631133224;  // std dev = 3,390, 120,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=27 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.22271278669270259;  // std dev = 1,808, 82,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( follows(F, A), follows(D, F) )
%   | | then if ( tweets(F, G) )
%   | | | then return -0.06785149427502153;  // std dev = 1,611, 149,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.05951242885082597;  // std dev = 0,310, 149,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=42 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.38583546530305096;  // std dev = 1,364, 30,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14751239058115848;  // std dev = 0,242, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, C), recursion_accounttype(C, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.02805676000843521;  // std dev = 3,091, 227,000 (wgt'ed) examples reached here.  /* #neg=145 #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.18156469903637226;  // std dev = 0,798, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.41333709398482377;  // std dev = 0,271, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.33621254537783085;  // std dev = 0,722, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( recursion_accounttype(F, B) )
%   | | then return 0.4031698567667254;  // std dev = 2,236, 66,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | else if ( follows(G, A), follows(A, H) )
%   | | | then return -0.12192925909626302;  // std dev = 0,082, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.14609049029064095;  // std dev = 0,254, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18274449870311674;  // std dev = 1,037, 86,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then return -0.0409067077858607;  // std dev = 2,710, 235,000 (wgt'ed) examples reached here.  /* #neg=212 #pos=23 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.32733153252957203;  // std dev = 0,478, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, G), tweets(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.0683998092149942;  // std dev = 1,184, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.025488097592294947;  // std dev = 2,742, 107,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=29 */
%   | | else return 0.01796011190815891;  // std dev = 0,281, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15695817658211908;  // std dev = 1,746, 81,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(D, A) )
%   | | | then return 0.4567907317101016;  // std dev = 0,966, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.37228940434721375;  // std dev = 0,943, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(D, A) )
%   | | | then return -0.09291694327663352;  // std dev = 0,045, 157,000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | | else return -0.0920782863676425;  // std dev = 1,638, 104,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=6 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.007939379093707193;  // std dev = 1,036, 54,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   | | | else return 0.03863278164125808;  // std dev = 1,444, 32,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, C) )
%   | | | then return 0.12510246456527138;  // std dev = 1,334, 53,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | | else return 0.09868252552338662;  // std dev = 1,001, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.08127261052636252;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.09048067010053407;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3476049957170032;  // std dev = 0,495, 44,000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.08338530524428994;  // std dev = 1,664, 253,000 (wgt'ed) examples reached here.  /* #neg=247 #pos=6 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.08186320731889127;  // std dev = 0,969, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.017168110707863886;  // std dev = 1,653, 74,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=13 */


Results
   AUC ROC   = 0.993508
   AUC PR    = 0.416734
   CLL	      = -0.114582
   Precision = 0.331445 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.488518


Total learning time: 4.572 seconds
Total inference time: 13.677 seconds
AUC ROC: 0.993508


Results scoring model
   AUC ROC   = 0.995332
   AUC PR    = 0.449014
   CLL	      = -0.117901
   Precision = 0.331126 at threshold = 0.5
   Recall    = 0.961538
   F1        = 0.492611


Total scoring time: 15.954 seconds
Parameter learned model CLL: -0.117901


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(H, A), tweets(H, I)', 'false,false,true': 'tweets(A, I)', 'false,true,false': 'tweets(F, G)', 'false,true': 'follows(A, A)', 'true': 'follows(D, C), follows(A, E)', 'false': 'follows(A, F), follows(F, A)', 'false,false,false': 'follows(A, J), follows(J, J)'}, {'true,true': [0.0, 0, 68], 'false,false,true,false': [1.265, 8, 2], 'true,false': [0.972, 1, 17], 'false,true,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.637, 94, 48], 'false,true,false,true': [4.122, 161, 19], 'false,true,true': [0.0, 0, 0], 'false,false,true,true': [1.387, 50, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(D, A), follows(D, D)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'false,false,false,false': [2.472, 18, 10], 'false,false,false,true': [3.012, 29, 18], 'false,false,true,false': [3.504, 64, 16], 'false,true': [0.0, 0, 0], 'true': [1.924, 4, 78], 'false,false,true,true': [5.234, 193, 34]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'follows(A, A)', 'false,true': 'follows(A, E), follows(D, E)', 'false': 'recursion_accounttype(D, B)', 'false,false,false': 'follows(F, A), recursion_accounttype(F, B)'}, {'false,true,false': [0.319, 0, 28], 'false,false,false,false': [0.33, 301, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true': [2.067, 5, 78], 'false,true,true': [1.004, 1, 50]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'true,false': 'follows(C, A)', 'false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(I, A)', 'true,false,false': 'tweets(C, E)', 'false': 'tweets(A, F)'}, {'false,true,false': [0.097, 34, 0], 'true,true': [2.021, 3, 121], 'true,false,true': [0.024, 181, 0], 'true,false,false,true': [2.057, 77, 7], 'false,false,false,false': [1.725, 11, 7], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.772, 5, 1], 'false,true,true': [0.307, 0, 18], 'true,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'true,false': 'follows(C, A)', 'true,false,false': 'follows(F, D)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false,false': 'tweets(A, I), follows(A, J)', 'false': 'follows(G, A), recursion_accounttype(G, B)'}, {'true,true': [1.136, 0, 87], 'true,false,true': [0.019, 149, 0], 'true,false,false,true': [1.104, 16, 2], 'false,false,false,false': [3.39, 93, 27], 'false,false,true': [0.0, 0, 8], 'false,false,false,true': [2.383, 38, 15], 'false,true': [0.243, 1, 15], 'true,false,false,false': [0.48, 2, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(H, B)', 'false,true': 'follows(F, A), follows(D, F)', 'false': 'follows(A, D), tweets(D, E)', 'false,true,true': 'tweets(F, G)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'false,true,false': [0.31, 107, 42], 'false,false,false,false': [0.242, 62, 0], 'false,false,true': [1.364, 2, 28], 'false,false,false,true': [0.0, 0, 0], 'false,true,true,true': [1.611, 141, 8], 'false,true,true,false': [0.0, 0, 0], 'true': [1.808, 4, 78]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'false,false': 'recursion_accounttype(F, B)', 'false,true': 'follows(D, E)', 'true': 'follows(C, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,true,true': 'follows(E, D)', 'false,false,false': 'follows(G, A), follows(A, H)'}, {'false,true,false': [0.722, 2, 1], 'true,true': [0.0, 0, 0], 'false,false,false,false': [0.254, 133, 0], 'true,false': [3.091, 145, 82], 'false,true,true,false': [0.271, 0, 3], 'false,false,false,true': [0.082, 20, 0], 'false,true,true,true': [0.798, 1, 7], 'false,false,true': [2.236, 3, 63]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'follows(A, G), tweets(G, H)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'tweets(A, F)', 'false,true': 'tweets(D, E)', 'false': 'follows(D, A)'}, {'false,false,true,false': [2.742, 78, 29], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.478, 3, 0], 'true': [1.037, 1, 85], 'false,false,false': [0.281, 22, 11], 'false,true,true': [2.71, 212, 23], 'false,false,true,true': [1.184, 2, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'follows(A, F)', 'false,true,false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false': 'follows(A, D)', 'false,true,true': 'follows(E, D), follows(D, A)', 'false,false,false': 'follows(G, A), follows(H, G)'}, {'false,false,false,false': [1.444, 21, 11], 'false,true,false,true': [0.045, 157, 0], 'false,true,false,false': [1.638, 98, 6], 'false,true,true,false': [0.943, 1, 29], 'false,false,false,true': [1.036, 37, 17], 'false,true,true,true': [0.966, 1, 15], 'false,false,true': [0.0, 0, 0], 'true': [1.746, 3, 78]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true,true': 'follows(E, A), follows(F, E)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'true,true,true': 'follows(E, C)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(A, A)', 'false,false,false': 'follows(I, A), recursion_accounttype(I, B)'}, {'false,false,true,false': [1.664, 247, 6], 'true,true,false': [0.926, 1, 6], 'true,true,true,false': [1.001, 1, 17], 'true,false': [0.894, 1, 4], 'false,false,false,true': [0.969, 1, 15], 'false,false,false,false': [1.653, 61, 13], 'false,true': [0.0, 0, 0], 'true,true,true,true': [1.334, 2, 51], 'false,false,true,true': [0.495, 0, 44]}]]
[{'': [0.011492698756084153, 0.15070936414930655], 'false,false': [0.060353798126950985, 0.22376512596707077], 'false,false,true': [0.03698224852071002, 0.16000000000000003], 'false,true,false': [0.09441358024691361, nan], 'false,true': [nan, 0.09441358024691361], 'true': [-1.1494073666707504e-15, 0.05246913580246885], 'false': [0.09441358024691361, 0.18992695117262648], 'false,false,false': [nan, 0.22376512596707102]}, {'': [0.04514045316884038, 0.14931166877738303], 'false,false': [0.12957025305558087, 0.2024624008770183], 'false': [nan, 0.14931166877738128], 'false,false,true': [0.12066306494813415, 0.1535130141667894], 'false,false,false': [0.19300197436131586, 0.2181684502061781]}, {'': [0.051463233786185864, 0.14846517720757285], 'false,false': [nan, 0.0003623656211280814], 'false,true': [0.01975075707916365, 0.0036344419942938417], 'false': [0.01492637801699576, 0.0003623656211280814], 'false,false,false': [nan, 0.00036236562112813744]}, {'': [0.10714528138144122, 0.1271259967376621], 'false,false': [0.0, 0.15388670643136024], 'true,false': [3.1843258198693945e-06, 0.05035563612181253], 'false,true': [0.0052398775514633416, 0.00027488595045340147], 'true': [0.0329355651025612, 0.01639009067145898], 'false': [0.11318088049360335, 0.15371132273577143], 'true,false,false': [0.05035563612181253, nan], 'false,false,false': [0.09926606044157976, 0.16531673854880083]}, {'': [0.061746335544554845, 0.10477315163565305], 'false,false': [-8.326672684688674e-17, 0.09977167563766277], 'true,false': [2.341452064231723e-06, 0.06964154361914038], 'true,false,false': [0.06770399571539401, 0.05754509907879069], 'true': [0.01483220866959701, 0.010310757830118322], 'false': [0.05882214901401414, 0.10319210778128347], 'false,false,false': [0.10710974000092485, 0.09575484332776328]}, {'': [0.03984865539954327, 0.06634042894692206], 'false,false': [0.0620179161286942, 0.0009436761380678089], 'false,true': [0.017410473079244173, 0.0962033612802987], 'false': [0.06086230940827357, 0.08337046987318321], 'false,true,true': [0.017410473079244173, nan], 'false,false,false': [nan, 0.0009436761380678089]}, {'': [0.04208874587078581, 0.09058138416286861], 'false,false': [0.07576423042680637, 0.0005316927883944845], 'false,true': [0.07523193233847586, 0.17377414753419243], 'true': [nan, 0.04208874587078581], 'false': [0.1531800035820039, 0.08599512153660314], 'false,true,true': [0.0796002451918987, 0.024515139473488195], 'false,false,false': [0.0003399355386886294, 0.0004842193025807508]}, {'': [0.012493368372847997, 0.05111575581899674], 'false,false': [0.0763720220072376, 0.07914288604553381], 'false,false,true': [0.14025655324418795, 0.07024411917224865], 'false,true,false': [nan, 0.07606905081326988], 'false,true': [0.031253843638180255, 0.07606905081326988], 'false': [0.03283981355529037, 0.07700312089505527]}, {'': [0.03763706757520253, 0.04424964898753014], 'false,false': [nan, 0.0372156998536417], 'false,true,false': [1.288630607284788e-05, 0.025807305963065668], 'false,true': [0.041246818599072914, 0.010291291076896483], 'false': [0.04604956760189735, 0.0372156998536417], 'false,true,true': [0.058306836241570736, 0.02966449927921655], 'false,false,false': [0.019864919178901187, 0.06513323326089122]}, {'': [0.05372247341746218, 0.035669064314101454], 'true,true': [0.03931071228080052, 0.12244897959183673], 'false,false': [0.03358907634964734, 0.0422268961415492], 'true,true,true': [0.03359351382716618, 0.055623633414041654], 'false,false,true': [0.005570515460016684, 0.01094295998892483], 'true': [0.04688447040883522, 0.15982701162420274], 'false': [nan, 0.0356690643141014], 'false,false,false': [0.05871016359752653, 0.0369194438524284]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(D, C), follows(A, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
3;true,false;follows(C, A).;true;true
3;false,true;tweets(G, F), recursion_accounttype(G, B).;true;true
3;true;follows(C, D), recursion_accounttype(D, B).;true;true
3;false;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
4;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
4;true;follows(E, D), recursion_accounttype(E, B).;true;true
4;false;follows(G, A), recursion_accounttype(G, B).;true;true
4;true,false;follows(C, A).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false,false;recursion_accounttype(H, B).;true;true
5;false;follows(A, D), tweets(D, E).;true;true
6;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
6;false,false;recursion_accounttype(F, B).;true;true
6;false;follows(A, D), recursion_accounttype(D, B).;true;true
6;false,false,false;follows(G, A), follows(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false,true,false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false;follows(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, E) )
%   | then if ( tweets(A, F) )
%   | | then return 0.8224346493852267;  // std dev = 0,186, 56,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 8,43e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.14185106490048838;  // std dev = 0,000, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), tweets(I, J) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.13287420982478626;  // std dev = 4,258, 91,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=25 */
%   | | | else return 0.2635543405049178;  // std dev = 2,986, 37,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7250701987397079;  // std dev = 0,025, 69,000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.6606498827991895;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.1138704186552494;  // std dev = 0,098, 146,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=2 */
%   | | else if ( tweets(A, G), follows(A, E) )
%   | | | then return 0.05012274863822624;  // std dev = 3,008, 77,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return -0.044202518264992725;  // std dev = 1,796, 52,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8170948089744577;  // std dev = 0,268, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.1588077619471964;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1865837981601322;  // std dev = 1,595, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.21580457738091127;  // std dev = 2,584, 28,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.536474757748564;  // std dev = 0,987, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.5621615061320152;  // std dev = 0,008, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.7178611039451531;  // std dev = 0,031, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5311486743066388;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.5698406851003871;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.18980361857773598;  // std dev = 0,923, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.5579266596007628;  // std dev = 0,027, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.7287544645807559;  // std dev = 0,286, 57,000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else return -0.1315324020792287;  // std dev = 0,496, 309,000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.46197895608391937;  // std dev = 0,096, 122,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else if ( follows(C, A) )
%   | | then return -0.10739798467755816;  // std dev = 0,097, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else return -0.07329797549228766;  // std dev = 0,186, 99,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=7 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.2821978436824025;  // std dev = 1,317, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.6278327729066591;  // std dev = 0,071, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.13764292185272625;  // std dev = 0,044, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4312567510219141;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.02022867027524043;  // std dev = 0,625, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.012751337447370526;  // std dev = 1,935, 28,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2980032415417866;  // std dev = 1,328, 57,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.35753052054741385;  // std dev = 0,935, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.32068655662250556;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.07953121493106703;  // std dev = 0,756, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.08522740334694508;  // std dev = 0,079, 198,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=4 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3464911720122977;  // std dev = 0,025, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2284045277270985;  // std dev = 0,340, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, K), follows(L, A) )
%   | | | then return -0.07340902963872323;  // std dev = 0,490, 31,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.0434273249726179;  // std dev = 3,450, 145,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=41 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.23735030502450166;  // std dev = 0,147, 45,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else return 0.25894812893422653;  // std dev = 0,070, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.3433033678048773;  // std dev = 0,100, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), tweets(F, G) )
%   | then if ( follows(H, A), follows(A, H) )
%   | | then return -0.054488198663991835;  // std dev = 0,117, 189,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.011216631633177189;  // std dev = 2,425, 110,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=29 */
%   | | | else return 0.10413399277838248;  // std dev = 1,514, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then if ( tweets(A, L) )
%   | | | then return 0.28426159645559873;  // std dev = 0,906, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.5490687220209295;  // std dev = 0,465, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.12810720177146168;  // std dev = 0,052, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.22010635058468764;  // std dev = 0,168, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then return -0.03943548921666741;  // std dev = 0,133, 134,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=14 */
%   | | else return -0.06921280166780613;  // std dev = 0,083, 39,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(H, G) )
%   | | then return 0.0397170566933143;  // std dev = 0,827, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.13226756689018315;  // std dev = 0,320, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.23346300006832496;  // std dev = 0,184, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.44346833047604384;  // std dev = 0,486, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(K, A), follows(A, L) )
%   | | | then return -0.09504323820739975;  // std dev = 0,011, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.12574657728796704;  // std dev = 0,461, 151,000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.18447777749034375;  // std dev = 0,137, 60,000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.023209212650529294;  // std dev = 0,833, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.19015724678427331;  // std dev = 0,033, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.29569833368660686;  // std dev = 1,126, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.17256368025665125;  // std dev = 1,284, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.0797183609977611;  // std dev = 0,103, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.21015529966061514;  // std dev = 0,066, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.020278423025666858;  // std dev = 1,854, 80,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=19 */
%   | | | else return 0.02634222440364191;  // std dev = 1,841, 66,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15690250894276322;  // std dev = 0,074, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( tweets(A, E) )
%   | | then return 0.11325598934117251;  // std dev = 0,277, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.052666656419117795;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(I, A) )
%   | | | then return 0.13414479775059462;  // std dev = 1,540, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.3059002372000855;  // std dev = 0,217, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.07493939420651405;  // std dev = 0,088, 245,000 (wgt'ed) examples reached here.  /* #neg=239 #pos=6 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.1526221344942162;  // std dev = 0,055, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.04762377339800789;  // std dev = 0,548, 44,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | | else return 0.012868574135075613;  // std dev = 1,391, 34,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.14309800888358729;  // std dev = 0,028, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return -0.1255310244431674;  // std dev = 1,208, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.28439184801057266;  // std dev = 0,168, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1275702856182383;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.07443422294541516;  // std dev = 0,051, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( tweets(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.1525914934349273;  // std dev = 0,136, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.06200962578160986;  // std dev = 1,297, 61,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.00480406596942656;  // std dev = 1,577, 69,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=19 */
%   | | | else return 0.010328588302766688;  // std dev = 1,765, 68,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=22 */


Results
   AUC ROC   = 0.993218
   AUC PR    = 0.361771
   CLL	      = -0.105277
   Precision = 0.336232 at threshold = 0.5
   Recall    = 0.920635
   F1        = 0.492569


Total learning time: 17.722 seconds
Total inference time: 37.148 seconds
AUC ROC: 0.993218


Results scoring model
   AUC ROC   = 0.995273
   AUC PR    = 0.41659
   CLL	      = -0.105366
   Precision = 0.343115 at threshold = 0.5
   Recall    = 0.974359
   F1        = 0.507513


Total scoring time: 42.093 seconds
Refined model CLL: -0.105366


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993218
   AUC PR    = 0.361771
   CLL	      = -0.105277
   Precision = 0.336232 at threshold = 0.5
   Recall    = 0.920635
   F1        = 0.492569


Total learning time: 80.34100000000001 seconds
Total inference time: 37.148 seconds
AUC ROC: 0.993218
Total revision time: 80.34100000000001
Best scored revision CLL: -0.105366


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:06:40
{'AUC ROC': 0.993218, 'parameter': {'AUC ROC': 0.993508, 'Precision': [0.331445, 0.5], 'Recall': 0.928571, 'AUC PR': 0.416734, 'Learning time': 4.572, 'CLL': -0.114582, 'Inference time': 13.677, 'F1': 0.488518}, 'Precision': [0.336232, 0.5], 'Recall': 0.920635, 'AUC PR': 0.361771, 'Learning time': 80.34100000000001, 'CLL': -0.105277, 'Inference time': 37.148, 'F1': 0.492569}


