Starting experiment #1 for 7_imdb_cora

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 5,16e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.14185106490048904;  // std dev = 0,000, 698,000 (wgt'ed) examples reached here.  /* #neg=698 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.12544463852839235;  // std dev = 0,000, 711,000 (wgt'ed) examples reached here.  /* #neg=711 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 3,94e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.11231637819360658;  // std dev = 0,000, 706,000 (wgt'ed) examples reached here.  /* #neg=706 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1015963294878362;  // std dev = 4,08e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.10159632948783504;  // std dev = 4,67e-07, 713,000 (wgt'ed) examples reached here.  /* #neg=713 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.09269127618926198;  // std dev = 0,000, 718,000 (wgt'ed) examples reached here.  /* #neg=718 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.08518475138839675;  // std dev = 1,37e-07, 730,000 (wgt'ed) examples reached here.  /* #neg=730 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109169;  // std dev = 3,33e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.07877675473109277;  // std dev = 0,000, 693,000 (wgt'ed) examples reached here.  /* #neg=693 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.07324622576333653;  // std dev = 2,39e-07, 701,000 (wgt'ed) examples reached here.  /* #neg=701 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0684269778442027;  // std dev = 1,39e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06842697784420261;  // std dev = 1,80e-07, 727,000 (wgt'ed) examples reached here.  /* #neg=727 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06419184008202539;  // std dev = 2,49e-07, 683,000 (wgt'ed) examples reached here.  /* #neg=683 */


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 31946

Target test facts examples: 35095
Target test pos	 examples: 2649
Target test neg examples: 218007

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3,37e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.12145968050124999;  // std dev = 14,156, 1.033,000 (wgt'ed) examples reached here.  /* #neg=761 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1,88e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.11122052668221348;  // std dev = 14,106, 1.013,000 (wgt'ed) examples reached here.  /* #neg=741 #pos=272 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,09e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.10049355728175531;  // std dev = 14,061, 996,000 (wgt'ed) examples reached here.  /* #neg=724 #pos=272 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,23e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.08322127627345771;  // std dev = 14,085, 1.005,000 (wgt'ed) examples reached here.  /* #neg=733 #pos=272 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4,21e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.07293618267457748;  // std dev = 14,059, 995,000 (wgt'ed) examples reached here.  /* #neg=723 #pos=272 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.05827181105097476;  // std dev = 14,085, 1.005,000 (wgt'ed) examples reached here.  /* #neg=733 #pos=272 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1,26e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.05583312098252112;  // std dev = 14,013, 978,000 (wgt'ed) examples reached here.  /* #neg=706 #pos=272 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7,60e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.05183779003609151;  // std dev = 13,956, 958,000 (wgt'ed) examples reached here.  /* #neg=686 #pos=272 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.029732731950318975;  // std dev = 14,080, 1.003,000 (wgt'ed) examples reached here.  /* #neg=731 #pos=272 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3,65e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.01894350166124909;  // std dev = 14,131, 1.023,000 (wgt'ed) examples reached here.  /* #neg=751 #pos=272 */


Results
   AUC ROC   = 0.575311
   AUC PR    = 0.168925
   CLL	      = -0.299208
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 3.243 seconds
Total inference time: 13.202 seconds
AUC ROC: 0.575311


Results scoring model
   AUC ROC   = 0.630435
   AUC PR    = 0.280066
   CLL	      = -0.29707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total scoring time: 4.023 seconds
Parameter learned model CLL: -0.29707


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.156, 761, 272], 'true': [3.37e-07, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.106, 741, 272], 'true': [1.88e-07, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.061, 724, 272], 'true': [4.09e-07, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.085, 733, 272], 'true': [2.23e-07, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.059, 723, 272], 'true': [4.21e-08, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.085, 733, 272], 'true': [0.0, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.013, 706, 272], 'true': [1.26e-07, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [13.956, 686, 272], 'true': [7.6e-08, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.08, 731, 272], 'true': [0.0, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.131, 751, 272], 'true': [3.65e-08, 0, 96]}]]
[{'': [1.1842378929335002e-15, 0.19397819675772274]}, {'': [3.7007434154171886e-16, 0.19641209196536596]}, {'': [1.7393494052460785e-15, 0.19851292721085986]}, {'': [5.181040781584064e-16, 0.197397094131332]}, {'': [1.850371707708594e-17, 0.1986374081462535]}, {'': [-4.625929269271486e-17, 0.19739709413133566]}, {'': [1.6653345369377348e-16, 0.20076864850849407]}, {'': [6.013708050052931e-17, 0.2033115267105759]}, {'': [-6.013708050052931e-17, 0.19764435507037542]}, {'': [1.3877787807814457e-17, 0.19519000429037286]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3,37e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1875296992628805;  // std dev = 0,470, 759,000 (wgt'ed) examples reached here.  /* #neg=509 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return -0.042751965801388576;  // std dev = 3,148, 111,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.013078512564301082;  // std dev = 3,049, 71,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1,88e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.14821948157625967;  // std dev = 0,464, 795,000 (wgt'ed) examples reached here.  /* #neg=545 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return -0.13430868121534792;  // std dev = 0,024, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.04774353025251461;  // std dev = 3,165, 124,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.02072853148556106;  // std dev = 3,032, 67,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,09e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12235566294992861;  // std dev = 0,463, 806,000 (wgt'ed) examples reached here.  /* #neg=556 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return -0.11959314943311632;  // std dev = 0,016, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.029033681080867974;  // std dev = 3,142, 108,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.04042426677592872;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,23e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10569254032452854;  // std dev = 0,464, 799,000 (wgt'ed) examples reached here.  /* #neg=549 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return -0.1061436739757625;  // std dev = 0,018, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.03748818066530435;  // std dev = 3,163, 122,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.01304949312942354;  // std dev = 3,032, 67,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
%   | | | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4,21e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09175911373274141;  // std dev = 0,465, 789,000 (wgt'ed) examples reached here.  /* #neg=539 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return -0.03250436903654665;  // std dev = 3,157, 125,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=11 */
%   | | | else return -0.11621538727191152;  // std dev = 0,050, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.011367748392801235;  // std dev = 3,032, 67,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
%   | | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.11650546305149165;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.08019996330510003;  // std dev = 0,467, 774,000 (wgt'ed) examples reached here.  /* #neg=525 #pos=249 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | | then return -0.09613596775172845;  // std dev = 0,008, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.03514062890290006;  // std dev = 3,171, 130,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=11 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.002854016477261842;  // std dev = 3,045, 70,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1,26e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05610062616579921;  // std dev = 0,463, 801,000 (wgt'ed) examples reached here.  /* #neg=551 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return -0.08583829842978306;  // std dev = 0,025, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.028288216746090736;  // std dev = 3,165, 126,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0698281848071409;  // std dev = 2,921, 49,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7,60e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04953069166211996;  // std dev = 0,465, 790,000 (wgt'ed) examples reached here.  /* #neg=540 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return -0.013739992016761984;  // std dev = 3,141, 115,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=11 */
%   | | | else return -0.09436843522468727;  // std dev = 0,061, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0256424297219051;  // std dev = 2,986, 58,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04483637874385591;  // std dev = 0,467, 777,000 (wgt'ed) examples reached here.  /* #neg=527 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return -0.02183208304083138;  // std dev = 3,158, 127,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=11 */
%   | | | else return -0.08389398883739464;  // std dev = 0,070, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.05764579825856799;  // std dev = 0,943, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.04037156128777944;  // std dev = 2,807, 50,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3,65e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.02346363040616371;  // std dev = 0,462, 808,000 (wgt'ed) examples reached here.  /* #neg=558 #pos=250 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return -0.005121272112849092;  // std dev = 3,021, 70,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=11 */
%   | | | else return -0.09528299710943554;  // std dev = 0,172, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0010317330953083404;  // std dev = 3,125, 100,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=11 */
%   | | | else return -0.07104572343446806;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.609208
   AUC PR    = 0.170423
   CLL	      = -0.318904
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 26.878 seconds
Total inference time: 158.69299999999998 seconds
AUC ROC: 0.609208


Results scoring model
   AUC ROC   = 0.698769
   AUC PR    = 0.283888
   CLL	      = -0.297183
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total scoring time: 12.664 seconds
Refined model CLL: -0.297183


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.575311
   AUC PR    = 0.168925
   CLL	      = -0.299208
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 46.808 seconds
Total inference time: 13.202 seconds
AUC ROC: 0.575311
Total revision time: 46.808
Best scored revision CLL: -0.29707


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:45
{'Inference time': 13.202, 'Precision': [1.0, 0.5], 'parameter': {'Inference time': 13.202, 'Precision': [1.0, 0.5], 'Learning time': 3.243, 'AUC ROC': 0.575311, 'CLL': -0.299208, 'F1': 0.261811, 'Recall': 0.150623, 'AUC PR': 0.168925}, 'Learning time': 46.808, 'AUC ROC': 0.575311, 'CLL': -0.299208, 'F1': 0.261811, 'Recall': 0.150623, 'AUC PR': 0.168925}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 64082

Target test facts examples: 33542
Target test pos	 examples: 2246
Target test neg examples: 185871

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.1623383704364836;  // std dev = 21,559, 2.196,000 (wgt'ed) examples reached here.  /* #neg=1.528 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.14633265370762635;  // std dev = 21,483, 2.161,000 (wgt'ed) examples reached here.  /* #neg=1.493 #pos=668 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.12046709613366245;  // std dev = 21,559, 2.196,000 (wgt'ed) examples reached here.  /* #neg=1.528 #pos=668 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0911457411407502;  // std dev = 21,722, 2.275,000 (wgt'ed) examples reached here.  /* #neg=1.607 #pos=668 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.08048266679937732;  // std dev = 21,654, 2.241,000 (wgt'ed) examples reached here.  /* #neg=1.573 #pos=668 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.08097613414607398;  // std dev = 21,429, 2.137,000 (wgt'ed) examples reached here.  /* #neg=1.469 #pos=668 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.05227954288587363;  // std dev = 21,645, 2.237,000 (wgt'ed) examples reached here.  /* #neg=1.569 #pos=668 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5,16e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.05803633132726582;  // std dev = 21,404, 2.126,000 (wgt'ed) examples reached here.  /* #neg=1.458 #pos=668 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.03324716012875446;  // std dev = 21,614, 2.222,000 (wgt'ed) examples reached here.  /* #neg=1.554 #pos=668 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,83e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.03079870808618905;  // std dev = 21,551, 2.192,000 (wgt'ed) examples reached here.  /* #neg=1.524 #pos=668 */


Results
   AUC ROC   = 0.587266
   AUC PR    = 0.193231
   CLL	      = -0.337545
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.174533
   F1        = 0.297195


Total learning time: 5.085 seconds
Total inference time: 12.419 seconds
AUC ROC: 0.587266


Results scoring model
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.338065
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total scoring time: 5.452 seconds
Parameter learned model CLL: -0.338065


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.559, 1528, 668], 'true': [4.46e-07, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.483, 1493, 668], 'true': [0.0, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.559, 1528, 668], 'true': [4.3e-07, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.722, 1607, 668], 'true': [2.6e-07, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.654, 1573, 668], 'true': [0.0, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.429, 1469, 668], 'true': [0.0, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.645, 1569, 668], 'true': [1.46e-07, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.404, 1458, 668], 'true': [5.16e-08, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.614, 1554, 668], 'true': [0.0, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.551, 1524, 668], 'true': [6.83e-08, 0, 103]}]]
[{'': [1.9315724855614373e-15, 0.21165822276634647]}, {'': [-3.4492365813597096e-16, 0.21356335578268118]}, {'': [1.793603022307049e-15, 0.21165822276634827]}, {'': [6.553549504583448e-16, 0.2074099263374065]}, {'': [-2.4144656069517967e-16, 0.20922880375684139]}, {'': [-5.1738548720395646e-17, 0.2148766447350588]}, {'': [2.0695419488158259e-16, 0.20944376578808796]}, {'': [2.5869274360197823e-17, 0.21548024768820626]}, {'': [-1.2503482607428947e-16, 0.21025162822314364]}, {'': [4.527123013034619e-17, 0.2118752996962906]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16524695537956524;  // std dev = 0,461, 2.071,000 (wgt'ed) examples reached here.  /* #neg=1.435 #pos=636 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.1860177875585285;  // std dev = 3,666, 61,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=20 */
%   | | | else return -0.036587907005750875;  // std dev = 2,317, 57,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=6 */
%   | | else return -0.07126282960637004;  // std dev = 0,256, 85,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.4439625754383551;  // std dev = 2,584, 28,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=17 */
%   | | | else return -0.12318028170450207;  // std dev = 0,980, 25,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.24591062738640704;  // std dev = 3,261, 44,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=18 */
%   | | | else return 0.16167082820344725;  // std dev = 20,127, 1.847,000 (wgt'ed) examples reached here.  /* #neg=1.247 #pos=600 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return 0.1042338006963561;  // std dev = 3,820, 74,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=20 */
%   | | | else return -0.028364425683107857;  // std dev = 2,312, 55,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=6 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.06443015299456757;  // std dev = 2,364, 87,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=6 */
%   | | | else return -0.13339567023594684;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1282741066749164;  // std dev = 0,463, 2.022,000 (wgt'ed) examples reached here.  /* #neg=1.386 #pos=636 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.06859848782083305;  // std dev = 3,595, 76,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=17 */
%   | | | else return -0.006745022954817325;  // std dev = 2,721, 53,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=9 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.1261217908938812;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.04572674478881942;  // std dev = 2,349, 75,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.42317113170066345;  // std dev = 2,332, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | | else return -0.14062123610936383;  // std dev = 0,988, 43,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   | | else return 0.10661864044818374;  // std dev = 0,464, 1.970,000 (wgt'ed) examples reached here.  /* #neg=1.352 #pos=618 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.08806568521406818;  // std dev = 3,809, 73,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=20 */
%   | | | else return -0.014635914357187939;  // std dev = 2,288, 47,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=6 */
%   | | else return -0.04304474828712983;  // std dev = 0,268, 77,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.39684352250062893;  // std dev = 2,465, 27,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return -0.20643506596652805;  // std dev = 0,983, 30,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else return 0.09298728421866197;  // std dev = 0,464, 1.946,000 (wgt'ed) examples reached here.  /* #neg=1.328 #pos=618 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.06691072050512664;  // std dev = 3,829, 75,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=20 */
%   | | | else return -0.009891254886056864;  // std dev = 2,284, 46,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.04811120012507506;  // std dev = 2,364, 88,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=6 */
%   | | | else return -0.10973703300700657;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.40601746744330874;  // std dev = 1,966, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.13245423036639561;  // std dev = 0,987, 40,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.05911126119243576;  // std dev = 3,237, 57,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=18 */
%   | | | else return 0.09571213735059333;  // std dev = 19,944, 1.780,000 (wgt'ed) examples reached here.  /* #neg=1.180 #pos=600 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return 0.03319733240549704;  // std dev = 3,888, 82,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return -0.023943576449766555;  // std dev = 2,304, 52,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=6 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.0520786741807763;  // std dev = 2,375, 101,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=6 */
%   | | | else return -0.09946644943579563;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.28565080686526595;  // std dev = 2,521, 28,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=17 */
%   | | | else return -0.1729973633859587;  // std dev = 0,983, 27,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.062040234373756116;  // std dev = 2,530, 60,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=18 */
%   | | | else return 0.057969400188776374;  // std dev = 20,239, 1.891,000 (wgt'ed) examples reached here.  /* #neg=1.291 #pos=600 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.051554353869995045;  // std dev = 3,572, 74,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | | else return -0.0048919883871821205;  // std dev = 2,676, 44,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=9 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.099297967206095;  // std dev = 3,73e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.040615646491497175;  // std dev = 2,367, 91,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5,16e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.30998314507342556;  // std dev = 2,227, 24,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | | else return -0.14629433533829736;  // std dev = 0,980, 25,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else return 0.04661490554859933;  // std dev = 0,462, 1.949,000 (wgt'ed) examples reached here.  /* #neg=1.331 #pos=618 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return -0.16934025862526692;  // std dev = 0,136, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.0055480187958281526;  // std dev = 4,584, 159,000 (wgt'ed) examples reached here.  /* #neg=133 #pos=26 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.03895890781550801;  // std dev = 2,319, 58,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=6 */
%   | | | else return -0.0876038661585307;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.03045417264942394;  // std dev = 0,459, 1.957,000 (wgt'ed) examples reached here.  /* #neg=1.347 #pos=610 */
%   | | else if ( title(F, E), venue(F, B) )
%   | | | then return 0.05244364225348037;  // std dev = 4,524, 146,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=30 */
%   | | | else return 0.028176795554845854;  // std dev = 2,705, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.6431664515700012;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.009097977901230974;  // std dev = 0,333, 47,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,83e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.3098316011281183;  // std dev = 1,799, 21,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | | else return -0.13833912351397154;  // std dev = 0,990, 50,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=1 */
%   | | else return 0.03312729502820801;  // std dev = 0,463, 1.926,000 (wgt'ed) examples reached here.  /* #neg=1.308 #pos=618 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.03766365241370324;  // std dev = 3,831, 76,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=20 */
%   | | | else return -0.01630081474218971;  // std dev = 2,296, 50,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.04882122261017422;  // std dev = 2,377, 103,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=6 */
%   | | | else return -0.0801765282766549;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.639892
   AUC PR    = 0.201768
   CLL	      = -0.323543
   Precision = 0.281059 at threshold = 0.5
   Recall    = 0.184328
   F1        = 0.22264


Total learning time: 67.007 seconds
Total inference time: 140.73 seconds
AUC ROC: 0.639892


Results scoring model
   AUC ROC   = 0.645071
   AUC PR    = 0.175837
   CLL	      = -0.329117
   Precision = 0.40678 at threshold = 0.5
   Recall    = 0.155642
   F1        = 0.225141


Total scoring time: 19.878 seconds
Refined model CLL: -0.329117


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.639892
   AUC PR    = 0.201768
   CLL	      = -0.323543
   Precision = 0.281059 at threshold = 0.5
   Recall    = 0.184328
   F1        = 0.22264


Total learning time: 97.42200000000001 seconds
Total inference time: 140.73 seconds
AUC ROC: 0.639892
Total revision time: 97.42200000000001
Best scored revision CLL: -0.329117


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:07:57
{'Inference time': 140.73, 'Precision': [0.281059, 0.5], 'parameter': {'Inference time': 12.419, 'Precision': [1.0, 0.5], 'Learning time': 5.085, 'AUC ROC': 0.587266, 'CLL': -0.337545, 'F1': 0.297195, 'Recall': 0.174533, 'AUC PR': 0.193231}, 'Learning time': 97.42200000000001, 'AUC ROC': 0.639892, 'CLL': -0.323543, 'F1': 0.22264, 'Recall': 0.184328, 'AUC PR': 0.201768}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 50581

Target test facts examples: 33252
Target test pos	 examples: 2436
Target test neg examples: 199372

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3,77e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.14539565738794596;  // std dev = 18,535, 1.678,000 (wgt'ed) examples reached here.  /* #neg=1.196 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1,19e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.11828622761216628;  // std dev = 18,645, 1.729,000 (wgt'ed) examples reached here.  /* #neg=1.247 #pos=482 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,21e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.1171901441547057;  // std dev = 18,444, 1.638,000 (wgt'ed) examples reached here.  /* #neg=1.156 #pos=482 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2,46e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.09261968169533874;  // std dev = 18,533, 1.677,000 (wgt'ed) examples reached here.  /* #neg=1.195 #pos=482 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.07785197712950025;  // std dev = 18,531, 1.676,000 (wgt'ed) examples reached here.  /* #neg=1.194 #pos=482 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.05877378001349907;  // std dev = 18,607, 1.711,000 (wgt'ed) examples reached here.  /* #neg=1.229 #pos=482 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1,37e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.06572749868183819;  // std dev = 18,381, 1.612,000 (wgt'ed) examples reached here.  /* #neg=1.130 #pos=482 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6,99e-08, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.04901991311783207;  // std dev = 18,444, 1.638,000 (wgt'ed) examples reached here.  /* #neg=1.156 #pos=482 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.04365511601762662;  // std dev = 18,394, 1.617,000 (wgt'ed) examples reached here.  /* #neg=1.135 #pos=482 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,50e-08, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.02879377147280802;  // std dev = 18,478, 1.653,000 (wgt'ed) examples reached here.  /* #neg=1.171 #pos=482 */


Results
   AUC ROC   = 0.581281
   AUC PR    = 0.181212
   CLL	      = -0.322312
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 4.194 seconds
Total inference time: 12.961 seconds
AUC ROC: 0.581281


Results scoring model
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.321627
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total scoring time: 5.088 seconds
Parameter learned model CLL: -0.321627


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.535, 1196, 482], 'true': [3.77e-07, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.645, 1247, 482], 'true': [1.19e-07, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.444, 1156, 482], 'true': [4.21e-07, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.533, 1195, 482], 'true': [2.46e-07, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.531, 1194, 482], 'true': [0.0, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.607, 1229, 482], 'true': [0.0, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.381, 1130, 482], 'true': [1.37e-07, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.444, 1156, 482], 'true': [6.99e-08, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.394, 1135, 482], 'true': [0.0, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.478, 1171, 482], 'true': [6.5e-08, 0, 99]}]]
[{'': [1.4354398702224246e-15, 0.20473604282297006]}, {'': [1.4354398702224247e-16, 0.20105899397246094]}, {'': [1.794299837778031e-15, 0.20767158496096585]}, {'': [6.100619448445304e-16, 0.20480889682536182]}, {'': [0.0, 0.20488177898279492]}, {'': [-4.485749594445077e-17, 0.20234799340466222]}, {'': [1.8840148296669324e-16, 0.20960199250043454]}, {'': [4.9343245538895844e-17, 0.2076715849609548]}, {'': [-1.1214373986112693e-16, 0.20922947241526613]}, {'': [4.261462114722823e-17, 0.20656570813518776]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3,77e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.13474467978036342;  // std dev = 0,447, 47,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | else return 0.17700018694044997;  // std dev = 0,466, 1.358,000 (wgt'ed) examples reached here.  /* #neg=925 #pos=433 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1340110040650296;  // std dev = 3,404, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return -0.06185106490048781;  // std dev = 1,356, 25,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.0012260649004876395;  // std dev = 3,933, 128,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1,19e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.14509788280600483;  // std dev = 0,462, 1.440,000 (wgt'ed) examples reached here.  /* #neg=994 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.12174207162425164;  // std dev = 3,392, 57,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | | else return -0.05448744112577215;  // std dev = 1,356, 25,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.014941318975528759;  // std dev = 3,965, 142,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,21e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1353047898372727;  // std dev = 0,467, 1.390,000 (wgt'ed) examples reached here.  /* #neg=944 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.12596804761557404;  // std dev = 3,342, 53,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return -0.010623368272244109;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.010397989451966462;  // std dev = 3,958, 139,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=18 */
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2,46e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return -0.20023077393996677;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06507534850901268;  // std dev = 3,090, 49,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | else return 0.1099006103807362;  // std dev = 0,465, 1.366,000 (wgt'ed) examples reached here.  /* #neg=933 #pos=433 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.04387442691847738;  // std dev = 3,490, 67,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=16 */
%   | | | else return -0.0501641592509082;  // std dev = 1,359, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.011332217674905859;  // std dev = 1,320, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -0.029788789214864084;  // std dev = 3,775, 148,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0871046288540119;  // std dev = 0,464, 1.427,000 (wgt'ed) examples reached here.  /* #neg=981 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.09997761915915196;  // std dev = 3,342, 53,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return -0.03829220461742002;  // std dev = 1,354, 24,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.01999451949379273;  // std dev = 3,990, 156,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=18 */
%   | | | else return -0.09932375557992063;  // std dev = 0,001, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.09243768947476635;  // std dev = 0,471, 39,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0.06119545620774538;  // std dev = 0,459, 1.434,000 (wgt'ed) examples reached here.  /* #neg=1.001 #pos=433 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.08919191414523658;  // std dev = 3,328, 52,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
%   | | | else return -0.040670509637004464;  // std dev = 1,359, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.004436129508814136;  // std dev = 3,960, 140,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=18 */
%   | | | else return -0.09078526570519047;  // std dev = 0,002, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1,37e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.09273148560716624;  // std dev = 0,477, 37,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return 0.0634242065371023;  // std dev = 0,465, 1.372,000 (wgt'ed) examples reached here.  /* #neg=939 #pos=433 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.0657086180098514;  // std dev = 3,302, 59,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=16 */
%   | | | else return -0.0789438354812878;  // std dev = 1,468, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.004911497397156662;  // std dev = 3,963, 141,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=18 */
%   | | | else return -0.08356479112081786;  // std dev = 0,001, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6,99e-08, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.696073123938963;  // std dev = 3,938, 350,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=334 */
%   | | | else return -0.2262973203923409;  // std dev = 4,063, 725,000 (wgt'ed) examples reached here.  /* #neg=709 #pos=16 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.23958657434934968;  // std dev = 2,053, 277,000 (wgt'ed) examples reached here.  /* #neg=273 #pos=4 */
%   | | | else return 0.4047476170790283;  // std dev = 5,869, 159,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=105 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.14048110345963752;  // std dev = 3,303, 47,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=18 */
%   | | | else return 0.06095922345295103;  // std dev = 1,505, 16,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else return 0.12583518451217152;  // std dev = 0,352, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return -0.2186073094522042;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07788752739526952;  // std dev = 2,345, 37,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return 0.034035313867990684;  // std dev = 0,397, 1.349,000 (wgt'ed) examples reached here.  /* #neg=916 #pos=433 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.022932309530186965;  // std dev = 3,239, 104,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
%   | | | else return -0.08497560400986562;  // std dev = 1,321, 43,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.19348232384239172;  // std dev = 0,194, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.03858241314964624;  // std dev = 3,739, 100,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,50e-08, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.09618341215008293;  // std dev = 0,392, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else return 0.0177966536532666;  // std dev = 0,390, 1.408,000 (wgt'ed) examples reached here.  /* #neg=975 #pos=433 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.057652370620662356;  // std dev = 3,241, 55,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.11082888124080778;  // std dev = 1,505, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -9.412679138716722E-4;  // std dev = 3,514, 140,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=18 */
%   | | | else return -0.08239575656807584;  // std dev = 0,009, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.968148
   AUC PR    = 0.579028
   CLL	      = -0.263901
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 60.362 seconds
Total inference time: 495.132 seconds
AUC ROC: 0.968148


Results scoring model
   AUC ROC   = 0.961081
   AUC PR    = 0.488671
   CLL	      = -0.26803
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total scoring time: 23.84 seconds
Refined model CLL: -0.26803


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.968148
   AUC PR    = 0.579028
   CLL	      = -0.263901
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 93.48400000000001 seconds
Total inference time: 495.132 seconds
AUC ROC: 0.968148
Total revision time: 93.48400000000001
Best scored revision CLL: -0.26803


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:18:00
{'Inference time': 495.132, 'Precision': [1.0, 0.5], 'parameter': {'Inference time': 12.961, 'Precision': [1.0, 0.5], 'Learning time': 4.194, 'AUC ROC': 0.581281, 'CLL': -0.322312, 'F1': 0.279661, 'Recall': 0.162562, 'AUC PR': 0.181212}, 'Learning time': 93.48400000000001, 'AUC ROC': 0.968148, 'CLL': -0.263901, 'F1': 0.279661, 'Recall': 0.162562, 'AUC PR': 0.579028}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 67804

Target test facts examples: 34429
Target test pos	 examples: 2270
Target test neg examples: 182149

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6,19e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.14966185022865858;  // std dev = 21,160, 2.168,000 (wgt'ed) examples reached here.  /* #neg=1.536 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.13357544173235933;  // std dev = 21,114, 2.145,000 (wgt'ed) examples reached here.  /* #neg=1.513 #pos=632 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,62e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.12173192252433335;  // std dev = 21,008, 2.095,000 (wgt'ed) examples reached here.  /* #neg=1.463 #pos=632 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3,26e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.09263840466183004;  // std dev = 21,164, 2.170,000 (wgt'ed) examples reached here.  /* #neg=1.538 #pos=632 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1,84e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.09008349533352457;  // std dev = 20,975, 2.080,000 (wgt'ed) examples reached here.  /* #neg=1.448 #pos=632 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.06603432755843609;  // std dev = 21,103, 2.140,000 (wgt'ed) examples reached here.  /* #neg=1.508 #pos=632 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1,76e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.06035650958432643;  // std dev = 21,010, 2.096,000 (wgt'ed) examples reached here.  /* #neg=1.464 #pos=632 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.052926294112117876;  // std dev = 20,953, 2.070,000 (wgt'ed) examples reached here.  /* #neg=1.438 #pos=632 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.03916614294056178;  // std dev = 21,008, 2.095,000 (wgt'ed) examples reached here.  /* #neg=1.463 #pos=632 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7,60e-08, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.03678800863055055;  // std dev = 20,929, 2.059,000 (wgt'ed) examples reached here.  /* #neg=1.427 #pos=632 */


Results
   AUC ROC   = 0.5837
   AUC PR    = 0.186484
   CLL	      = -0.334399
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.167401
   F1        = 0.286792


Total learning time: 4.962 seconds
Total inference time: 12.002 seconds
AUC ROC: 0.5837


Results scoring model
   AUC ROC   = 0.576975
   AUC PR    = 0.170861
   CLL	      = -0.33349
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total scoring time: 5.636 seconds
Parameter learned model CLL: -0.33349


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.16, 1536, 632], 'true': [6.19e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.114, 1513, 632], 'true': [0.0, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.008, 1463, 632], 'true': [4.62e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.164, 1538, 632], 'true': [3.26e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [20.975, 1448, 632], 'true': [1.84e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.103, 1508, 632], 'true': [0.0, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.01, 1464, 632], 'true': [1.76e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [20.953, 1438, 632], 'true': [0.0, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.008, 1463, 632], 'true': [0.0, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [20.929, 1427, 632], 'true': [7.6e-08, 0, 115]}]]
[{'': [3.3364615418300357e-15, 0.20653313544203966]}, {'': [-1.0503675224279742e-15, 0.20782673426030174]}, {'': [1.853589745461131e-15, 0.2106654667038941]}, {'': [9.267948727305654e-16, 0.20642103251291893]}, {'': [2.934850430313457e-16, 0.21152366863906485]}, {'': [-4.633974363652827e-17, 0.2081090051532758]}, {'': [2.703151712130816e-16, 0.2106083561564065]}, {'': [-2.703151712130816e-17, 0.2120973651660639]}, {'': [-1.5832745742480493e-16, 0.2106654667038892]}, {'': [5.0201388939572296e-17, 0.21272981291814247]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6,19e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.17207824902882124;  // std dev = 0,464, 1.924,000 (wgt'ed) examples reached here.  /* #neg=1.320 #pos=604 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.003982268432845688;  // std dev = 3,458, 96,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=14 */
%   | | | else return -0.05613677918620208;  // std dev = 1,656, 35,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.03847680395197139;  // std dev = 3,003, 61,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.11713474055633635;  // std dev = 2,543, 32,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return -0.09744859277699679;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else return 0.14333815670538247;  // std dev = 0,461, 1.932,000 (wgt'ed) examples reached here.  /* #neg=1.338 #pos=594 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.00838587256359481;  // std dev = 3,477, 104,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
%   | | | else return 0.05737927397132337;  // std dev = 1,550, 15,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.006534046403963465;  // std dev = 3,083, 81,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=11 */
%   | | | else return -0.14659967287342415;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,62e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11845511940989138;  // std dev = 0,459, 1.869,000 (wgt'ed) examples reached here.  /* #neg=1.303 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5295496218083812;  // std dev = 2,673, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | | else return 0.7438353360940957;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.052951634643444906;  // std dev = 2,197, 31,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | | else return -0.004258430934727025;  // std dev = 3,073, 78,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=11 */
%   | | else return -0.017726143673615878;  // std dev = 0,329, 89,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3,26e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10034953362912112;  // std dev = 0,459, 1.867,000 (wgt'ed) examples reached here.  /* #neg=1.301 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.4364121370947999;  // std dev = 2,673, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | | else return 0.32715945802396346;  // std dev = 2,133, 20,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.018792491483378217;  // std dev = 3,424, 87,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=14 */
%   | | | else return -0.043412713611969;  // std dev = 1,646, 31,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | else return 0.01509463521645135;  // std dev = 0,366, 69,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1,84e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08867773425170862;  // std dev = 0,462, 1.836,000 (wgt'ed) examples reached here.  /* #neg=1.270 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2903986270154274;  // std dev = 2,841, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | | | else return 0.5553968774701248;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.03148477045638344;  // std dev = 2,218, 34,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=6 */
%   | | | else return 0.05309350497586668;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.022721196689270452;  // std dev = 3,031, 67,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
%   | | | else return -0.12889612549463078;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.053599105243900214;  // std dev = 0,453, 1.960,000 (wgt'ed) examples reached here.  /* #neg=1.394 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.20099323469564695;  // std dev = 2,927, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | | else return 0.41937870404410543;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0021477560563724217;  // std dev = 3,451, 95,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=14 */
%   | | | else return 0.06767857818181768;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return -0.006774912496572169;  // std dev = 0,344, 80,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1,76e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.33797107572530666;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return -0.05786225760802691;  // std dev = 1,561, 16,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else return 0.05578307327659435;  // std dev = 0,456, 1.928,000 (wgt'ed) examples reached here.  /* #neg=1.334 #pos=594 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.02287906368306837;  // std dev = 3,400, 82,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=14 */
%   | | | else return -0.03530941444542807;  // std dev = 1,640, 29,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | | else return 0.04441437337227936;  // std dev = 0,397, 56,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2491196236445825;  // std dev = 2,121, 18,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return -0.14130841753164186;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else return 0.04875355483548362;  // std dev = 0,457, 1.905,000 (wgt'ed) examples reached here.  /* #neg=1.311 #pos=594 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.02973102889066657;  // std dev = 2,210, 33,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=6 */
%   | | | else return 0.07437396729117815;  // std dev = 2,904, 47,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
%   | | else return -0.025044052785953688;  // std dev = 0,326, 91,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.034177160857508514;  // std dev = 0,455, 1.970,000 (wgt'ed) examples reached here.  /* #neg=1.366 #pos=604 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return -0.009246703252118045;  // std dev = 3,464, 100,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=14 */
%   | | | else return -0.021514558631979465;  // std dev = 1,627, 26,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else return -0.021731303869156195;  // std dev = 0,353, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7,60e-08, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.009973968441374223;  // std dev = 0,450, 2.006,000 (wgt'ed) examples reached here.  /* #neg=1.440 #pos=566 */
%   | | else if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | | then return 0.06482454705367;  // std dev = 3,005, 52,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
%   | | | else return 0.029028982699844285;  // std dev = 3,675, 97,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.12022467910518543;  // std dev = 0,424, 17,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | | else return 0.03919934546370513;  // std dev = 0,402, 54,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */


Results
   AUC ROC   = 0.649157
   AUC PR    = 0.209557
   CLL	      = -0.304544
   Precision = 0.538653 at threshold = 0.5
   Recall    = 0.190308
   F1        = 0.28125


Total learning time: 86.436 seconds
Total inference time: 160.993 seconds
AUC ROC: 0.649157


Results scoring model
   AUC ROC   = 0.629247
   AUC PR    = 0.191614
   CLL	      = -0.317684
   Precision = 0.222384 at threshold = 0.5
   Recall    = 0.204819
   F1        = 0.21324


Total scoring time: 17.966 seconds
Refined model CLL: -0.317684


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.649157
   AUC PR    = 0.209557
   CLL	      = -0.304544
   Precision = 0.538653 at threshold = 0.5
   Recall    = 0.190308
   F1        = 0.28125


Total learning time: 115.0 seconds
Total inference time: 160.993 seconds
AUC ROC: 0.649157
Total revision time: 115.0
Best scored revision CLL: -0.317684


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:22:49
{'Inference time': 160.993, 'Precision': [0.538653, 0.5], 'parameter': {'Inference time': 12.002, 'Precision': [1.0, 0.5], 'Learning time': 4.962, 'AUC ROC': 0.5837, 'CLL': -0.334399, 'F1': 0.286792, 'Recall': 0.167401, 'AUC PR': 0.186484}, 'Learning time': 115.0, 'AUC ROC': 0.649157, 'CLL': -0.304544, 'F1': 0.28125, 'Recall': 0.190308, 'AUC PR': 0.209557}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 35540

Target test facts examples: 33914
Target test pos	 examples: 2467
Target test neg examples: 214413

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.15491494651358473;  // std dev = 18,141, 1.577,000 (wgt'ed) examples reached here.  /* #neg=1.109 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2,67e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.14450839694669096;  // std dev = 18,018, 1.528,000 (wgt'ed) examples reached here.  /* #neg=1.060 #pos=468 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3,48e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.11632032632500587;  // std dev = 18,117, 1.567,000 (wgt'ed) examples reached here.  /* #neg=1.099 #pos=468 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1,03e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.10878864301962363;  // std dev = 17,981, 1.514,000 (wgt'ed) examples reached here.  /* #neg=1.046 #pos=468 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.0832236806862559;  // std dev = 18,080, 1.552,000 (wgt'ed) examples reached here.  /* #neg=1.084 #pos=468 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.06618369630089062;  // std dev = 18,112, 1.565,000 (wgt'ed) examples reached here.  /* #neg=1.097 #pos=468 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.05491892618662806;  // std dev = 18,102, 1.561,000 (wgt'ed) examples reached here.  /* #neg=1.093 #pos=468 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4,21e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.047922723192674335;  // std dev = 18,059, 1.544,000 (wgt'ed) examples reached here.  /* #neg=1.076 #pos=468 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.037339893609642336;  // std dev = 18,077, 1.551,000 (wgt'ed) examples reached here.  /* #neg=1.083 #pos=468 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5,77e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.03296063360086787;  // std dev = 18,039, 1.536,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=468 */


Results
   AUC ROC   = 0.583705
   AUC PR    = 0.185174
   CLL	      = -0.334789
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16741
   F1        = 0.286806


Total learning time: 3.555 seconds
Total inference time: 14.142 seconds
AUC ROC: 0.583705


Results scoring model
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.338048
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total scoring time: 3.839 seconds
Parameter learned model CLL: -0.338048


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.141, 1109, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.018, 1060, 468], 'true': [2.67e-07, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.117, 1099, 468], 'true': [3.48e-07, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [17.981, 1046, 468], 'true': [1.03e-07, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.08, 1084, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.112, 1097, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.102, 1093, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.059, 1076, 468], 'true': [4.21e-08, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.077, 1083, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.039, 1068, 468], 'true': [5.77e-08, 0, 82]}]]
[{'': [-6.932124251318051e-16, 0.20869594588344012]}, {'': [8.665155314147563e-16, 0.2124736164030655]}, {'': [1.4730764034050857e-15, 0.2094621478654674]}, {'': [1.2997732971221344e-16, 0.2135628890374106]}, {'': [-3.4660621256590254e-16, 0.21061616537357597]}, {'': [-5.415722071342227e-17, 0.20961569476059946]}, {'': [-1.408087738548979e-16, 0.20992308926627262]}, {'': [2.166288828536891e-17, 0.21123385862709282]}, {'': [-5.144935967775116e-17, 0.21069329452391689]}, {'': [4.06179155350667e-17, 0.21185302734376543]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.6200536970042743;  // std dev = 1,952, 21,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.01281880683597155;  // std dev = 2,640, 62,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=8 */
%   | | else return 0.20170721730809643;  // std dev = 0,475, 1.141,000 (wgt'ed) examples reached here.  /* #neg=749 #pos=392 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.15814893509951236;  // std dev = 2,898, 40,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.07627729440868437;  // std dev = 3,349, 183,000 (wgt'ed) examples reached here.  /* #neg=171 #pos=12 */
%   | | | else return 0.07833242133804388;  // std dev = 4,326, 109,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=24 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2,67e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1589800445804988;  // std dev = 0,468, 1.272,000 (wgt'ed) examples reached here.  /* #neg=856 #pos=416 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.4670148446445232;  // std dev = 0,771, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.12848992518199834;  // std dev = 3,134, 47,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.06540132631438801;  // std dev = 3,345, 178,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=12 */
%   | | | else return 0.07056572855256686;  // std dev = 4,320, 108,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=24 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3,48e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13411246185917808;  // std dev = 0,467, 1.278,000 (wgt'ed) examples reached here.  /* #neg=862 #pos=416 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.33860669921600833;  // std dev = 1,427, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.07822329267525385;  // std dev = 2,978, 50,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.19829944095023852;  // std dev = 2,893, 36,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
%   | | | else return -0.028957771517239224;  // std dev = 4,400, 207,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1,03e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.10899097028393917;  // std dev = 3,208, 55,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=18 */
%   | | | else return 0.801788557861038;  // std dev = 0,102, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.11751056783572612;  // std dev = 0,471, 1.185,000 (wgt'ed) examples reached here.  /* #neg=793 #pos=392 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.35744319489818865;  // std dev = 0,745, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09853191088365082;  // std dev = 3,079, 44,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.047188232098810866;  // std dev = 3,320, 158,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=12 */
%   | | | else return 0.057679653422627986;  // std dev = 4,313, 106,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.5649989977100233;  // std dev = 1,329, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.06502249125072943;  // std dev = 2,410, 56,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.09966094914610878;  // std dev = 3,651, 60,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | | | else return 0.08265414642501548;  // std dev = 15,948, 1.176,000 (wgt'ed) examples reached here.  /* #neg=804 #pos=372 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.6389785706993523;  // std dev = 0,125, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.05302390105502225;  // std dev = 2,939, 42,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.04835410026098066;  // std dev = 3,331, 172,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=12 */
%   | | | else return 0.048586742092334226;  // std dev = 4,312, 107,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07321519921234772;  // std dev = 0,464, 1.285,000 (wgt'ed) examples reached here.  /* #neg=869 #pos=416 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.4432454682595555;  // std dev = 1,169, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.0011222073836523068;  // std dev = 3,041, 63,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.05242536107858841;  // std dev = 3,060, 42,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   | | | else return -0.027001944771796505;  // std dev = 4,394, 218,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.3741614993071152;  // std dev = 2,374, 25,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.05608145672586773;  // std dev = 2,460, 37,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | else return 0.06904475476525068;  // std dev = 0,467, 1.178,000 (wgt'ed) examples reached here.  /* #neg=786 #pos=392 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.11460001327569573;  // std dev = 0,263, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.026086560646535622;  // std dev = 4,394, 148,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=26 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.10127380558058818;  // std dev = 4,170, 88,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=26 */
%   | | | else return -0.205256338071929;  // std dev = 0,054, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4,21e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.03324778717285986;  // std dev = 3,026, 72,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=18 */
%   | | | else return 0.5968323913453829;  // std dev = 0,248, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.07778441068902268;  // std dev = 0,478, 1.104,000 (wgt'ed) examples reached here.  /* #neg=712 #pos=392 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return -0.054906495655060485;  // std dev = 0,862, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.16475539337914905;  // std dev = 2,734, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.02844347406259117;  // std dev = 3,282, 147,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=12 */
%   | | | else return 0.015830292215084876;  // std dev = 4,312, 113,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6854049953770819;  // std dev = 2,799, 432,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=425 */
%   | | | else return -0.2619188545311329;  // std dev = 3,275, 978,000 (wgt'ed) examples reached here.  /* #neg=971 #pos=7 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return -0.290464053837421;  // std dev = 0,021, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.10636376052032377;  // std dev = 0,036, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.670772857136113;  // std dev = 0,264, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5083737448448553;  // std dev = 0,894, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.04417546307887255;  // std dev = 4,302, 101,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=26 */
%   | | | else return -0.16669510433634088;  // std dev = 0,082, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5,77e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5227273399048417;  // std dev = 3,258, 435,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=425 */
%   | | | else return -0.21599419828489438;  // std dev = 3,060, 1.001,000 (wgt'ed) examples reached here.  /* #neg=994 #pos=7 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return -0.2400612769759179;  // std dev = 0,061, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.10145665526255619;  // std dev = 0,167, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.5204180454335641;  // std dev = 0,266, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5516291032643578;  // std dev = 0,185, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.013723398783747318;  // std dev = 4,414, 107,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=26 */
%   | | | else return -0.12949018152388747;  // std dev = 0,021, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.933105
   AUC PR    = 0.523548
   CLL	      = -0.226636
   Precision = 0.372505 at threshold = 0.5
   Recall    = 0.869882
   F1        = 0.521633


Total learning time: 141.871 seconds
Total inference time: 934.794 seconds
AUC ROC: 0.933105


Results scoring model
   AUC ROC   = 0.976153
   AUC PR    = 0.756476
   CLL	      = -0.214698
   Precision = 0.668435 at threshold = 0.5
   Recall    = 0.916364
   F1        = 0.773006


Total scoring time: 47.224 seconds
Refined model CLL: -0.214698


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.933105
   AUC PR    = 0.523548
   CLL	      = -0.226636
   Precision = 0.372505 at threshold = 0.5
   Recall    = 0.869882
   F1        = 0.521633


Total learning time: 196.489 seconds
Total inference time: 934.794 seconds
AUC ROC: 0.933105
Total revision time: 196.489
Best scored revision CLL: -0.214698


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:41:56
{'Inference time': 934.794, 'Precision': [0.372505, 0.5], 'parameter': {'Inference time': 14.142, 'Precision': [1.0, 0.5], 'Learning time': 3.555, 'AUC ROC': 0.583705, 'CLL': -0.334789, 'F1': 0.286806, 'Recall': 0.16741, 'AUC PR': 0.185174}, 'Learning time': 196.489, 'AUC ROC': 0.933105, 'CLL': -0.226636, 'F1': 0.521633, 'Recall': 0.869882, 'AUC PR': 0.523548}


