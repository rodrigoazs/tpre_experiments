Starting experiment #4 for 7_imdb_cora

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.14185106490048885;  // std dev = 0,000, 657,000 (wgt'ed) examples reached here.  /* #neg=657 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.12544463852839238;  // std dev = 0,000, 700,000 (wgt'ed) examples reached here.  /* #neg=700 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1123163781936063;  // std dev = 3,49e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.11231637819360647;  // std dev = 0,000, 687,000 (wgt'ed) examples reached here.  /* #neg=687 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783621;  // std dev = 4,21e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.10159632948783515;  // std dev = 4,49e-07, 692,000 (wgt'ed) examples reached here.  /* #neg=692 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926203;  // std dev = 0,000, 703,000 (wgt'ed) examples reached here.  /* #neg=703 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.08518475138839675;  // std dev = 1,23e-07, 705,000 (wgt'ed) examples reached here.  /* #neg=705 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109176;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109289;  // std dev = 0,000, 729,000 (wgt'ed) examples reached here.  /* #neg=729 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.07324622576333649;  // std dev = 2,50e-07, 700,000 (wgt'ed) examples reached here.  /* #neg=700 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0684269778442027;  // std dev = 1,67e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.06842697784420264;  // std dev = 1,76e-07, 744,000 (wgt'ed) examples reached here.  /* #neg=744 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.06419184008202532;  // std dev = 2,52e-07, 699,000 (wgt'ed) examples reached here.  /* #neg=699 */


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 31946

Target test facts examples: 35095
Target test pos	 examples: 2649
Target test neg examples: 218007

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3,37e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.1429656890262091;  // std dev = 13,947, 955,000 (wgt'ed) examples reached here.  /* #neg=683 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1,88e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.11910027305916543;  // std dev = 14,001, 974,000 (wgt'ed) examples reached here.  /* #neg=702 #pos=272 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,09e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.1029995853506728;  // std dev = 13,996, 972,000 (wgt'ed) examples reached here.  /* #neg=700 #pos=272 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,23e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.07724283198393216;  // std dev = 14,095, 1.009,000 (wgt'ed) examples reached here.  /* #neg=737 #pos=272 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4,21e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.07350287883698976;  // std dev = 14,013, 978,000 (wgt'ed) examples reached here.  /* #neg=706 #pos=272 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.04545703128630011;  // std dev = 14,165, 1.037,000 (wgt'ed) examples reached here.  /* #neg=765 #pos=272 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1,26e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.054890963302638304;  // std dev = 13,999, 973,000 (wgt'ed) examples reached here.  /* #neg=701 #pos=272 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7,60e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.037637677461568125;  // std dev = 14,072, 1.000,000 (wgt'ed) examples reached here.  /* #neg=728 #pos=272 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.02732608700644575;  // std dev = 14,106, 1.013,000 (wgt'ed) examples reached here.  /* #neg=741 #pos=272 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3,65e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.027973897243976826;  // std dev = 14,051, 992,000 (wgt'ed) examples reached here.  /* #neg=720 #pos=272 */


Results
   AUC ROC   = 0.575311
   AUC PR    = 0.168925
   CLL	      = -0.300445
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 2.767 seconds
Total inference time: 14.009 seconds
AUC ROC: 0.575311


Results scoring model
   AUC ROC   = 0.630435
   AUC PR    = 0.280066
   CLL	      = -0.298314
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total scoring time: 3.539 seconds
Parameter learned model CLL: -0.298314


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [13.947, 683, 272], 'true': [3.37e-07, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.001, 702, 272], 'true': [1.88e-07, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [13.996, 700, 272], 'true': [4.09e-07, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.095, 737, 272], 'true': [2.23e-07, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.013, 706, 272], 'true': [4.21e-08, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.165, 765, 272], 'true': [0.0, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [13.999, 701, 272], 'true': [1.26e-07, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.072, 728, 272], 'true': [7.6e-08, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.106, 741, 272], 'true': [0.0, 0, 96]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [14.051, 720, 272], 'true': [3.65e-08, 0, 96]}]]
[{'': [1.1842378929335002e-15, 0.20369617060935993]}, {'': [3.7007434154171886e-16, 0.20127419688071044]}, {'': [1.7393494052460785e-15, 0.20152754492032246]}, {'': [5.181040781584064e-16, 0.1969037827049152]}, {'': [1.850371707708594e-17, 0.2007686485084912]}, {'': [-4.625929269271486e-17, 0.19349637194303304]}, {'': [1.6653345369377348e-16, 0.20140082325564798]}, {'': [6.013708050052931e-17, 0.1980160000000047]}, {'': [-6.013708050052931e-17, 0.1964120919653679]}, {'': [1.3877787807814457e-17, 0.19901144640998794]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3,37e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.17301039605668644;  // std dev = 0,464, 794,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.029606166941304003;  // std dev = 3,125, 98,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.02481560176617903;  // std dev = 3,028, 66,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1,88e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.14904003526420356;  // std dev = 0,464, 798,000 (wgt'ed) examples reached here.  /* #neg=548 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return -0.04386785642288616;  // std dev = 3,154, 118,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=11 */
%   | | | else return -0.1318649175543278;  // std dev = 0,022, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return -0.0020416396171180585;  // std dev = 3,071, 77,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,09e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.11430875318368014;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else return 0.12434984848861469;  // std dev = 0,463, 803,000 (wgt'ed) examples reached here.  /* #neg=554 #pos=249 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return -0.031082485913405955;  // std dev = 3,141, 109,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=11 */
%   | | | else return -0.12062406791781582;  // std dev = 0,018, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.045009172116821934;  // std dev = 2,986, 58,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=11 */
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,23e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08638827588018465;  // std dev = 0,454, 858,000 (wgt'ed) examples reached here.  /* #neg=608 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return -0.04847554927252646;  // std dev = 3,177, 138,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=11 */
%   | | | else return -0.10631098673362231;  // std dev = 0,020, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.03613644005302485;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4,21e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.05655165882263201;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.09229509466256108;  // std dev = 0,463, 798,000 (wgt'ed) examples reached here.  /* #neg=549 #pos=249 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | | then return -0.10598992696637514;  // std dev = 0,047, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.031189897686338144;  // std dev = 3,157, 120,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=11 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.03467729479851535;  // std dev = 2,986, 58,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=11 */
%   | | | else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0944265512734318;  // std dev = 0,470, 758,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return -0.03158061401570632;  // std dev = 3,160, 128,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=11 */
%   | | | else return -0.1036856941676793;  // std dev = 0,050, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.04042626677415558;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1,26e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04846410535729029;  // std dev = 0,458, 831,000 (wgt'ed) examples reached here.  /* #neg=581 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return -0.09745280681143101;  // std dev = 0,024, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.010683824043099031;  // std dev = 3,131, 105,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.038633510955072344;  // std dev = 2,960, 54,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7,60e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05127290593658886;  // std dev = 0,464, 798,000 (wgt'ed) examples reached here.  /* #neg=548 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return -0.09002863248679163;  // std dev = 0,022, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.028274368205766315;  // std dev = 3,166, 126,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.004139312553310413;  // std dev = 3,013, 63,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03541246474726063;  // std dev = 0,461, 814,000 (wgt'ed) examples reached here.  /* #neg=564 #pos=250 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return -0.03002776094742089;  // std dev = 3,170, 139,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=11 */
%   | | | else return -0.0809244370211374;  // std dev = 0,045, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.012283349261976224;  // std dev = 2,997, 60,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3,65e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.040642938029588294;  // std dev = 0,466, 783,000 (wgt'ed) examples reached here.  /* #neg=533 #pos=250 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return -0.01625906783457102;  // std dev = 3,045, 71,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=11 */
%   | | | else return -0.12146864382569143;  // std dev = 0,228, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.020094763413373608;  // std dev = 3,161, 124,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.609263
   AUC PR    = 0.170424
   CLL	      = -0.314132
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 27.457 seconds
Total inference time: 153.763 seconds
AUC ROC: 0.609263


Results scoring model
   AUC ROC   = 0.698771
   AUC PR    = 0.283888
   CLL	      = -0.293304
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total scoring time: 11.437 seconds
Refined model CLL: -0.293304


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.609263
   AUC PR    = 0.170424
   CLL	      = -0.314132
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 45.199999999999996 seconds
Total inference time: 153.763 seconds
AUC ROC: 0.609263
Total revision time: 45.199999999999996
Best scored revision CLL: -0.293304


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 01:55:25
{'Inference time': 153.763, 'Precision': [1.0, 0.5], 'parameter': {'Inference time': 14.009, 'Precision': [1.0, 0.5], 'Learning time': 2.767, 'AUC ROC': 0.575311, 'CLL': -0.300445, 'F1': 0.261811, 'Recall': 0.150623, 'AUC PR': 0.168925}, 'Learning time': 45.199999999999996, 'AUC ROC': 0.609263, 'CLL': -0.314132, 'F1': 0.261811, 'Recall': 0.150623, 'AUC PR': 0.170424}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 64082

Target test facts examples: 33542
Target test pos	 examples: 2246
Target test neg examples: 185871

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.16541664439113563;  // std dev = 21,512, 2.174,000 (wgt'ed) examples reached here.  /* #neg=1.506 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.13715625774643697;  // std dev = 21,619, 2.224,000 (wgt'ed) examples reached here.  /* #neg=1.556 #pos=668 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.12068883318893997;  // std dev = 21,570, 2.201,000 (wgt'ed) examples reached here.  /* #neg=1.533 #pos=668 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.10196505017122787;  // std dev = 21,570, 2.201,000 (wgt'ed) examples reached here.  /* #neg=1.533 #pos=668 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.07963996223898127;  // std dev = 21,654, 2.241,000 (wgt'ed) examples reached here.  /* #neg=1.573 #pos=668 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0792250491230064;  // std dev = 21,445, 2.144,000 (wgt'ed) examples reached here.  /* #neg=1.476 #pos=668 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.06234509152564644;  // std dev = 21,483, 2.161,000 (wgt'ed) examples reached here.  /* #neg=1.493 #pos=668 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5,16e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.050288855446888506;  // std dev = 21,487, 2.163,000 (wgt'ed) examples reached here.  /* #neg=1.495 #pos=668 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.04370558579894306;  // std dev = 21,438, 2.141,000 (wgt'ed) examples reached here.  /* #neg=1.473 #pos=668 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,83e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.02475178793246221;  // std dev = 21,598, 2.214,000 (wgt'ed) examples reached here.  /* #neg=1.546 #pos=668 */


Results
   AUC ROC   = 0.587266
   AUC PR    = 0.193231
   CLL	      = -0.340001
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.174533
   F1        = 0.297195


Total learning time: 5.023 seconds
Total inference time: 12.235 seconds
AUC ROC: 0.587266


Results scoring model
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.340518
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total scoring time: 5.415 seconds
Parameter learned model CLL: -0.340518


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.512, 1506, 668], 'true': [4.46e-07, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.619, 1556, 668], 'true': [0.0, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.57, 1533, 668], 'true': [4.3e-07, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.57, 1533, 668], 'true': [2.6e-07, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.654, 1573, 668], 'true': [0.0, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.445, 1476, 668], 'true': [0.0, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.483, 1493, 668], 'true': [1.46e-07, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.487, 1495, 668], 'true': [5.16e-08, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.438, 1473, 668], 'true': [0.0, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.598, 1546, 668], 'true': [6.83e-08, 0, 103]}]]
[{'': [1.9315724855614373e-15, 0.21285426411830208]}, {'': [-3.4492365813597096e-16, 0.210143755499203]}, {'': [1.793603022307049e-15, 0.21138712505423857]}, {'': [6.553549504583448e-16, 0.21138712505428084]}, {'': [-2.4144656069517967e-16, 0.20922880375684097]}, {'': [-5.1738548720395646e-17, 0.21449306638450716]}, {'': [2.0695419488158259e-16, 0.21356335578267324]}, {'': [2.5869274360197823e-17, 0.21345415660217068]}, {'': [-1.2503482607428947e-16, 0.21465740493700042]}, {'': [4.527123013034619e-17, 0.21068359433969536]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.42957750652808374;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | | | else return -0.0862955093449322;  // std dev = 1,374, 36,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | | else return 0.18324099191171142;  // std dev = 0,468, 1.901,000 (wgt'ed) examples reached here.  /* #neg=1.283 #pos=618 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.0828680362231077;  // std dev = 3,938, 89,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=20 */
%   | | | else return -0.02864351773067639;  // std dev = 2,307, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | | else return -0.07518439823382102;  // std dev = 0,249, 90,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.5830637077947539;  // std dev = 1,893, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.12213999565227872;  // std dev = 1,021, 38,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | else return 0.16948867011692895;  // std dev = 0,472, 1.844,000 (wgt'ed) examples reached here.  /* #neg=1.226 #pos=618 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.11442571287563752;  // std dev = 3,830, 75,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=20 */
%   | | | else return -0.02301533273503279;  // std dev = 2,304, 52,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=6 */
%   | | else return -0.0472286976178085;  // std dev = 0,280, 70,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12845289367730645;  // std dev = 0,464, 1.994,000 (wgt'ed) examples reached here.  /* #neg=1.358 #pos=636 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.08880653765230563;  // std dev = 3,856, 78,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=20 */
%   | | | else return -0.00801867211754193;  // std dev = 2,288, 47,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=6 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.12759271635399763;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.06165865041993169;  // std dev = 2,367, 91,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.3556515594539856;  // std dev = 2,714, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | | else return -0.1693484405460144;  // std dev = 0,979, 24,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else return 0.10449272224312987;  // std dev = 0,463, 1.959,000 (wgt'ed) examples reached here.  /* #neg=1.341 #pos=618 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.07604868161828097;  // std dev = 3,856, 78,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=20 */
%   | | | else return -0.01229166415598628;  // std dev = 2,295, 49,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.055445228099061675;  // std dev = 2,368, 92,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=6 */
%   | | | else return -0.12088545621509506;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0912810666375129;  // std dev = 0,464, 1.986,000 (wgt'ed) examples reached here.  /* #neg=1.350 #pos=636 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06453190718306086;  // std dev = 3,856, 78,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=20 */
%   | | | else return -0.013314035600539826;  // std dev = 2,298, 50,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=6 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.04982736301665988;  // std dev = 2,368, 92,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=6 */
%   | | | else return -0.10861594019261968;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.3209138539929905;  // std dev = 2,191, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | | else return -0.1557628519973048;  // std dev = 1,038, 42,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.1129806641660944;  // std dev = 3,159, 51,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
%   | | | else return 0.07696015463586342;  // std dev = 20,163, 1.861,000 (wgt'ed) examples reached here.  /* #neg=1.261 #pos=600 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return 0.044829459029108766;  // std dev = 3,881, 81,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return -0.03947551714676444;  // std dev = 2,334, 65,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=6 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.046780044261165735;  // std dev = 2,370, 95,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=6 */
%   | | | else return -0.09853822087376125;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06364241146241935;  // std dev = 0,464, 1.967,000 (wgt'ed) examples reached here.  /* #neg=1.331 #pos=636 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04700095440711307;  // std dev = 3,856, 78,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=20 */
%   | | | else return 0.01220303956258101;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=6 */
%   | | else return -0.043431708833832836;  // std dev = 0,241, 97,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5,16e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.3150432055481395;  // std dev = 1,842, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.13202635445570826;  // std dev = 1,015, 40,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | else return 0.0332854270643884;  // std dev = 0,460, 2.018,000 (wgt'ed) examples reached here.  /* #neg=1.400 #pos=618 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.03911333782544012;  // std dev = 3,856, 78,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=20 */
%   | | | else return 0.0108408790021117;  // std dev = 2,272, 43,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=6 */
%   | | else return -0.03605849987634859;  // std dev = 0,247, 92,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.018861369877684348;  // std dev = 0,453, 2.047,000 (wgt'ed) examples reached here.  /* #neg=1.437 #pos=610 */
%   | | else if ( title(F, E), venue(F, B) )
%   | | | then return 0.05164714565609444;  // std dev = 4,506, 149,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=30 */
%   | | | else return 0.02460141498074695;  // std dev = 2,724, 40,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.5209453431835088;  // std dev = 0,400, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else return -0.010459644976117032;  // std dev = 0,322, 51,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,83e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03544031569385543;  // std dev = 0,461, 1.992,000 (wgt'ed) examples reached here.  /* #neg=1.356 #pos=636 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.02311195757711285;  // std dev = 3,638, 85,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return -0.051040878979081855;  // std dev = 2,712, 50,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=9 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.03548409056186814;  // std dev = 2,365, 89,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=6 */
%   | | | else return -0.08301565335789869;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.643303
   AUC PR    = 0.203836
   CLL	      = -0.320702
   Precision = 0.364602 at threshold = 0.5
   Recall    = 0.183437
   F1        = 0.244076


Total learning time: 61.87 seconds
Total inference time: 133.928 seconds
AUC ROC: 0.643303


Results scoring model
   AUC ROC   = 0.645841
   AUC PR    = 0.182565
   CLL	      = -0.325353
   Precision = 0.653846 at threshold = 0.5
   Recall    = 0.154345
   F1        = 0.249738


Total scoring time: 17.552 seconds
Refined model CLL: -0.325353


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.643303
   AUC PR    = 0.203836
   CLL	      = -0.320702
   Precision = 0.364602 at threshold = 0.5
   Recall    = 0.183437
   F1        = 0.244076


Total learning time: 89.85999999999999 seconds
Total inference time: 133.928 seconds
AUC ROC: 0.643303
Total revision time: 89.85999999999999
Best scored revision CLL: -0.325353


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 01:59:22
{'Inference time': 133.928, 'Precision': [0.364602, 0.5], 'parameter': {'Inference time': 12.235, 'Precision': [1.0, 0.5], 'Learning time': 5.023, 'AUC ROC': 0.587266, 'CLL': -0.340001, 'F1': 0.297195, 'Recall': 0.174533, 'AUC PR': 0.193231}, 'Learning time': 89.85999999999999, 'AUC ROC': 0.643303, 'CLL': -0.320702, 'F1': 0.244076, 'Recall': 0.183437, 'AUC PR': 0.203836}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 50581

Target test facts examples: 33252
Target test pos	 examples: 2436
Target test neg examples: 199372

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3,77e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.14556694344774826;  // std dev = 18,533, 1.677,000 (wgt'ed) examples reached here.  /* #neg=1.195 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1,19e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.13125684542610538;  // std dev = 18,476, 1.652,000 (wgt'ed) examples reached here.  /* #neg=1.170 #pos=482 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,21e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.11189286318157322;  // std dev = 18,488, 1.657,000 (wgt'ed) examples reached here.  /* #neg=1.175 #pos=482 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2,46e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.08968256810216967;  // std dev = 18,555, 1.687,000 (wgt'ed) examples reached here.  /* #neg=1.205 #pos=482 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.08938568353174495;  // std dev = 18,369, 1.607,000 (wgt'ed) examples reached here.  /* #neg=1.125 #pos=482 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.06562078488204272;  // std dev = 18,481, 1.654,000 (wgt'ed) examples reached here.  /* #neg=1.172 #pos=482 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1,37e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.050634070159397464;  // std dev = 18,524, 1.673,000 (wgt'ed) examples reached here.  /* #neg=1.191 #pos=482 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6,99e-08, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.04412575950375177;  // std dev = 18,488, 1.657,000 (wgt'ed) examples reached here.  /* #neg=1.175 #pos=482 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.03374131300565868;  // std dev = 18,515, 1.669,000 (wgt'ed) examples reached here.  /* #neg=1.187 #pos=482 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,50e-08, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.024365662692615236;  // std dev = 18,553, 1.686,000 (wgt'ed) examples reached here.  /* #neg=1.204 #pos=482 */


Results
   AUC ROC   = 0.581281
   AUC PR    = 0.181212
   CLL	      = -0.319477
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 4.331 seconds
Total inference time: 12.537 seconds
AUC ROC: 0.581281


Results scoring model
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.318785
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total scoring time: 4.231 seconds
Parameter learned model CLL: -0.318785


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.533, 1195, 482], 'true': [3.77e-07, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.476, 1170, 482], 'true': [1.19e-07, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.488, 1175, 482], 'true': [4.21e-07, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.555, 1205, 482], 'true': [2.46e-07, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.369, 1125, 482], 'true': [0.0, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.481, 1172, 482], 'true': [0.0, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.524, 1191, 482], 'true': [1.37e-07, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.488, 1175, 482], 'true': [6.99e-08, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.515, 1187, 482], 'true': [0.0, 0, 99]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.553, 1204, 482], 'true': [6.5e-08, 0, 99]}]]
[{'': [1.4354398702224246e-15, 0.20480889682535428]}, {'': [1.4354398702224247e-16, 0.20663924863253189]}, {'': [1.794299837778031e-15, 0.20627181405924713]}, {'': [6.100619448445304e-16, 0.20408163265304868]}, {'': [0.0, 0.2099751050262961]}, {'': [-4.485749594445077e-17, 0.20649219436520455]}, {'': [1.8840148296669324e-16, 0.20510059383428383]}, {'': [4.9343245538895844e-17, 0.20627181405925504]}, {'': [-1.1214373986112693e-16, 0.20539273776447697]}, {'': [4.261462114722823e-17, 0.20415423085096118]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3,77e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.17970625305192267;  // std dev = 0,467, 1.387,000 (wgt'ed) examples reached here.  /* #neg=941 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.14905802600860327;  // std dev = 3,368, 55,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.0418510649004878;  // std dev = 1,342, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.014191490432402547;  // std dev = 3,963, 141,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1,19e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.20626420854800956;  // std dev = 0,483, 35,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.19594674823054925;  // std dev = 2,882, 36,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | | else return 0.13896308100068677;  // std dev = 17,096, 1.381,000 (wgt'ed) examples reached here.  /* #neg=961 #pos=420 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.14671062795356102;  // std dev = 3,328, 52,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
%   | | | else return -0.059909440516998085;  // std dev = 1,359, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.016844637610724654;  // std dev = 3,973, 146,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,21e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12877492230738996;  // std dev = 0,464, 1.418,000 (wgt'ed) examples reached here.  /* #neg=972 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.12009151105589477;  // std dev = 3,342, 53,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return -0.042952827884954956;  // std dev = 1,351, 23,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.01705752669147937;  // std dev = 3,900, 116,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2,46e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.12544816389307592;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else return 0.09640682404077949;  // std dev = 0,459, 1.433,000 (wgt'ed) examples reached here.  /* #neg=1.000 #pos=433 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.09056414390125221;  // std dev = 3,368, 55,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return -0.04513096048317695;  // std dev = 1,356, 25,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.017708983338990257;  // std dev = 3,974, 147,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=18 */
%   | | | else return -0.10159632948783634;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09086884047494108;  // std dev = 0,464, 1.424,000 (wgt'ed) examples reached here.  /* #neg=978 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.047046879018047244;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return -0.025035241165927452;  // std dev = 1,345, 21,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.017135057266107704;  // std dev = 3,900, 116,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.08476437114221338;  // std dev = 0,472, 39,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0.07790506878200197;  // std dev = 0,465, 1.370,000 (wgt'ed) examples reached here.  /* #neg=937 #pos=433 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.11528321134317675;  // std dev = 3,207, 51,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | | | else return -0.08467461758375593;  // std dev = 1,458, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.14008881125475164;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.015296919203618378;  // std dev = 3,967, 146,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1,37e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06562622631512713;  // std dev = 0,466, 1.400,000 (wgt'ed) examples reached here.  /* #neg=954 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.04549079041798085;  // std dev = 3,336, 60,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=16 */
%   | | | else return -0.047939157025298995;  // std dev = 1,422, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.019648208542125293;  // std dev = 3,983, 152,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=18 */
%   | | | else return -0.08400022770278434;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6,99e-08, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.12870368214663885;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | | else return 0.05847194854710776;  // std dev = 0,468, 1.338,000 (wgt'ed) examples reached here.  /* #neg=905 #pos=433 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.055612491475813215;  // std dev = 0,293, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.010582850777793307;  // std dev = 3,654, 82,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=18 */
%   | | | else return -1.9268178739148174E-4;  // std dev = 3,715, 120,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03686157744968694;  // std dev = 0,464, 1.419,000 (wgt'ed) examples reached here.  /* #neg=973 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.02396438476719828;  // std dev = 0,299, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.08084509861541694;  // std dev = 1,273, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.0010360194236851386;  // std dev = 5,079, 195,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,50e-08, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return -0.3201719388229256;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10262032079994941;  // std dev = 2,778, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | | else return 0.04152396705990939;  // std dev = 0,469, 1.329,000 (wgt'ed) examples reached here.  /* #neg=896 #pos=433 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.05365694379792296;  // std dev = 3,603, 85,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.07212373655477718;  // std dev = 1,368, 32,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.059095818803836186;  // std dev = 1,139, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.014871191069997132;  // std dev = 3,519, 81,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */


Results
   AUC ROC   = 0.618561
   AUC PR    = 0.181775
   CLL	      = -0.331775
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 33.629 seconds
Total inference time: 76.745 seconds
AUC ROC: 0.618561


Results scoring model
   AUC ROC   = 0.62524
   AUC PR    = 0.19134
   CLL	      = -0.328131
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total scoring time: 10.302 seconds
Refined model CLL: -0.328131


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.581281
   AUC PR    = 0.181212
   CLL	      = -0.319477
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 52.493 seconds
Total inference time: 12.537 seconds
AUC ROC: 0.581281
Total revision time: 52.493
Best scored revision CLL: -0.318785


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 02:01:45
{'Inference time': 12.537, 'Precision': [1.0, 0.5], 'parameter': {'Inference time': 12.537, 'Precision': [1.0, 0.5], 'Learning time': 4.331, 'AUC ROC': 0.581281, 'CLL': -0.319477, 'F1': 0.279661, 'Recall': 0.162562, 'AUC PR': 0.181212}, 'Learning time': 52.493, 'AUC ROC': 0.581281, 'CLL': -0.319477, 'F1': 0.279661, 'Recall': 0.162562, 'AUC PR': 0.181212}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 67804

Target test facts examples: 34429
Target test pos	 examples: 2270
Target test neg examples: 182149

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6,19e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.16083092743667204;  // std dev = 20,993, 2.088,000 (wgt'ed) examples reached here.  /* #neg=1.456 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.1298790370145203;  // std dev = 21,146, 2.161,000 (wgt'ed) examples reached here.  /* #neg=1.529 #pos=632 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,62e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.12192816190908137;  // std dev = 20,989, 2.086,000 (wgt'ed) examples reached here.  /* #neg=1.454 #pos=632 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3,26e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.09007900418522564;  // std dev = 21,184, 2.180,000 (wgt'ed) examples reached here.  /* #neg=1.548 #pos=632 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1,84e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.08547230603485823;  // std dev = 21,032, 2.106,000 (wgt'ed) examples reached here.  /* #neg=1.474 #pos=632 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.06159520952253502;  // std dev = 21,168, 2.172,000 (wgt'ed) examples reached here.  /* #neg=1.540 #pos=632 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1,76e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.07088029928065588;  // std dev = 20,862, 2.030,000 (wgt'ed) examples reached here.  /* #neg=1.398 #pos=632 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.04462202131928704;  // std dev = 21,060, 2.119,000 (wgt'ed) examples reached here.  /* #neg=1.487 #pos=632 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.031782083213712176;  // std dev = 21,124, 2.150,000 (wgt'ed) examples reached here.  /* #neg=1.518 #pos=632 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7,60e-08, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.025451277370674905;  // std dev = 21,126, 2.151,000 (wgt'ed) examples reached here.  /* #neg=1.519 #pos=632 */


Results
   AUC ROC   = 0.5837
   AUC PR    = 0.186484
   CLL	      = -0.328989
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.167401
   F1        = 0.286792


Total learning time: 4.927 seconds
Total inference time: 11.378 seconds
AUC ROC: 0.5837


Results scoring model
   AUC ROC   = 0.576975
   AUC PR    = 0.170861
   CLL	      = -0.328057
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total scoring time: 5.663 seconds
Parameter learned model CLL: -0.328057


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [20.993, 1456, 632], 'true': [6.19e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.146, 1529, 632], 'true': [0.0, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [20.989, 1454, 632], 'true': [4.62e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.184, 1548, 632], 'true': [3.26e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.032, 1474, 632], 'true': [1.84e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.168, 1540, 632], 'true': [0.0, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [20.862, 1398, 632], 'true': [1.76e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.06, 1487, 632], 'true': [0.0, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.124, 1518, 632], 'true': [0.0, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [21.126, 1519, 632], 'true': [7.6e-08, 0, 115]}]]
[{'': [3.3364615418300357e-15, 0.21106560385195391]}, {'': [-1.0503675224279742e-15, 0.20692598440103727]}, {'': [1.853589745461131e-15, 0.21118004428922424]}, {'': [9.267948727305654e-16, 0.20586145947312431]}, {'': [2.934850430313457e-16, 0.21003797768597507]}, {'': [-4.633974363652827e-17, 0.2063089920603301]}, {'': [2.703151712130816e-16, 0.21440364968819292]}, {'': [-2.703151712130816e-17, 0.2092985084499289]}, {'': [-1.5832745742480493e-16, 0.20754483504598453]}, {'': [5.0201388939572296e-17, 0.20748850015375878]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6,19e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16366233924720583;  // std dev = 0,461, 1.977,000 (wgt'ed) examples reached here.  /* #neg=1.373 #pos=604 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.02888064241658555;  // std dev = 3,407, 82,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=14 */
%   | | | else return -0.045076871352100686;  // std dev = 1,646, 31,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | else return 0.03556828993822205;  // std dev = 0,382, 62,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2870359860801978;  // std dev = 2,225, 20,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | | else return -0.11296401391980229;  // std dev = 0,975, 20,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.1392098991236738;  // std dev = 19,697, 1.840,000 (wgt'ed) examples reached here.  /* #neg=1.284 #pos=556 */
%   | | | else return 0.628702652746865;  // std dev = 2,814, 48,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=38 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.01749492479803279;  // std dev = 3,425, 87,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=14 */
%   | | | else return 0.085301973751137;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.14540318112067757;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.005526989167810493;  // std dev = 3,056, 73,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,62e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12223372031962412;  // std dev = 0,460, 1.856,000 (wgt'ed) examples reached here.  /* #neg=1.290 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.44684277579604414;  // std dev = 2,673, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | | else return 0.6611284900817579;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.14560329235611086;  // std dev = 0,012, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.1282498504986118;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.006575792415012576;  // std dev = 4,865, 183,000 (wgt'ed) examples reached here.  /* #neg=155 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3,26e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09826416442839644;  // std dev = 0,458, 1.886,000 (wgt'ed) examples reached here.  /* #neg=1.320 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.41847502222708455;  // std dev = 2,183, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | | else return 0.3560321796685388;  // std dev = 1,920, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.03763810063708643;  // std dev = 3,377, 76,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | | | else return 0.11545062028984422;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0.0025153582850604857;  // std dev = 0,355, 74,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1,84e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07931926474374083;  // std dev = 0,457, 1.903,000 (wgt'ed) examples reached here.  /* #neg=1.337 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3254839229869749;  // std dev = 2,332, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | | else return 0.13201563570396668;  // std dev = 2,133, 20,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.003799026666692846;  // std dev = 3,436, 90,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=14 */
%   | | | else return -0.028064352560636788;  // std dev = 1,628, 26,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.049920960561247424;  // std dev = 2,959, 54,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | | else return -0.14807071382159379;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.13646706351573865;  // std dev = 2,103, 19,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return -0.044453989115840205;  // std dev = 1,561, 16,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else return 0.07478442074296561;  // std dev = 0,458, 1.889,000 (wgt'ed) examples reached here.  /* #neg=1.295 #pos=594 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.01855907189945757;  // std dev = 3,395, 81,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=14 */
%   | | | else return 0.09907946978779301;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return -0.01939603220928525;  // std dev = 0,334, 86,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1,76e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04895379762455052;  // std dev = 0,455, 1.923,000 (wgt'ed) examples reached here.  /* #neg=1.357 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.16845534129759837;  // std dev = 2,573, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | | | else return 0.10102054556614082;  // std dev = 2,135, 20,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0871104434544957;  // std dev = 2,117, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return 0.01956429112044403;  // std dev = 3,030, 67,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
%   | | else return -0.027447491548691517;  // std dev = 0,343, 81,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04390506875617072;  // std dev = 0,457, 1.897,000 (wgt'ed) examples reached here.  /* #neg=1.331 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.03384671415051091;  // std dev = 2,992, 39,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=25 */
%   | | | else return 0.19111213872038146;  // std dev = 1,749, 17,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.005962556926777522;  // std dev = 3,439, 94,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | | | else return -0.04190597887513713;  // std dev = 1,632, 27,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.027561870210925397;  // std dev = 2,989, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return -0.125129375925067;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.030474200649013874;  // std dev = 0,455, 1.927,000 (wgt'ed) examples reached here.  /* #neg=1.361 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1902436759654145;  // std dev = 2,197, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | | else return 4.332166726789848E-4;  // std dev = 2,229, 21,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.044203996420324965;  // std dev = 2,284, 48,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=6 */
%   | | | else return -0.017042731063398067;  // std dev = 3,066, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.007146713010070915;  // std dev = 3,048, 72,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=11 */
%   | | | else return -0.11206124849511416;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7,60e-08, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.034176605500459395;  // std dev = 0,459, 1.867,000 (wgt'ed) examples reached here.  /* #neg=1.301 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07500077922819744;  // std dev = 2,698, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | | else return 0.20340025655100238;  // std dev = 1,317, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.041711217085323084;  // std dev = 2,177, 29,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
%   | | | else return 0.003319290052182699;  // std dev = 3,032, 67,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
%   | | else return -0.030082003466836486;  // std dev = 0,319, 95,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=11 */


Results
   AUC ROC   = 0.648626
   AUC PR    = 0.208
   CLL	      = -0.30646
   Precision = 0.5375 at threshold = 0.5
   Recall    = 0.189427
   F1        = 0.28013


Total learning time: 94.929 seconds
Total inference time: 155.245 seconds
AUC ROC: 0.648626


Results scoring model
   AUC ROC   = 0.62926
   AUC PR    = 0.192222
   CLL	      = -0.321037
   Precision = 0.222384 at threshold = 0.5
   Recall    = 0.204819
   F1        = 0.21324


Total scoring time: 18.416 seconds
Refined model CLL: -0.321037


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.648626
   AUC PR    = 0.208
   CLL	      = -0.30646
   Precision = 0.5375 at threshold = 0.5
   Recall    = 0.189427
   F1        = 0.28013


Total learning time: 123.935 seconds
Total inference time: 155.245 seconds
AUC ROC: 0.648626
Total revision time: 123.935
Best scored revision CLL: -0.321037


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 02:06:38
{'Inference time': 155.245, 'Precision': [0.5375, 0.5], 'parameter': {'Inference time': 11.378, 'Precision': [1.0, 0.5], 'Learning time': 4.927, 'AUC ROC': 0.5837, 'CLL': -0.328989, 'F1': 0.286792, 'Recall': 0.167401, 'AUC PR': 0.186484}, 'Learning time': 123.935, 'AUC ROC': 0.648626, 'CLL': -0.30646, 'F1': 0.28013, 'Recall': 0.189427, 'AUC PR': 0.208}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 35540

Target test facts examples: 33914
Target test pos	 examples: 2467
Target test neg examples: 214413

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.16911239024900904;  // std dev = 17,957, 1.505,000 (wgt'ed) examples reached here.  /* #neg=1.037 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2,67e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.14438862865553784;  // std dev = 17,995, 1.519,000 (wgt'ed) examples reached here.  /* #neg=1.051 #pos=468 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3,48e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.11478494377728289;  // std dev = 18,110, 1.564,000 (wgt'ed) examples reached here.  /* #neg=1.096 #pos=468 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1,03e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.08442164681438337;  // std dev = 18,270, 1.632,000 (wgt'ed) examples reached here.  /* #neg=1.164 #pos=468 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.08139846926158091;  // std dev = 18,129, 1.572,000 (wgt'ed) examples reached here.  /* #neg=1.104 #pos=468 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.0626210872536382;  // std dev = 18,189, 1.597,000 (wgt'ed) examples reached here.  /* #neg=1.129 #pos=468 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.0584724594389567;  // std dev = 18,097, 1.559,000 (wgt'ed) examples reached here.  /* #neg=1.091 #pos=468 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4,21e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.045680492977578646;  // std dev = 18,122, 1.569,000 (wgt'ed) examples reached here.  /* #neg=1.101 #pos=468 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.029544041559791893;  // std dev = 18,217, 1.609,000 (wgt'ed) examples reached here.  /* #neg=1.141 #pos=468 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5,77e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.02653813600647346;  // std dev = 18,182, 1.594,000 (wgt'ed) examples reached here.  /* #neg=1.126 #pos=468 */


Results
   AUC ROC   = 0.583705
   AUC PR    = 0.185174
   CLL	      = -0.326798
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16741
   F1        = 0.286806


Total learning time: 3.622 seconds
Total inference time: 14.258 seconds
AUC ROC: 0.583705


Results scoring model
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.330166
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total scoring time: 3.852 seconds
Parameter learned model CLL: -0.330166


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [17.957, 1037, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [17.995, 1051, 468], 'true': [2.67e-07, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.11, 1096, 468], 'true': [3.48e-07, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.27, 1164, 468], 'true': [1.03e-07, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.129, 1104, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.189, 1129, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.097, 1091, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.122, 1101, 468], 'true': [4.21e-08, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.217, 1141, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'false': [18.182, 1126, 468], 'true': [5.77e-08, 0, 82]}]]
[{'': [-6.932124251318051e-16, 0.21426518471096911]}, {'': [8.665155314147563e-16, 0.21317340459511333]}, {'': [1.4730764034050857e-15, 0.20969250593598698]}, {'': [1.2997732971221344e-16, 0.204530709342552]}, {'': [-3.4660621256590254e-16, 0.20907872501603128]}, {'': [-5.415722071342227e-17, 0.20717147720228785]}, {'': [-1.408087738548979e-16, 0.21007693538849]}, {'': [2.166288828536891e-17, 0.2093087021851249]}, {'': [-5.144935967775116e-17, 0.20626208775143864]}, {'': [4.06179155350667e-17, 0.20739945435281612]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18648358387614516;  // std dev = 0,470, 1.267,000 (wgt'ed) examples reached here.  /* #neg=851 #pos=416 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1914822684328457;  // std dev = 2,828, 36,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.06131415214880981;  // std dev = 3,322, 149,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=12 */
%   | | | else return 0.08891816586874252;  // std dev = 4,297, 104,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=24 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2,67e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.5295511962531275;  // std dev = 2,207, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.044888856447794646;  // std dev = 2,651, 66,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=8 */
%   | | else return 0.1729993683608385;  // std dev = 0,473, 1.156,000 (wgt'ed) examples reached here.  /* #neg=764 #pos=392 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.15901724411501197;  // std dev = 0,468, 48,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.059078252228355985;  // std dev = 3,331, 159,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=12 */
%   | | | else return 0.059365930976153065;  // std dev = 4,348, 113,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=24 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3,48e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.5472436306961221;  // std dev = 1,789, 20,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.024382965957659593;  // std dev = 2,630, 59,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.1311153516381547;  // std dev = 3,681, 62,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=20 */
%   | | | else return 0.14671652465868557;  // std dev = 15,691, 1.100,000 (wgt'ed) examples reached here.  /* #neg=728 #pos=372 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.3247056424071693;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.08264881934158906;  // std dev = 2,954, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.05509054179750298;  // std dev = 3,336, 165,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=12 */
%   | | | else return 0.049649140590175;  // std dev = 4,353, 114,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1,03e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.001714132622491952;  // std dev = 3,249, 86,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
%   | | | else return 0.8079027302592463;  // std dev = 0,194, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.11769746738319811;  // std dev = 0,471, 1.178,000 (wgt'ed) examples reached here.  /* #neg=786 #pos=392 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12180118267976338;  // std dev = 2,36e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return 0.03737443158178897;  // std dev = 4,488, 140,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=26 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.12702893024154444;  // std dev = 4,232, 87,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=26 */
%   | | | else return -0.16977742674576418;  // std dev = 0,034, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.38007324589006714;  // std dev = 2,472, 26,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return -0.04225965069631578;  // std dev = 2,504, 41,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.04137475569215811;  // std dev = 3,214, 79,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=20 */
%   | | | else return 0.09847820543846526;  // std dev = 15,737, 1.113,000 (wgt'ed) examples reached here.  /* #neg=741 #pos=372 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return -0.0031973390014604446;  // std dev = 4,575, 184,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=26 */
%   | | | else return -0.1262910810059586;  // std dev = 0,090, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.11079529982008969;  // std dev = 4,225, 86,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=26 */
%   | | | else return -0.15019201338115545;  // std dev = 0,041, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.34091611985067877;  // std dev = 2,073, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.05438924482705054;  // std dev = 2,416, 67,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=8 */
%   | | else return 0.07618434027101621;  // std dev = 0,470, 1.186,000 (wgt'ed) examples reached here.  /* #neg=794 #pos=392 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.6578714586800269;  // std dev = 0,046, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11613680220632068;  // std dev = 2,845, 37,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.04203929804326268;  // std dev = 3,304, 159,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=12 */
%   | | | else return 0.03535452765187603;  // std dev = 4,262, 103,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return -0.01192334401305939;  // std dev = 3,029, 81,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=18 */
%   | | | else return 0.6381751789853776;  // std dev = 0,311, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.00921732724644129;  // std dev = 3,632, 72,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
%   | | | else return 0.05010777264067363;  // std dev = 15,919, 1.167,000 (wgt'ed) examples reached here.  /* #neg=795 #pos=372 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.6044921817026836;  // std dev = 0,914, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.012309717720817768;  // std dev = 3,015, 64,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.049308972351920256;  // std dev = 3,054, 105,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=12 */
%   | | | else return -0.009156079259437929;  // std dev = 4,398, 160,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4,21e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05886385331702539;  // std dev = 0,466, 1.237,000 (wgt'ed) examples reached here.  /* #neg=821 #pos=416 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.22259567729362564;  // std dev = 0,921, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05540150540582387;  // std dev = 3,098, 51,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=14 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.03215936648033361;  // std dev = 3,079, 49,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return -0.02400887115866008;  // std dev = 4,326, 200,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.595700158917348;  // std dev = 0,537, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.04029701292642592;  // std dev = 0,463, 1.255,000 (wgt'ed) examples reached here.  /* #neg=843 #pos=412 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return -0.015095515053195554;  // std dev = 4,528, 193,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=26 */
%   | | | else return -0.10470449166425168;  // std dev = 0,053, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.023260203902714275;  // std dev = 4,385, 103,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=26 */
%   | | | else return -0.14030428359978173;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5,77e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.26089539734527767;  // std dev = 1,941, 21,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.07133967322713082;  // std dev = 2,087, 64,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.050259648224150875;  // std dev = 3,458, 58,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=20 */
%   | | | else return 0.04451284816276776;  // std dev = 15,628, 1.083,000 (wgt'ed) examples reached here.  /* #neg=711 #pos=372 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.03196740491109893;  // std dev = 0,934, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1613345487869903;  // std dev = 2,810, 33,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.03160512467813753;  // std dev = 3,270, 159,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=12 */
%   | | | else return -4.208007328234353E-4;  // std dev = 4,323, 112,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=24 */


Results
   AUC ROC   = 0.627818
   AUC PR    = 0.190024
   CLL	      = -0.343113
   Precision = 0.261833 at threshold = 0.5
   Recall    = 0.177138
   F1        = 0.211315


Total learning time: 36.217 seconds
Total inference time: 103.09 seconds
AUC ROC: 0.627818


Results scoring model
   AUC ROC   = 0.681703
   AUC PR    = 0.204161
   CLL	      = -0.324896
   Precision = 0.330128 at threshold = 0.5
   Recall    = 0.187273
   F1        = 0.238979


Total scoring time: 12.315 seconds
Refined model CLL: -0.324896


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.627818
   AUC PR    = 0.190024
   CLL	      = -0.343113
   Precision = 0.261833 at threshold = 0.5
   Recall    = 0.177138
   F1        = 0.211315


Total learning time: 56.006 seconds
Total inference time: 103.09 seconds
AUC ROC: 0.627818
Total revision time: 56.006
Best scored revision CLL: -0.324896


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 02:09:32
{'Inference time': 103.09, 'Precision': [0.261833, 0.5], 'parameter': {'Inference time': 14.258, 'Precision': [1.0, 0.5], 'Learning time': 3.622, 'AUC ROC': 0.583705, 'CLL': -0.326798, 'F1': 0.286806, 'Recall': 0.16741, 'AUC PR': 0.185174}, 'Learning time': 56.006, 'AUC ROC': 0.627818, 'CLL': -0.343113, 'F1': 0.211315, 'Recall': 0.177138, 'AUC PR': 0.190024}


