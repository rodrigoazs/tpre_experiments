Starting experiment #1 for 24_cora_yago2s

Start learning from source dataset

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31741655890979914;  // std dev = 0,498, 6.199,000 (wgt'ed) examples reached here.  /* #neg=3.352 #pos=2.847 */
%   else return 0.07609765304822587;  // std dev = 0,413, 780,000 (wgt'ed) examples reached here.  /* #neg=610 #pos=170 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27423010095189726;  // std dev = 0,498, 6.199,000 (wgt'ed) examples reached here.  /* #neg=3.352 #pos=2.847 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return -0.15136919929793638;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.09863080070206304;  // std dev = 0,433, 76,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
%   | else return 0.06496317892556203;  // std dev = 0,412, 698,000 (wgt'ed) examples reached here.  /* #neg=547 #pos=151 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22927508569470018;  // std dev = 0,498, 6.199,000 (wgt'ed) examples reached here.  /* #neg=3.352 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5059997659773777;  // std dev = 1,153, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.15540920004388645;  // std dev = 0,025, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordauthor(E, H), haswordvenue(A, H) )
%   | | | then return -0.13293293817601592;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.07079439851129345;  // std dev = 3,396, 65,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | else return 0.055942930057191274;  // std dev = 0,412, 698,000 (wgt'ed) examples reached here.  /* #neg=547 #pos=151 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.566925283593705;  // std dev = 0,367, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else if ( author(F, E), venue(F, B) )
%   | | | then return 0.28856911921014305;  // std dev = 4,239, 73,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=41 */
%   | | | else return 0.07903795965004286;  // std dev = 4,025, 71,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=25 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.3043900723260991;  // std dev = 4,162, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.08406814073656196;  // std dev = 4,009, 70,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
%   | | else return 0.18438835032836456;  // std dev = 0,498, 5.889,000 (wgt'ed) examples reached here.  /* #neg=3.195 #pos=2.694 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.16534116671070273;  // std dev = 0,468, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.04480688333304658;  // std dev = 0,407, 70,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
%   | else return 0.04825631422385194;  // std dev = 0,411, 698,000 (wgt'ed) examples reached here.  /* #neg=547 #pos=151 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4416040083406508;  // std dev = 0,367, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.23975276933877834;  // std dev = 4,051, 69,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=39 */
%   | | | else return 0.06078552571918872;  // std dev = 4,194, 75,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=27 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.24001691419011364;  // std dev = 4,162, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.06706585822102419;  // std dev = 4,009, 70,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
%   | | else return 0.1463005225232335;  // std dev = 0,498, 5.889,000 (wgt'ed) examples reached here.  /* #neg=3.195 #pos=2.694 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.05343008584210355;  // std dev = 0,418, 82,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=19 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.050354626485955074;  // std dev = 0,416, 74,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | else return 0.040340859848909734;  // std dev = 0,411, 624,000 (wgt'ed) examples reached here.  /* #neg=490 #pos=134 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11509814968423973;  // std dev = 0,498, 6.199,000 (wgt'ed) examples reached here.  /* #neg=3.352 #pos=2.847 */
%   else return 0.036411252796191645;  // std dev = 0,412, 780,000 (wgt'ed) examples reached here.  /* #neg=610 #pos=170 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5252057778942318;  // std dev = 1,393, 46,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return -0.3763796754976596;  // std dev = 0,247, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.20474531163519202;  // std dev = 1,715, 18,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.14488135254480397;  // std dev = 4,121, 74,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=39 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.17023511730698676;  // std dev = 4,100, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.01821832673004332;  // std dev = 4,063, 71,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=25 */
%   | | else return 0.08771347860760917;  // std dev = 0,498, 5.889,000 (wgt'ed) examples reached here.  /* #neg=3.195 #pos=2.694 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.04220157882850636;  // std dev = 0,413, 82,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=19 */
%   | else return 0.029618724186527508;  // std dev = 0,412, 698,000 (wgt'ed) examples reached here.  /* #neg=547 #pos=151 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0677239595981944;  // std dev = 0,496, 6.199,000 (wgt'ed) examples reached here.  /* #neg=3.352 #pos=2.847 */
%   else return 0.026192632128222156;  // std dev = 0,412, 780,000 (wgt'ed) examples reached here.  /* #neg=610 #pos=170 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( author(F, E), venue(F, A) )
%   | | | then return 0.3584681534906668;  // std dev = 0,156, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20724391170818332;  // std dev = 1,781, 20,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.09272157374509284;  // std dev = 3,209, 71,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=39 */
%   | | | else return -0.00486543219034996;  // std dev = 4,116, 72,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=27 */
%   | else return 0.05092535484478786;  // std dev = 0,498, 6.031,000 (wgt'ed) examples reached here.  /* #neg=3.271 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.386561563500192;  // std dev = 1,153, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.1618026953559921;  // std dev = 0,026, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.017665053418473173;  // std dev = 0,408, 70,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
%   | else return 0.020995884268710276;  // std dev = 0,412, 698,000 (wgt'ed) examples reached here.  /* #neg=547 #pos=151 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.039051283874420965;  // std dev = 0,496, 6.199,000 (wgt'ed) examples reached here.  /* #neg=3.352 #pos=2.847 */
%   else return 0.018392713109454232;  // std dev = 0,411, 780,000 (wgt'ed) examples reached here.  /* #neg=610 #pos=170 */


Predicates from source: ['samevenue(venue,venue).', 'haswordvenue(venue,word).', 'author(class,author).', 'samebib(class,class).', 'venue(class,venue).', 'haswordauthor(author,word).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 22.54160189628601
   Generating paths time   = 2.775329351425171
   Generating mappings time   = 113.44590663909912
   Possible mappings   = 441488
   Finding best mapping   = 167.77820563316345
   Total time   = 306.541051864624


Best mapping found: ['venue(A,B) -> ismarriedto(A,B)', 'samevenue(A,B) -> haschild(A,B)', 'samebib(A,B) -> influences(A,B)', 'haswordauthor(A,B) -> actedin(B,A)', 'author(A,B) -> created(A,B)', 'haswordvenue(A,B) -> ismarriedto(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
1;false;ismarriedto(A, D), actedin(D, E).;true;false
1;false,true;actedin(F, E), ismarriedto(B, F).;false;false
2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
2;false;ismarriedto(B, D), actedin(D, E).;true;false
2;false,true,true;influences(F, G), ismarriedto(G, B).;false;false
2;false,true;created(F, E), ismarriedto(F, A).;true;true
2;false,true,false;actedin(H, E), ismarriedto(A, H).;false;false
3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
3;true,false;ismarriedto(A, G), actedin(G, H).;true;false
3;true;ismarriedto(B, D), actedin(D, E).;true;true
3;true,true;ismarriedto(A, D).;false;true
3;true,true,false;created(F, E), ismarriedto(F, B).;false;false
3;false;ismarriedto(A, J), actedin(J, K).;true;false
3;false,true;created(L, K), ismarriedto(L, B).;false;false
3;true,false,true;created(I, H), ismarriedto(I, A).;false;false
4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
4;true,false;ismarriedto(A, H), actedin(H, I).;true;false
4;true;ismarriedto(B, D), actedin(D, E).;true;true
4;true,true;actedin(C, F).;false;true
4;true,true,false;created(G, E), ismarriedto(G, A).;false;false
4;false;ismarriedto(A, K), actedin(K, L).;false;true
4;false,false;ismarriedto(B, M), actedin(M, N).;false;false
4;true,false,true;created(J, I), ismarriedto(J, A).;false;false
5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
6;true,false;ismarriedto(B, I), actedin(I, J).;true;false
6;true,false,true;created(K, J), ismarriedto(K, B).;false;false
6;true;ismarriedto(A, D), actedin(D, E).;true;true
6;true,true;created(F, E), ismarriedto(F, B).;true;true
6;true,true,false;created(H, E), ismarriedto(H, A).;false;false
6;false;ismarriedto(B, L), actedin(L, M).;false;false
6;true,true,true;influences(F, G), ismarriedto(G, A).;false;false
7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
8;false;ismarriedto(B, H), actedin(H, I).;true;false
8;false,true,true;influences(J, K), ismarriedto(K, B).;false;false
8;true;ismarriedto(A, D), actedin(D, E).;true;false
8;true,true;ismarriedto(B, D).;true;true
8;true,true,false;created(G, E), ismarriedto(G, B).;false;false
8;false,true;created(J, I), ismarriedto(J, A).;true;false
8;true,true,true;created(F, E), ismarriedto(F, A).;false;false
9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return 0.19081493443217312;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(B, F) )
%   | | then return 0.8332982127531618;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.14450153225523824;  // std dev = 10,165, 482,000 (wgt'ed) examples reached here.  /* #neg=332 #pos=150 */
%   | else return 0.16663154608644495;  // std dev = 56,769, 14.502,000 (wgt'ed) examples reached here.  /* #neg=9.668 #pos=4.834 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( created(F, E), ismarriedto(F, A) )
%   | | then if ( influences(F, G), ismarriedto(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.19115023286878002;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actedin(H, E), ismarriedto(A, H) )
%   | | | then return 0.6847929602532996;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.16191347302039316;  // std dev = 7,423, 241,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=85 */
%   | else return 0.14127071257852486;  // std dev = 57,191, 14.742,000 (wgt'ed) examples reached here.  /* #neg=9.843 #pos=4.899 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(B, D), actedin(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, F), actedin(F, G) )
%   | | then if ( created(H, G), ismarriedto(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(A, I), actedin(I, J) )
%   | then if ( created(K, J), ismarriedto(K, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1016399591624198;  // std dev = 10,169, 483,000 (wgt'ed) examples reached here.  /* #neg=332 #pos=151 */
%   | else return 0.11933585030736095;  // std dev = 56,769, 14.502,000 (wgt'ed) examples reached here.  /* #neg=9.668 #pos=4.834 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(B, D), actedin(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, F), actedin(F, G) )
%   | | then if ( created(H, G), ismarriedto(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.3207118471601497;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(A, I), actedin(I, J) )
%   | then return 0.08423894611820262;  // std dev = 10,168, 483,000 (wgt'ed) examples reached here.  /* #neg=332 #pos=151 */
%   | else if ( ismarriedto(B, K), actedin(K, L) )
%   | | then return 0.05350543744738614;  // std dev = 6,678, 216,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=63 */
%   | | else return 0.0992610118775856;  // std dev = 56,371, 14.286,000 (wgt'ed) examples reached here.  /* #neg=9.515 #pos=4.771 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return 0.08004412105620702;  // std dev = 57,671, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( created(F, E), ismarriedto(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(G, E), ismarriedto(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( ismarriedto(B, H), actedin(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, J), actedin(J, K) )
%   | then return 0.08968342766226918;  // std dev = 7,435, 243,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=86 */
%   | else return 0.06422240422581253;  // std dev = 57,189, 14.742,000 (wgt'ed) examples reached here.  /* #neg=9.843 #pos=4.899 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return 0.05176700513560482;  // std dev = 57,671, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( ismarriedto(B, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(F, E), ismarriedto(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809367075;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, G), actedin(G, H) )
%   | then if ( created(I, H), ismarriedto(I, A) )
%   | | then if ( influences(I, J), ismarriedto(J, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.22454602917910238;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.06251625539688423;  // std dev = 7,430, 242,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=86 */
%   | else return 0.040861253079237665;  // std dev = 57,188, 14.742,000 (wgt'ed) examples reached here.  /* #neg=9.843 #pos=4.899 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return 0.032612911025743374;  // std dev = 57,670, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */


Results
   AUC ROC   = 0.503676
   AUC PR    = 0.339274
   CLL	      = -0.637082
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0031
   F1        = 0.006181


Total learning time: 137.377 seconds
Total inference time: 77.482 seconds
AUC ROC: 0.503676


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.677, 10000, 4985], 'true': [0.0, 0, 15]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false': 'ismarriedto(A, D), actedin(D, E)', 'false,true': 'actedin(F, E), ismarriedto(B, F)'}, {'false,false': [56.769, 9668, 4834], 'true': [5.16e-08, 0, 15], 'false,true,true': [0.0, 0, 1], 'false,true,false': [10.165, 332, 150]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false': 'ismarriedto(B, D), actedin(D, E)', 'false,true': 'created(F, E), ismarriedto(F, A)', 'false,true,false': 'actedin(H, E), ismarriedto(A, H)', 'false,true,true': 'influences(F, G), ismarriedto(G, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.0, 1, 0], 'false,false': [57.191, 9843, 4899], 'false,true,false,false': [7.423, 156, 85], 'false,true,false,true': [0.0, 0, 1], 'true': [0.0, 0, 15]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,false': 'ismarriedto(A, F), actedin(F, G)', 'true,false,true': 'created(H, G), ismarriedto(H, A)', 'true': 'ismarriedto(B, D), actedin(D, E)', 'false': 'ismarriedto(A, I), actedin(I, J)', 'false,true': 'created(K, J), ismarriedto(K, B)'}, {'true,false,false': [4.21e-08, 0, 14], 'true,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,false': [56.769, 9668, 4834], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 1], 'false,true,false': [10.169, 332, 151]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,false': 'ismarriedto(A, F), actedin(F, G)', 'true,false,true': 'created(H, G), ismarriedto(H, A)', 'true': 'ismarriedto(B, D), actedin(D, E)', 'false': 'ismarriedto(A, I), actedin(I, J)', 'false,false': 'ismarriedto(B, K), actedin(K, L)'}, {'false,true': [10.168, 332, 151], 'true,false,true,false': [0.0, 0, 1], 'true,false,false': [0.0, 0, 14], 'true,true': [0.0, 0, 0], 'false,false,true': [6.678, 153, 63], 'true,false,true,true': [0.0, 0, 0], 'false,false,false': [56.371, 9515, 4771]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.671, 10000, 4985], 'true': [2.36e-08, 0, 15]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,true,false': 'created(G, E), ismarriedto(G, A)', 'true': 'ismarriedto(A, D), actedin(D, E)', 'true,true': 'created(F, E), ismarriedto(F, B)', 'true,false': 'ismarriedto(B, H), actedin(H, I)', 'false': 'ismarriedto(B, J), actedin(J, K)'}, {'false,true': [7.435, 157, 86], 'true,false,false': [0.0, 0, 14], 'true,true,true': [0.0, 0, 0], 'false,false': [57.189, 9843, 4899], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.671, 10000, 4985], 'true': [0.0, 0, 15]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,true,false': 'created(F, E), ismarriedto(F, B)', 'true': 'ismarriedto(A, D), actedin(D, E)', 'true,true': 'ismarriedto(B, D)', 'false': 'ismarriedto(B, G), actedin(G, H)', 'false,true': 'created(I, H), ismarriedto(I, A)', 'false,true,true': 'influences(I, J), ismarriedto(J, B)'}, {'false,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 14], 'true,true,false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.0, 1, 0], 'false,false': [57.188, 9843, 4899], 'true,true,false,false': [0.0, 0, 1], 'false,true,false': [7.43, 156, 86]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.67, 10000, 4985], 'true': [0.0, 0, 15]}]]
[{'': [-2.3684757858670006e-16, 0.2219993322206317]}, {'': [1.7763568394002506e-16, 0.22199933222073653], 'false': [0.21489225810047033, 0.2222222222222941], 'false,true': [0.0, 0.214355813432967]}, {'': [-2.3684757858670006e-16, 0.22198497918351376], 'false': [0.22842036992002546, 0.22187151541967182], 'false,true,false': [0.0, 0.22866477852451184], 'false,true': [0.0, 0.22884497858796002], 'false,true,true': [nan, 0.0]}, {'': [1.4802973661668753e-16, 0.22197174206586356], 'true,false': [0.0, 1.2688263138573217e-16], 'true,false,true': [nan, 0.0], 'true': [nan, 1.4802973661668753e-16], 'false': [0.2140819549789556, 0.2222244240011889], 'false,true': [nan, 0.21408195497895546]}, {'': [-1.4802973661668754e-17, 0.2219677266657775], 'true,false': [0.0, -3.172065784643304e-17], 'true,false,true': [nan, 0.0], 'true': [nan, -1.4802973661668754e-17], 'false': [0.21405658887915582, 0.22222458443886067], 'false,false': [0.20645578953083932, 0.22243182113818802]}, {'': [3.700743415417188e-17, 0.22195467071151592]}, {'': [-2.960594732333751e-17, 0.22195355985948806], 'true,true,false': [nan, 0.0], 'true': [0.0, -3.172065784643304e-17], 'true,true': [nan, 0.0], 'false': [0.22751001947288713, 0.22185145748135035], 'true,false': [nan, -3.172065784643304e-17]}, {'': [-7.401486830834377e-18, 0.22194890693695563]}, {'': [-2.2204460492503132e-17, 0.22194818260663018], 'false,true': [0.0, 0.22809265185131758], 'false,true,true': [nan, 0.0], 'true': [0.0, -1.9825411154020653e-17], 'false': [0.2274917176503119, 0.22185000828112109], 'true,true,false': [nan, 0.0], 'true,true': [nan, 0.0]}, {'': [0.0, 0.22194339913002]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;false;ismarriedto(A, D), actedin(D, E).;true;true', '1;false,true;actedin(F, E), ismarriedto(B, F).;true;true', '2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '2;false;ismarriedto(B, D), actedin(D, E).;true;true', '2;false,true,false;actedin(H, E), ismarriedto(A, H).;true;true', '2;false,true;created(F, E), ismarriedto(F, A).;true;true', '3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '3;true;ismarriedto(A, F), actedin(F, G).;true;true', '4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '4;true;ismarriedto(A, F), actedin(F, G).;true;true', '5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '6;true;ismarriedto(A, D), actedin(D, E).;true;true', '7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '8;false;ismarriedto(B, G), actedin(G, H).;true;true', '8;false,true;created(I, H), ismarriedto(I, A).;true;true', '8;true;ismarriedto(A, D), actedin(D, E).;true;true', '9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( graduatedfrom(A, F) )
%   | | then if ( graduatedfrom(B, G) )
%   | | | then return 0.7331489350995123;  // std dev = 1,323, 16,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return -0.0025068026054056755;  // std dev = 3,825, 122,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=17 */
%   | | else if ( actedin(D, H) )
%   | | | then return 0.12626487712849635;  // std dev = 5,204, 138,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=37 */
%   | | | else return 0.3093684472946292;  // std dev = 25,490, 2.624,000 (wgt'ed) examples reached here.  /* #neg=1.440 #pos=1.184 */
%   | else if ( iscitizenof(A, I), iscitizenof(B, I) )
%   | | then if ( created(A, J), hascurrency(I, K) )
%   | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.8291634278531358;  // std dev = 1,394, 69,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else if ( graduatedfrom(A, L), graduatedfrom(B, M) )
%   | | | then return 0.5287371703936307;  // std dev = 4,333, 85,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=57 */
%   | | | else return 0.1606304911021899;  // std dev = 50,166, 11.928,000 (wgt'ed) examples reached here.  /* #neg=8.320 #pos=3.608 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(B, F) )
%   | | then return 0.8420731748757819;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( actedin(B, G) )
%   | | | then return 0.6706988400214094;  // std dev = 3,414, 83,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=69 */
%   | | | else return 0.041542888070158164;  // std dev = 8,029, 399,000 (wgt'ed) examples reached here.  /* #neg=318 #pos=81 */
%   | else if ( diedin(B, H), diedin(A, I) )
%   | | then if ( livesin(J, I), isleaderof(J, K) )
%   | | | then return 0.20495188396478617;  // std dev = 5,177, 117,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=44 */
%   | | | else return 0.3596100886758855;  // std dev = 9,891, 396,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=210 */
%   | | else if ( ismarriedto(B, L), ismarriedto(A, M) )
%   | | | then return 0.25165671345401225;  // std dev = 25,128, 2.584,000 (wgt'ed) examples reached here.  /* #neg=1.462 #pos=1.122 */
%   | | | else return 0.13965339444682445;  // std dev = 48,969, 11.405,000 (wgt'ed) examples reached here.  /* #neg=7.947 #pos=3.458 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( created(F, E), ismarriedto(F, A) )
%   | | then return -0.24397264260312151;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actedin(G, E), ismarriedto(A, G) )
%   | | | then return 0.6967062252685403;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1451975745610829;  // std dev = 7,388, 241,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=85 */
%   | else if ( ismarriedto(B, H), ismarriedto(A, I) )
%   | | then if ( actedin(I, J) )
%   | | | then return -0.03427563078869689;  // std dev = 3,665, 123,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=17 */
%   | | | else return 0.2267843134942343;  // std dev = 25,443, 2.635,000 (wgt'ed) examples reached here.  /* #neg=1.447 #pos=1.188 */
%   | | else if ( iscitizenof(A, K), iscitizenof(B, L) )
%   | | | then return 0.497903400595775;  // std dev = 3,718, 96,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=74 */
%   | | | else return 0.12072461487693041;  // std dev = 50,062, 11.888,000 (wgt'ed) examples reached here.  /* #neg=8.268 #pos=3.620 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.4175135841583098;  // std dev = 1,18e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( wasbornin(A, F), wasbornin(B, G) )
%   | | then if ( diedin(H, F), wasbornin(H, G) )
%   | | | then return 0.6050770806087411;  // std dev = 2,563, 60,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=52 */
%   | | | else return 0.17632037975822967;  // std dev = 6,357, 172,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=75 */
%   | | else if ( diedin(E, I), diedin(A, I) )
%   | | | then return 0.729573945719565;  // std dev = 0,127, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.155335153273232;  // std dev = 25,116, 2.644,000 (wgt'ed) examples reached here.  /* #neg=1.543 #pos=1.101 */
%   | else if ( ismarriedto(A, J) )
%   | | then if ( actedin(A, K), actedin(B, L) )
%   | | | then return 0.6125598042285593;  // std dev = 2,139, 44,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=39 */
%   | | | else return 0.07321714273216785;  // std dev = 31,717, 5.080,000 (wgt'ed) examples reached here.  /* #neg=3.677 #pos=1.403 */
%   | | else if ( wasbornin(B, M), diedin(A, M) )
%   | | | then return 0.757975557967572;  // std dev = 1,059, 66,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.11872913929695038;  // std dev = 38,647, 6.895,000 (wgt'ed) examples reached here.  /* #neg=4.669 #pos=2.226 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( wasbornin(A, D), wasbornin(B, E) )
%   | then if ( diedin(F, D), wasbornin(F, E) )
%   | | then if ( isaffiliatedto(F, G), livesin(H, D) )
%   | | | then return 0.697857558732826;  // std dev = 1,559, 100,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=98 */
%   | | | else return 0.4605354663529304;  // std dev = 5,009, 137,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=102 */
%   | | else if ( happenedin(I, E), livesin(J, D) )
%   | | | then return -0.013813503942232838;  // std dev = 6,765, 276,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=63 */
%   | | | else return 0.14845797949175535;  // std dev = 10,523, 497,000 (wgt'ed) examples reached here.  /* #neg=300 #pos=197 */
%   | else if ( wasbornin(A, K), diedin(L, K) )
%   | | then if ( created(B, M), hasmusicalrole(L, N) )
%   | | | then return 0.21746186908227966;  // std dev = 3,486, 52,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=24 */
%   | | | else return 0.025876589973552303;  // std dev = 20,329, 2.196,000 (wgt'ed) examples reached here.  /* #neg=1.627 #pos=569 */
%   | | else if ( ismarriedto(B, P), ismarriedto(A, Q) )
%   | | | then return 0.14943929179147758;  // std dev = 23,241, 2.234,000 (wgt'ed) examples reached here.  /* #neg=1.242 #pos=992 */
%   | | | else return 0.08880980076671087;  // std dev = 44,723, 9.493,000 (wgt'ed) examples reached here.  /* #neg=6.553 #pos=2.940 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( wasbornin(B, D), wasbornin(A, E) )
%   | then if ( diedin(A, D) )
%   | | then if ( diedin(F, E), wasbornin(F, D) )
%   | | | then return 0.5110099839672292;  // std dev = 0,665, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.6430907807955991;  // std dev = 0,581, 42,000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( diedin(G, E), wasbornin(G, D) )
%   | | | then return 0.4207393551332156;  // std dev = 5,381, 187,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=150 */
%   | | | else return 0.040554507154135354;  // std dev = 12,020, 731,000 (wgt'ed) examples reached here.  /* #neg=513 #pos=218 */
%   | else if ( wasbornin(B, H), diedin(A, H) )
%   | | then if ( livesin(A, H) )
%   | | | then return 0.3657363533836477;  // std dev = 0,867, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.6418918977874478;  // std dev = 1,158, 81,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | else if ( wasbornin(B, I) )
%   | | | then return 0.0068243515766703185;  // std dev = 21,074, 2.371,000 (wgt'ed) examples reached here.  /* #neg=1.750 #pos=621 */
%   | | | else return 0.08193014123245604;  // std dev = 49,911, 11.519,000 (wgt'ed) examples reached here.  /* #neg=7.698 #pos=3.821 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( diedin(A, D), wasbornin(B, D) )
%   | then if ( ismarriedto(A, E) )
%   | | then if ( wasbornin(A, F), ismarriedto(B, G) )
%   | | | then return 0.405194760583276;  // std dev = 0,516, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.5265155723408397;  // std dev = 1,182, 82,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else if ( iscitizenof(A, H), hascapital(H, I) )
%   | | | then return 0.2154780226876604;  // std dev = 0,761, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.4218970001436519;  // std dev = 0,444, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( wasbornin(A, J), wasbornin(B, J) )
%   | | then if ( ismarriedto(B, K), ismarriedto(A, L) )
%   | | | then return 0.356251290011464;  // std dev = 1,085, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.5618201997348986;  // std dev = 1,303, 100,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=99 */
%   | | else if ( livesin(B, M), livesin(A, N) )
%   | | | then return 0.5486774430298839;  // std dev = 3,524, 83,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=68 */
%   | | | else return 0.05148164743208792;  // std dev = 55,357, 14.600,000 (wgt'ed) examples reached here.  /* #neg=9.981 #pos=4.619 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( diedin(A, D), diedin(B, D) )
%   | then if ( wasbornin(B, D) )
%   | | then if ( livesin(E, D), ismarriedto(A, F) )
%   | | | then return 0.37431981417133614;  // std dev = 0,357, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.28908560471847256;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( ismarriedto(B, G), diedin(G, D) )
%   | | | then return 0.42004061711054574;  // std dev = 0,786, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.6496247775453974;  // std dev = 0,497, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( graduatedfrom(B, H), isaffiliatedto(A, I) )
%   | | then if ( isaffiliatedto(B, I) )
%   | | | then return 0.5888761148807875;  // std dev = 1,750, 58,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | | | else return 0.11853288523732558;  // std dev = 4,010, 69,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=29 */
%   | | else if ( isaffiliatedto(B, J), isaffiliatedto(A, K) )
%   | | | then return 0.43730295768953537;  // std dev = 4,205, 105,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=80 */
%   | | | else return 0.04251988913238368;  // std dev = 55,099, 14.673,000 (wgt'ed) examples reached here.  /* #neg=9.931 #pos=4.742 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then return 0.15274385809367075;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, F), actedin(F, G) )
%   | then if ( created(H, G), ismarriedto(H, A) )
%   | | then return -0.27500135251448315;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actedin(A, I) )
%   | | | then return 0.4981672916774699;  // std dev = 2,386, 41,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=35 */
%   | | | else return -0.06094799690653791;  // std dev = 6,097, 201,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=51 */
%   | else if ( livesin(B, J), livesin(A, J) )
%   | | then if ( isaffiliatedto(B, K), isaffiliatedto(A, K) )
%   | | | then return 0.44726537128024013;  // std dev = 0,196, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5734071906474137;  // std dev = 0,510, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( iscitizenof(A, L), ismarriedto(B, M) )
%   | | | then return -0.17918872084874407;  // std dev = 4,058, 190,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=23 */
%   | | | else return 0.0417800645227995;  // std dev = 54,912, 14.516,000 (wgt'ed) examples reached here.  /* #neg=9.676 #pos=4.840 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( created(B, D), created(A, E) )
%   | then if ( wrotemusicfor(F, E), haswonprize(A, G) )
%   | | then if ( wasbornin(B, H) )
%   | | | then return 0.546986010926844;  // std dev = 0,262, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7248817918085075;  // std dev = 0,010, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( wasbornin(B, I), wasbornin(A, J) )
%   | | | then return -0.153979705876316;  // std dev = 1,344, 14,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.2632420962697854;  // std dev = 4,083, 75,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=43 */
%   | else if ( isaffiliatedto(B, K), isaffiliatedto(A, K) )
%   | | then if ( holdspoliticalposition(A, L), graduatedfrom(A, M) )
%   | | | then return -0.03907028233376787;  // std dev = 0,643, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.4653418929979917;  // std dev = 2,500, 121,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=116 */
%   | | else if ( wasbornin(B, N), diedin(A, N) )
%   | | | then return 0.3223349566042384;  // std dev = 1,676, 165,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=163 */
%   | | | else return 0.023492414072919146;  // std dev = 54,927, 14.596,000 (wgt'ed) examples reached here.  /* #neg=9.948 #pos=4.648 */


Results
   AUC ROC   = 0.644046
   AUC PR    = 0.53636
   CLL	      = -0.601955
   Precision = 0.942134 at threshold = 0.5
   Recall    = 0.1042
   F1        = 0.187646


Total learning time: 608.993 seconds
Total inference time: 98.411 seconds
AUC ROC: 0.644046


Refined model AUC ROC: 0.644046


Dataset: 24_cora_yago2s, Fold: 1, Type: transfer, Time: 04:57:59
{'AUC ROC': 0.644046, 'Parameter Learning results': {'AUC ROC': 0.503676, 'AUC PR': 0.339274, 'F1': 0.006181, 'Learning time': 137.377, 'Inference time': 77.482, 'CLL': -0.637082, 'Recall': 0.0031, 'Precision': [1.0, 0.5]}, 'AUC PR': 0.53636, 'F1': 0.187646, 'Learning time': 746.3700000000001, 'Inference time': 98.411, 'CLL': -0.601955, 'Mapping results': {'Generating paths time': 2.775329351425171, 'Total time': 306.541051864624, 'Possible mappings': 441488, 'Finding best mapping': 167.77820563316345, 'Generating mappings time': 113.44590663909912, 'Knowledge compiling time': 22.54160189628601}, 'Recall': 0.1042, 'Precision': [0.942134, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( diedin(A, E), wasbornin(B, E) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( graduatedfrom(A, F) )
%   | | then return 0.07712703728929239;  // std dev = 0,414, 137,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=30 */
%   | | else if ( wasbornin(A, G), isleaderof(H, G) )
%   | | | then return 0.1319584589090359;  // std dev = 5,780, 168,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=46 */
%   | | | else return 0.3012415567635577;  // std dev = 25,075, 2.548,000 (wgt'ed) examples reached here.  /* #neg=1.419 #pos=1.129 */
%   else if ( diedin(B, I), diedin(A, J) )
%   | then if ( wasbornin(B, J) )
%   | | then return 0.8581489350995117;  // std dev = 2,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( livesin(K, J), livesin(K, I) )
%   | | | then return 0.6581489350995116;  // std dev = 2,366, 35,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=28 */
%   | | | else return 0.1973715499405026;  // std dev = 7,965, 283,000 (wgt'ed) examples reached here.  /* #neg=187 #pos=96 */
%   | else if ( ismarriedto(A, L) )
%   | | then return 0.13448327548218592;  // std dev = 0,447, 4.965,000 (wgt'ed) examples reached here.  /* #neg=3.593 #pos=1.372 */
%   | | else return 0.18295295817301696;  // std dev = 0,468, 6.761,000 (wgt'ed) examples reached here.  /* #neg=4.565 #pos=2.196 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, D) )
%   then if ( diedin(E, C), wasbornin(E, D) )
%   | then return 0.664455239381404;  // std dev = 0,359, 237,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=200 */
%   | else if ( livesin(F, C), happenedin(G, D) )
%   | | then return 0.06210162160767463;  // std dev = 0,416, 276,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=63 */
%   | | else if ( diedin(A, D) )
%   | | | then return 0.7597988336395664;  // std dev = 0,315, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.1900731532068388;  // std dev = 10,304, 466,000 (wgt'ed) examples reached here.  /* #neg=300 #pos=166 */
%   else if ( ismarriedto(B, H), ismarriedto(A, I) )
%   | then if ( diedin(B, J), diedin(A, J) )
%   | | then return 0.7952033832763415;  // std dev = 0,217, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( wasbornin(B, K), diedin(I, L) )
%   | | | then return 0.38868173802328876;  // std dev = 5,583, 134,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=78 */
%   | | | else return 0.23029915515858115;  // std dev = 24,648, 2.524,000 (wgt'ed) examples reached here.  /* #neg=1.487 #pos=1.037 */
%   | else if ( ismarriedto(A, M) )
%   | | then return 0.10957129872555527;  // std dev = 0,443, 4.752,000 (wgt'ed) examples reached here.  /* #neg=3.473 #pos=1.279 */
%   | | else return 0.15753014266286827;  // std dev = 0,467, 6.555,000 (wgt'ed) examples reached here.  /* #neg=4.434 #pos=2.121 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( diedin(B, E), diedin(A, E) )
%   | then return 0.6313783749873046;  // std dev = 0,074, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( haswonprize(C, F), haswonprize(B, F) )
%   | | then return 0.6917836324436887;  // std dev = 0,245, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( wasbornin(A, G), wasbornin(B, G) )
%   | | | then return 0.6390120814539605;  // std dev = 1,055, 36,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.19947837369036908;  // std dev = 26,050, 2.831,000 (wgt'ed) examples reached here.  /* #neg=1.646 #pos=1.185 */
%   else if ( ismarriedto(H, B) )
%   | then return 0.07909043977402717;  // std dev = 0,442, 1.942,000 (wgt'ed) examples reached here.  /* #neg=1.419 #pos=523 */
%   | else if ( ismarriedto(A, I) )
%   | | then if ( graduatedfrom(A, J) )
%   | | | then return 0.22108755079373113;  // std dev = 9,319, 365,000 (wgt'ed) examples reached here.  /* #neg=220 #pos=145 */
%   | | | else return 0.0952192079035859;  // std dev = 30,481, 4.758,000 (wgt'ed) examples reached here.  /* #neg=3.461 #pos=1.297 */
%   | | else if ( influences(K, B), created(A, L) )
%   | | | then return 0.7934942420417865;  // std dev = 0,080, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.160821601207906;  // std dev = 33,654, 5.015,000 (wgt'ed) examples reached here.  /* #neg=3.252 #pos=1.763 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then return 0.637205289903903;  // std dev = 0,149, 170,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=168 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( wasbornin(A, F) )
%   | | then if ( wasbornin(B, G), diedin(E, G) )
%   | | | then return 0.639742981452117;  // std dev = 0,568, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.08980960956415662;  // std dev = 11,827, 653,000 (wgt'ed) examples reached here.  /* #neg=432 #pos=221 */
%   | | else if ( actedin(D, H) )
%   | | | then return -0.025814938404017256;  // std dev = 4,087, 95,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=22 */
%   | | | else return 0.19847015752389077;  // std dev = 22,674, 2.111,000 (wgt'ed) examples reached here.  /* #neg=1.142 #pos=969 */
%   | else if ( isaffiliatedto(A, I), livesin(B, J) )
%   | | then if ( isaffiliatedto(B, I) )
%   | | | then return 0.7477422197761666;  // std dev = 0,991, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.16050092806615632;  // std dev = 2,964, 38,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=14 */
%   | | else if ( iscitizenof(A, K), iscitizenof(B, K) )
%   | | | then return 0.7160544236084037;  // std dev = 1,956, 68,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | | | else return 0.0928243355772468;  // std dev = 49,421, 11.821,000 (wgt'ed) examples reached here.  /* #neg=8.322 #pos=3.499 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then return 0.489516901009639;  // std dev = 0,152, 170,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=168 */
%   else if ( diedin(A, D), hascapital(E, D) )
%   | then if ( wasbornin(B, D) )
%   | | then if ( ismarriedto(A, F), ismarriedto(B, G) )
%   | | | then return 0.47399017608720717;  // std dev = 0,609, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.6700494568968025;  // std dev = 1,098, 40,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | else if ( wasbornin(A, H), hascapital(I, H) )
%   | | | then return -0.045718313910699804;  // std dev = 7,084, 348,000 (wgt'ed) examples reached here.  /* #neg=284 #pos=64 */
%   | | | else return 0.05800782657627297;  // std dev = 14,042, 988,000 (wgt'ed) examples reached here.  /* #neg=696 #pos=292 */
%   | else if ( wasbornin(B, J), hascapital(K, J) )
%   | | then if ( ismarriedto(A, L), wasbornin(L, J) )
%   | | | then return 0.6831885446942523;  // std dev = 0,992, 41,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.004481466487793268;  // std dev = 14,763, 1.230,000 (wgt'ed) examples reached here.  /* #neg=936 #pos=294 */
%   | | else if ( ismarriedto(B, M), ismarriedto(A, N) )
%   | | | then return 0.14574618228589573;  // std dev = 23,221, 2.241,000 (wgt'ed) examples reached here.  /* #neg=1.268 #pos=973 */
%   | | | else return 0.09291090299955955;  // std dev = 45,841, 9.910,000 (wgt'ed) examples reached here.  /* #neg=6.812 #pos=3.098 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( graduatedfrom(B, C), isaffiliatedto(A, D) )
%   then if ( isaffiliatedto(B, D) )
%   | then return 0.6280114585678654;  // std dev = 0,231, 59,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else if ( holdspoliticalposition(A, E) )
%   | | then return -0.15350831659741;  // std dev = 0,303, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( isaffiliatedto(B, F), ismarriedto(A, G) )
%   | | | then return -0.17233288350275044;  // std dev = 0,660, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.29528332305151095;  // std dev = 3,503, 50,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=27 */
%   else if ( wasbornin(A, H), wasbornin(B, H) )
%   | then return 0.37259275319060514;  // std dev = 0,146, 167,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=165 */
%   | else if ( livesin(B, I), livesin(A, J) )
%   | | then if ( happenedin(K, J), happenedin(L, I) )
%   | | | then return 0.6912881871312894;  // std dev = 1,400, 35,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.4048737889700795;  // std dev = 2,930, 41,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   | | else if ( graduatedfrom(B, M), isaffiliatedto(B, N) )
%   | | | then return -0.10304016445583314;  // std dev = 4,800, 205,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=30 */
%   | | | else return 0.07228862409127901;  // std dev = 55,185, 14.424,000 (wgt'ed) examples reached here.  /* #neg=9.765 #pos=4.659 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then return 0.2930648511367312;  // std dev = 0,138, 170,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=168 */
%   else if ( wasbornin(B, D) )
%   | then if ( isaffiliatedto(A, E), isaffiliatedto(B, F) )
%   | | then if ( diedin(G, D), isaffiliatedto(G, E) )
%   | | | then return 0.47189625169716615;  // std dev = 2,587, 58,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=49 */
%   | | | else return 0.12810638100431124;  // std dev = 2,499, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | | else if ( diedin(A, H), wasbornin(I, H) )
%   | | | then return 0.0924933592432553;  // std dev = 12,085, 753,000 (wgt'ed) examples reached here.  /* #neg=454 #pos=299 */
%   | | | else return 3.4466219922205164E-4;  // std dev = 21,199, 2.457,000 (wgt'ed) examples reached here.  /* #neg=1.819 #pos=638 */
%   | else if ( wasbornin(A, J), diedin(K, J) )
%   | | then if ( ismarriedto(B, L), actedin(L, M) )
%   | | | then return 0.3219516016838756;  // std dev = 3,006, 37,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=22 */
%   | | | else return 0.0032446921570855386;  // std dev = 20,347, 2.212,000 (wgt'ed) examples reached here.  /* #neg=1.640 #pos=572 */
%   | | else if ( ismarriedto(B, N), ismarriedto(A, P) )
%   | | | then return 0.12350338104232964;  // std dev = 20,696, 1.746,000 (wgt'ed) examples reached here.  /* #neg=939 #pos=807 */
%   | | | else return 0.0744236293135969;  // std dev = 40,304, 7.535,000 (wgt'ed) examples reached here.  /* #neg=5.104 #pos=2.431 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then return 0.2363109245469393;  // std dev = 0,132, 170,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=168 */
%   else if ( ismarriedto(A, D), iscitizenof(B, E) )
%   | then if ( wasbornin(B, F), wasbornin(A, G) )
%   | | then if ( hascapital(H, G), livesin(I, G) )
%   | | | then return -0.1837452493877617;  // std dev = 0,906, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.3144504214228792;  // std dev = 2,401, 27,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | | else if ( exports(E, J), created(A, K) )
%   | | | then return 0.2646127073686425;  // std dev = 2,254, 20,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | | else return -0.11181818028840011;  // std dev = 5,547, 273,000 (wgt'ed) examples reached here.  /* #neg=232 #pos=41 */
%   | else if ( diedin(A, L), wasbornin(B, L) )
%   | | then if ( ismarriedto(A, M), ismarriedto(B, N) )
%   | | | then return 0.3570472076346399;  // std dev = 0,653, 47,000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.531697574800523;  // std dev = 1,791, 83,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=81 */
%   | | else if ( graduatedfrom(B, P), graduatedfrom(A, Q) )
%   | | | then return 0.34538210099100414;  // std dev = 3,906, 85,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=59 */
%   | | | else return 0.045254897703045124;  // std dev = 54,796, 14.280,000 (wgt'ed) examples reached here.  /* #neg=9.704 #pos=4.576 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), isaffiliatedto(A, D) )
%   then return -0.13368362559111874;  // std dev = 0,344, 329,000 (wgt'ed) examples reached here.  /* #neg=268 #pos=61 */
%   else if ( wasbornin(A, E), actedin(B, F) )
%   | then if ( actedin(A, G), directed(H, G) )
%   | | then if ( edited(I, F), livesin(J, E) )
%   | | | then return 0.3190647920914086;  // std dev = 2,320, 27,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return 0.617635391008809;  // std dev = 1,540, 40,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else if ( ismarriedto(A, K), actedin(K, L) )
%   | | | then return 0.5978294568013202;  // std dev = 0,927, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.0028186801805564327;  // std dev = 4,921, 141,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=43 */
%   | else if ( wasbornin(A, M), livesin(N, M) )
%   | | then if ( isleaderof(N, P), ismarriedto(B, Q) )
%   | | | then return -0.1577341264625155;  // std dev = 3,671, 140,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=19 */
%   | | | else return 0.016367368087648874;  // std dev = 20,158, 2.274,000 (wgt'ed) examples reached here.  /* #neg=1.553 #pos=721 */
%   | | else if ( wasbornin(B, R), diedin(S, R) )
%   | | | then return 0.010833565880990798;  // std dev = 21,023, 2.437,000 (wgt'ed) examples reached here.  /* #neg=1.697 #pos=740 */
%   | | | else return 0.059084562131868586;  // std dev = 46,044, 9.600,000 (wgt'ed) examples reached here.  /* #neg=6.251 #pos=3.349 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then return 0.10515195018018289;  // std dev = 0,164, 40,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else return 0.21905711667201658;  // std dev = 0,098, 130,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=129 */
%   else if ( wasbornin(B, F), diedin(A, F) )
%   | then if ( diedin(B, F) )
%   | | then return 0.22529553279263714;  // std dev = 0,089, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( ismarriedto(A, G), hascapital(H, F) )
%   | | | then return 0.32088626677417886;  // std dev = 1,031, 44,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.4336527290294689;  // std dev = 1,321, 65,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( graduatedfrom(B, I), graduatedfrom(A, J) )
%   | | then if ( ismarriedto(A, K), worksat(L, I) )
%   | | | then return 0.40454854438733295;  // std dev = 2,272, 39,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=32 */
%   | | | else return 0.20546828117186497;  // std dev = 3,398, 59,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=36 */
%   | | else if ( wasbornin(B, M) )
%   | | | then return -0.009168098454770662;  // std dev = 23,845, 3.120,000 (wgt'ed) examples reached here.  /* #neg=2.281 #pos=839 */
%   | | | else return 0.03487163947859162;  // std dev = 49,553, 11.479,000 (wgt'ed) examples reached here.  /* #neg=7.685 #pos=3.794 */


Results
   AUC ROC   = 0.649033
   AUC PR    = 0.529638
   CLL	      = -0.601236
   Precision = 0.974296 at threshold = 0.5
   Recall    = 0.0796
   F1        = 0.147176


Total learning time: 960.844 seconds
Total inference time: 78.90299999999999 seconds
AUC ROC: 0.649033


Dataset: 24_cora_yago2s, Fold: 1, Type: scratch, Time: 05:15:22
{'AUC ROC': 0.649033, 'AUC PR': 0.529638, 'F1': 0.147176, 'Learning time': 960.844, 'Inference time': 78.90299999999999, 'CLL': -0.601236, 'Recall': 0.0796, 'Precision': [0.974296, 0.5]}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 22.57681632041931
   Generating paths time   = 2.387620449066162
   Generating mappings time   = 113.3622522354126
   Possible mappings   = 441488
   Finding best mapping   = 169.12003803253174
   Total time   = 307.44673466682434


Best mapping found: ['venue(A,B) -> ismarriedto(A,B)', 'samevenue(A,B) -> haschild(A,B)', 'samebib(A,B) -> influences(A,B)', 'haswordauthor(A,B) -> actedin(B,A)', 'author(A,B) -> created(A,B)', 'haswordvenue(A,B) -> ismarriedto(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
1;false;ismarriedto(A, D), actedin(D, E).;true;false
1;false,true;actedin(F, E), ismarriedto(B, F).;false;false
2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
2;false;ismarriedto(B, D), actedin(D, E).;true;false
2;false,true,true;influences(F, G), ismarriedto(G, B).;false;false
2;false,true;created(F, E), ismarriedto(F, A).;true;true
2;false,true,false;actedin(H, E), ismarriedto(A, H).;false;false
3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
3;true,false;ismarriedto(A, G), actedin(G, H).;true;false
3;true;ismarriedto(B, D), actedin(D, E).;true;true
3;true,true;ismarriedto(A, D).;false;true
3;true,true,false;created(F, E), ismarriedto(F, B).;false;false
3;false;ismarriedto(A, J), actedin(J, K).;true;false
3;false,true;created(L, K), ismarriedto(L, B).;false;false
3;true,false,true;created(I, H), ismarriedto(I, A).;false;false
4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
4;true,false;ismarriedto(A, H), actedin(H, I).;true;false
4;true;ismarriedto(B, D), actedin(D, E).;true;true
4;true,true;actedin(C, F).;false;true
4;true,true,false;created(G, E), ismarriedto(G, A).;false;false
4;false;ismarriedto(A, K), actedin(K, L).;false;true
4;false,false;ismarriedto(B, M), actedin(M, N).;false;false
4;true,false,true;created(J, I), ismarriedto(J, A).;false;false
5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
6;true,false;ismarriedto(B, I), actedin(I, J).;true;false
6;true,false,true;created(K, J), ismarriedto(K, B).;false;false
6;true;ismarriedto(A, D), actedin(D, E).;true;true
6;true,true;created(F, E), ismarriedto(F, B).;true;true
6;true,true,false;created(H, E), ismarriedto(H, A).;false;false
6;false;ismarriedto(B, L), actedin(L, M).;false;false
6;true,true,true;influences(F, G), ismarriedto(G, A).;false;false
7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
8;false;ismarriedto(B, H), actedin(H, I).;true;false
8;false,true,true;influences(J, K), ismarriedto(K, B).;false;false
8;true;ismarriedto(A, D), actedin(D, E).;true;false
8;true,true;ismarriedto(B, D).;true;true
8;true,true,false;created(G, E), ismarriedto(G, B).;false;false
8;false,true;created(J, I), ismarriedto(J, A).;true;false
8;true,true,true;created(F, E), ismarriedto(F, A).;false;false
9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.1909039894799702;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(B, F) )
%   | | then return 0.8332858415443305;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17328584154432514;  // std dev = 10,592, 500,000 (wgt'ed) examples reached here.  /* #neg=330 #pos=170 */
%   | else return 0.16560649334291744;  // std dev = 56,688, 14.483,000 (wgt'ed) examples reached here.  /* #neg=9.670 #pos=4.813 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( created(F, E), ismarriedto(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( actedin(G, E), ismarriedto(A, G) )
%   | | | then return 0.6847764076923387;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16049783554803568;  // std dev = 7,333, 236,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=83 */
%   | else return 0.1412281484588544;  // std dev = 57,201, 14.747,000 (wgt'ed) examples reached here.  /* #neg=9.847 #pos=4.900 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( ismarriedto(A, D) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, F), actedin(F, G) )
%   | | then if ( created(H, G), ismarriedto(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( ismarriedto(A, I), actedin(I, J) )
%   | then if ( created(K, J), ismarriedto(K, B) )
%   | | then return 0.784921733900125;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.12652608298199386;  // std dev = 10,596, 503,000 (wgt'ed) examples reached here.  /* #neg=330 #pos=173 */
%   | else return 0.11849145014477118;  // std dev = 56,689, 14.483,000 (wgt'ed) examples reached here.  /* #neg=9.670 #pos=4.813 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( actedin(C, F) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, G), actedin(G, H) )
%   | | then if ( created(I, H), ismarriedto(I, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( ismarriedto(A, J), actedin(J, K) )
%   | then return 0.10533730293671605;  // std dev = 10,607, 504,000 (wgt'ed) examples reached here.  /* #neg=330 #pos=174 */
%   | else if ( ismarriedto(B, L), actedin(L, M) )
%   | | then return 0.029826236108501904;  // std dev = 6,230, 198,000 (wgt'ed) examples reached here.  /* #neg=145 #pos=53 */
%   | | else return 0.09884162881408834;  // std dev = 56,337, 14.285,000 (wgt'ed) examples reached here.  /* #neg=9.525 #pos=4.760 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.08006806534205868;  // std dev = 57,670, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( created(F, E), ismarriedto(F, B) )
%   | | then if ( influences(F, G), ismarriedto(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( created(H, E), ismarriedto(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( ismarriedto(B, I), actedin(I, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( ismarriedto(B, K), actedin(K, L) )
%   | then return 0.09638619879156174;  // std dev = 7,329, 240,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=87 */
%   | else return 0.06413687169402527;  // std dev = 57,200, 14.747,000 (wgt'ed) examples reached here.  /* #neg=9.847 #pos=4.900 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.05178050022181897;  // std dev = 57,669, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( ismarriedto(B, D) )
%   | | then if ( created(F, E), ismarriedto(F, A) )
%   | | | then return 0.15274385809367075;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15274385809367075;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( created(G, E), ismarriedto(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809367075;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.15274385809367078;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( ismarriedto(B, H), actedin(H, I) )
%   | then if ( created(J, I), ismarriedto(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.0666960873479779;  // std dev = 7,326, 240,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=87 */
%   | else return 0.040788304455368865;  // std dev = 57,200, 14.747,000 (wgt'ed) examples reached here.  /* #neg=9.847 #pos=4.900 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.03262082076498964;  // std dev = 57,668, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */


Results
   AUC ROC   = 0.498818
   AUC PR    = 0.339371
   CLL	      = -0.63704
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.003
   F1        = 0.005982


Total learning time: 7781.542 seconds
Total inference time: 71.511 seconds
AUC ROC: 0.498818


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.685, 10000, 4987], 'true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false': 'ismarriedto(A, D), actedin(D, E)', 'false,true': 'actedin(F, E), ismarriedto(B, F)'}, {'false,false': [56.688, 9670, 4813], 'true': [4.21e-08, 0, 13], 'false,true,true': [0.0, 0, 4], 'false,true,false': [10.592, 330, 170]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false': 'ismarriedto(B, D), actedin(D, E)', 'false,true,false': 'actedin(G, E), ismarriedto(A, G)', 'false,true': 'created(F, E), ismarriedto(F, A)'}, {'false,false': [57.201, 9847, 4900], 'false,true,false,false': [7.333, 153, 83], 'true': [0.0, 0, 13], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 4]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,false': 'ismarriedto(A, F), actedin(F, G)', 'true': 'ismarriedto(B, D), actedin(D, E)', 'true,true': 'ismarriedto(A, D)', 'false': 'ismarriedto(A, I), actedin(I, J)', 'false,true': 'created(K, J), ismarriedto(K, B)', 'true,false,true': 'created(H, G), ismarriedto(H, A)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false': [3.65e-08, 0, 10], 'true,true,true': [0.0, 0, 2], 'false,true,true': [0.0, 0, 1], 'false,false': [56.689, 9670, 4813], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 1], 'false,true,false': [10.596, 330, 173]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,false': 'ismarriedto(A, G), actedin(G, H)', 'true,false,true': 'created(I, H), ismarriedto(I, A)', 'true': 'ismarriedto(B, D), actedin(D, E)', 'true,true': 'actedin(C, F)', 'false': 'ismarriedto(A, J), actedin(J, K)', 'false,false': 'ismarriedto(B, L), actedin(L, M)'}, {'false,true': [10.607, 330, 174], 'true,false,true,false': [0.0, 0, 1], 'true,false,false': [0.0, 0, 10], 'true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 0, 0], 'false,false,true': [6.23, 145, 53], 'true,false,true,true': [0.0, 0, 0], 'false,false,false': [56.337, 9525, 4760]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.67, 10000, 4987], 'true': [2.11e-08, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,true,false': 'created(H, E), ismarriedto(H, A)', 'true': 'ismarriedto(A, D), actedin(D, E)', 'true,true': 'created(F, E), ismarriedto(F, B)', 'true,false': 'ismarriedto(B, I), actedin(I, J)', 'false': 'ismarriedto(B, K), actedin(K, L)', 'true,true,true': 'influences(F, G), ismarriedto(G, A)'}, {'false,true': [7.329, 153, 87], 'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 1], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,false': [57.2, 9847, 4900], 'true,false,false': [0.0, 0, 10], 'true,true,false,false': [0.0, 0, 2]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.669, 10000, 4987], 'true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,true,false': 'created(G, E), ismarriedto(G, B)', 'true': 'ismarriedto(A, D), actedin(D, E)', 'true,true': 'ismarriedto(B, D)', 'false': 'ismarriedto(B, H), actedin(H, I)', 'false,true': 'created(J, I), ismarriedto(J, A)', 'true,true,true': 'created(F, E), ismarriedto(F, A)'}, {'true,true,true,true': [0.0, 0, 1], 'true,true,true,false': [0.0, 0, 1], 'true,true,false,true': [0.0, 0, 0], 'false,true,false': [7.326, 153, 87], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 10], 'true,true,false,false': [0.0, 0, 1], 'false,false': [57.2, 9847, 4900]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.668, 10000, 4987], 'true': [0.0, 0, 13]}]]
[{'': [-2.7328566760003855e-16, 0.2220291281646526]}, {'': [1.3664283380001927e-16, 0.22202912816466822], 'false': [0.22604875283447098, 0.2218836361867239], 'false,true': [0.0, 0.22440000000000584]}, {'': [-2.7328566760003855e-16, 0.2219884702636482], 'false': [0.22854558474214323, 0.22186919477284844], 'false,true,false': [0.0, 0.22783810503399599], 'false,true': [nan, 0.22854558474214332]}, {'': [1.3664283380001927e-16, 0.22195143037136328], 'true,false': [0.0, 1.3322676295501878e-16], 'true,true': [0.0, nan], 'true': [0.0, 1.6148698540002277e-16], 'false': [0.22364572793974663, 0.2218895355284714], 'false,true': [0.0, 0.22323026269868534], 'true,false,true': [nan, 0.0]}, {'': [-5.124106267500723e-17, 0.22193744664924048], 'false,false': [0.1960259157228868, 0.22218331777634692], 'true': [0.0, -6.055761952500853e-17], 'true,true': [0.0, nan], 'false': [0.22324906276280929, 0.22188994207655627], 'true,false': [0.0, -4.4408920985006264e-17], 'true,false,true': [nan, 0.0]}, {'': [3.416070845000482e-17, 0.22191375860158524]}, {'': [-3.416070845000482e-17, 0.22191169956776435], 'true,true,false': [nan, 0.0], 'true': [0.0, -2.7755575615628914e-17], 'true,true': [0.0, 0.0], 'false': [0.2238317726234282, 0.22186379660588593], 'true,false': [nan, -2.7755575615628914e-17], 'true,true,true': [nan, 0.0]}, {'': [0.0, 0.22190343468075205]}, {'': [-1.2810265668751807e-17, 0.22190225005319392], 'false,true': [nan, 0.22359588403471944], 'true': [0.0, -8.326672684688674e-18], 'true,true': [0.0, 0.0], 'false': [0.22359588403471922, 0.22186393828593254], 'true,true,false': [nan, 0.0], 'true,true,true': [0.0, 0.0]}, {'': [0.0, 0.22189684934023263]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;false;ismarriedto(A, D), actedin(D, E).;true;true', '1;false,true;actedin(F, E), ismarriedto(B, F).;true;true', '2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '2;false;ismarriedto(B, D), actedin(D, E).;true;true', '2;false,true;actedin(G, E), ismarriedto(A, G).;true;true', '3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '3;true,false;ismarriedto(A, F), actedin(F, G).;true;true', '3;false,true;created(K, J), ismarriedto(K, B).;true;true', '3;false;ismarriedto(A, I), actedin(I, J).;true;true', '3;true;ismarriedto(B, D), actedin(D, E).;true;true', '4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '4;true,false;ismarriedto(A, G), actedin(G, H).;true;true', '4;true;ismarriedto(B, D), actedin(D, E).;true;true', '5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '6;true,true;created(F, E), ismarriedto(F, B).;true;true', '6;true;ismarriedto(A, D), actedin(D, E).;true;true', '7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '8;true,true;ismarriedto(B, D).;true;true', '8;true;ismarriedto(A, D), actedin(D, E).;true;true', '8;true,true,true;created(F, E), ismarriedto(F, A).;true;true', '9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), ismarriedto(E, B) )
%   | then if ( diedin(D, F), wasbornin(B, F) )
%   | | then if ( diedin(E, G), hascapital(H, G) )
%   | | | then return 0.7993254056877476;  // std dev = 0,970, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.8581489350995122;  // std dev = 1,69e-07, 59,000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( wasbornin(A, I), diedin(B, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2650081408756807;  // std dev = 25,855, 2.770,000 (wgt'ed) examples reached here.  /* #neg=1.643 #pos=1.127 */
%   | else if ( iscitizenof(A, J), iscitizenof(B, J) )
%   | | then if ( dealswith(K, J), diedin(L, K) )
%   | | | then return 0.6721024234716044;  // std dev = 2,552, 43,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=35 */
%   | | | else return 0.8581489350995116;  // std dev = 2,38e-07, 42,000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( wasbornin(B, M), wasbornin(A, M) )
%   | | | then return 0.8508496650265175;  // std dev = 0,996, 137,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=136 */
%   | | | else return 0.15719159549587933;  // std dev = 49,961, 11.908,000 (wgt'ed) examples reached here.  /* #neg=8.347 #pos=3.561 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(B, F) )
%   | | then return 0.8227355091449718;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( actedin(B, G) )
%   | | | then return 0.6900239710777261;  // std dev = 3,350, 94,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=81 */
%   | | | else return 0.05220245595706386;  // std dev = 8,307, 406,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=89 */
%   | else if ( ismarriedto(H, B), ismarriedto(A, I) )
%   | | then if ( graduatedfrom(A, J) )
%   | | | then return 0.0257634469313592;  // std dev = 3,970, 98,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=20 */
%   | | | else return 0.25442784669934604;  // std dev = 25,141, 2.607,000 (wgt'ed) examples reached here.  /* #neg=1.473 #pos=1.134 */
%   | | else if ( ismarriedto(A, K) )
%   | | | then return 0.10512809288373264;  // std dev = 30,602, 4.813,000 (wgt'ed) examples reached here.  /* #neg=3.520 #pos=1.293 */
%   | | | else return 0.17516259963053377;  // std dev = 39,281, 6.965,000 (wgt'ed) examples reached here.  /* #neg=4.599 #pos=2.366 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(A, F) )
%   | | then return 0.6708995388423027;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( wasbornin(A, G), isleaderof(H, G) )
%   | | | then return 0.5267940356005443;  // std dev = 2,706, 41,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | | else return 0.056137098185594855;  // std dev = 6,048, 195,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=52 */
%   | else if ( ismarriedto(I, B), ismarriedto(A, J) )
%   | | then if ( actedin(A, K), ismarriedto(B, I) )
%   | | | then return -0.05223311129986087;  // std dev = 3,418, 99,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=15 */
%   | | | else return 0.21643929566006137;  // std dev = 25,111, 2.613,000 (wgt'ed) examples reached here.  /* #neg=1.473 #pos=1.140 */
%   | | else if ( ismarriedto(A, L) )
%   | | | then return 0.09365073884463337;  // std dev = 31,745, 5.165,000 (wgt'ed) examples reached here.  /* #neg=3.757 #pos=1.408 */
%   | | | else return 0.15017576455724158;  // std dev = 39,004, 6.870,000 (wgt'ed) examples reached here.  /* #neg=4.533 #pos=2.337 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(B, D), actedin(D, E) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.4175135841583098;  // std dev = 1,29e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( ismarriedto(A, F), actedin(F, G) )
%   | then if ( created(H, G), ismarriedto(H, B) )
%   | | then return 0.7103739676828589;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( actedin(B, I) )
%   | | | then return 0.5371585468667159;  // std dev = 3,391, 97,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=84 */
%   | | | else return 0.031598143045951134;  // std dev = 8,285, 406,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=89 */
%   | else if ( wasbornin(B, J), wasbornin(A, K) )
%   | | then if ( diedin(L, J), wasbornin(L, K) )
%   | | | then return 0.6297099989431698;  // std dev = 4,589, 298,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=273 */
%   | | | else return 0.06757070734396957;  // std dev = 11,269, 657,000 (wgt'ed) examples reached here.  /* #neg=468 #pos=189 */
%   | | else if ( ismarriedto(B, M), ismarriedto(A, N) )
%   | | | then return 0.15792119107051458;  // std dev = 24,333, 2.479,000 (wgt'ed) examples reached here.  /* #neg=1.453 #pos=1.026 */
%   | | | else return 0.09725213295297623;  // std dev = 48,043, 11.049,000 (wgt'ed) examples reached here.  /* #neg=7.724 #pos=3.325 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( diedin(A, D), wasbornin(B, D) )
%   | then if ( wasbornin(A, E) )
%   | | then if ( ismarriedto(B, F), ismarriedto(A, G) )
%   | | | then return 0.5025191127929654;  // std dev = 0,373, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5941979982212819;  // std dev = 0,728, 69,000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( ismarriedto(A, H), ismarriedto(B, I) )
%   | | | then return 0.6557019197916192;  // std dev = 0,358, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.7750177279816731;  // std dev = 0,280, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( ismarriedto(J, B), iscitizenof(A, K) )
%   | | then if ( isleaderof(L, K), created(L, M) )
%   | | | then return -0.02846353869275235;  // std dev = 3,635, 80,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=18 */
%   | | | else return -0.17353719917787416;  // std dev = 2,493, 97,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=7 */
%   | | else if ( diedin(A, N), wasbornin(P, N) )
%   | | | then return 0.050809108538599095;  // std dev = 22,254, 2.540,000 (wgt'ed) examples reached here.  /* #neg=1.814 #pos=726 */
%   | | | else return 0.10010296249865455;  // std dev = 51,001, 12.077,000 (wgt'ed) examples reached here.  /* #neg=8.034 #pos=4.043 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( diedin(A, D), diedin(B, E) )
%   | then if ( wasbornin(B, D) )
%   | | then if ( wasbornin(A, F), livesin(G, D) )
%   | | | then return 0.4127465372337881;  // std dev = 0,507, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.5679743541385879;  // std dev = 0,487, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( livesin(H, D), diedin(H, E) )
%   | | | then return 0.6952210757079719;  // std dev = 1,028, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.09758689250980734;  // std dev = 9,794, 444,000 (wgt'ed) examples reached here.  /* #neg=289 #pos=155 */
%   | else if ( isaffiliatedto(B, I), isaffiliatedto(A, J) )
%   | | then if ( isaffiliatedto(A, I) )
%   | | | then return 0.6703156007034452;  // std dev = 2,264, 110,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=105 */
%   | | | else return 0.19169847356987293;  // std dev = 3,495, 55,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=25 */
%   | | else if ( isaffiliatedto(B, K) )
%   | | | then return -0.07224425726853682;  // std dev = 8,688, 553,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=96 */
%   | | | else return 0.07512023519120874;  // std dev = 53,787, 13.719,000 (wgt'ed) examples reached here.  /* #neg=9.218 #pos=4.501 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), ismarriedto(E, B) )
%   | then if ( ismarriedto(D, E) )
%   | | then if ( actedin(B, F) )
%   | | | then return 0.4538670776963567;  // std dev = 0,137, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6760832177509801;  // std dev = 0,144, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( wasbornin(B, G), diedin(D, G) )
%   | | | then return 0.4130519149148522;  // std dev = 1,320, 75,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | | else return 0.08152017839376785;  // std dev = 25,169, 2.757,000 (wgt'ed) examples reached here.  /* #neg=1.643 #pos=1.114 */
%   | else if ( ismarriedto(B, H) )
%   | | then if ( wasbornin(A, I), wasbornin(B, I) )
%   | | | then return 0.4114736384063682;  // std dev = 0,461, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.013706633468641396;  // std dev = 18,558, 1.908,000 (wgt'ed) examples reached here.  /* #neg=1.440 #pos=468 */
%   | | else if ( ismarriedto(A, J) )
%   | | | then return 0.03137221495740635;  // std dev = 31,170, 5.165,000 (wgt'ed) examples reached here.  /* #neg=3.757 #pos=1.408 */
%   | | | else return 0.10550367011001717;  // std dev = 33,601, 5.037,000 (wgt'ed) examples reached here.  /* #neg=3.159 #pos=1.878 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), ismarriedto(E, B) )
%   | then if ( wasbornin(B, F), isleaderof(G, F) )
%   | | then if ( actedin(A, H), wrotemusicfor(I, H) )
%   | | | then return 0.28906008714368;  // std dev = 2,132, 26,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return -0.06537212003679074;  // std dev = 6,024, 225,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=69 */
%   | | else if ( graduatedfrom(A, J) )
%   | | | then return -0.13065823226947046;  // std dev = 3,254, 90,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=14 */
%   | | | else return 0.09170782604073899;  // std dev = 24,131, 2.516,000 (wgt'ed) examples reached here.  /* #neg=1.405 #pos=1.111 */
%   | else if ( ismarriedto(B, K) )
%   | | then if ( wasbornin(B, L), diedin(A, L) )
%   | | | then return 0.37845834592120225;  // std dev = 0,567, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.011500776349704435;  // std dev = 18,537, 1.909,000 (wgt'ed) examples reached here.  /* #neg=1.440 #pos=469 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.025652907636951265;  // std dev = 31,164, 5.165,000 (wgt'ed) examples reached here.  /* #neg=3.757 #pos=1.408 */
%   | | | else return 0.08460472593090436;  // std dev = 33,586, 5.037,000 (wgt'ed) examples reached here.  /* #neg=3.159 #pos=1.878 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(A, D), wasbornin(B, E) )
%   | then if ( diedin(F, D), wasbornin(F, E) )
%   | | then if ( diedin(A, D), livesin(G, E) )
%   | | | then return 0.17999754900969905;  // std dev = 1,705, 56,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=47 */
%   | | | else return 0.40061811018329907;  // std dev = 4,121, 202,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=179 */
%   | | else if ( hascapital(H, E), livesin(I, D) )
%   | | | then return -0.0639417518393502;  // std dev = 5,309, 198,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=49 */
%   | | | else return 0.07190150594177593;  // std dev = 10,258, 558,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=219 */
%   | else if ( ismarriedto(B, J), isaffiliatedto(A, K) )
%   | | then if ( isaffiliatedto(B, K) )
%   | | | then return 0.5175523050698027;  // std dev = 0,956, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.14810189141020194;  // std dev = 5,073, 254,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=32 */
%   | | else if ( ismarriedto(A, L), iscitizenof(B, M) )
%   | | | then return -0.08671005914535103;  // std dev = 6,498, 310,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=55 */
%   | | | else return 0.0398340108661427;  // std dev = 53,135, 13.389,000 (wgt'ed) examples reached here.  /* #neg=9.002 #pos=4.387 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(A, D), ismarriedto(B, E) )
%   | then if ( wasbornin(B, D) )
%   | | then if ( diedin(A, D) )
%   | | | then return 0.21606081570060995;  // std dev = 0,462, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.3376466896070141;  // std dev = 1,479, 49,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | else if ( haswonprize(B, F), haswonprize(A, F) )
%   | | | then return 0.5291138886344697;  // std dev = 0,449, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.03348017834338622;  // std dev = 13,736, 1.060,000 (wgt'ed) examples reached here.  /* #neg=740 #pos=320 */
%   | else if ( wasbornin(B, G), diedin(A, G) )
%   | | then if ( wasbornin(A, G) )
%   | | | then return 0.2586804518235206;  // std dev = 0,197, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.4543238941233572;  // std dev = 1,275, 120,000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | | else if ( actedin(B, H), actedin(A, I) )
%   | | | then return 0.47443821156477434;  // std dev = 3,582, 104,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=91 */
%   | | | else return 0.027339291193889073;  // std dev = 53,037, 13.597,000 (wgt'ed) examples reached here.  /* #neg=9.245 #pos=4.352 */


Results
   AUC ROC   = 0.649156
   AUC PR    = 0.538702
   CLL	      = -0.601549
   Precision = 0.946203 at threshold = 0.5
   Recall    = 0.0897
   F1        = 0.163866


Total learning time: 1297.89 seconds
Total inference time: 86.495 seconds
AUC ROC: 0.649156


Refined model AUC ROC: 0.649156


Dataset: 24_cora_yago2s, Fold: 2, Type: transfer, Time: 07:54:49
{'AUC ROC': 0.649156, 'Parameter Learning results': {'AUC ROC': 0.498818, 'AUC PR': 0.339371, 'F1': 0.005982, 'Learning time': 7781.542, 'Inference time': 71.511, 'CLL': -0.63704, 'Recall': 0.003, 'Precision': [1.0, 0.5]}, 'AUC PR': 0.538702, 'F1': 0.163866, 'Learning time': 9079.432, 'Inference time': 86.495, 'CLL': -0.601549, 'Mapping results': {'Generating paths time': 2.387620449066162, 'Total time': 307.44673466682434, 'Possible mappings': 441488, 'Finding best mapping': 169.12003803253174, 'Generating mappings time': 113.3622522354126, 'Knowledge compiling time': 22.57681632041931}, 'Recall': 0.0897, 'Precision': [0.946203, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( diedin(C, E), wasbornin(B, F) )
%   | then if ( wasbornin(C, F), livesin(G, E) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( livesin(H, F), wasbornin(H, E) )
%   | | | then return 0.7956489350995121;  // std dev = 1,677, 48,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | | else return 0.2748156017661779;  // std dev = 6,390, 168,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=70 */
%   | else if ( wasbornin(B, I), wasbornin(C, J) )
%   | | then if ( diedin(A, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4251592443778637;  // std dev = 4,880, 97,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=55 */
%   | | else if ( livesin(D, K), livesin(A, L) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2603791222759311;  // std dev = 24,571, 2.511,000 (wgt'ed) examples reached here.  /* #neg=1.501 #pos=1.010 */
%   else if ( ismarriedto(A, M) )
%   | then return 0.1307530009271935;  // std dev = 0,445, 5.165,000 (wgt'ed) examples reached here.  /* #neg=3.757 #pos=1.408 */
%   | else return 0.1978474275618187;  // std dev = 0,474, 6.965,000 (wgt'ed) examples reached here.  /* #neg=4.599 #pos=2.366 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(A, D) )
%   then if ( diedin(D, E), wasbornin(C, F) )
%   | then if ( wasbornin(B, E) )
%   | | then return 0.7190863333561969;  // std dev = 0,191, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( isleaderof(G, F), happenedin(H, E) )
%   | | | then return 0.03352374870659775;  // std dev = 2,183, 28,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | | else return 0.33740814809681524;  // std dev = 5,948, 143,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=74 */
%   | else if ( ismarriedto(D, C) )
%   | | then return 0.7959624356053833;  // std dev = 0,193, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( isaffiliatedto(A, I) )
%   | | | then return 0.10163667773892268;  // std dev = 5,062, 128,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=36 */
%   | | | else return 0.2402919533886227;  // std dev = 24,632, 2.518,000 (wgt'ed) examples reached here.  /* #neg=1.460 #pos=1.058 */
%   else if ( ismarriedto(A, J) )
%   | then return 0.11407946658836876;  // std dev = 0,445, 5.165,000 (wgt'ed) examples reached here.  /* #neg=3.757 #pos=1.408 */
%   | else if ( ismarriedto(B, K) )
%   | | then return 0.08543105503607785;  // std dev = 0,435, 1.928,000 (wgt'ed) examples reached here.  /* #neg=1.440 #pos=488 */
%   | | else return 0.20515999861302023;  // std dev = 0,484, 5.037,000 (wgt'ed) examples reached here.  /* #neg=3.159 #pos=1.878 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( diedin(C, E), wasbornin(B, E) )
%   | then return 0.6496846879238177;  // std dev = 0,143, 76,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else if ( wasbornin(B, F), graduatedfrom(B, G) )
%   | | then return -0.07448457757481759;  // std dev = 0,346, 56,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=8 */
%   | | else if ( ismarriedto(C, D) )
%   | | | then return 0.6436873976006614;  // std dev = 0,247, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.19614675769966167;  // std dev = 25,537, 2.714,000 (wgt'ed) examples reached here.  /* #neg=1.595 #pos=1.119 */
%   else if ( ismarriedto(A, H) )
%   | then if ( wasbornin(B, I), hascapital(J, I) )
%   | | then return 0.2061898048351892;  // std dev = 0,486, 565,000 (wgt'ed) examples reached here.  /* #neg=350 #pos=215 */
%   | | else return 0.08500665747081845;  // std dev = 0,438, 4.600,000 (wgt'ed) examples reached here.  /* #neg=3.407 #pos=1.193 */
%   | else if ( wasbornin(A, K), wasbornin(B, K) )
%   | | then return 0.7944301247435592;  // std dev = 0,107, 87,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=86 */
%   | | else if ( ismarriedto(B, L) )
%   | | | then return 0.06533821879828886;  // std dev = 18,794, 1.908,000 (wgt'ed) examples reached here.  /* #neg=1.440 #pos=468 */
%   | | | else return 0.16629374685362183;  // std dev = 33,932, 4.970,000 (wgt'ed) examples reached here.  /* #neg=3.158 #pos=1.812 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(A, D) )
%   then if ( graduatedfrom(B, E), wasbornin(B, F) )
%   | then return -0.06209347444300229;  // std dev = 0,346, 56,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=8 */
%   | else if ( graduatedfrom(A, G) )
%   | | then return -0.024514870932056683;  // std dev = 0,404, 106,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=23 */
%   | | else if ( diedin(D, H), wasbornin(B, H) )
%   | | | then return 0.49657107583720506;  // std dev = 1,295, 75,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | | else return 0.1717351689092738;  // std dev = 25,164, 2.633,000 (wgt'ed) examples reached here.  /* #neg=1.512 #pos=1.121 */
%   else if ( wasbornin(B, I), wasbornin(A, J) )
%   | then if ( diedin(K, I), wasbornin(K, J) )
%   | | then return 0.661969560973312;  // std dev = 0,281, 217,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=198 */
%   | | else return 0.07201309166408293;  // std dev = 0,443, 553,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=156 */
%   | else if ( ismarriedto(A, L) )
%   | | then return 0.0723960324052111;  // std dev = 0,439, 4.803,000 (wgt'ed) examples reached here.  /* #neg=3.550 #pos=1.253 */
%   | | else if ( ismarriedto(B, M) )
%   | | | then return 0.05375164051303951;  // std dev = 18,306, 1.819,000 (wgt'ed) examples reached here.  /* #neg=1.376 #pos=443 */
%   | | | else return 0.13780747231313428;  // std dev = 33,116, 4.738,000 (wgt'ed) examples reached here.  /* #neg=3.014 #pos=1.724 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( isaffiliatedto(A, E), isaffiliatedto(B, E) )
%   | then return 0.7054721335298603;  // std dev = 0,125, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( wasbornin(B, F), wasbornin(C, F) )
%   | | then return 0.4706664068714432;  // std dev = 0,243, 52,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | else if ( actedin(A, G), actedin(B, H) )
%   | | | then return 0.515384616667971;  // std dev = 2,401, 37,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=30 */
%   | | | else return 0.1202042402371296;  // std dev = 25,330, 2.766,000 (wgt'ed) examples reached here.  /* #neg=1.634 #pos=1.132 */
%   else if ( diedin(B, I), diedin(A, J) )
%   | then if ( wasbornin(K, J), diedin(K, I) )
%   | | then return 0.5926096676343089;  // std dev = 0,339, 114,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=98 */
%   | | else return 0.054416493651772445;  // std dev = 0,440, 272,000 (wgt'ed) examples reached here.  /* #neg=198 #pos=74 */
%   | else if ( diedin(A, L) )
%   | | then return 0.04534323223905484;  // std dev = 0,434, 1.845,000 (wgt'ed) examples reached here.  /* #neg=1.346 #pos=499 */
%   | | else if ( ismarriedto(A, M), iscitizenof(B, N) )
%   | | | then return -0.018058940879724164;  // std dev = 5,831, 228,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=42 */
%   | | | else return 0.09254762939359422;  // std dev = 45,280, 9.671,000 (wgt'ed) examples reached here.  /* #neg=6.610 #pos=3.061 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( wasbornin(B, E), wasbornin(C, E) )
%   | then return 0.3646725915103139;  // std dev = 0,240, 52,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | else if ( wasbornin(B, F), diedin(A, F) )
%   | | then return 0.4982247392536464;  // std dev = 0,149, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( wasbornin(B, G), wasbornin(A, G) )
%   | | | then return 0.5936484182683154;  // std dev = 1,137, 31,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.08889493814359645;  // std dev = 25,207, 2.737,000 (wgt'ed) examples reached here.  /* #neg=1.640 #pos=1.097 */
%   else if ( ismarriedto(B, H) )
%   | then return 0.03566917987649204;  // std dev = 0,428, 1.928,000 (wgt'ed) examples reached here.  /* #neg=1.440 #pos=488 */
%   | else if ( ismarriedto(A, I) )
%   | | then if ( wasbornin(B, J), wasbornin(A, K) )
%   | | | then return 0.17697080324477393;  // std dev = 8,832, 362,000 (wgt'ed) examples reached here.  /* #neg=207 #pos=155 */
%   | | | else return 0.04750000647980445;  // std dev = 30,348, 4.803,000 (wgt'ed) examples reached here.  /* #neg=3.550 #pos=1.253 */
%   | | else if ( actedin(B, L) )
%   | | | then return 0.01514404301090866;  // std dev = 6,369, 207,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=60 */
%   | | | else return 0.10427156374637533;  // std dev = 33,326, 4.830,000 (wgt'ed) examples reached here.  /* #neg=3.012 #pos=1.818 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, D) )
%   then if ( diedin(E, D), wasbornin(E, C) )
%   | then return 0.43403715867905945;  // std dev = 0,283, 316,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=288 */
%   | else return 0.016755045343883546;  // std dev = 0,439, 699,000 (wgt'ed) examples reached here.  /* #neg=492 #pos=207 */
%   else if ( wasbornin(B, F), diedin(G, F) )
%   | then if ( isaffiliatedto(A, H), isaffiliatedto(G, H) )
%   | | then if ( actedin(B, I) )
%   | | | then return -0.26927199580066113;  // std dev = 0,107, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.4718983041043984;  // std dev = 3,224, 56,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=42 */
%   | | else return 0.010434104536399173;  // std dev = 0,438, 2.236,000 (wgt'ed) examples reached here.  /* #neg=1.595 #pos=641 */
%   | else if ( wasbornin(A, J) )
%   | | then if ( created(B, K), isleaderof(L, J) )
%   | | | then return 0.3247596958009452;  // std dev = 3,812, 63,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=37 */
%   | | | else return 0.016563000420163298;  // std dev = 22,090, 2.486,000 (wgt'ed) examples reached here.  /* #neg=1.797 #pos=689 */
%   | | else if ( ismarriedto(B, M), ismarriedto(A, N) )
%   | | | then return 0.12368630213392373;  // std dev = 20,331, 1.698,000 (wgt'ed) examples reached here.  /* #neg=929 #pos=769 */
%   | | | else return 0.06361012903996914;  // std dev = 39,673, 7.440,000 (wgt'ed) examples reached here.  /* #neg=5.113 #pos=2.327 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( diedin(A, C), wasbornin(B, D) )
%   then if ( livesin(E, C), wasbornin(E, D) )
%   | then return 0.4562836193724288;  // std dev = 0,249, 181,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=174 */
%   | else return 0.033327020835293895;  // std dev = 0,430, 657,000 (wgt'ed) examples reached here.  /* #neg=432 #pos=225 */
%   else if ( diedin(A, F) )
%   | then if ( graduatedfrom(B, G), isaffiliatedto(A, H) )
%   | | then return 0.5281565730724727;  // std dev = 0,359, 22,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   | | else if ( diedin(B, I), hascapital(J, F) )
%   | | | then return 0.13035880606878583;  // std dev = 5,210, 117,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=50 */
%   | | | else return -0.0073502007713778725;  // std dev = 18,808, 1.907,000 (wgt'ed) examples reached here.  /* #neg=1.411 #pos=496 */
%   | else if ( wasbornin(B, K), diedin(L, K) )
%   | | then if ( wasbornin(A, K) )
%   | | | then return 0.4199255684260831;  // std dev = 1,967, 113,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | | | else return -1.246906210000151E-4;  // std dev = 21,041, 2.348,000 (wgt'ed) examples reached here.  /* #neg=1.685 #pos=663 */
%   | | else if ( created(B, M), actedin(A, N) )
%   | | | then return 0.3407450078567814;  // std dev = 2,889, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | | | else return 0.05961605413275392;  // std dev = 45,761, 9.623,000 (wgt'ed) examples reached here.  /* #neg=6.380 #pos=3.243 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( diedin(A, C), diedin(B, C) )
%   then return 0.4872283055607382;  // std dev = 0,194, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
%   else if ( ismarriedto(A, D), iscitizenof(B, E) )
%   | then if ( iscitizenof(A, E) )
%   | | then if ( wasbornin(B, F), livesin(G, F) )
%   | | | then return 0.509077722902374;  // std dev = 0,844, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7512276273240218;  // std dev = 0,249, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( created(B, H), haswonprize(D, I) )
%   | | | then return 0.4319864389317804;  // std dev = 1,180, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.10704636479000473;  // std dev = 6,031, 326,000 (wgt'ed) examples reached here.  /* #neg=281 #pos=45 */
%   | else if ( ismarriedto(B, J), created(A, K) )
%   | | then if ( actedin(J, L), directed(M, K) )
%   | | | then return 0.502495428168676;  // std dev = 1,314, 16,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return -0.07835356345273006;  // std dev = 6,978, 310,000 (wgt'ed) examples reached here.  /* #neg=238 #pos=72 */
%   | | else if ( diedin(A, N), livesin(P, N) )
%   | | | then return 0.020117800268064343;  // std dev = 19,612, 2.067,000 (wgt'ed) examples reached here.  /* #neg=1.407 #pos=660 */
%   | | | else return 0.04561427290048094;  // std dev = 50,897, 12.183,000 (wgt'ed) examples reached here.  /* #neg=8.069 #pos=4.114 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( diedin(A, C), diedin(B, C) )
%   then return 0.38443629559070475;  // std dev = 0,172, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
%   else if ( wasbornin(A, D), wasbornin(B, E) )
%   | then if ( diedin(F, D), wasbornin(F, E) )
%   | | then if ( hascapital(G, E), dealswith(H, G) )
%   | | | then return 0.15287511057434092;  // std dev = 3,029, 74,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=58 */
%   | | | else return 0.32399746509204486;  // std dev = 3,480, 173,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=157 */
%   | | else if ( hascapital(I, E), livesin(J, D) )
%   | | | then return -0.0973203361429324;  // std dev = 5,084, 195,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=46 */
%   | | | else return 0.053818492048863964;  // std dev = 10,183, 549,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=210 */
%   | else if ( wasbornin(B, K), diedin(A, K) )
%   | | then if ( ismarriedto(B, L), ismarriedto(A, M) )
%   | | | then return 0.3153318221490146;  // std dev = 0,687, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.6164026637415224;  // std dev = 0,690, 55,000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( wasbornin(B, N), diedin(P, N) )
%   | | | then return -0.018834863812548768;  // std dev = 20,123, 2.197,000 (wgt'ed) examples reached here.  /* #neg=1.615 #pos=582 */
%   | | | else return 0.03155477786725597;  // std dev = 49,761, 11.661,000 (wgt'ed) examples reached here.  /* #neg=7.865 #pos=3.796 */


Results
   AUC ROC   = 0.635084
   AUC PR    = 0.514721
   CLL	      = -0.604562
   Precision = 0.934712 at threshold = 0.5
   Recall    = 0.0859
   F1        = 0.15734


Total learning time: 939.056 seconds
Total inference time: 70.525 seconds
AUC ROC: 0.635084


Dataset: 24_cora_yago2s, Fold: 2, Type: scratch, Time: 08:11:42
{'AUC ROC': 0.635084, 'AUC PR': 0.514721, 'F1': 0.15734, 'Learning time': 939.056, 'Inference time': 70.525, 'CLL': -0.604562, 'Recall': 0.0859, 'Precision': [0.934712, 0.5]}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 23.565120697021484
   Generating paths time   = 2.816847085952759
   Generating mappings time   = 114.57155132293701
   Possible mappings   = 441488
   Finding best mapping   = 177.0483045578003
   Total time   = 318.0018312931061


Best mapping found: ['venue(A,B) -> ismarriedto(A,B)', 'samevenue(A,B) -> haschild(A,B)', 'samebib(A,B) -> influences(A,B)', 'haswordauthor(A,B) -> actedin(B,A)', 'author(A,B) -> created(A,B)', 'haswordvenue(A,B) -> ismarriedto(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
1;false;ismarriedto(A, D), actedin(D, E).;true;false
1;false,true;actedin(F, E), ismarriedto(B, F).;false;false
2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
2;false;ismarriedto(B, D), actedin(D, E).;true;false
2;false,true,true;influences(F, G), ismarriedto(G, B).;false;false
2;false,true;created(F, E), ismarriedto(F, A).;true;true
2;false,true,false;actedin(H, E), ismarriedto(A, H).;false;false
3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
3;true,false;ismarriedto(A, G), actedin(G, H).;true;false
3;true;ismarriedto(B, D), actedin(D, E).;true;true
3;true,true;ismarriedto(A, D).;false;true
3;true,true,false;created(F, E), ismarriedto(F, B).;false;false
3;false;ismarriedto(A, J), actedin(J, K).;true;false
3;false,true;created(L, K), ismarriedto(L, B).;false;false
3;true,false,true;created(I, H), ismarriedto(I, A).;false;false
4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
4;true,false;ismarriedto(A, H), actedin(H, I).;true;false
4;true;ismarriedto(B, D), actedin(D, E).;true;true
4;true,true;actedin(C, F).;false;true
4;true,true,false;created(G, E), ismarriedto(G, A).;false;false
4;false;ismarriedto(A, K), actedin(K, L).;false;true
4;false,false;ismarriedto(B, M), actedin(M, N).;false;false
4;true,false,true;created(J, I), ismarriedto(J, A).;false;false
5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
6;true,false;ismarriedto(B, I), actedin(I, J).;true;false
6;true,false,true;created(K, J), ismarriedto(K, B).;false;false
6;true;ismarriedto(A, D), actedin(D, E).;true;true
6;true,true;created(F, E), ismarriedto(F, B).;true;true
6;true,true,false;created(H, E), ismarriedto(H, A).;false;false
6;false;ismarriedto(B, L), actedin(L, M).;false;false
6;true,true,true;influences(F, G), ismarriedto(G, A).;false;false
7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
8;false;ismarriedto(B, H), actedin(H, I).;true;false
8;false,true,true;influences(J, K), ismarriedto(K, B).;false;false
8;true;ismarriedto(A, D), actedin(D, E).;true;false
8;true,true;ismarriedto(B, D).;true;true
8;true,true,false;created(G, E), ismarriedto(G, B).;false;false
8;false,true;created(J, I), ismarriedto(J, A).;true;false
8;true,true,true;created(F, E), ismarriedto(F, A).;false;false
9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.1909039894799702;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(B, F) )
%   | | then return 0.8332858415443305;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.1681377777630041;  // std dev = 9,888, 439,000 (wgt'ed) examples reached here.  /* #neg=292 #pos=147 */
%   | else return 0.16593174791670479;  // std dev = 56,827, 14.547,000 (wgt'ed) examples reached here.  /* #neg=9.708 #pos=4.839 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( created(F, E), ismarriedto(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( actedin(G, E), ismarriedto(A, G) )
%   | | | then return 0.6847764076923387;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.12556819634122057;  // std dev = 7,206, 240,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=76 */
%   | else return 0.1419063676173573;  // std dev = 57,229, 14.746,000 (wgt'ed) examples reached here.  /* #neg=9.836 #pos=4.910 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(B, D), actedin(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, F), actedin(F, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, H), actedin(H, I) )
%   | then if ( created(J, I), ismarriedto(J, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.12162813717575113;  // std dev = 9,901, 440,000 (wgt'ed) examples reached here.  /* #neg=292 #pos=148 */
%   | else return 0.11873199542475764;  // std dev = 56,826, 14.547,000 (wgt'ed) examples reached here.  /* #neg=9.708 #pos=4.839 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(B, D), actedin(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, F), actedin(F, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, H), actedin(H, I) )
%   | then return 0.10042912108367454;  // std dev = 9,901, 440,000 (wgt'ed) examples reached here.  /* #neg=292 #pos=148 */
%   | else if ( ismarriedto(B, J), actedin(J, K) )
%   | | then return 0.006417884476085591;  // std dev = 6,172, 210,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=50 */
%   | | else return 0.09943249257136175;  // std dev = 56,474, 14.337,000 (wgt'ed) examples reached here.  /* #neg=9.548 #pos=4.789 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.08006932278576487;  // std dev = 57,677, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(B, F), actedin(F, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(B, H), actedin(H, I) )
%   | then return 0.06845346348188869;  // std dev = 7,174, 241,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=77 */
%   | else return 0.06459112845511467;  // std dev = 57,229, 14.746,000 (wgt'ed) examples reached here.  /* #neg=9.836 #pos=4.910 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.051779504468396804;  // std dev = 57,677, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(B, F), actedin(F, G) )
%   | then if ( created(H, G), ismarriedto(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.045231201077901094;  // std dev = 7,171, 241,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=77 */
%   | else return 0.04113573180417139;  // std dev = 57,229, 14.746,000 (wgt'ed) examples reached here.  /* #neg=9.836 #pos=4.910 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.032619906609955195;  // std dev = 57,676, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */


Results
   AUC ROC   = 0.498181
   AUC PR    = 0.335008
   CLL	      = -0.637003
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0033
   F1        = 0.006578


Total learning time: 312.48199999999997 seconds
Total inference time: 96.84899999999999 seconds
AUC ROC: 0.498181


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.685, 10000, 4987], 'true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false': 'ismarriedto(A, D), actedin(D, E)', 'false,true': 'actedin(F, E), ismarriedto(B, F)'}, {'false,false': [56.827, 9708, 4839], 'true': [4.21e-08, 0, 13], 'false,true,true': [0.0, 0, 1], 'false,true,false': [9.888, 292, 147]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false': 'ismarriedto(B, D), actedin(D, E)', 'false,true,false': 'actedin(G, E), ismarriedto(A, G)', 'false,true': 'created(F, E), ismarriedto(F, A)'}, {'false,false': [57.229, 9836, 4910], 'false,true,false,false': [7.206, 164, 76], 'true': [0.0, 0, 13], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 1]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,false': 'ismarriedto(A, F), actedin(F, G)', 'false': 'ismarriedto(A, H), actedin(H, I)', 'true': 'ismarriedto(B, D), actedin(D, E)', 'false,true': 'created(J, I), ismarriedto(J, B)'}, {'true,false,true': [0.0, 0, 0], 'true,false,false': [4.21e-08, 0, 13], 'false,true,false': [9.901, 292, 148], 'true,true': [0.0, 0, 0], 'false,false': [56.826, 9708, 4839], 'false,true,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,false': 'ismarriedto(A, F), actedin(F, G)', 'false': 'ismarriedto(A, H), actedin(H, I)', 'true': 'ismarriedto(B, D), actedin(D, E)', 'false,false': 'ismarriedto(B, J), actedin(J, K)'}, {'false,true': [9.901, 292, 148], 'true,false,false': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false,false,true': [6.172, 160, 50], 'false,false,false': [56.474, 9548, 4789]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.677, 10000, 4987], 'true': [2.11e-08, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,false': 'ismarriedto(B, F), actedin(F, G)', 'false': 'ismarriedto(B, H), actedin(H, I)', 'true': 'ismarriedto(A, D), actedin(D, E)'}, {'false,true': [7.174, 164, 77], 'false,false': [57.229, 9836, 4910], 'true,false,false': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.677, 10000, 4987], 'true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false': 'ismarriedto(B, F), actedin(F, G)', 'true': 'ismarriedto(A, D), actedin(D, E)', 'false,true': 'created(H, G), ismarriedto(H, A)'}, {'true,false': [0.0, 0, 13], 'false,false': [57.229, 9836, 4910], 'true,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.171, 164, 77]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [57.676, 10000, 4987], 'true': [0.0, 0, 13]}]]
[{'': [-2.7328566760003855e-16, 0.22202912816467227]}, {'': [1.3664283380001927e-16, 0.22202912816466822], 'false': [0.22322314049587333, 0.22199260734605059], 'false,true': [0.0, 0.22272611702928624]}, {'': [-2.7328566760003855e-16, 0.22201906177109587], 'false': [0.21673648812618235, 0.22210223724504427], 'false,true,false': [0.0, 0.2163419890937516], 'false,true': [nan, 0.21673648812618243]}, {'': [1.3664283380001927e-16, 0.2220089808372259], 'false': [0.22278548096126535, 0.22198524795315838], 'true,false': [nan, 1.3664283380001927e-16], 'true': [nan, 1.3664283380001927e-16], 'false,true': [nan, 0.22278548096126516]}, {'': [-5.124106267500723e-17, 0.2220083394868002], 'false': [0.22278276732242955, 0.2219847548612351], 'true,false': [nan, -5.124106267500723e-17], 'true': [nan, -5.124106267500723e-17], 'false,false': [0.181405895691609, 0.2224542343846585]}, {'': [3.416070845000482e-17, 0.2219682185245053]}, {'': [-3.416070845000482e-17, 0.2219665375472135], 'false': [0.21353854354215507, 0.22210403986776045], 'true,false': [nan, -3.416070845000482e-17], 'true': [nan, -3.416070845000482e-17]}, {'': [0.0, 0.22196506834204688]}, {'': [-1.2810265668751807e-17, 0.22196407244029034], 'false': [0.21337524901646468, 0.22210417342942973], 'true': [nan, -1.2810265668751807e-17], 'false,true': [nan, 0.21337524901646454]}, {'': [0.0, 0.22196312549108993]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;false;ismarriedto(A, D), actedin(D, E).;true;true', '1;false,true;actedin(F, E), ismarriedto(B, F).;true;true', '2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '2;false;ismarriedto(B, D), actedin(D, E).;true;true', '2;false,true;actedin(G, E), ismarriedto(A, G).;true;true', '3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( actedin(A, D), actedin(B, E) )
%   | then if ( edited(F, D), wasbornin(F, G) )
%   | | then if ( directed(H, E), wrotemusicfor(I, D) )
%   | | | then return 0.6816783468642181;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( directed(J, D), influences(J, K) )
%   | | | then return 0.6081489350995123;  // std dev = 2,121, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | | else return 0.7812258581764358;  // std dev = 2,353, 78,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=72 */
%   | else if ( iscitizenof(B, L), iscitizenof(A, L) )
%   | | then if ( graduatedfrom(A, M), wasbornin(B, N) )
%   | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.8303711573217349;  // std dev = 1,394, 72,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else if ( ismarriedto(B, P), ismarriedto(A, Q) )
%   | | | then return 0.27557690417891695;  // std dev = 26,308, 2.846,000 (wgt'ed) examples reached here.  /* #neg=1.658 #pos=1.188 */
%   | | | else return 0.16144066807546828;  // std dev = 50,227, 11.939,000 (wgt'ed) examples reached here.  /* #neg=8.318 #pos=3.621 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(B, F) )
%   | | then return 0.7670719622367217;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( actedin(B, G), directed(H, G) )
%   | | | then return 0.6670870313515597;  // std dev = 2,677, 76,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=68 */
%   | | | else return 0.04934306766096212;  // std dev = 7,830, 363,000 (wgt'ed) examples reached here.  /* #neg=284 #pos=79 */
%   | else if ( ismarriedto(B, I), ismarriedto(A, J) )
%   | | then if ( ismarriedto(I, J) )
%   | | | then return 0.8211888807527711;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.2448013799949882;  // std dev = 25,863, 2.743,000 (wgt'ed) examples reached here.  /* #neg=1.580 #pos=1.163 */
%   | | else if ( diedin(A, K), diedin(B, L) )
%   | | | then return 0.2947363659866037;  // std dev = 9,437, 360,000 (wgt'ed) examples reached here.  /* #neg=195 #pos=165 */
%   | | | else return 0.14191210951754074;  // std dev = 49,100, 11.425,000 (wgt'ed) examples reached here.  /* #neg=7.933 #pos=3.492 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(A, F) )
%   | | then return 0.6046262796882593;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( actedin(A, G) )
%   | | | then return 0.5193503866084144;  // std dev = 2,377, 42,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=35 */
%   | | | else return 0.0030916972854136103;  // std dev = 5,671, 198,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=41 */
%   | else if ( diedin(A, H), wasbornin(B, H) )
%   | | then if ( graduatedfrom(A, I), ismarriedto(A, J) )
%   | | | then return 0.3936160981697393;  // std dev = 1,106, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7735833652640033;  // std dev = 2,013, 171,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=167 */
%   | | else if ( ismarriedto(B, K), ismarriedto(A, L) )
%   | | | then return 0.20025692663994418;  // std dev = 25,486, 2.696,000 (wgt'ed) examples reached here.  /* #neg=1.567 #pos=1.129 */
%   | | | else return 0.11923562246916163;  // std dev = 49,906, 11.874,000 (wgt'ed) examples reached here.  /* #neg=8.263 #pos=3.611 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(A, D), wasbornin(B, D) )
%   | then if ( diedin(A, E), diedin(F, D) )
%   | | then if ( ismarriedto(F, G), influences(F, G) )
%   | | | then return 0.33635650994809496;  // std dev = 0,723, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6605254904650606;  // std dev = 0,436, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.7726117892584897;  // std dev = 0,528, 113,000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | else if ( ismarriedto(A, H), ismarriedto(B, I) )
%   | | then if ( isaffiliatedto(A, J) )
%   | | | then return -0.02670830993075856;  // std dev = 5,238, 158,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=36 */
%   | | | else return 0.16859336302986364;  // std dev = 25,264, 2.679,000 (wgt'ed) examples reached here.  /* #neg=1.538 #pos=1.141 */
%   | | else if ( wasbornin(B, K), diedin(A, K) )
%   | | | then return 0.6207770430971326;  // std dev = 1,798, 95,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=91 */
%   | | | else return 0.09536752095600155;  // std dev = 49,662, 11.886,000 (wgt'ed) examples reached here.  /* #neg=8.335 #pos=3.551 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, D) )
%   | then if ( wasbornin(B, E), diedin(F, E) )
%   | | then if ( livesin(G, E) )
%   | | | then return 0.6884829317237046;  // std dev = 1,118, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.3936491573629119;  // std dev = 0,752, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( livesin(B, H), diedin(I, H) )
%   | | | then return 0.6161308563295006;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7661586214570193;  // std dev = 0,263, 55,000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( wasbornin(B, J), diedin(A, J) )
%   | | then if ( livesin(K, J), haswonprize(K, L) )
%   | | | then return 0.4054997313095259;  // std dev = 2,236, 64,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=57 */
%   | | | else return 0.5215617372125328;  // std dev = 1,075, 113,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=112 */
%   | | else if ( diedin(A, M), wasbornin(N, M) )
%   | | | then return 0.04260491715556135;  // std dev = 22,914, 2.676,000 (wgt'ed) examples reached here.  /* #neg=1.931 #pos=745 */
%   | | | else return 0.09735176327446;  // std dev = 50,867, 12.028,000 (wgt'ed) examples reached here.  /* #neg=8.058 #pos=3.970 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( diedin(A, D), wasbornin(B, D) )
%   | then if ( happenedin(E, D), graduatedfrom(A, F) )
%   | | then return 0.05897930545216823;  // std dev = 0,970, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( isleaderof(G, D), ismarriedto(A, H) )
%   | | | then return 0.4421768446604651;  // std dev = 0,323, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.35738773044241107;  // std dev = 2,187, 149,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=143 */
%   | else if ( wasbornin(B, I), diedin(J, I) )
%   | | then if ( wasbornin(A, K) )
%   | | | then return 0.12870203556209384;  // std dev = 13,270, 845,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=345 */
%   | | | else return 0.006565920036026635;  // std dev = 20,139, 2.203,000 (wgt'ed) examples reached here.  /* #neg=1.636 #pos=567 */
%   | | else if ( wasbornin(A, L) )
%   | | | then return 0.03599794342685976;  // std dev = 22,292, 2.521,000 (wgt'ed) examples reached here.  /* #neg=1.807 #pos=714 */
%   | | | else return 0.09700454972144987;  // std dev = 45,202, 9.237,000 (wgt'ed) examples reached here.  /* #neg=6.049 #pos=3.188 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( iscitizenof(B, D), iscitizenof(A, E) )
%   | then if ( ismarriedto(B, F), exports(D, G) )
%   | | then if ( ismarriedto(A, H), dealswith(I, D) )
%   | | | then return 0.5872862827661841;  // std dev = 0,116, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.02249600518923053;  // std dev = 1,061, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( exports(D, J), dealswith(K, E) )
%   | | | then return 0.4098269366680333;  // std dev = 2,744, 62,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=50 */
%   | | | else return 0.5828296835575439;  // std dev = 0,598, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( ismarriedto(A, L), ismarriedto(B, M) )
%   | | then if ( wasbornin(A, N), wasbornin(B, N) )
%   | | | then return 0.40900221820766675;  // std dev = 1,171, 51,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.08881374101664928;  // std dev = 25,647, 2.828,000 (wgt'ed) examples reached here.  /* #neg=1.658 #pos=1.170 */
%   | | else if ( ismarriedto(A, P), iscitizenof(B, Q) )
%   | | | then return -0.10617930976124065;  // std dev = 5,803, 284,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=40 */
%   | | | else return 0.05680510169392688;  // std dev = 49,140, 11.728,000 (wgt'ed) examples reached here.  /* #neg=8.080 #pos=3.648 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, D) )
%   | then if ( wasbornin(B, E), wasbornin(A, E) )
%   | | then if ( happenedin(F, E), participatedin(G, F) )
%   | | | then return 0.26742595092036653;  // std dev = 0,248, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4401426735526861;  // std dev = 0,071, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( iscitizenof(A, H), iscitizenof(B, H) )
%   | | | then return 0.3488874791867595;  // std dev = 0,063, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5515705108294102;  // std dev = 1,689, 87,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=84 */
%   | else if ( isaffiliatedto(B, I), ismarriedto(A, J) )
%   | | then if ( wasbornin(J, K), ismarriedto(B, L) )
%   | | | then return 0.05874475269970768;  // std dev = 2,070, 18,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | | else return -0.14955106496482168;  // std dev = 5,305, 294,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=36 */
%   | | else if ( isaffiliatedto(A, M) )
%   | | | then return -0.0023395063532969627;  // std dev = 14,129, 1.065,000 (wgt'ed) examples reached here.  /* #neg=781 #pos=284 */
%   | | | else return 0.055462349009454105;  // std dev = 53,476, 13.504,000 (wgt'ed) examples reached here.  /* #neg=8.947 #pos=4.557 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(B, D), holdspoliticalposition(A, E) )
%   | then if ( wasbornin(B, F), ismarriedto(A, G) )
%   | | then if ( isaffiliatedto(G, H), livesin(I, F) )
%   | | | then return -0.3063955242623456;  // std dev = 0,041, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.48394248621335534;  // std dev = 0,851, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( created(A, J), graduatedfrom(A, K) )
%   | | | then return 0.05465106231448586;  // std dev = 1,265, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.2305982787280298;  // std dev = 1,393, 51,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=3 */
%   | else if ( ismarriedto(A, L), isaffiliatedto(B, M) )
%   | | then if ( isaffiliatedto(L, M) )
%   | | | then return 0.4966652154994613;  // std dev = 1,283, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.11625548087321351;  // std dev = 5,446, 314,000 (wgt'ed) examples reached here.  /* #neg=268 #pos=46 */
%   | | else if ( wasbornin(B, N), diedin(A, N) )
%   | | | then return 0.2500601418608106;  // std dev = 2,404, 177,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=170 */
%   | | | else return 0.04097236911430331;  // std dev = 55,208, 14.395,000 (wgt'ed) examples reached here.  /* #neg=9.666 #pos=4.729 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( diedin(A, D), diedin(B, D) )
%   | then if ( wasbornin(B, D) )
%   | | then if ( haswonprize(B, E) )
%   | | | then return -0.09212915286277994;  // std dev = 0,737, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.21999105887603262;  // std dev = 0,254, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( hascapital(F, D), exports(F, G) )
%   | | | then return 0.4557217701522346;  // std dev = 1,213, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.6802855841207317;  // std dev = 0,333, 44,000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( ismarriedto(A, H) )
%   | | then if ( ismarriedto(B, I) )
%   | | | then return 0.05008751684109821;  // std dev = 25,509, 2.864,000 (wgt'ed) examples reached here.  /* #neg=1.660 #pos=1.204 */
%   | | | else return 7.564572299744279E-4;  // std dev = 31,098, 5.081,000 (wgt'ed) examples reached here.  /* #neg=3.661 #pos=1.420 */
%   | | else if ( ismarriedto(B, J) )
%   | | | then return -0.03192374563184424;  // std dev = 18,629, 1.933,000 (wgt'ed) examples reached here.  /* #neg=1.453 #pos=480 */
%   | | | else return 0.07036059846091053;  // std dev = 33,114, 5.023,000 (wgt'ed) examples reached here.  /* #neg=3.223 #pos=1.800 */


Results
   AUC ROC   = 0.650915
   AUC PR    = 0.544767
   CLL	      = -0.601357
   Precision = 0.959669 at threshold = 0.5
   Recall    = 0.0928
   F1        = 0.169235


Total learning time: 820.112 seconds
Total inference time: 77.825 seconds
AUC ROC: 0.650915


Refined model AUC ROC: 0.650915


Dataset: 24_cora_yago2s, Fold: 3, Type: transfer, Time: 08:39:12
{'AUC ROC': 0.650915, 'Parameter Learning results': {'AUC ROC': 0.498181, 'AUC PR': 0.335008, 'F1': 0.006578, 'Learning time': 312.48199999999997, 'Inference time': 96.84899999999999, 'CLL': -0.637003, 'Recall': 0.0033, 'Precision': [1.0, 0.5]}, 'AUC PR': 0.544767, 'F1': 0.169235, 'Learning time': 1132.594, 'Inference time': 77.825, 'CLL': -0.601357, 'Mapping results': {'Generating paths time': 2.816847085952759, 'Total time': 318.0018312931061, 'Possible mappings': 441488, 'Finding best mapping': 177.0483045578003, 'Generating mappings time': 114.57155132293701, 'Knowledge compiling time': 23.565120697021484}, 'Recall': 0.0928, 'Precision': [0.959669, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, D) )
%   then if ( directed(E, C), influences(E, F) )
%   | then return 0.5692600462106224;  // std dev = 0,453, 45,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=32 */
%   | else return 0.7706489350995127;  // std dev = 0,283, 80,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=73 */
%   else if ( ismarriedto(B, G), ismarriedto(A, H) )
%   | then if ( actedin(A, I) )
%   | | then return 0.016043671941617623;  // std dev = 0,365, 76,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | | else if ( actedin(G, J) )
%   | | | then return 0.03290621665291044;  // std dev = 3,854, 103,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=18 */
%   | | | else return 0.29634699913524815;  // std dev = 25,715, 2.686,000 (wgt'ed) examples reached here.  /* #neg=1.509 #pos=1.177 */
%   | else if ( ismarriedto(B, K) )
%   | | then if ( isaffiliatedto(A, L) )
%   | | | then return -0.006881739747113657;  // std dev = 4,362, 163,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=22 */
%   | | | else return 0.11482128035788325;  // std dev = 18,330, 1.761,000 (wgt'ed) examples reached here.  /* #neg=1.309 #pos=452 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.136497413961617;  // std dev = 31,887, 5.062,000 (wgt'ed) examples reached here.  /* #neg=3.653 #pos=1.409 */
%   | | | else return 0.21742441280651353;  // std dev = 34,007, 5.024,000 (wgt'ed) examples reached here.  /* #neg=3.219 #pos=1.805 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( actedin(D, E), actedin(B, F) )
%   | then return 0.6746958559160797;  // std dev = 0,300, 39,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=35 */
%   | else if ( ismarriedto(C, D) )
%   | | then return 0.8181186763803149;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( isaffiliatedto(A, G) )
%   | | | then return 0.05119094311058337;  // std dev = 5,278, 157,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=36 */
%   | | | else return 0.2482530130862723;  // std dev = 25,573, 2.686,000 (wgt'ed) examples reached here.  /* #neg=1.536 #pos=1.150 */
%   else if ( ismarriedto(B, H) )
%   | then if ( wasbornin(A, I), wasbornin(B, I) )
%   | | then return 0.838926566834879;  // std dev = 0,109, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.09011064368136232;  // std dev = 0,429, 1.927,000 (wgt'ed) examples reached here.  /* #neg=1.453 #pos=474 */
%   | else if ( iscitizenof(B, J), iscitizenof(A, K) )
%   | | then return 0.6859442548826065;  // std dev = 0,353, 82,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=70 */
%   | | else if ( ismarriedto(A, L) )
%   | | | then return 0.12050693788389513;  // std dev = 31,980, 5.086,000 (wgt'ed) examples reached here.  /* #neg=3.659 #pos=1.427 */
%   | | | else return 0.18490762460312088;  // std dev = 33,789, 4.991,000 (wgt'ed) examples reached here.  /* #neg=3.215 #pos=1.776 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( graduatedfrom(D, E) )
%   | then return 4.498294549518944E-4;  // std dev = 0,404, 115,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=24 */
%   | else if ( livesin(B, F) )
%   | | then return 0.04604927881789683;  // std dev = 0,439, 72,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=19 */
%   | | else if ( wasbornin(B, G), diedin(A, H) )
%   | | | then return 0.34459594689874695;  // std dev = 6,917, 197,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=111 */
%   | | | else return 0.21051250920614162;  // std dev = 24,622, 2.517,000 (wgt'ed) examples reached here.  /* #neg=1.431 #pos=1.086 */
%   else if ( ismarriedto(A, I), iscitizenof(B, J) )
%   | then return 0.004764079999884177;  // std dev = 0,380, 304,000 (wgt'ed) examples reached here.  /* #neg=247 #pos=57 */
%   | else if ( haswonprize(B, K), wasbornin(A, L) )
%   | | then if ( wrotemusicfor(B, M), diedin(N, L) )
%   | | | then return 0.8238997824153291;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.25322020255655714;  // std dev = 5,304, 117,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=52 */
%   | | else if ( isaffiliatedto(A, P), isaffiliatedto(B, P) )
%   | | | then return 0.7698163947013101;  // std dev = 1,720, 92,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=89 */
%   | | | else return 0.1218884403251229;  // std dev = 49,395, 11.582,000 (wgt'ed) examples reached here.  /* #neg=8.024 #pos=3.558 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( wasbornin(D, E), isleaderof(F, E) )
%   | then if ( wasbornin(B, E) )
%   | | then return 0.6683495641678902;  // std dev = 0,242, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.010152678414276951;  // std dev = 0,423, 168,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=45 */
%   | else if ( isaffiliatedto(A, G) )
%   | | then return 0.01819139216825222;  // std dev = 0,421, 135,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=31 */
%   | | else if ( wasbornin(B, H), wasbornin(D, H) )
%   | | | then return 0.6894939923898445;  // std dev = 1,003, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.1807198688690664;  // std dev = 24,892, 2.562,000 (wgt'ed) examples reached here.  /* #neg=1.432 #pos=1.130 */
%   else if ( diedin(A, I), wasbornin(B, I) )
%   | then return 0.7496097430737694;  // std dev = 0,179, 122,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else if ( diedin(A, J), wasbornin(K, J) )
%   | | then return 0.06017485213072168;  // std dev = 0,436, 2.107,000 (wgt'ed) examples reached here.  /* #neg=1.553 #pos=554 */
%   | | else if ( isaffiliatedto(B, L), isaffiliatedto(A, M) )
%   | | | then return 0.516474898071296;  // std dev = 3,886, 117,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=95 */
%   | | | else return 0.10232561210247616;  // std dev = 45,261, 9.753,000 (wgt'ed) examples reached here.  /* #neg=6.760 #pos=2.993 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( iscitizenof(A, E), exports(E, F) )
%   | then return -0.11191923107028033;  // std dev = 0,346, 53,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
%   | else if ( diedin(D, G), diedin(C, G) )
%   | | then return 0.6942542687956298;  // std dev = 0,147, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( wasbornin(D, H), wasbornin(A, H) )
%   | | | then return 0.7031680715321582;  // std dev = 0,172, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.13228978752271703;  // std dev = 25,753, 2.809,000 (wgt'ed) examples reached here.  /* #neg=1.616 #pos=1.193 */
%   else if ( wasbornin(B, I), wasbornin(A, J) )
%   | then if ( diedin(A, I) )
%   | | then return 0.6048574732021925;  // std dev = 0,142, 58,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else if ( diedin(B, K), isleaderof(L, J) )
%   | | | then return -0.11909480477205747;  // std dev = 2,004, 46,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=5 */
%   | | | else return 0.17233744176113439;  // std dev = 12,151, 655,000 (wgt'ed) examples reached here.  /* #neg=389 #pos=266 */
%   | else if ( wasbornin(B, M) )
%   | | then return 0.035408683782733125;  // std dev = 0,428, 1.954,000 (wgt'ed) examples reached here.  /* #neg=1.443 #pos=511 */
%   | | else return 0.09009024819871625;  // std dev = 0,459, 9.386,000 (wgt'ed) examples reached here.  /* #neg=6.465 #pos=2.921 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then return 0.632204167341661;  // std dev = 0,135, 169,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   else if ( wasbornin(A, D), diedin(E, D) )
%   | then if ( ispoliticianof(E, F) )
%   | | then if ( graduatedfrom(B, G), wasbornin(E, H) )
%   | | | then return 0.3576600709821796;  // std dev = 2,717, 36,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=24 */
%   | | | else return 0.0568186614045363;  // std dev = 12,689, 787,000 (wgt'ed) examples reached here.  /* #neg=546 #pos=241 */
%   | | else if ( haswonprize(B, I), wasbornin(E, J) )
%   | | | then return 0.19202233734430524;  // std dev = 4,977, 109,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=54 */
%   | | | else return 0.014132953760412969;  // std dev = 18,999, 1.941,000 (wgt'ed) examples reached here.  /* #neg=1.413 #pos=528 */
%   | else if ( wasbornin(B, K) )
%   | | then if ( diedin(A, L), diedin(M, K) )
%   | | | then return 0.1371620927765716;  // std dev = 9,586, 442,000 (wgt'ed) examples reached here.  /* #neg=259 #pos=183 */
%   | | | else return 0.018327281736786022;  // std dev = 19,965, 2.130,000 (wgt'ed) examples reached here.  /* #neg=1.561 #pos=569 */
%   | | else if ( ismarriedto(A, N), wasbornin(N, P) )
%   | | | then return 0.03607720670557834;  // std dev = 13,920, 985,000 (wgt'ed) examples reached here.  /* #neg=698 #pos=287 */
%   | | | else return 0.0987294778348883;  // std dev = 43,144, 8.401,000 (wgt'ed) examples reached here.  /* #neg=5.455 #pos=2.946 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), isaffiliatedto(B, D) )
%   then if ( isaffiliatedto(C, D) )
%   | then return 0.6195140233644612;  // std dev = 0,193, 34,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | else if ( isaffiliatedto(A, E) )
%   | | then return 0.2689870503738501;  // std dev = 0,436, 41,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=26 */
%   | | else return -0.17488604809120004;  // std dev = 0,255, 275,000 (wgt'ed) examples reached here.  /* #neg=254 #pos=21 */
%   else if ( iscitizenof(B, F), ismarriedto(A, G) )
%   | then if ( iscitizenof(A, F) )
%   | | then return 0.6716296228832167;  // std dev = 0,183, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( graduatedfrom(A, H), wasbornin(A, I) )
%   | | | then return 0.5017426784616178;  // std dev = 1,680, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return -0.1005596230951514;  // std dev = 5,449, 269,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=35 */
%   | else if ( diedin(A, J), wasbornin(B, J) )
%   | | then return 0.48180963219491746;  // std dev = 0,216, 177,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=170 */
%   | | else if ( wasbornin(A, K), diedin(A, K) )
%   | | | then return -0.06706945468051002;  // std dev = 6,095, 253,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=48 */
%   | | | else return 0.06485842926610831;  // std dev = 54,438, 13.918,000 (wgt'ed) examples reached here.  /* #neg=9.280 #pos=4.638 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( actedin(A, C), diedin(B, D) )
%   then return -0.18208298273815468;  // std dev = 0,233, 58,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=5 */
%   else if ( ismarriedto(A, E), ismarriedto(B, F) )
%   | then if ( graduatedfrom(E, G) )
%   | | then if ( graduatedfrom(B, H), worksat(I, G) )
%   | | | then return 0.6231618231533277;  // std dev = 0,316, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1113980084416218;  // std dev = 3,665, 107,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=17 */
%   | | else if ( diedin(A, J), wasbornin(B, J) )
%   | | | then return 0.3896935010277778;  // std dev = 1,766, 56,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | | else return 0.07463539485221557;  // std dev = 25,058, 2.709,000 (wgt'ed) examples reached here.  /* #neg=1.550 #pos=1.159 */
%   | else if ( ismarriedto(B, K), iscitizenof(A, L) )
%   | | then if ( wasbornin(K, M), wasbornin(A, N) )
%   | | | then return 0.5375810140837443;  // std dev = 0,838, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16364833864431524;  // std dev = 2,647, 107,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=8 */
%   | | else if ( wasbornin(B, P), wasbornin(A, Q) )
%   | | | then return 0.10656001250308277;  // std dev = 11,702, 737,000 (wgt'ed) examples reached here.  /* #neg=412 #pos=325 */
%   | | | else return 0.043245132418150645;  // std dev = 47,931, 11.214,000 (wgt'ed) examples reached here.  /* #neg=7.792 #pos=3.422 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( iscitizenof(B, C), ismarriedto(A, D) )
%   then if ( iscitizenof(A, C) )
%   | then return 0.523221068917737;  // std dev = 0,081, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( graduatedfrom(A, E), exports(C, F) )
%   | | then if ( dealswith(C, G), imports(H, F) )
%   | | | then return -0.16186570547728726;  // std dev = 0,740, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.47724431677219215;  // std dev = 1,902, 23,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=18 */
%   | | else return -0.10739089692385184;  // std dev = 0,309, 307,000 (wgt'ed) examples reached here.  /* #neg=271 #pos=36 */
%   else if ( wasbornin(B, I), wasbornin(A, I) )
%   | then return 0.4108315266253712;  // std dev = 0,159, 165,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=164 */
%   | else if ( wasbornin(B, J), diedin(K, J) )
%   | | then if ( diedin(A, J) )
%   | | | then return 0.35655586801161865;  // std dev = 2,847, 136,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=128 */
%   | | | else return -0.010754060914722436;  // std dev = 22,889, 2.811,000 (wgt'ed) examples reached here.  /* #neg=2.043 #pos=768 */
%   | | else if ( ismarriedto(A, L), wasbornin(L, M) )
%   | | | then return -0.004297792189795413;  // std dev = 16,547, 1.441,000 (wgt'ed) examples reached here.  /* #neg=1.040 #pos=401 */
%   | | | else return 0.05269026569168764;  // std dev = 46,855, 10.087,000 (wgt'ed) examples reached here.  /* #neg=6.624 #pos=3.463 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, D) )
%   then if ( isaffiliatedto(A, C) )
%   | then return 0.4012680932151874;  // std dev = 0,198, 106,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( graduatedfrom(A, E), diedin(A, F) )
%   | | then return -0.18662065674546696;  // std dev = 0,338, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0.19559413438743886;  // std dev = 0,459, 59,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=36 */
%   else if ( isaffiliatedto(A, G) )
%   | then if ( ismarriedto(B, H) )
%   | | then return -0.13113933521536236;  // std dev = 0,310, 287,000 (wgt'ed) examples reached here.  /* #neg=253 #pos=34 */
%   | | else if ( iscitizenof(B, I), hascurrency(I, J) )
%   | | | then return 0.22424465384810344;  // std dev = 2,525, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | | | else return 0.004098545425718418;  // std dev = 11,853, 707,000 (wgt'ed) examples reached here.  /* #neg=499 #pos=208 */
%   | else if ( isaffiliatedto(B, K) )
%   | | then return -0.09977315345209915;  // std dev = 0,347, 577,000 (wgt'ed) examples reached here.  /* #neg=480 #pos=97 */
%   | | else if ( iscitizenof(B, L), ismarriedto(A, M) )
%   | | | then return -0.05580609772789618;  // std dev = 5,416, 274,000 (wgt'ed) examples reached here.  /* #neg=224 #pos=50 */
%   | | | else return 0.0401326559385686;  // std dev = 52,421, 12.953,000 (wgt'ed) examples reached here.  /* #neg=8.498 #pos=4.455 */


Results
   AUC ROC   = 0.659163
   AUC PR    = 0.545819
   CLL	      = -0.597868
   Precision = 0.959799 at threshold = 0.5
   Recall    = 0.0955
   F1        = 0.173715


Total learning time: 1149.359 seconds
Total inference time: 103.86699999999999 seconds
AUC ROC: 0.659163


Dataset: 24_cora_yago2s, Fold: 3, Type: scratch, Time: 09:00:09
{'AUC ROC': 0.659163, 'AUC PR': 0.545819, 'F1': 0.173715, 'Learning time': 1149.359, 'Inference time': 103.86699999999999, 'CLL': -0.597868, 'Recall': 0.0955, 'Precision': [0.959799, 0.5]}


