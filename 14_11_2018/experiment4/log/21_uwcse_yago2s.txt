Starting experiment #1 for 21_uwcse_yago2s

Start learning from source dataset

WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( publication(E, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(F, A), publication(G, B) )
%   | | then if ( publication(F, H), professor(H) )
%   | | | then return 0.10814893509951236;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.7152917922423694;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( publication(I, A) )
%   | | | then return 0.40360348055405776;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.5207995375091515;  // std dev = 4,307, 83,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=55 */
%   else return -0.14185106490048804;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( publication(E, B) )
%   | | | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7194734122109542;  // std dev = 8,43e-08, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(F, A), tempadvisedby(G, B) )
%   | | then if ( publication(F, H), professor(H) )
%   | | | then return 0.10795988563399776;  // std dev = 1,849, 18,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0.7473839334745774;  // std dev = 1,49e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(I, B), publication(J, I) )
%   | | | then return 0.2823136467154383;  // std dev = 1,414, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.43942234760573834;  // std dev = 4,547, 92,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=60 */
%   else return -0.12544463852839133;  // std dev = 4,71e-08, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(C, D) )
%   | | then return 0.6419486100244409;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(E, B), publication(F, E) )
%   | | | then return 0.4634958085858749;  // std dev = 0,875, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5553664367462846;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(G, A), publication(H, B) )
%   | | then if ( publication(G, I), professor(I) )
%   | | | then return 0.05894093911345646;  // std dev = 1,885, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.4820586659724341;  // std dev = 0,897, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tempadvisedby(J, B), publication(K, J) )
%   | | | then return 0.2304460493463698;  // std dev = 1,414, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.36857277660116633;  // std dev = 4,382, 86,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=57 */
%   else return -0.11231637819360628;  // std dev = 9,19e-08, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(D, B) )
%   | | then return 0.48547486813963053;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(E, B), publication(F, E) )
%   | | | then return 0.34890790888731044;  // std dev = 0,873, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.4175135841583098;  // std dev = 6,66e-08, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(G, A), publication(H, B) )
%   | | then if ( publication(G, I), professor(I) )
%   | | | then return 0.04970547145065392;  // std dev = 1,884, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return 0.3649291506287367;  // std dev = 0,895, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( publication(J, A), tempadvisedby(K, B) )
%   | | | then return 0.38168103152384064;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.27104738983427856;  // std dev = 4,460, 88,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=57 */
%   else return -0.10159632948783645;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), tempadvisedby(D, E) )
%   | | then return 0.3556922966249444;  // std dev = 0,040, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tempadvisedby(F, B), publication(G, F) )
%   | | | then return 0.26473456795431083;  // std dev = 0,875, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.32071184716014967;  // std dev = 2,11e-08, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tempadvisedby(H, B), publication(I, A) )
%   | | then if ( publication(J, B) )
%   | | | then return -0.007196247690414633;  // std dev = 1,210, 15,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.2980562621834583;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( publication(K, B) )
%   | | | then return 0.2226383164364507;  // std dev = 4,301, 83,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=54 */
%   | | | else return 0.14658079072406222;  // std dev = 2,017, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.09269127618926093;  // std dev = 3,65e-08, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( publication(E, B) )
%   | | | then return 0.1251645642783327;  // std dev = 0,838, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2984351606768068;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.254952534520909;  // std dev = 0,006, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(F, A) )
%   | | then if ( publication(F, G), professor(G) )
%   | | | then return 0.034344052112294604;  // std dev = 2,437, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | | else return 0.2819234282659407;  // std dev = 0,959, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tempadvisedby(H, B), publication(I, H) )
%   | | | then return 0.06776914279081248;  // std dev = 1,414, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.177421895337259;  // std dev = 4,039, 75,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=51 */
%   else return -0.08518475138839678;  // std dev = 6,50e-08, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( publication(E, B) )
%   | | | then return 0.09854876354531317;  // std dev = 0,840, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.23990584253510439;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.20960279593139777;  // std dev = 0,006, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(F, A), tempadvisedby(G, B) )
%   | | then if ( publication(F, H), tempadvisedby(H, I) )
%   | | | then return 0.2546410619010276;  // std dev = 0,812, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.01931428512087531;  // std dev = 1,406, 16,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else if ( publication(J, B) )
%   | | | then return 0.1296151702568774;  // std dev = 4,302, 83,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=54 */
%   | | | else return 0.07278817004803369;  // std dev = 1,989, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.0787767547310916;  // std dev = 6,99e-08, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( publication(E, B) )
%   | | | then return 0.0784932599815209;  // std dev = 0,842, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.19891305995439246;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1769830467706092;  // std dev = 0,005, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tempadvisedby(F, B), publication(G, A) )
%   | | then if ( publication(G, H), professor(H) )
%   | | | then return -0.011509456127507154;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0.31754513272925877;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(I, B), publication(J, I) )
%   | | | then return 0.01883377179334466;  // std dev = 1,414, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.09719420611405792;  // std dev = 4,523, 92,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=60 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(C, D) )
%   | | then return 0.23121014744772506;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(E, B), publication(F, E) )
%   | | | then return 0.08951962904312902;  // std dev = 0,836, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.15265791005749746;  // std dev = 0,004, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( projectmember(G, B), publication(H, A) )
%   | | then return 0.1690556168386175;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | | then return -0.015919728301396395;  // std dev = 1,319, 16,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.0691719452261158;  // std dev = 4,742, 100,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=64 */
%   else return -0.06842697784420265;  // std dev = 6,66e-08, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), tempadvisedby(D, E) )
%   | | then return 0.1770247233483133;  // std dev = 0,054, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tempadvisedby(F, B), publication(G, F) )
%   | | | then return 0.07583541599968484;  // std dev = 0,841, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.13407365931961351;  // std dev = 1,49e-08, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tempadvisedby(H, B), publication(I, H) )
%   | | then if ( publication(I, J), tempadvisedby(K, J) )
%   | | | then return 0.1139787830290874;  // std dev = 1,198, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.4113660433846868;  // std dev = 0,225, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( projectmember(L, B), publication(M, B) )
%   | | | then return 0.18150254525096374;  // std dev = 0,483, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.051924871931710165;  // std dev = 4,763, 108,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=66 */
%   else return -0.06419184008202626;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */


Predicates from source: ['advisedby(person,person).', 'tempadvisedby(person,person).', 'publication(title,person).', 'professor(person).', 'projectmember(project,person).', 'student(person).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 24.30964994430542
   Generating paths time   = 2.89337420463562
   Generating mappings time   = 8.244476079940796
   Possible mappings   = 10976
   Finding best mapping   = 2.8801801204681396
   Total time   = 38.32768750190735


Best mapping found: ['advisedby(A,B) -> haschild(B,A)', 'publication(A,B) -> ismarriedto(A,B)', 'projectmember(A,B) -> created(B,A)', 'tempadvisedby(A,B) -> ismarriedto(B,A)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(B, A) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
0;true,true;ismarriedto(E, B).;false;false
0;true,false,false;ismarriedto(I, A).;false;false
0;true,false,true;ismarriedto(F, H).;false;false
0;true;ismarriedto(B, D), ismarriedto(E, D).;true;true
0;true,false;ismarriedto(F, A), ismarriedto(G, B).;true;true
1;;haschild(B, A) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
1;true,true;ismarriedto(E, B).;false;false
1;true,false,false;ismarriedto(B, I), ismarriedto(J, I).;false;false
1;true,false,true;ismarriedto(F, H).;false;false
1;true;ismarriedto(B, D), ismarriedto(E, D).;true;true
1;true,false;ismarriedto(F, A), ismarriedto(B, G).;true;true
2;;haschild(B, A) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
2;true,false,false,false;ismarriedto(B, J), ismarriedto(K, J).;false;false
2;true,false,false,true;ismarriedto(G, I).;false;false
2;true,false,false;ismarriedto(G, A), ismarriedto(H, B).;true;true
2;true;ismarriedto(B, D), ismarriedto(C, D).;false;true
2;true,false;ismarriedto(B, E), ismarriedto(F, E).;false;true
3;;haschild(B, A) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
3;true,false,false,false;ismarriedto(J, A), ismarriedto(B, K).;false;false
3;true,false,false,true;ismarriedto(G, I).;false;false
3;true,false,false;ismarriedto(G, A), ismarriedto(H, B).;true;true
3;true;ismarriedto(C, D), ismarriedto(B, D).;false;true
3;true,false;ismarriedto(B, E), ismarriedto(F, E).;false;true
4;;haschild(B, A) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
4;true,false,false,false;ismarriedto(K, B).;false;false
4;true,false,false,true;ismarriedto(J, B).;false;false
4;true,false,false;ismarriedto(B, H), ismarriedto(I, A).;true;true
4;true;ismarriedto(C, D), ismarriedto(E, D).;false;true
4;true,false;ismarriedto(B, F), ismarriedto(G, F).;false;true
5;;haschild(B, A) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
5;true,true;ismarriedto(E, B).;false;false
5;true,false,false;ismarriedto(B, H), ismarriedto(I, H).;false;false
5;true,false,true;ismarriedto(F, G).;false;false
5;true;ismarriedto(B, D), ismarriedto(E, D).;true;true
5;true,false;ismarriedto(F, A).;true;true
6;;haschild(B, A) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
6;true,true;ismarriedto(E, B).;false;false
6;true,false,false;ismarriedto(J, B).;false;false
6;true,false,true;ismarriedto(F, H), ismarriedto(I, H).;false;false
6;true;ismarriedto(B, D), ismarriedto(E, D).;true;true
6;true,false;ismarriedto(F, A), ismarriedto(B, G).;true;true
7;;haschild(B, A) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
7;true,true;ismarriedto(E, B).;false;false
7;true,false,false;ismarriedto(B, I), ismarriedto(J, I).;false;false
7;true,false,true;ismarriedto(G, H).;false;false
7;true;ismarriedto(B, D), ismarriedto(E, D).;true;true
7;true,false;ismarriedto(B, F), ismarriedto(G, A).;true;true
8;;haschild(B, A) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
8;true,false,false,false;ismarriedto(I, A), ismarriedto(B, J).;false;false
8;true;ismarriedto(B, D), ismarriedto(C, D).;false;true
8;true,false,false;created(B, G), ismarriedto(H, A).;false;true
8;true,false;ismarriedto(B, E), ismarriedto(F, E).;false;true
9;;haschild(B, A) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
9;true,false,false,false;created(B, L), ismarriedto(M, B).;false;false
9;true,false,false,true;ismarriedto(I, J), ismarriedto(J, K).;false;false
9;true,false,false;ismarriedto(B, H), ismarriedto(I, H).;true;true
9;true;ismarriedto(C, D), ismarriedto(E, D).;false;true
9;true,false;ismarriedto(B, F), ismarriedto(G, F).;false;true


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( ismarriedto(A, D), ismarriedto(E, D) )
%   | then if ( ismarriedto(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.19081493443217312;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then if ( ismarriedto(A, D), ismarriedto(E, D) )
%   | then if ( ismarriedto(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16596421208577747;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( ismarriedto(A, D), ismarriedto(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(F, E) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.14161892292418435;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then if ( ismarriedto(C, D), ismarriedto(A, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(F, E) )
%   | | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1187704612161667;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( ismarriedto(C, D), ismarriedto(E, D) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09812252683922773;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( ismarriedto(A, D), ismarriedto(E, D) )
%   | then if ( ismarriedto(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.0800500715279117;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( ismarriedto(A, D), ismarriedto(E, D) )
%   | then if ( ismarriedto(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.0646395809615005;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( ismarriedto(A, D), ismarriedto(E, D) )
%   | then if ( ismarriedto(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.0517695532253045;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( ismarriedto(A, D), ismarriedto(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(F, E) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.0411948470005467;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( ismarriedto(C, D), ismarriedto(E, D) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.0326149730273606;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */


Results
   AUC ROC   = 0.501275
   AUC PR    = 0.338376
   CLL	      = -0.637271
   Precision = 0.962963 at threshold = 0.5
   Recall    = 0.0026
   F1        = 0.005186


Total learning time: 317.397 seconds
Total inference time: 61.898 seconds
AUC ROC: 0.501275


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true,true': 'ismarriedto(E, A)', 'true': 'ismarriedto(A, D), ismarriedto(E, D)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,true,false': [0.0, 0, 15], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, B), ismarriedto(C, A)', 'true,true': 'ismarriedto(E, A)', 'true': 'ismarriedto(A, D), ismarriedto(E, D)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,true,false': [5.16e-08, 0, 15], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'ismarriedto(A, D), ismarriedto(C, D)', 'true,false': 'ismarriedto(A, E), ismarriedto(F, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 15], 'false': [57.677, 10000, 4985], 'true,false,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, B), ismarriedto(C, A)', 'true': 'ismarriedto(C, D), ismarriedto(A, D)', 'true,false': 'ismarriedto(A, E), ismarriedto(F, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [4.71e-08, 0, 15], 'false': [57.677, 10000, 4985], 'true,false,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'ismarriedto(C, D), ismarriedto(E, D)'}, {'true,true': [0.0, 0, 15], 'false': [57.677, 10000, 4985], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true,true': 'ismarriedto(E, A)', 'true': 'ismarriedto(A, D), ismarriedto(E, D)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,true,false': [2.36e-08, 0, 15], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true,true': 'ismarriedto(E, A)', 'true': 'ismarriedto(A, D), ismarriedto(E, D)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,true,false': [0.0, 0, 15], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true,true': 'ismarriedto(E, A)', 'true': 'ismarriedto(A, D), ismarriedto(E, D)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,true,false': [0.0, 0, 15], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'ismarriedto(A, D), ismarriedto(C, D)', 'true,false': 'ismarriedto(A, E), ismarriedto(F, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 15], 'false': [57.677, 10000, 4985], 'true,false,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'ismarriedto(C, D), ismarriedto(E, D)'}, {'true,true': [0.0, 0, 15], 'false': [57.677, 10000, 4985], 'true,false': [0.0, 0, 0]}]]
[{'': [-2.3684757858670006e-16, 0.2219993322206317], 'true,true': [nan, -2.3684757858670006e-16], 'true': [-2.3684757858670006e-16, nan]}, {'': [1.7763568394002506e-16, 0.22199933222073653], 'true,true': [nan, 1.7763568394002506e-16], 'true': [1.7763568394002506e-16, nan]}, {'': [-2.3684757858670006e-16, 0.2219993322206783], 'true': [nan, -2.3684757858670006e-16], 'true,false': [-2.3684757858670006e-16, nan]}, {'': [1.4802973661668753e-16, 0.2219993322206579], 'true': [nan, 1.4802973661668753e-16], 'true,false': [1.4802973661668753e-16, nan]}, {'': [-1.4802973661668754e-17, 0.22199933222060855], 'true': [-1.4802973661668754e-17, nan]}, {'': [3.700743415417188e-17, 0.22199933222065418], 'true,true': [nan, 3.700743415417188e-17], 'true': [3.700743415417188e-17, nan]}, {'': [-2.960594732333751e-17, 0.22199933222069815], 'true,true': [nan, -2.960594732333751e-17], 'true': [-2.960594732333751e-17, nan]}, {'': [-7.401486830834377e-18, 0.22199933222062518], 'true,true': [nan, -7.401486830834377e-18], 'true': [-7.401486830834377e-18, nan]}, {'': [-2.2204460492503132e-17, 0.2219993322207338], 'true': [nan, -2.2204460492503132e-17], 'true,false': [-2.2204460492503132e-17, nan]}, {'': [0.0, 0.2219993322206716], 'true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '1;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;true', '2;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '3;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;true', '4;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '5;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '6;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '7;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '8;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '9;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( actedin(A, F), actedin(B, G) )
%   | | then if ( wrotemusicfor(H, G) )
%   | | | then return 0.8236661764788221;  // std dev = 0,983, 29,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( created(A, I) )
%   | | | then return 0.15083186192878184;  // std dev = 6,515, 205,000 (wgt'ed) examples reached here.  /* #neg=145 #pos=60 */
%   | | | else return 0.298376639084327;  // std dev = 25,482, 2.635,000 (wgt'ed) examples reached here.  /* #neg=1.475 #pos=1.160 */
%   | else if ( iscitizenof(A, J), iscitizenof(B, J) )
%   | | then if ( graduatedfrom(B, K), hascurrency(J, L) )
%   | | | then return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.8581489350995125;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( isaffiliatedto(A, M), isaffiliatedto(B, N) )
%   | | | then return 0.6359267128772876;  // std dev = 5,142, 153,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=119 */
%   | | | else return 0.15645801224260464;  // std dev = 49,882, 11.887,000 (wgt'ed) examples reached here.  /* #neg=8.341 #pos=3.546 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( isaffiliatedto(A, F), isaffiliatedto(B, F) )
%   | | then return 0.8218092547247793;  // std dev = 0,038, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( wasbornin(B, G), diedin(A, H) )
%   | | | then return 0.4052401348719505;  // std dev = 7,156, 214,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=126 */
%   | | | else return 0.23699675162815956;  // std dev = 25,285, 2.640,000 (wgt'ed) examples reached here.  /* #neg=1.535 #pos=1.105 */
%   | else if ( ismarriedto(A, I) )
%   | | then if ( created(I, J), actedin(B, K) )
%   | | | then return 0.49186247410971146;  // std dev = 2,426, 26,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | | else return 0.11495575070519533;  // std dev = 31,965, 5.123,000 (wgt'ed) examples reached here.  /* #neg=3.698 #pos=1.425 */
%   | | else if ( wasbornin(B, L), wasbornin(A, L) )
%   | | | then return 0.8016277884810139;  // std dev = 1,402, 74,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.15838622118366094;  // std dev = 38,625, 6.887,000 (wgt'ed) examples reached here.  /* #neg=4.668 #pos=2.219 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( isaffiliatedto(A, F) )
%   | | then if ( isaffiliatedto(B, F) )
%   | | | then return 0.6698112986819487;  // std dev = 0,058, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.05687691368562628;  // std dev = 4,191, 131,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=21 */
%   | | else if ( actedin(A, G), actedin(B, H) )
%   | | | then return 0.5918249162033591;  // std dev = 1,592, 34,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | | | else return 0.21759014737501006;  // std dev = 25,676, 2.689,000 (wgt'ed) examples reached here.  /* #neg=1.510 #pos=1.179 */
%   | else if ( ismarriedto(I, B) )
%   | | then if ( isaffiliatedto(A, J) )
%   | | | then return -0.06872625572677925;  // std dev = 3,841, 144,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=18 */
%   | | | else return 0.08792448761867241;  // std dev = 19,089, 1.846,000 (wgt'ed) examples reached here.  /* #neg=1.341 #pos=505 */
%   | | else if ( isaffiliatedto(A, K), isaffiliatedto(B, L) )
%   | | | then return 0.5427239144185688;  // std dev = 4,663, 145,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=118 */
%   | | | else return 0.12705187866086085;  // std dev = 45,973, 9.975,000 (wgt'ed) examples reached here.  /* #neg=6.883 #pos=3.092 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( wasbornin(A, D), wasbornin(B, D) )
%   | then if ( ismarriedto(A, E), diedin(F, D) )
%   | | then if ( ismarriedto(B, G), created(F, H) )
%   | | | then return 0.6640427034232242;  // std dev = 1,007, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.7754735580246874;  // std dev = 1,016, 67,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | else if ( participatedin(D, I), happenedin(I, D) )
%   | | | then return 0.3381413300270783;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.636178466870309;  // std dev = 1,111, 72,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else if ( ismarriedto(A, J), ismarriedto(B, K) )
%   | | then if ( wasbornin(B, L), diedin(J, M) )
%   | | | then return 0.32017719185277127;  // std dev = 7,132, 221,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=133 */
%   | | | else return 0.1531742963615093;  // std dev = 24,950, 2.614,000 (wgt'ed) examples reached here.  /* #neg=1.534 #pos=1.080 */
%   | | else if ( ismarriedto(A, N) )
%   | | | then return 0.07169962539500847;  // std dev = 31,540, 5.091,000 (wgt'ed) examples reached here.  /* #neg=3.706 #pos=1.385 */
%   | | | else return 0.11676818053986425;  // std dev = 38,503, 6.887,000 (wgt'ed) examples reached here.  /* #neg=4.668 #pos=2.219 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( isaffiliatedto(A, F) )
%   | | then if ( isaffiliatedto(B, F) )
%   | | | then return 0.44043939478227984;  // std dev = 0,236, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.07715785426044974;  // std dev = 4,182, 131,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=21 */
%   | | else if ( wasbornin(A, G), isleaderof(H, G) )
%   | | | then return -0.017116191299499223;  // std dev = 5,363, 151,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=44 */
%   | | | else return 0.1559282751930074;  // std dev = 24,990, 2.572,000 (wgt'ed) examples reached here.  /* #neg=1.406 #pos=1.166 */
%   | else if ( isaffiliatedto(B, I), isaffiliatedto(A, I) )
%   | | then if ( wasbornin(B, J), wasbornin(A, J) )
%   | | | then return 0.34494878086684017;  // std dev = 0,161, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5881390397718899;  // std dev = 1,052, 91,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=90 */
%   | | else if ( diedin(A, K), wasbornin(B, L) )
%   | | | then return 0.17256444419997571;  // std dev = 11,620, 605,000 (wgt'ed) examples reached here.  /* #neg=358 #pos=247 */
%   | | | else return 0.07764695172921038;  // std dev = 48,444, 11.407,000 (wgt'ed) examples reached here.  /* #neg=8.018 #pos=3.389 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( diedin(A, D), wasbornin(B, E) )
%   | then if ( wasbornin(F, D), diedin(F, E) )
%   | | then if ( isaffiliatedto(F, G), livesin(H, D) )
%   | | | then return 0.5985173847791994;  // std dev = 2,210, 108,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | | | else return 0.3769189486144896;  // std dev = 5,011, 142,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=102 */
%   | | else if ( wasbornin(A, E) )
%   | | | then return 0.5116093061775164;  // std dev = 0,467, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.020318423599052594;  // std dev = 10,657, 580,000 (wgt'ed) examples reached here.  /* #neg=403 #pos=177 */
%   | else if ( isaffiliatedto(B, I), isaffiliatedto(A, I) )
%   | | then if ( ismarriedto(B, J), ismarriedto(A, K) )
%   | | | then return 0.33260499495159507;  // std dev = 0,168, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.44553878817562304;  // std dev = 0,390, 73,000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | else if ( wasbornin(A, L), wasbornin(B, L) )
%   | | | then return 0.5234536858987581;  // std dev = 1,765, 89,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=86 */
%   | | | else return 0.0677816560330888;  // std dev = 54,356, 13.958,000 (wgt'ed) examples reached here.  /* #neg=9.550 #pos=4.408 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), iscitizenof(B, E) )
%   | then if ( iscitizenof(D, E) )
%   | | then if ( isaffiliatedto(B, F) )
%   | | | then return 0.5212063726373695;  // std dev = 0,416, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6852652933709868;  // std dev = 0,181, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( wasbornin(A, G), created(A, H) )
%   | | | then return 0.5102269653772076;  // std dev = 1,218, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.11416655964855461;  // std dev = 5,956, 321,000 (wgt'ed) examples reached here.  /* #neg=272 #pos=49 */
%   | else if ( actedin(B, I), haswonprize(A, J) )
%   | | then if ( actedin(A, K), wrotemusicfor(L, K) )
%   | | | then return 0.46300640500976886;  // std dev = 2,658, 47,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=38 */
%   | | | else return 0.019501389814905824;  // std dev = 2,722, 35,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | else if ( haswonprize(A, M), actedin(A, N) )
%   | | | then return -0.09731851194090538;  // std dev = 4,956, 180,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=29 */
%   | | | else return 0.06667196794973262;  // std dev = 55,135, 14.378,000 (wgt'ed) examples reached here.  /* #neg=9.541 #pos=4.837 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( actedin(B, D), directed(A, E) )
%   | then if ( haswonprize(A, F), created(G, D) )
%   | | then if ( graduatedfrom(G, H), actedin(A, E) )
%   | | | then return -0.43364331912045045;  // std dev = 0,237, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.4060273529709105;  // std dev = 1,199, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( wasbornin(B, I), actedin(J, E) )
%   | | | then return 0.35866418455668897;  // std dev = 1,521, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.7153510177168036;  // std dev = 0,223, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( ismarriedto(K, B), iscitizenof(A, L) )
%   | | then if ( actedin(K, M), happenedin(N, L) )
%   | | | then return 0.05164088716582298;  // std dev = 1,749, 16,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return -0.1483900717025418;  // std dev = 4,016, 163,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=23 */
%   | | else if ( actedin(B, P), actedin(A, Q) )
%   | | | then return 0.4630823158374937;  // std dev = 3,616, 104,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=89 */
%   | | | else return 0.04844160556519601;  // std dev = 55,332, 14.655,000 (wgt'ed) examples reached here.  /* #neg=9.825 #pos=4.830 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( diedin(A, D), diedin(B, D) )
%   | then if ( hascapital(E, D), iscitizenof(F, E) )
%   | | then if ( livesin(G, E), ismarriedto(G, H) )
%   | | | then return 0.2822066169427538;  // std dev = 0,651, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5016717440195273;  // std dev = 1,038, 27,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else if ( wasbornin(B, I) )
%   | | | then return 0.5550246605754706;  // std dev = 0,646, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.6864490283022413;  // std dev = 0,235, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( wasbornin(B, J) )
%   | | then if ( diedin(A, J) )
%   | | | then return 0.4992928924731751;  // std dev = 1,975, 145,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=144 */
%   | | | else return -0.01597501118298722;  // std dev = 24,412, 3.285,000 (wgt'ed) examples reached here.  /* #neg=2.319 #pos=966 */
%   | | else if ( wasbornin(A, K), diedin(L, K) )
%   | | | then return -0.018710652819779912;  // std dev = 20,338, 2.212,000 (wgt'ed) examples reached here.  /* #neg=1.629 #pos=583 */
%   | | | else return 0.06272612869225086;  // std dev = 45,037, 9.262,000 (wgt'ed) examples reached here.  /* #neg=6.049 #pos=3.213 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(D, B), wasbornin(A, E) )
%   | then if ( wasbornin(B, E) )
%   | | then if ( happenedin(F, E), hascapital(G, E) )
%   | | | then return 0.26414708688797905;  // std dev = 0,955, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.3434485715387861;  // std dev = 0,429, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( actedin(B, H), actedin(A, I) )
%   | | | then return 0.31718460543474986;  // std dev = 1,318, 24,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return -0.044830438929749764;  // std dev = 13,590, 1.013,000 (wgt'ed) examples reached here.  /* #neg=731 #pos=282 */
%   | else if ( wasbornin(B, J) )
%   | | then if ( diedin(A, K), wasbornin(L, K) )
%   | | | then return 0.09394266822782509;  // std dev = 11,191, 700,000 (wgt'ed) examples reached here.  /* #neg=365 #pos=335 */
%   | | | else return -0.018832388582247176;  // std dev = 20,946, 2.448,000 (wgt'ed) examples reached here.  /* #neg=1.775 #pos=673 */
%   | | else if ( diedin(A, M), wasbornin(N, M) )
%   | | | then return -0.00784749592981638;  // std dev = 18,364, 1.758,000 (wgt'ed) examples reached here.  /* #neg=1.263 #pos=495 */
%   | | | else return 0.05481623780237266;  // std dev = 44,388, 8.988,000 (wgt'ed) examples reached here.  /* #neg=5.863 #pos=3.125 */


Results
   AUC ROC   = 0.646678
   AUC PR    = 0.53062
   CLL	      = -0.603033
   Precision = 0.942564 at threshold = 0.5
   Recall    = 0.0919
   F1        = 0.167472


Total learning time: 771.423 seconds
Total inference time: 77.541 seconds
AUC ROC: 0.646678


Refined model AUC ROC: 0.646678


Dataset: 21_uwcse_yago2s, Fold: 1, Type: transfer, Time: 08:00:16
{'AUC ROC': 0.646678, 'Precision': [0.942564, 0.5], 'Mapping results': {'Generating mappings time': 8.244476079940796, 'Knowledge compiling time': 24.30964994430542, 'Finding best mapping': 2.8801801204681396, 'Possible mappings': 10976, 'Total time': 38.32768750190735, 'Generating paths time': 2.89337420463562}, 'Inference time': 77.541, 'CLL': -0.603033, 'AUC PR': 0.53062, 'Learning time': 1088.82, 'Parameter Learning results': {'AUC ROC': 0.501275, 'Precision': [0.962963, 0.5], 'Inference time': 61.898, 'CLL': -0.637271, 'AUC PR': 0.338376, 'Learning time': 317.397, 'Recall': 0.0026, 'F1': 0.005186}, 'Recall': 0.0919, 'F1': 0.167472}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( diedin(A, C), wasbornin(B, C) )
%   then if ( wasbornin(A, D), graduatedfrom(B, E) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.8581489350995121;  // std dev = 0,000, 172,000 (wgt'ed) examples reached here.  /* #pos=172 */
%   else if ( ismarriedto(B, F), ismarriedto(A, G) )
%   | then if ( diedin(A, H), diedin(B, H) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( actedin(A, I), actedin(B, J) )
%   | | | then return 0.7724346493852258;  // std dev = 1,656, 35,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | | else return 0.27415470294377564;  // std dev = 25,960, 2.774,000 (wgt'ed) examples reached here.  /* #neg=1.620 #pos=1.154 */
%   | else if ( ismarriedto(A, K) )
%   | | then if ( isaffiliatedto(A, L), isaffiliatedto(B, L) )
%   | | | then return 0.8581489350995121;  // std dev = 2,06e-07, 46,000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.12467050217509099;  // std dev = 31,432, 5.054,000 (wgt'ed) examples reached here.  /* #neg=3.707 #pos=1.347 */
%   | | else if ( ismarriedto(M, B) )
%   | | | then return 0.11511801771481395;  // std dev = 19,409, 1.973,000 (wgt'ed) examples reached here.  /* #neg=1.466 #pos=507 */
%   | | | else return 0.20739720815923898;  // std dev = 33,446, 4.922,000 (wgt'ed) examples reached here.  /* #neg=3.203 #pos=1.719 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( wasbornin(A, E), wasbornin(B, E) )
%   | then return 0.7581760409102032;  // std dev = 0,158, 40,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else if ( wasbornin(D, F), wasbornin(B, F) )
%   | | then return 0.7806036212516843;  // std dev = 0,147, 47,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else if ( wasbornin(A, G) )
%   | | | then return 0.1562747056934528;  // std dev = 11,942, 653,000 (wgt'ed) examples reached here.  /* #neg=431 #pos=222 */
%   | | | else return 0.26538865902945896;  // std dev = 22,939, 2.150,000 (wgt'ed) examples reached here.  /* #neg=1.190 #pos=960 */
%   else if ( isaffiliatedto(A, H), isaffiliatedto(B, H) )
%   | then return 0.7605057867677394;  // std dev = 0,109, 98,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=97 */
%   | else if ( actedin(A, I), actedin(B, J) )
%   | | then if ( directed(K, I), diedin(K, L) )
%   | | | then return 0.5830449970101352;  // std dev = 3,551, 68,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=51 */
%   | | | else return 0.7753375697585301;  // std dev = 1,368, 36,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.10947896838541091;  // std dev = 31,373, 5.051,000 (wgt'ed) examples reached here.  /* #neg=3.696 #pos=1.355 */
%   | | | else return 0.15389360832220278;  // std dev = 38,494, 6.857,000 (wgt'ed) examples reached here.  /* #neg=4.661 #pos=2.196 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( isaffiliatedto(A, E), isaffiliatedto(B, E) )
%   | then return 0.7458967172801105;  // std dev = 0,051, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( isaffiliatedto(A, F) )
%   | | then return -0.055710862090522645;  // std dev = 0,362, 131,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=21 */
%   | | else if ( diedin(C, G), diedin(A, G) )
%   | | | then return 0.7110689406920409;  // std dev = 0,469, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.21735406409560892;  // std dev = 25,461, 2.707,000 (wgt'ed) examples reached here.  /* #neg=1.513 #pos=1.194 */
%   else if ( diedin(A, H), diedin(B, I) )
%   | then if ( wasbornin(B, H) )
%   | | then return 0.6821078861558502;  // std dev = 0,222, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( isleaderof(J, H), wasbornin(J, H) )
%   | | | then return -0.026781091509888055;  // std dev = 2,197, 38,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | | else return 0.19258188469475387;  // std dev = 8,551, 315,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=118 */
%   | else if ( ismarriedto(A, K) )
%   | | then return 0.09856381586209904;  // std dev = 0,441, 4.977,000 (wgt'ed) examples reached here.  /* #neg=3.605 #pos=1.372 */
%   | | else return 0.13578390835703885;  // std dev = 0,465, 6.739,000 (wgt'ed) examples reached here.  /* #neg=4.543 #pos=2.196 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C), graduatedfrom(A, D) )
%   then if ( isaffiliatedto(A, C) )
%   | then return 0.5490232123902256;  // std dev = 0,151, 43,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return 0.29215038014558975;  // std dev = 0,488, 49,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=25 */
%   else if ( ismarriedto(B, E), ismarriedto(A, F) )
%   | then if ( wasbornin(F, G), wasbornin(B, H) )
%   | | then if ( diedin(F, H) )
%   | | | then return 0.6127393039746174;  // std dev = 0,547, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.21888917073965744;  // std dev = 7,146, 241,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=124 */
%   | | else if ( wasbornin(B, I) )
%   | | | then return 0.06836653921312895;  // std dev = 9,780, 468,000 (wgt'ed) examples reached here.  /* #neg=309 #pos=159 */
%   | | | else return 0.18351599418109324;  // std dev = 22,725, 2.133,000 (wgt'ed) examples reached here.  /* #neg=1.195 #pos=938 */
%   | else if ( iscitizenof(A, J), iscitizenof(B, J) )
%   | | then return 0.7255515654354152;  // std dev = 0,181, 70,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | | else if ( isaffiliatedto(B, K), isaffiliatedto(A, K) )
%   | | | then return 0.5925357502742896;  // std dev = 0,657, 57,000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.09593200323836525;  // std dev = 49,529, 11.905,000 (wgt'ed) examples reached here.  /* #neg=8.352 #pos=3.553 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( wasbornin(B, C), diedin(A, D) )
%   then if ( wasbornin(A, C) )
%   | then return 0.5914787787862076;  // std dev = 0,183, 78,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else if ( wasbornin(E, D), diedin(E, C) )
%   | | then return 0.39641160750035087;  // std dev = 0,351, 194,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=151 */
%   | | else if ( livesin(F, C), hascapital(G, D) )
%   | | | then return -0.06724961677715822;  // std dev = 4,839, 186,000 (wgt'ed) examples reached here.  /* #neg=155 #pos=31 */
%   | | | else return 0.11431152141759715;  // std dev = 9,017, 395,000 (wgt'ed) examples reached here.  /* #neg=248 #pos=147 */
%   else if ( livesin(B, H), livesin(A, I) )
%   | then return 0.5876718185291689;  // std dev = 0,339, 75,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=65 */
%   | else if ( wasbornin(B, J) )
%   | | then if ( wasbornin(A, K) )
%   | | | then return 0.17939780858767387;  // std dev = 11,696, 611,000 (wgt'ed) examples reached here.  /* #neg=349 #pos=262 */
%   | | | else return 0.007773969631888362;  // std dev = 18,721, 2.003,000 (wgt'ed) examples reached here.  /* #neg=1.519 #pos=484 */
%   | | else if ( wasbornin(A, L), diedin(M, L) )
%   | | | then return 0.035413365470338985;  // std dev = 20,476, 2.215,000 (wgt'ed) examples reached here.  /* #neg=1.629 #pos=586 */
%   | | | else return 0.11275709573686185;  // std dev = 45,129, 9.243,000 (wgt'ed) examples reached here.  /* #neg=6.046 #pos=3.197 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( wasbornin(A, C), participatedin(C, D) )
%   then if ( wasbornin(B, C) )
%   | then return 0.48586459468233467;  // std dev = 0,254, 34,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else return -0.018936687010490356;  // std dev = 0,402, 380,000 (wgt'ed) examples reached here.  /* #neg=292 #pos=88 */
%   else if ( wasbornin(A, E), wasbornin(B, F) )
%   | then if ( livesin(G, E), livesin(G, F) )
%   | | then return 0.5405131872844198;  // std dev = 0,280, 131,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=122 */
%   | | else if ( diedin(H, E), wasbornin(H, F) )
%   | | | then return 0.3230343343975803;  // std dev = 3,823, 76,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=49 */
%   | | | else return 0.052594884726311346;  // std dev = 11,335, 681,000 (wgt'ed) examples reached here.  /* #neg=452 #pos=229 */
%   | else if ( wasbornin(B, I) )
%   | | then if ( diedin(A, I) )
%   | | | then return 0.45427957773586425;  // std dev = 0,915, 84,000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | | | else return 0.018229900642964345;  // std dev = 20,701, 2.389,000 (wgt'ed) examples reached here.  /* #neg=1.766 #pos=623 */
%   | | else if ( diedin(A, J) )
%   | | | then return 0.03692699564252719;  // std dev = 19,750, 1.989,000 (wgt'ed) examples reached here.  /* #neg=1.416 #pos=573 */
%   | | | else return 0.0952091180740431;  // std dev = 45,068, 9.236,000 (wgt'ed) examples reached here.  /* #neg=6.036 #pos=3.200 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( livesin(B, C), graduatedfrom(A, D) )
%   then if ( graduatedfrom(B, E), owns(D, F) )
%   | then return 0.4885873660414266;  // std dev = 0,237, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( isleaderof(G, C), graduatedfrom(G, H) )
%   | | then if ( ismarriedto(A, I), iscitizenof(B, J) )
%   | | | then return -0.041106805245846305;  // std dev = 0,592, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.38705942586500053;  // std dev = 1,612, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else if ( livesin(A, K), wasbornin(L, K) )
%   | | | then return 0.5510424375181797;  // std dev = 0,223, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.06825610185516429;  // std dev = 1,717, 21,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   else if ( isaffiliatedto(A, M), ismarriedto(B, N) )
%   | then return -0.0873294903360569;  // std dev = 0,342, 291,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=57 */
%   | else if ( graduatedfrom(B, P) )
%   | | then return -0.005808660143946504;  // std dev = 0,408, 611,000 (wgt'ed) examples reached here.  /* #neg=444 #pos=167 */
%   | | else if ( ismarriedto(B, Q), ismarriedto(A, R) )
%   | | | then return 0.11301921304552197;  // std dev = 24,837, 2.656,000 (wgt'ed) examples reached here.  /* #neg=1.455 #pos=1.201 */
%   | | | else return 0.05804848882293558;  // std dev = 48,221, 11.381,000 (wgt'ed) examples reached here.  /* #neg=7.845 #pos=3.536 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then if ( diedin(A, C) )
%   | then return 0.24064426541564476;  // std dev = 0,150, 46,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return 0.5206438266515132;  // std dev = 0,191, 126,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=123 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( wasbornin(A, F), isleaderof(G, F) )
%   | | then if ( actedin(E, H), livesin(I, F) )
%   | | | then return 0.43024037573923707;  // std dev = 1,505, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.10539103653447028;  // std dev = 4,922, 159,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=34 */
%   | | else if ( livesin(B, J) )
%   | | | then return -0.09563251821878088;  // std dev = 3,569, 77,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=21 */
%   | | | else return 0.08972588110756195;  // std dev = 24,550, 2.599,000 (wgt'ed) examples reached here.  /* #neg=1.438 #pos=1.161 */
%   | else if ( wasbornin(B, K), diedin(A, K) )
%   | | then return 0.39142822737168537;  // std dev = 0,105, 84,000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | | else if ( wasbornin(B, L), happenedin(M, L) )
%   | | | then return -0.018122697121110257;  // std dev = 15,199, 1.387,000 (wgt'ed) examples reached here.  /* #neg=1.066 #pos=321 */
%   | | | else return 0.0435361534597297;  // std dev = 46,465, 10.507,000 (wgt'ed) examples reached here.  /* #neg=7.308 #pos=3.199 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( wasbornin(A, C), ismarriedto(B, D) )
%   then if ( wasbornin(B, E), diedin(A, E) )
%   | then return 0.2929183154883692;  // std dev = 0,145, 38,000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actedin(B, F), actedin(A, G) )
%   | | then return 0.44183567123572504;  // std dev = 0,283, 24,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( iscitizenof(B, H), created(A, I) )
%   | | | then return 0.4389423171982043;  // std dev = 1,171, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.03106013384196955;  // std dev = 13,476, 1.023,000 (wgt'ed) examples reached here.  /* #neg=730 #pos=293 */
%   else if ( isaffiliatedto(B, J), ismarriedto(A, K) )
%   | then return -0.06500705727927712;  // std dev = 0,329, 353,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=95 */
%   | else if ( livesin(B, L), ismarriedto(A, M) )
%   | | then if ( created(M, N), hascurrency(L, P) )
%   | | | then return 0.2731415919429819;  // std dev = 1,238, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.08535123228248098;  // std dev = 5,408, 224,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=44 */
%   | | else if ( ismarriedto(B, Q), ismarriedto(A, R) )
%   | | | then return 0.0809949618991614;  // std dev = 22,064, 2.062,000 (wgt'ed) examples reached here.  /* #neg=1.107 #pos=955 */
%   | | | else return 0.04254760364895427;  // std dev = 48,021, 11.261,000 (wgt'ed) examples reached here.  /* #neg=7.718 #pos=3.543 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, C) )
%   then if ( diedin(A, D), wasbornin(B, D) )
%   | then return 0.14651586978879405;  // std dev = 0,050, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( wasbornin(A, E), wasbornin(B, E) )
%   | | then return 0.2228610700903302;  // std dev = 0,058, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( ismarriedto(B, F) )
%   | | | then return 0.4757356656489155;  // std dev = 0,339, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.3554395339991894;  // std dev = 1,073, 83,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( wasbornin(B, G), diedin(A, G) )
%   | then return 0.269918118600446;  // std dev = 0,118, 169,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   | else if ( ismarriedto(A, H), isaffiliatedto(B, I) )
%   | | then if ( diedin(H, J), diedin(B, K) )
%   | | | then return 0.08621349908743371;  // std dev = 1,935, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return -0.15228186539016397;  // std dev = 4,804, 288,000 (wgt'ed) examples reached here.  /* #neg=260 #pos=28 */
%   | | else if ( diedin(A, L), livesin(M, L) )
%   | | | then return -0.006524877521685132;  // std dev = 19,927, 2.117,000 (wgt'ed) examples reached here.  /* #neg=1.522 #pos=595 */
%   | | | else return 0.03607430606266632;  // std dev = 50,971, 12.286,000 (wgt'ed) examples reached here.  /* #neg=8.204 #pos=4.082 */


Results
   AUC ROC   = 0.648112
   AUC PR    = 0.533902
   CLL	      = -0.600318
   Precision = 0.966527 at threshold = 0.5
   Recall    = 0.0924
   F1        = 0.168675


Total learning time: 659.995 seconds
Total inference time: 101.048 seconds
AUC ROC: 0.648112


Dataset: 21_uwcse_yago2s, Fold: 1, Type: scratch, Time: 08:13:01
{'AUC ROC': 0.648112, 'Precision': [0.966527, 0.5], 'Inference time': 101.048, 'CLL': -0.600318, 'AUC PR': 0.533902, 'Learning time': 659.995, 'Recall': 0.0924, 'F1': 0.168675}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 23.22149896621704
   Generating paths time   = 2.8995909690856934
   Generating mappings time   = 8.195737600326538
   Possible mappings   = 10976
   Finding best mapping   = 2.978119134902954
   Total time   = 37.29495429992676


Best mapping found: ['advisedby(A,B) -> haschild(A,B)', 'publication(A,B) -> ismarriedto(B,A)', 'projectmember(A,B) -> diedin(B,A)', 'tempadvisedby(A,B) -> ismarriedto(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;false
0;true,true;ismarriedto(B, E).;false;false
0;true,false,false;ismarriedto(A, I).;false;false
0;true,false,true;ismarriedto(H, F).;false;false
0;true;ismarriedto(D, B), ismarriedto(D, E).;true;true
0;true,false;ismarriedto(A, F), ismarriedto(B, G).;true;true
1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
1;true,true;ismarriedto(B, E).;false;false
1;true,false,false;ismarriedto(I, B), ismarriedto(I, J).;false;false
1;true,false,true;ismarriedto(H, F).;false;false
1;true;ismarriedto(D, B), ismarriedto(D, E).;true;true
1;true,false;ismarriedto(A, F), ismarriedto(G, B).;true;true
2;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;false
2;true,false,false,false;ismarriedto(J, B), ismarriedto(J, K).;false;false
2;true,false,false,true;ismarriedto(I, G).;false;false
2;true,false,false;ismarriedto(A, G), ismarriedto(B, H).;true;true
2;true;ismarriedto(D, B), ismarriedto(D, C).;false;true
2;true,false;ismarriedto(E, B), ismarriedto(E, F).;false;true
3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
3;true,false,false,false;ismarriedto(A, J), ismarriedto(K, B).;false;false
3;true,false,false,true;ismarriedto(I, G).;false;false
3;true,false,false;ismarriedto(A, G), ismarriedto(B, H).;true;true
3;true;ismarriedto(D, C), ismarriedto(D, B).;false;true
3;true,false;ismarriedto(E, B), ismarriedto(E, F).;false;true
4;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;false
4;true,false,false,false;ismarriedto(B, K).;false;false
4;true,false,false,true;ismarriedto(B, J).;false;false
4;true,false,false;ismarriedto(H, B), ismarriedto(A, I).;true;true
4;true;ismarriedto(D, C), ismarriedto(D, E).;false;true
4;true,false;ismarriedto(F, B), ismarriedto(F, G).;false;true
5;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;false
5;true,true;ismarriedto(B, E).;false;false
5;true,false,false;ismarriedto(H, B), ismarriedto(H, I).;false;false
5;true,false,true;ismarriedto(G, F).;false;false
5;true;ismarriedto(D, B), ismarriedto(D, E).;true;true
5;true,false;ismarriedto(A, F).;true;true
6;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;false
6;true,true;ismarriedto(B, E).;false;false
6;true,false,false;ismarriedto(B, J).;false;false
6;true,false,true;ismarriedto(H, F), ismarriedto(H, I).;false;false
6;true;ismarriedto(D, B), ismarriedto(D, E).;true;true
6;true,false;ismarriedto(A, F), ismarriedto(G, B).;true;true
7;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;false
7;true,true;ismarriedto(B, E).;false;false
7;true,false,false;ismarriedto(I, B), ismarriedto(I, J).;false;false
7;true,false,true;ismarriedto(H, G).;false;false
7;true;ismarriedto(D, B), ismarriedto(D, E).;true;true
7;true,false;ismarriedto(F, B), ismarriedto(A, G).;true;true
8;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;false
8;true,false,false,false;ismarriedto(A, I), ismarriedto(J, B).;false;false
8;true;ismarriedto(D, B), ismarriedto(D, C).;false;true
8;true,false,false;diedin(B, G), ismarriedto(A, H).;false;true
8;true,false;ismarriedto(E, B), ismarriedto(E, F).;false;true
9;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;false
9;true,false,false,false;diedin(B, L), ismarriedto(B, M).;false;false
9;true,false,false,true;ismarriedto(J, I), ismarriedto(K, J).;false;false
9;true,false,false;ismarriedto(H, B), ismarriedto(H, I).;true;true
9;true;ismarriedto(D, C), ismarriedto(D, E).;false;true
9;true,false;ismarriedto(F, B), ismarriedto(F, G).;false;true


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, E) )
%   | then if ( ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.7867203636709409;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.19092619387436366;  // std dev = 57,684, 14.986,000 (wgt'ed) examples reached here.  /* #neg=9.999 #pos=4.987 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, E) )
%   | then if ( ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.6622329172201352;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16606001564977738;  // std dev = 57,684, 14.986,000 (wgt'ed) examples reached here.  /* #neg=9.999 #pos=4.987 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, B), ismarriedto(E, F) )
%   | | then return 0.5154428111118985;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.14169817912688257;  // std dev = 57,684, 14.986,000 (wgt'ed) examples reached here.  /* #neg=9.999 #pos=4.987 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(D, C), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, B), ismarriedto(E, F) )
%   | | then return 0.3875647182006322;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1188335737898328;  // std dev = 57,684, 14.986,000 (wgt'ed) examples reached here.  /* #neg=9.999 #pos=4.987 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, C), ismarriedto(D, E) )
%   | then return 0.29398103437200096;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.0981710459849054;  // std dev = 57,684, 14.986,000 (wgt'ed) examples reached here.  /* #neg=9.999 #pos=4.987 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, E) )
%   | then if ( ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2288562690978686;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.08008618999240154;  // std dev = 57,684, 14.986,000 (wgt'ed) examples reached here.  /* #neg=9.999 #pos=4.987 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, E) )
%   | then if ( ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.18306311556471894;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.06466567251148103;  // std dev = 57,684, 14.986,000 (wgt'ed) examples reached here.  /* #neg=9.999 #pos=4.987 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, E) )
%   | then if ( ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.14991371797684416;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05178785371632604;  // std dev = 57,684, 14.986,000 (wgt'ed) examples reached here.  /* #neg=9.999 #pos=4.987 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, B), ismarriedto(E, F) )
%   | | then return 0.12515667139271322;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04120728677782982;  // std dev = 57,684, 14.986,000 (wgt'ed) examples reached here.  /* #neg=9.999 #pos=4.987 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, C), ismarriedto(D, E) )
%   | then return 0.10613658840585892;  // std dev = 0,964, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.0326231230782762;  // std dev = 57,684, 14.986,000 (wgt'ed) examples reached here.  /* #neg=9.999 #pos=4.987 */


Results
   AUC ROC   = 0.5014
   AUC PR    = 0.338917
   CLL	      = -0.637177
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0028
   F1        = 0.005584


Total learning time: 306.762 seconds
Total inference time: 61.791 seconds
AUC ROC: 0.5014


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(B, C), ismarriedto(A, C)', 'true,true': 'ismarriedto(B, E)', 'true': 'ismarriedto(D, B), ismarriedto(D, E)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.684, 9999, 4987], 'true,true,false': [0.964, 1, 13], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,true': 'ismarriedto(B, E)', 'true': 'ismarriedto(D, B), ismarriedto(D, E)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.684, 9999, 4987], 'true,true,false': [0.964, 1, 13], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(B, C), ismarriedto(A, C)', 'true': 'ismarriedto(D, B), ismarriedto(D, C)', 'true,false': 'ismarriedto(E, B), ismarriedto(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.964, 1, 13], 'false': [57.684, 9999, 4987], 'true,false,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'ismarriedto(D, C), ismarriedto(D, B)', 'true,false': 'ismarriedto(E, B), ismarriedto(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.964, 1, 13], 'false': [57.684, 9999, 4987], 'true,false,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(B, C), ismarriedto(A, C)', 'true': 'ismarriedto(D, C), ismarriedto(D, E)'}, {'true,true': [0.964, 1, 13], 'false': [57.684, 9999, 4987], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(B, C), ismarriedto(A, C)', 'true,true': 'ismarriedto(B, E)', 'true': 'ismarriedto(D, B), ismarriedto(D, E)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.684, 9999, 4987], 'true,true,false': [0.964, 1, 13], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(B, C), ismarriedto(A, C)', 'true,true': 'ismarriedto(B, E)', 'true': 'ismarriedto(D, B), ismarriedto(D, E)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.684, 9999, 4987], 'true,true,false': [0.964, 1, 13], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(B, C), ismarriedto(A, C)', 'true,true': 'ismarriedto(B, E)', 'true': 'ismarriedto(D, B), ismarriedto(D, E)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.684, 9999, 4987], 'true,true,false': [0.964, 1, 13], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(B, C), ismarriedto(A, C)', 'true': 'ismarriedto(D, B), ismarriedto(D, C)', 'true,false': 'ismarriedto(E, B), ismarriedto(E, F)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.964, 1, 13], 'false': [57.684, 9999, 4987], 'true,false,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(B, C), ismarriedto(A, C)', 'true': 'ismarriedto(D, C), ismarriedto(D, E)'}, {'true,true': [0.964, 1, 13], 'false': [57.684, 9999, 4987], 'true,false': [0.0, 0, 0]}]]
[{'': [0.06632653061224467, 0.22203655481719503], 'true,true': [nan, 0.06632653061224467], 'true': [0.06632653061224467, nan]}, {'': [0.0663265306122444, 0.22203655481710505], 'true,true': [nan, 0.0663265306122444], 'true': [0.0663265306122444, nan]}, {'': [0.06632653061224501, 0.2220365548171814], 'true': [nan, 0.06632653061224501], 'true,false': [0.06632653061224501, nan]}, {'': [0.06632653061224479, 0.22203655481714213], 'true': [nan, 0.06632653061224479], 'true,false': [0.06632653061224479, nan]}, {'': [0.06632653061224496, 0.22203655481719017], 'true': [0.06632653061224496, nan]}, {'': [0.0663265306122449, 0.22203655481718218], 'true,true': [nan, 0.0663265306122449], 'true': [0.0663265306122449, nan]}, {'': [0.06632653061224485, 0.2220365548171237], 'true,true': [nan, 0.06632653061224485], 'true': [0.06632653061224485, nan]}, {'': [0.06632653061224492, 0.2220365548171391], 'true,true': [nan, 0.06632653061224492], 'true': [0.06632653061224492, nan]}, {'': [0.06632653061224489, 0.22203655481715795], 'true': [nan, 0.06632653061224489], 'true,false': [0.06632653061224489, nan]}, {'': [0.0663265306122449, 0.22203655481714074], 'true': [0.0663265306122449, nan]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;true', '0;true,true;ismarriedto(B, E).;true;true', '0;true;ismarriedto(D, B), ismarriedto(D, E).;true;true', '1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;true,true;ismarriedto(B, E).;true;true', '1;true;ismarriedto(D, B), ismarriedto(D, E).;true;true', '2;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;true', '2;true;ismarriedto(D, B), ismarriedto(D, C).;true;true', '2;true,false;ismarriedto(E, B), ismarriedto(E, F).;true;true', '3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '3;true;ismarriedto(D, C), ismarriedto(D, B).;true;true', '3;true,false;ismarriedto(E, B), ismarriedto(E, F).;true;true', '4;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;true', '4;true;ismarriedto(D, C), ismarriedto(D, E).;true;true', '5;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;true', '5;true,true;ismarriedto(B, E).;true;true', '5;true;ismarriedto(D, B), ismarriedto(D, E).;true;true', '6;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;true', '6;true,true;ismarriedto(B, E).;true;true', '6;true;ismarriedto(D, B), ismarriedto(D, E).;true;true', '7;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;true', '7;true,true;ismarriedto(B, E).;true;true', '7;true;ismarriedto(D, B), ismarriedto(D, E).;true;true', '8;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;true', '8;true;ismarriedto(D, B), ismarriedto(D, C).;true;true', '8;true,false;ismarriedto(E, B), ismarriedto(E, F).;true;true', '9;;haschild(A, B) :- ismarriedto(B, C), ismarriedto(A, C).;true;true', '9;true;ismarriedto(D, C), ismarriedto(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, E) )
%   | then if ( ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( diedin(A, F) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7672398441904213;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( wasbornin(B, G), diedin(A, G) )
%   | then return 0.8529942959242516;  // std dev = 0,072, 194,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=193 */
%   | else if ( ismarriedto(A, H), ismarriedto(I, B) )
%   | | then if ( graduatedfrom(H, J) )
%   | | | then return 0.056262142646681924;  // std dev = 4,104, 106,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=21 */
%   | | | else return 0.26925198299500797;  // std dev = 25,831, 2.756,000 (wgt'ed) examples reached here.  /* #neg=1.623 #pos=1.133 */
%   | | else if ( ismarriedto(A, K) )
%   | | | then return 0.12609816159692883;  // std dev = 31,448, 5.042,000 (wgt'ed) examples reached here.  /* #neg=3.691 #pos=1.351 */
%   | | | else return 0.19046600827023885;  // std dev = 39,094, 6.888,000 (wgt'ed) examples reached here.  /* #neg=4.599 #pos=2.289 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, E) )
%   | then if ( ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( wasbornin(B, F) )
%   | | | then return 0.7254658279988022;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.644907273450539;  // std dev = 0,952, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( wasbornin(B, G), wasbornin(A, G) )
%   | then return 0.7941459534893971;  // std dev = 0,110, 193,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=191 */
%   | else if ( ismarriedto(A, H), ismarriedto(B, I) )
%   | | then if ( wasbornin(I, J), diedin(H, K) )
%   | | | then return 0.37542332767713954;  // std dev = 6,578, 179,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=100 */
%   | | | else return 0.216747216313214;  // std dev = 25,249, 2.688,000 (wgt'ed) examples reached here.  /* #neg=1.627 #pos=1.061 */
%   | | else if ( diedin(A, L), wasbornin(B, L) )
%   | | | then return 0.7108038645547347;  // std dev = 0,995, 103,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=102 */
%   | | | else return 0.13586990358764922;  // std dev = 49,742, 11.823,000 (wgt'ed) examples reached here.  /* #neg=8.290 #pos=3.533 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, C) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.5153821100479747;  // std dev = 0,255, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( wasbornin(B, E), diedin(A, F) )
%   | then if ( wasbornin(A, E) )
%   | | then return 0.5820690522554557;  // std dev = 0,124, 78,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | | else if ( wasbornin(A, F), livesin(G, E) )
%   | | | then return -0.13432915308525098;  // std dev = 1,324, 36,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | | | else return 0.23331753728971272;  // std dev = 11,829, 676,000 (wgt'ed) examples reached here.  /* #neg=358 #pos=318 */
%   | else if ( ismarriedto(A, H), ismarriedto(I, B) )
%   | | then if ( created(A, J), actedin(I, K) )
%   | | | then return 0.6140093774476045;  // std dev = 1,577, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.18458889536752113;  // std dev = 25,304, 2.695,000 (wgt'ed) examples reached here.  /* #neg=1.623 #pos=1.072 */
%   | | else if ( iscitizenof(A, L), iscitizenof(B, L) )
%   | | | then return 0.7432881999794505;  // std dev = 2,153, 74,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=69 */
%   | | | else return 0.11780378900987822;  // std dev = 48,836, 11.410,000 (wgt'ed) examples reached here.  /* #neg=7.975 #pos=3.435 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.3876418052208079;  // std dev = 0,255, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( wasbornin(B, D), wasbornin(A, E) )
%   | then if ( diedin(F, D), wasbornin(F, E) )
%   | | then if ( livesin(G, E), haswonprize(G, H) )
%   | | | then return 0.38695374856176357;  // std dev = 4,624, 141,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=103 */
%   | | | else return 0.5672382682714224;  // std dev = 3,153, 196,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=185 */
%   | | else if ( ismarriedto(A, I), diedin(I, D) )
%   | | | then return 0.7672950836914131;  // std dev = 0,123, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.08491704149700256;  // std dev = 11,212, 628,000 (wgt'ed) examples reached here.  /* #neg=437 #pos=191 */
%   | else if ( ismarriedto(A, J), ismarriedto(B, K) )
%   | | then if ( graduatedfrom(A, L) )
%   | | | then return -0.077243308813966;  // std dev = 4,098, 126,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=20 */
%   | | | else return 0.16264854642989507;  // std dev = 24,796, 2.569,000 (wgt'ed) examples reached here.  /* #neg=1.516 #pos=1.053 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.06539243166913436;  // std dev = 30,189, 4.766,000 (wgt'ed) examples reached here.  /* #neg=3.513 #pos=1.253 */
%   | | | else return 0.12337618975944321;  // std dev = 37,848, 6.545,000 (wgt'ed) examples reached here.  /* #neg=4.378 #pos=2.167 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, C), ismarriedto(D, E) )
%   | then return 0.2941184752474584;  // std dev = 0,256, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( wasbornin(A, F), wasbornin(B, G) )
%   | then if ( ismarriedto(A, H), wasbornin(H, G) )
%   | | then return 0.5695556345591136;  // std dev = 0,178, 43,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else if ( diedin(A, G) )
%   | | | then return 0.3444161364448912;  // std dev = 0,666, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | | else return 0.14849287578809187;  // std dev = 13,043, 843,000 (wgt'ed) examples reached here.  /* #neg=485 #pos=358 */
%   | else if ( wasbornin(B, I), haswonprize(A, J) )
%   | | then if ( diedin(K, I), haswonprize(K, J) )
%   | | | then return 0.5699087205222693;  // std dev = 2,842, 70,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=60 */
%   | | | else return 0.07339755478407321;  // std dev = 4,905, 111,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=34 */
%   | | else if ( wasbornin(B, L) )
%   | | | then return 0.035550387709933046;  // std dev = 20,719, 2.281,000 (wgt'ed) examples reached here.  /* #neg=1.651 #pos=630 */
%   | | | else return 0.09803737440853398;  // std dev = 50,035, 11.544,000 (wgt'ed) examples reached here.  /* #neg=7.775 #pos=3.769 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then return 0.22900379970378928;  // std dev = 0,256, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( diedin(A, D) )
%   | then if ( livesin(E, D), directed(E, F) )
%   | | then if ( directed(B, G), created(H, G) )
%   | | | then return 0.5605489030460572;  // std dev = 1,256, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.06709551260211667;  // std dev = 10,977, 597,000 (wgt'ed) examples reached here.  /* #neg=396 #pos=201 */
%   | | else if ( diedin(B, D) )
%   | | | then return 0.5298171551233785;  // std dev = 1,735, 60,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.03427886877183033;  // std dev = 20,112, 2.212,000 (wgt'ed) examples reached here.  /* #neg=1.522 #pos=690 */
%   | else if ( ismarriedto(I, B), isaffiliatedto(A, J) )
%   | | then if ( isaffiliatedto(B, J) )
%   | | | then return 0.7165714268732954;  // std dev = 0,308, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.12256411798719465;  // std dev = 4,627, 205,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=26 */
%   | | else if ( wasbornin(B, K) )
%   | | | then return 0.05616015732554296;  // std dev = 22,538, 2.594,000 (wgt'ed) examples reached here.  /* #neg=1.785 #pos=809 */
%   | | | else return 0.09576448088449094;  // std dev = 45,405, 9.288,000 (wgt'ed) examples reached here.  /* #neg=6.114 #pos=3.174 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then return 0.18320097818503536;  // std dev = 0,256, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( iscitizenof(B, D), ismarriedto(A, E) )
%   | then if ( created(E, F), haswonprize(E, G) )
%   | | then if ( graduatedfrom(A, H) )
%   | | | then return 0.03892633611232188;  // std dev = 0,628, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5367603929468949;  // std dev = 1,255, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( influences(I, A), created(A, J) )
%   | | | then return 0.3983848488789995;  // std dev = 1,118, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.09716305319488754;  // std dev = 6,337, 339,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=53 */
%   | else if ( haswonprize(A, K), wasbornin(B, L) )
%   | | then if ( diedin(B, M), wasbornin(N, M) )
%   | | | then return 0.0074678501186176156;  // std dev = 3,457, 73,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=25 */
%   | | | else return 0.25457624457464645;  // std dev = 6,582, 218,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=130 */
%   | | else if ( ismarriedto(A, P), ismarriedto(Q, B) )
%   | | | then return 0.09571563555876209;  // std dev = 25,278, 2.770,000 (wgt'ed) examples reached here.  /* #neg=1.622 #pos=1.148 */
%   | | | else return 0.05676906754944011;  // std dev = 48,810, 11.566,000 (wgt'ed) examples reached here.  /* #neg=7.949 #pos=3.617 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then if ( ismarriedto(D, B), ismarriedto(D, E) )
%   | then if ( ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(B, F), diedin(F, G) )
%   | | | then return 0.22247737729647188;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1302799183461021;  // std dev = 0,947, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( isaffiliatedto(B, H), isaffiliatedto(A, H) )
%   | then return 0.614197143700289;  // std dev = 0,205, 118,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=114 */
%   | else if ( wasbornin(A, I), wasbornin(B, J) )
%   | | then if ( isaffiliatedto(B, K), diedin(L, I) )
%   | | | then return -0.12200246037592574;  // std dev = 2,432, 61,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
%   | | | else return 0.12302531321821407;  // std dev = 12,535, 890,000 (wgt'ed) examples reached here.  /* #neg=437 #pos=453 */
%   | | else if ( isaffiliatedto(B, M) )
%   | | | then return -0.06742675523187387;  // std dev = 9,364, 576,000 (wgt'ed) examples reached here.  /* #neg=462 #pos=114 */
%   | | | else return 0.04701648239993328;  // std dev = 53,152, 13.341,000 (wgt'ed) examples reached here.  /* #neg=9.048 #pos=4.293 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then return 0.12532080540105028;  // std dev = 0,255, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( ismarriedto(D, B), created(A, E) )
%   | then if ( influences(F, A), ismarriedto(A, G) )
%   | | then if ( livesin(A, H) )
%   | | | then return 0.3510235305278669;  // std dev = 0,855, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.2777241754987759;  // std dev = 1,452, 39,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   | | else if ( actedin(B, I), directed(J, E) )
%   | | | then return 0.40292335048601235;  // std dev = 1,445, 16,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return -0.06606161546895901;  // std dev = 6,828, 277,000 (wgt'ed) examples reached here.  /* #neg=208 #pos=69 */
%   | else if ( actedin(B, K), actedin(A, L) )
%   | | then if ( created(B, M), wasbornin(B, N) )
%   | | | then return 0.15348967450556425;  // std dev = 1,646, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.5499231767271178;  // std dev = 3,534, 112,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=97 */
%   | | else if ( actedin(B, P) )
%   | | | then return -0.08767950263888627;  // std dev = 9,321, 571,000 (wgt'ed) examples reached here.  /* #neg=455 #pos=116 */
%   | | | else return 0.044077024924182036;  // std dev = 53,935, 13.954,000 (wgt'ed) examples reached here.  /* #neg=9.275 #pos=4.679 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, C) )
%   then return 0.10627803785057775;  // std dev = 0,255, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( iscitizenof(B, D), ismarriedto(A, E) )
%   | then if ( iscitizenof(E, F) )
%   | | then if ( graduatedfrom(A, G) )
%   | | | then return -0.21469381401750842;  // std dev = 0,068, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.33202653019152095;  // std dev = 2,043, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   | | else if ( iscitizenof(A, D) )
%   | | | then return 0.532787440849301;  // std dev = 0,296, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11145271337090387;  // std dev = 5,895, 327,000 (wgt'ed) examples reached here.  /* #neg=281 #pos=46 */
%   | else if ( wasbornin(B, H), ismarriedto(I, B) )
%   | | then if ( ismarriedto(A, J), diedin(J, H) )
%   | | | then return 0.4359127470861237;  // std dev = 1,441, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | | else return -0.03290234310097519;  // std dev = 13,948, 1.125,000 (wgt'ed) examples reached here.  /* #neg=775 #pos=350 */
%   | | else if ( wasbornin(A, K), ismarriedto(B, L) )
%   | | | then return -0.04317920060160101;  // std dev = 11,970, 756,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=212 */
%   | | | else return 0.043099206518438994;  // std dev = 51,757, 12.672,000 (wgt'ed) examples reached here.  /* #neg=8.388 #pos=4.284 */


Results
   AUC ROC   = 0.648957
   AUC PR    = 0.542845
   CLL	      = -0.604622
   Precision = 0.975989 at threshold = 0.5
   Recall    = 0.0691
   F1        = 0.129062


Total learning time: 739.71 seconds
Total inference time: 70.827 seconds
AUC ROC: 0.648957


Refined model AUC ROC: 0.648957


Dataset: 21_uwcse_yago2s, Fold: 2, Type: transfer, Time: 08:33:45
{'AUC ROC': 0.648957, 'Precision': [0.975989, 0.5], 'Mapping results': {'Generating mappings time': 8.195737600326538, 'Knowledge compiling time': 23.22149896621704, 'Finding best mapping': 2.978119134902954, 'Possible mappings': 10976, 'Total time': 37.29495429992676, 'Generating paths time': 2.8995909690856934}, 'Inference time': 70.827, 'CLL': -0.604622, 'AUC PR': 0.542845, 'Learning time': 1046.472, 'Parameter Learning results': {'AUC ROC': 0.5014, 'Precision': [1.0, 0.5], 'Inference time': 61.791, 'CLL': -0.637177, 'AUC PR': 0.338917, 'Learning time': 306.762, 'Recall': 0.0028, 'F1': 0.005584}, 'Recall': 0.0691, 'F1': 0.129062}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( graduatedfrom(A, E) )
%   | then return 0.018988095938672855;  // std dev = 0,367, 143,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=23 */
%   | else if ( diedin(C, F), wasbornin(B, F) )
%   | | then return 0.8581489350995128;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( directed(D, G), actedin(C, H) )
%   | | | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.2710879369479361;  // std dev = 25,608, 2.705,000 (wgt'ed) examples reached here.  /* #neg=1.588 #pos=1.117 */
%   else if ( wasbornin(B, I), diedin(A, I) )
%   | then return 0.8507415276921029;  // std dev = 0,086, 135,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=134 */
%   | else if ( ismarriedto(A, J) )
%   | | then if ( haswonprize(A, K), created(A, L) )
%   | | | then return 0.34119978255714045;  // std dev = 5,428, 118,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=57 */
%   | | | else return 0.12094341113525071;  // std dev = 30,886, 4.924,000 (wgt'ed) examples reached here.  /* #neg=3.630 #pos=1.294 */
%   | | else if ( ismarriedto(M, B) )
%   | | | then return 0.10603477019464473;  // std dev = 18,781, 1.892,000 (wgt'ed) examples reached here.  /* #neg=1.423 #pos=469 */
%   | | | else return 0.22244036824602437;  // std dev = 34,015, 4.996,000 (wgt'ed) examples reached here.  /* #neg=3.176 #pos=1.820 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then if ( diedin(A, C) )
%   | then return 0.7371622488957547;  // std dev = 0,262, 49,000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return 0.8131859790712412;  // std dev = 0,119, 144,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=142 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( ismarriedto(E, D) )
%   | | then return 0.8081079563926526;  // std dev = 0,173, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( diedin(D, F), diedin(E, F) )
%   | | | then return 0.7953057589344901;  // std dev = 0,233, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.21823766483679174;  // std dev = 25,860, 2.830,000 (wgt'ed) examples reached here.  /* #neg=1.707 #pos=1.123 */
%   | else if ( actedin(A, G), actedin(B, H) )
%   | | then if ( wrotemusicfor(I, G), directed(J, H) )
%   | | | then return 0.6916094238003658;  // std dev = 3,049, 79,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=68 */
%   | | | else return 0.3878431816623106;  // std dev = 2,210, 20,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | else if ( ismarriedto(A, K) )
%   | | | then return 0.10254595493206808;  // std dev = 30,893, 4.983,000 (wgt'ed) examples reached here.  /* #neg=3.680 #pos=1.303 */
%   | | | else return 0.1615052646431418;  // std dev = 38,717, 6.844,000 (wgt'ed) examples reached here.  /* #neg=4.591 #pos=2.253 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, D) )
%   then if ( diedin(A, C) )
%   | then return 0.6376511413112705;  // std dev = 0,075, 102,000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | else if ( diedin(E, D), wasbornin(E, C) )
%   | | then return 0.522888645124459;  // std dev = 0,380, 221,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=174 */
%   | | else if ( actedin(A, F), actedin(B, G) )
%   | | | then return 0.4811967677307706;  // std dev = 2,080, 23,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   | | | else return 0.12380976967835622;  // std dev = 11,449, 635,000 (wgt'ed) examples reached here.  /* #neg=433 #pos=202 */
%   else if ( iscitizenof(B, H), iscitizenof(A, H) )
%   | then return 0.7056262252740829;  // std dev = 0,292, 72,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=65 */
%   | else if ( ismarriedto(A, I), ismarriedto(B, J) )
%   | | then if ( graduatedfrom(A, K) )
%   | | | then return -0.012773544200680286;  // std dev = 4,076, 124,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=20 */
%   | | | else return 0.19560085945544792;  // std dev = 24,783, 2.580,000 (wgt'ed) examples reached here.  /* #neg=1.517 #pos=1.063 */
%   | | else if ( graduatedfrom(A, L), graduatedfrom(B, M) )
%   | | | then return 0.47051704577816833;  // std dev = 3,607, 59,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   | | | else return 0.11275182479996697;  // std dev = 48,019, 11.184,000 (wgt'ed) examples reached here.  /* #neg=7.866 #pos=3.318 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( actedin(B, C), actedin(A, D) )
%   then if ( wasbornin(B, E), hascapital(F, E) )
%   | then if ( edited(G, D), ismarriedto(A, H) )
%   | | then if ( created(I, C) )
%   | | | then return 0.7054557708363769;  // std dev = 0,158, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.01063609572467992;  // std dev = 0,781, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( wasbornin(A, J), ismarriedto(A, K) )
%   | | | then return 0.02820066082628257;  // std dev = 0,818, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.31139140267633675;  // std dev = 0,118, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5550267496467585;  // std dev = 0,334, 120,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=104 */
%   else if ( diedin(A, L), wasbornin(B, L) )
%   | then return 0.5637561520401875;  // std dev = 0,131, 190,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=189 */
%   | else if ( iscitizenof(B, M), iscitizenof(A, M) )
%   | | then return 0.5947423602954445;  // std dev = 0,284, 79,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=72 */
%   | | else if ( ismarriedto(A, N), ismarriedto(P, B) )
%   | | | then return 0.14939729874668536;  // std dev = 25,637, 2.836,000 (wgt'ed) examples reached here.  /* #neg=1.703 #pos=1.133 */
%   | | | else return 0.0943630072201019;  // std dev = 49,127, 11.757,000 (wgt'ed) examples reached here.  /* #neg=8.265 #pos=3.492 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( diedin(D, E), diedin(A, F) )
%   | then if ( isaffiliatedto(A, G) )
%   | | then return -0.19439737014334846;  // std dev = 0,225, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else return 0.34231873468111285;  // std dev = 0,437, 154,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=104 */
%   | else if ( actedin(A, H), actedin(B, I) )
%   | | then return 0.4973360934807552;  // std dev = 0,273, 35,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | else if ( wasbornin(B, J), diedin(C, J) )
%   | | | then return 0.48299740926668633;  // std dev = 0,892, 54,000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.10937194627204547;  // std dev = 24,851, 2.677,000 (wgt'ed) examples reached here.  /* #neg=1.642 #pos=1.035 */
%   else if ( ismarriedto(A, K) )
%   | then return 0.06267626298589823;  // std dev = 0,436, 5.100,000 (wgt'ed) examples reached here.  /* #neg=3.692 #pos=1.408 */
%   | else if ( ismarriedto(L, B) )
%   | | then return 0.03757667144446641;  // std dev = 0,428, 1.911,000 (wgt'ed) examples reached here.  /* #neg=1.423 #pos=488 */
%   | | else if ( diedin(A, M), hascapital(N, M) )
%   | | | then return 0.08849000281707868;  // std dev = 7,883, 318,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=113 */
%   | | | else return 0.13408073551224522;  // std dev = 32,716, 4.736,000 (wgt'ed) examples reached here.  /* #neg=2.971 #pos=1.765 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( iscitizenof(B, C), ismarriedto(A, D) )
%   then if ( iscitizenof(A, C) )
%   | then if ( created(A, E), iscitizenof(D, C) )
%   | | then return -0.07638611370004311;  // std dev = 1,028, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.49872303145758273;  // std dev = 0,266, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( isaffiliatedto(A, F) )
%   | | then return 0.2776924127226825;  // std dev = 0,497, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | else return -0.10504625131931386;  // std dev = 0,318, 318,000 (wgt'ed) examples reached here.  /* #neg=277 #pos=41 */
%   else if ( diedin(A, G), diedin(B, G) )
%   | then return 0.548064576962835;  // std dev = 0,237, 74,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | else if ( diedin(A, H) )
%   | | then if ( wasbornin(B, I), diedin(J, I) )
%   | | | then return 0.14577984061984034;  // std dev = 10,865, 678,000 (wgt'ed) examples reached here.  /* #neg=344 #pos=334 */
%   | | | else return 0.015625785863474857;  // std dev = 19,566, 2.057,000 (wgt'ed) examples reached here.  /* #neg=1.518 #pos=539 */
%   | | else if ( actedin(A, K), actedin(B, L) )
%   | | | then return 0.3663955788014405;  // std dev = 3,696, 115,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=96 */
%   | | | else return 0.0834064430222773;  // std dev = 50,146, 11.716,000 (wgt'ed) examples reached here.  /* #neg=7.825 #pos=3.891 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then return 0.41015070811272286;  // std dev = 0,168, 193,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=191 */
%   else if ( wasbornin(B, D) )
%   | then if ( ismarriedto(A, E), wasbornin(E, D) )
%   | | then if ( diedin(E, F), ismarriedto(B, G) )
%   | | | then return 0.38129305861666596;  // std dev = 0,981, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.6130815664548782;  // std dev = 1,484, 62,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | else if ( diedin(A, D) )
%   | | | then return 0.3937343273567328;  // std dev = 1,438, 129,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | | | else return -5.056691352523251E-4;  // std dev = 23,753, 3.041,000 (wgt'ed) examples reached here.  /* #neg=2.219 #pos=822 */
%   | else if ( wasbornin(A, H) )
%   | | then if ( actedin(B, I), isleaderof(J, H) )
%   | | | then return 0.22879586061952853;  // std dev = 3,223, 54,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.017751401995515583;  // std dev = 22,041, 2.529,000 (wgt'ed) examples reached here.  /* #neg=1.834 #pos=695 */
%   | | else if ( ismarriedto(B, K), ismarriedto(A, L) )
%   | | | then return 0.12240276348751354;  // std dev = 20,354, 1.725,000 (wgt'ed) examples reached here.  /* #neg=969 #pos=756 */
%   | | | else return 0.06929433753230234;  // std dev = 39,161, 7.247,000 (wgt'ed) examples reached here.  /* #neg=4.950 #pos=2.297 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( iscitizenof(B, C), participatedin(C, D) )
%   then if ( iscitizenof(A, C) )
%   | then return 0.3642901342011257;  // std dev = 0,273, 86,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=79 */
%   | else return -0.034392232482482465;  // std dev = 0,394, 702,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=158 */
%   else if ( ismarriedto(E, B), wasbornin(B, F) )
%   | then if ( wasbornin(A, G), ismarriedto(A, H) )
%   | | then return 0.14282315491361985;  // std dev = 0,392, 225,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=140 */
%   | | else if ( diedin(A, F) )
%   | | | then return 0.3072401443814797;  // std dev = 0,753, 44,000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.038029206917464316;  // std dev = 12,318, 906,000 (wgt'ed) examples reached here.  /* #neg=674 #pos=232 */
%   | else if ( diedin(A, I) )
%   | | then if ( isaffiliatedto(B, J), isaffiliatedto(A, K) )
%   | | | then return 0.3867026220373542;  // std dev = 2,790, 46,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=34 */
%   | | | else return 0.01784805464913005;  // std dev = 20,921, 2.400,000 (wgt'ed) examples reached here.  /* #neg=1.681 #pos=719 */
%   | | else if ( isaffiliatedto(A, L), graduatedfrom(B, M) )
%   | | | then return 0.36118663631090736;  // std dev = 3,887, 75,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=51 */
%   | | | else return 0.06165870433398642;  // std dev = 47,572, 10.516,000 (wgt'ed) examples reached here.  /* #neg=6.973 #pos=3.543 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), diedin(B, D) )
%   then if ( diedin(A, D) )
%   | then return 0.4008589053800601;  // std dev = 0,223, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( isaffiliatedto(A, E) )
%   | | then return -0.17652205916079133;  // std dev = 0,262, 68,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=6 */
%   | | else if ( ismarriedto(A, F), diedin(F, G) )
%   | | | then return 0.11137951553523516;  // std dev = 5,852, 168,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=88 */
%   | | | else return -0.014408377694240278;  // std dev = 11,956, 756,000 (wgt'ed) examples reached here.  /* #neg=534 #pos=222 */
%   else if ( isaffiliatedto(B, H), isaffiliatedto(A, H) )
%   | then return 0.5665135685530868;  // std dev = 0,226, 116,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=112 */
%   | else if ( isaffiliatedto(B, I) )
%   | | then if ( playsfor(B, I) )
%   | | | then return 0.17358957853667822;  // std dev = 2,197, 20,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | | else return -0.09210310591504489;  // std dev = 8,869, 582,000 (wgt'ed) examples reached here.  /* #neg=471 #pos=111 */
%   | | else if ( actedin(B, J), actedin(A, K) )
%   | | | then return 0.2368694575763846;  // std dev = 4,041, 135,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=111 */
%   | | | else return 0.041704977500547656;  // std dev = 51,999, 13.127,000 (wgt'ed) examples reached here.  /* #neg=8.814 #pos=4.313 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( diedin(A, C), wasbornin(B, C) )
%   then return 0.2349071163361329;  // std dev = 0,117, 195,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   else if ( created(A, D), created(B, E) )
%   | then if ( isaffiliatedto(A, F) )
%   | | then if ( haswonprize(A, G), ismarriedto(A, H) )
%   | | | then return 0.26530356497208296;  // std dev = 0,683, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.2210856400777155;  // std dev = 1,011, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( ismarriedto(I, B), wasbornin(I, J) )
%   | | | then return -0.057347723185381484;  // std dev = 1,370, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.38584843248451617;  // std dev = 4,275, 96,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=68 */
%   | else if ( actedin(A, K), ismarriedto(B, L) )
%   | | then if ( diedin(A, M), wasbornin(B, N) )
%   | | | then return 0.12787612542735058;  // std dev = 1,738, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return -0.14740495835003523;  // std dev = 4,283, 165,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=40 */
%   | | else if ( iscitizenof(A, P), iscitizenof(B, P) )
%   | | | then return 0.2755290386070243;  // std dev = 2,482, 79,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=72 */
%   | | | else return 0.027627152783207095;  // std dev = 54,256, 14.425,000 (wgt'ed) examples reached here.  /* #neg=9.813 #pos=4.612 */


Results
   AUC ROC   = 0.655871
   AUC PR    = 0.552091
   CLL	      = -0.596411
   Precision = 0.953782 at threshold = 0.5
   Recall    = 0.1135
   F1        = 0.20286


Total learning time: 909.317 seconds
Total inference time: 68.021 seconds
AUC ROC: 0.655871


Dataset: 21_uwcse_yago2s, Fold: 2, Type: scratch, Time: 08:50:06
{'AUC ROC': 0.655871, 'Precision': [0.953782, 0.5], 'Inference time': 68.021, 'CLL': -0.596411, 'AUC PR': 0.552091, 'Learning time': 909.317, 'Recall': 0.1135, 'F1': 0.20286}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 22.81123375892639
   Generating paths time   = 2.914700984954834
   Generating mappings time   = 8.250694990158081
   Possible mappings   = 10976
   Finding best mapping   = 2.9702630043029785
   Total time   = 36.946900367736816


Best mapping found: ['advisedby(A,B) -> haschild(A,B)', 'publication(A,B) -> ismarriedto(A,B)', 'projectmember(A,B) -> created(B,A)', 'tempadvisedby(A,B) -> ismarriedto(B,A)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
0;true,true;ismarriedto(E, B).;false;false
0;true,false,false;ismarriedto(I, A).;false;false
0;true,false,true;ismarriedto(F, H).;false;false
0;true;ismarriedto(B, D), ismarriedto(E, D).;true;true
0;true,false;ismarriedto(F, A), ismarriedto(G, B).;true;true
1;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
1;true,true;ismarriedto(E, B).;false;false
1;true,false,false;ismarriedto(B, I), ismarriedto(J, I).;false;false
1;true,false,true;ismarriedto(F, H).;false;false
1;true;ismarriedto(B, D), ismarriedto(E, D).;true;true
1;true,false;ismarriedto(F, A), ismarriedto(B, G).;true;true
2;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
2;true,false,false,false;ismarriedto(B, J), ismarriedto(K, J).;false;false
2;true,false,false,true;ismarriedto(G, I).;false;false
2;true,false,false;ismarriedto(G, A), ismarriedto(H, B).;true;true
2;true;ismarriedto(B, D), ismarriedto(C, D).;false;true
2;true,false;ismarriedto(B, E), ismarriedto(F, E).;false;true
3;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
3;true,false,false,false;ismarriedto(J, A), ismarriedto(B, K).;false;false
3;true,false,false,true;ismarriedto(G, I).;false;false
3;true,false,false;ismarriedto(G, A), ismarriedto(H, B).;true;true
3;true;ismarriedto(C, D), ismarriedto(B, D).;false;true
3;true,false;ismarriedto(B, E), ismarriedto(F, E).;false;true
4;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
4;true,false,false,false;ismarriedto(K, B).;false;false
4;true,false,false,true;ismarriedto(J, B).;false;false
4;true,false,false;ismarriedto(B, H), ismarriedto(I, A).;true;true
4;true;ismarriedto(C, D), ismarriedto(E, D).;false;true
4;true,false;ismarriedto(B, F), ismarriedto(G, F).;false;true
5;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
5;true,true;ismarriedto(E, B).;false;false
5;true,false,false;ismarriedto(B, H), ismarriedto(I, H).;false;false
5;true,false,true;ismarriedto(F, G).;false;false
5;true;ismarriedto(B, D), ismarriedto(E, D).;true;true
5;true,false;ismarriedto(F, A).;true;true
6;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
6;true,true;ismarriedto(E, B).;false;false
6;true,false,false;ismarriedto(J, B).;false;false
6;true,false,true;ismarriedto(F, H), ismarriedto(I, H).;false;false
6;true;ismarriedto(B, D), ismarriedto(E, D).;true;true
6;true,false;ismarriedto(F, A), ismarriedto(B, G).;true;true
7;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
7;true,true;ismarriedto(E, B).;false;false
7;true,false,false;ismarriedto(B, I), ismarriedto(J, I).;false;false
7;true,false,true;ismarriedto(G, H).;false;false
7;true;ismarriedto(B, D), ismarriedto(E, D).;true;true
7;true,false;ismarriedto(B, F), ismarriedto(G, A).;true;true
8;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
8;true,false,false,false;ismarriedto(I, A), ismarriedto(B, J).;false;false
8;true;ismarriedto(B, D), ismarriedto(C, D).;false;true
8;true,false,false;created(B, G), ismarriedto(H, A).;false;true
8;true,false;ismarriedto(B, E), ismarriedto(F, E).;false;true
9;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;false
9;true,false,false,false;created(B, L), ismarriedto(M, B).;false;false
9;true,false,false,true;ismarriedto(I, J), ismarriedto(J, K).;false;false
9;true,false,false;ismarriedto(B, H), ismarriedto(I, H).;true;true
9;true;ismarriedto(C, D), ismarriedto(E, D).;false;true
9;true,false;ismarriedto(B, F), ismarriedto(G, F).;false;true


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then if ( ismarriedto(B, D), ismarriedto(E, D) )
%   | then if ( ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1909039894799702;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( ismarriedto(B, D), ismarriedto(E, D) )
%   | then if ( ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1660408959247194;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then if ( ismarriedto(B, D), ismarriedto(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(B, E), ismarriedto(F, E) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.14168236203180135;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( ismarriedto(C, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(B, E), ismarriedto(F, E) )
%   | | then return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.11882097877837552;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then if ( ismarriedto(C, D), ismarriedto(E, D) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09816136362346534;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then if ( ismarriedto(B, D), ismarriedto(E, D) )
%   | then if ( ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.08007898257396745;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then if ( ismarriedto(B, D), ismarriedto(E, D) )
%   | then if ( ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.06466046620299015;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then if ( ismarriedto(B, D), ismarriedto(E, D) )
%   | then if ( ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05178420223158079;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then if ( ismarriedto(B, D), ismarriedto(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(B, E), ismarriedto(F, E) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04120480483066282;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then if ( ismarriedto(C, D), ismarriedto(E, D) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.032621497125388046;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */


Results
   AUC ROC   = 0.501375
   AUC PR    = 0.338732
   CLL	      = -0.637191
   Precision = 0.965517 at threshold = 0.5
   Recall    = 0.0028
   F1        = 0.005584


Total learning time: 294.088 seconds
Total inference time: 72.946 seconds
AUC ROC: 0.501375


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(C, B), ismarriedto(C, A)', 'true,true': 'ismarriedto(E, B)', 'true': 'ismarriedto(B, D), ismarriedto(E, D)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,true,false': [0.0, 0, 13], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true,true': 'ismarriedto(E, B)', 'true': 'ismarriedto(B, D), ismarriedto(E, D)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,true,false': [4.21e-08, 0, 13], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, B), ismarriedto(C, A)', 'true': 'ismarriedto(B, D), ismarriedto(C, D)', 'true,false': 'ismarriedto(B, E), ismarriedto(F, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'false': [57.685, 10000, 4987], 'true,false,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'ismarriedto(C, D), ismarriedto(B, D)', 'true,false': 'ismarriedto(B, E), ismarriedto(F, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [4.21e-08, 0, 13], 'false': [57.685, 10000, 4987], 'true,false,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, B), ismarriedto(C, A)', 'true': 'ismarriedto(C, D), ismarriedto(E, D)'}, {'true,true': [0.0, 0, 13], 'false': [57.685, 10000, 4987], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, B), ismarriedto(C, A)', 'true,true': 'ismarriedto(E, B)', 'true': 'ismarriedto(B, D), ismarriedto(E, D)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,true,false': [2.11e-08, 0, 13], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, B), ismarriedto(C, A)', 'true,true': 'ismarriedto(E, B)', 'true': 'ismarriedto(B, D), ismarriedto(E, D)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,true,false': [0.0, 0, 13], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, B), ismarriedto(C, A)', 'true,true': 'ismarriedto(E, B)', 'true': 'ismarriedto(B, D), ismarriedto(E, D)'}, {'true,true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,true,false': [0.0, 0, 13], 'true,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, B), ismarriedto(C, A)', 'true': 'ismarriedto(B, D), ismarriedto(C, D)', 'true,false': 'ismarriedto(B, E), ismarriedto(F, E)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'false': [57.685, 10000, 4987], 'true,false,false': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(C, B), ismarriedto(C, A)', 'true': 'ismarriedto(C, D), ismarriedto(E, D)'}, {'true,true': [0.0, 0, 13], 'false': [57.685, 10000, 4987], 'true,false': [0.0, 0, 0]}]]
[{'': [-2.7328566760003855e-16, 0.2220291281647659], 'true,true': [nan, -2.7328566760003855e-16], 'true': [-2.7328566760003855e-16, nan]}, {'': [1.3664283380001927e-16, 0.22202912816466822], 'true,true': [nan, 1.3664283380001927e-16], 'true': [1.3664283380001927e-16, nan]}, {'': [-2.7328566760003855e-16, 0.2220291281647405], 'true': [nan, -2.7328566760003855e-16], 'true,false': [-2.7328566760003855e-16, nan]}, {'': [1.3664283380001927e-16, 0.22202912816464435], 'true': [nan, 1.3664283380001927e-16], 'true,false': [1.3664283380001927e-16, nan]}, {'': [-5.124106267500723e-17, 0.22202912816476936], 'true': [-5.124106267500723e-17, nan]}, {'': [3.416070845000482e-17, 0.22202912816472764], 'true,true': [nan, 3.416070845000482e-17], 'true': [3.416070845000482e-17, nan]}, {'': [-3.416070845000482e-17, 0.22202912816474987], 'true,true': [nan, -3.416070845000482e-17], 'true': [-3.416070845000482e-17, nan]}, {'': [0.0, 0.2220291281647355], 'true,true': [nan, 0.0], 'true': [0.0, nan]}, {'': [-1.2810265668751807e-17, 0.2220291281647444], 'true': [nan, -1.2810265668751807e-17], 'true,false': [-1.2810265668751807e-17, nan]}, {'': [0.0, 0.22202912816477763], 'true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;true', '1;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '2;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;true', '3;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '4;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;true', '5;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;true', '6;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;true', '7;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;true', '8;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;true', '9;;haschild(A, B) :- ismarriedto(C, B), ismarriedto(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( graduatedfrom(A, F) )
%   | | then if ( graduatedfrom(B, G) )
%   | | | then return 0.7581489350995123;  // std dev = 0,949, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.054870246574921684;  // std dev = 4,391, 122,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=24 */
%   | | else if ( graduatedfrom(E, H) )
%   | | | then return 0.016043671941617616;  // std dev = 2,753, 57,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=9 */
%   | | | else return 0.29948971722241224;  // std dev = 25,730, 2.685,000 (wgt'ed) examples reached here.  /* #neg=1.500 #pos=1.185 */
%   | else if ( ismarriedto(A, I) )
%   | | then if ( wasbornin(I, J), wasbornin(B, J) )
%   | | | then return 0.8373156017661788;  // std dev = 0,990, 48,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.1335826890427249;  // std dev = 31,815, 5.072,000 (wgt'ed) examples reached here.  /* #neg=3.675 #pos=1.397 */
%   | | else if ( ismarriedto(B, K) )
%   | | | then return 0.1198362000108453;  // std dev = 18,962, 1.861,000 (wgt'ed) examples reached here.  /* #neg=1.374 #pos=487 */
%   | | | else return 0.21454020555936687;  // std dev = 34,310, 5.132,000 (wgt'ed) examples reached here.  /* #neg=3.303 #pos=1.829 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(B, D), diedin(A, D) )
%   | then if ( isaffiliatedto(A, E), happenedin(F, D) )
%   | | then if ( wasbornin(A, G) )
%   | | | then return 0.834424849646681;  // std dev = 0,012, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.49664303544255084;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( isleaderof(H, D), ismarriedto(A, I) )
%   | | | then return 0.7896768632941412;  // std dev = 0,969, 27,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.8273201102513519;  // std dev = 0,236, 140,000 (wgt'ed) examples reached here.  /* #pos=140 */
%   | else if ( diedin(A, J), wasbornin(A, J) )
%   | | then if ( wasbornin(B, K), ismarriedto(A, L) )
%   | | | then return -0.11504919491322142;  // std dev = 1,356, 39,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | | else return 0.03824581632174615;  // std dev = 6,110, 229,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=47 */
%   | | else if ( ismarriedto(B, M), ismarriedto(A, N) )
%   | | | then return 0.2403087509766962;  // std dev = 25,822, 2.750,000 (wgt'ed) examples reached here.  /* #neg=1.593 #pos=1.157 */
%   | | | else return 0.1421424366492846;  // std dev = 49,929, 11.794,000 (wgt'ed) examples reached here.  /* #neg=8.186 #pos=3.608 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( graduatedfrom(D, F) )
%   | | then if ( wasbornin(B, G), isleaderof(H, G) )
%   | | | then return 0.3774701115418985;  // std dev = 1,989, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return -0.04954186658941125;  // std dev = 3,330, 87,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=14 */
%   | | else if ( wasbornin(A, I), wasbornin(B, J) )
%   | | | then return 0.3178291831444765;  // std dev = 7,197, 224,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=123 */
%   | | | else return 0.20481719550622177;  // std dev = 24,816, 2.546,000 (wgt'ed) examples reached here.  /* #neg=1.466 #pos=1.080 */
%   | else if ( ismarriedto(A, K) )
%   | | then if ( isaffiliatedto(A, L), graduatedfrom(B, M) )
%   | | | then return 0.5551645800340992;  // std dev = 2,699, 39,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | | | else return 0.09776861383150402;  // std dev = 31,709, 5.081,000 (wgt'ed) examples reached here.  /* #neg=3.666 #pos=1.415 */
%   | | else if ( iscitizenof(B, N), iscitizenof(A, N) )
%   | | | then return 0.7484691177872268;  // std dev = 1,679, 55,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | | else return 0.1380531452909246;  // std dev = 38,877, 6.938,000 (wgt'ed) examples reached here.  /* #neg=4.674 #pos=2.264 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( haswonprize(B, D), haswonprize(A, D) )
%   | then if ( wasbornin(B, E), happenedin(F, E) )
%   | | then if ( ismarriedto(A, G) )
%   | | | then return 0.6820438137812636;  // std dev = 0,204, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5064640729839975;  // std dev = 0,821, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7633652640929844;  // std dev = 0,170, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( actedin(A, H), actedin(B, I) )
%   | | then if ( edited(J, H), created(K, H) )
%   | | | then return 0.571592424501304;  // std dev = 2,512, 41,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   | | | else return 0.7013376020092257;  // std dev = 2,145, 64,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   | | else if ( wasbornin(A, L), wasbornin(B, M) )
%   | | | then return 0.21438252920578485;  // std dev = 14,710, 951,000 (wgt'ed) examples reached here.  /* #neg=526 #pos=425 */
%   | | | else return 0.10514368810331444;  // std dev = 54,395, 13.887,000 (wgt'ed) examples reached here.  /* #neg=9.460 #pos=4.427 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(B, D), wasbornin(A, E) )
%   | then if ( participatedin(D, F), participatedin(E, G) )
%   | | then if ( ismarriedto(A, H), ismarriedto(B, I) )
%   | | | then return 0.35862802780560044;  // std dev = 1,984, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.6824113626565321;  // std dev = 0,978, 23,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( livesin(J, E), wasbornin(J, D) )
%   | | | then return 0.6032140665007604;  // std dev = 2,747, 128,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=120 */
%   | | | else return 0.104511352581523;  // std dev = 13,212, 813,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=301 */
%   | else if ( ismarriedto(B, K), iscitizenof(A, L) )
%   | | then if ( iscitizenof(B, L) )
%   | | | then return 0.5850644059736781;  // std dev = 0,990, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.13571998792684406;  // std dev = 3,497, 154,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=14 */
%   | | else if ( ismarriedto(A, M), ismarriedto(B, N) )
%   | | | then return 0.14184150090229944;  // std dev = 24,803, 2.584,000 (wgt'ed) examples reached here.  /* #neg=1.499 #pos=1.085 */
%   | | | else return 0.08157387477569715;  // std dev = 48,407, 11.255,000 (wgt'ed) examples reached here.  /* #neg=7.833 #pos=3.422 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, D) )
%   | then if ( wasbornin(B, E), ismarriedto(A, F) )
%   | | then if ( diedin(F, G), graduatedfrom(A, H) )
%   | | | then return 0.039594011347367584;  // std dev = 0,759, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.6372086958347463;  // std dev = 0,502, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( wasbornin(A, I), livesin(J, I) )
%   | | | then return 0.6253167456355652;  // std dev = 0,999, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.7301737568613572;  // std dev = 0,415, 63,000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( isaffiliatedto(A, K), ismarriedto(B, L) )
%   | | then if ( influences(A, M) )
%   | | | then return 0.20856923257417856;  // std dev = 1,820, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return -0.12925963097084475;  // std dev = 5,073, 271,000 (wgt'ed) examples reached here.  /* #neg=240 #pos=31 */
%   | | else if ( diedin(A, N), diedin(B, P) )
%   | | | then return 0.18765389598564575;  // std dev = 10,686, 512,000 (wgt'ed) examples reached here.  /* #neg=271 #pos=241 */
%   | | | else return 0.07412993582983318;  // std dev = 54,679, 14.084,000 (wgt'ed) examples reached here.  /* #neg=9.479 #pos=4.605 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( actedin(A, D), diedin(B, E) )
%   | then if ( isleaderof(F, E), ismarriedto(B, G) )
%   | | then if ( actedin(B, H) )
%   | | | then return 0.5373188540320026;  // std dev = 0,043, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.2990698896102121;  // std dev = 0,161, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( isleaderof(I, E), holdspoliticalposition(I, J) )
%   | | | then return -0.025191747701106583;  // std dev = 0,761, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24893627449715233;  // std dev = 0,904, 59,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=1 */
%   | else if ( wasbornin(A, K), diedin(B, K) )
%   | | then if ( isaffiliatedto(A, L), happenedin(M, K) )
%   | | | then return 0.13592917609886587;  // std dev = 0,490, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5599454996447593;  // std dev = 0,850, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( ismarriedto(A, N), ismarriedto(B, P) )
%   | | | then return 0.0973437747643744;  // std dev = 25,738, 2.843,000 (wgt'ed) examples reached here.  /* #neg=1.631 #pos=1.212 */
%   | | | else return 0.055603952441426595;  // std dev = 49,836, 12.038,000 (wgt'ed) examples reached here.  /* #neg=8.303 #pos=3.735 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), isaffiliatedto(B, E) )
%   | then if ( isaffiliatedto(D, E) )
%   | | then if ( ispoliticianof(A, F), hascapital(F, G) )
%   | | | then return 0.09426122783945019;  // std dev = 0,813, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.55586595565375;  // std dev = 0,817, 31,000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( isaffiliatedto(A, E) )
%   | | | then return 0.47531075429577485;  // std dev = 0,838, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.1751739715729341;  // std dev = 4,992, 313,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=31 */
%   | else if ( actedin(B, H), actedin(A, I) )
%   | | then if ( wrotemusicfor(A, J), ismarriedto(B, K) )
%   | | | then return -0.38060230985895815;  // std dev = 0,095, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.4841020181349504;  // std dev = 3,034, 115,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=105 */
%   | | else if ( ismarriedto(B, L), created(A, M) )
%   | | | then return -0.04176832629855995;  // std dev = 7,280, 308,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=80 */
%   | | | else return 0.05263043623123341;  // std dev = 54,928, 14.196,000 (wgt'ed) examples reached here.  /* #neg=9.474 #pos=4.722 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( iscitizenof(B, D), iscitizenof(A, E) )
%   | then if ( exports(D, F), isleaderof(G, E) )
%   | | then if ( livesin(G, H), hascurrency(D, I) )
%   | | | then return 0.42296135533470064;  // std dev = 2,550, 48,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=40 */
%   | | | else return 0.1595071660032356;  // std dev = 2,678, 39,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=20 */
%   | | else if ( dealswith(E, J) )
%   | | | then return 0.645847736411069;  // std dev = 0,296, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.41386940410568873;  // std dev = 0,795, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( iscitizenof(A, K), ismarriedto(B, L) )
%   | | then if ( diedin(L, M), isleaderof(N, M) )
%   | | | then return 0.3962501922390659;  // std dev = 1,350, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return -0.16596802976991715;  // std dev = 2,975, 155,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=11 */
%   | | else if ( iscitizenof(B, P), ismarriedto(A, Q) )
%   | | | then return -0.09973443879839648;  // std dev = 6,239, 293,000 (wgt'ed) examples reached here.  /* #neg=241 #pos=52 */
%   | | | else return 0.04281176862992278;  // std dev = 55,188, 14.424,000 (wgt'ed) examples reached here.  /* #neg=9.584 #pos=4.840 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(C, A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( diedin(B, D), diedin(A, E) )
%   | then if ( livesin(F, D), wasbornin(F, E) )
%   | | then if ( wasbornin(B, G), haswonprize(A, H) )
%   | | | then return 0.045807351518880546;  // std dev = 0,693, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.5087731259352216;  // std dev = 2,211, 78,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=74 */
%   | | else if ( wasbornin(B, E) )
%   | | | then return 0.46413304864995714;  // std dev = 0,483, 31,000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.014834014940777612;  // std dev = 9,434, 423,000 (wgt'ed) examples reached here.  /* #neg=279 #pos=144 */
%   | else if ( ismarriedto(B, I), isaffiliatedto(A, J) )
%   | | then if ( graduatedfrom(B, K) )
%   | | | then return 0.38626651207952123;  // std dev = 1,483, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.11937642328895355;  // std dev = 5,092, 266,000 (wgt'ed) examples reached here.  /* #neg=230 #pos=36 */
%   | | else if ( diedin(A, L), wasbornin(M, L) )
%   | | | then return -0.005826935827790837;  // std dev = 20,785, 2.283,000 (wgt'ed) examples reached here.  /* #neg=1.602 #pos=681 */
%   | | | else return 0.03819198112211363;  // std dev = 50,340, 11.881,000 (wgt'ed) examples reached here.  /* #neg=7.880 #pos=4.001 */


Results
   AUC ROC   = 0.64989
   AUC PR    = 0.537044
   CLL	      = -0.604677
   Precision = 0.938702 at threshold = 0.5
   Recall    = 0.0781
   F1        = 0.144202


Total learning time: 508.535 seconds
Total inference time: 101.35499999999999 seconds
AUC ROC: 0.64989


Refined model AUC ROC: 0.64989


Dataset: 21_uwcse_yago2s, Fold: 3, Type: transfer, Time: 09:07:27
{'AUC ROC': 0.64989, 'Precision': [0.938702, 0.5], 'Mapping results': {'Generating mappings time': 8.250694990158081, 'Knowledge compiling time': 22.81123375892639, 'Finding best mapping': 2.9702630043029785, 'Possible mappings': 10976, 'Total time': 36.946900367736816, 'Generating paths time': 2.914700984954834}, 'Inference time': 101.35499999999999, 'CLL': -0.604677, 'AUC PR': 0.537044, 'Learning time': 802.623, 'Parameter Learning results': {'AUC ROC': 0.501375, 'Precision': [0.965517, 0.5], 'Inference time': 72.946, 'CLL': -0.637191, 'AUC PR': 0.338732, 'Learning time': 294.088, 'Recall': 0.0028, 'F1': 0.005584}, 'Recall': 0.0781, 'F1': 0.144202}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( diedin(B, C), diedin(A, C) )
%   then return 0.8346195233348062;  // std dev = 0,152, 85,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( wasbornin(A, F), wasbornin(B, F) )
%   | | then if ( diedin(B, G), happenedin(H, G) )
%   | | | then return 0.6081489350995123;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.8343394112899878;  // std dev = 0,988, 42,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else if ( wasbornin(A, I), isleaderof(J, I) )
%   | | | then return 0.11545887661997963;  // std dev = 5,716, 171,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=44 */
%   | | | else return 0.2841799604494885;  // std dev = 25,422, 2.643,000 (wgt'ed) examples reached here.  /* #neg=1.517 #pos=1.126 */
%   | else if ( graduatedfrom(A, K), isaffiliatedto(B, L) )
%   | | then if ( isaffiliatedto(A, L) )
%   | | | then return 0.7993254056877469;  // std dev = 1,372, 34,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.26240425424844843;  // std dev = 3,364, 47,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=19 */
%   | | else if ( wasbornin(B, M), wasbornin(A, N) )
%   | | | then return 0.2725760921009221;  // std dev = 13,099, 707,000 (wgt'ed) examples reached here.  /* #neg=414 #pos=293 */
%   | | | else return 0.15611572902652482;  // std dev = 48,539, 11.263,000 (wgt'ed) examples reached here.  /* #neg=7.907 #pos=3.356 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( wasbornin(B, E), wasbornin(A, F) )
%   | then if ( diedin(G, E), wasbornin(G, F) )
%   | | then return 0.63114030509841;  // std dev = 0,328, 89,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=77 */
%   | | else if ( haswonprize(B, H), isleaderof(I, E) )
%   | | | then return 0.6871718979095578;  // std dev = 0,937, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.16392903711165394;  // std dev = 5,633, 142,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=48 */
%   | else if ( wasbornin(A, J), wasbornin(C, J) )
%   | | then return 0.8317135250167483;  // std dev = 0,041, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( wasbornin(A, K), isleaderof(L, K) )
%   | | | then return 0.022854856218961755;  // std dev = 4,225, 122,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=22 */
%   | | | else return 0.24671047952993305;  // std dev = 24,775, 2.515,000 (wgt'ed) examples reached here.  /* #neg=1.440 #pos=1.075 */
%   else if ( diedin(A, M), wasbornin(B, M) )
%   | then return 0.7939721487415661;  // std dev = 0,131, 120,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else if ( ismarriedto(A, N) )
%   | | then return 0.11169759534827113;  // std dev = 0,446, 5.072,000 (wgt'ed) examples reached here.  /* #neg=3.675 #pos=1.397 */
%   | | else return 0.16090639196421008;  // std dev = 0,467, 6.921,000 (wgt'ed) examples reached here.  /* #neg=4.676 #pos=2.245 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( haswonprize(B, E), haswonprize(A, E) )
%   | then return 0.723068074734219;  // std dev = 0,076, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( wasbornin(B, F), diedin(A, F) )
%   | | then return 0.6949618475883395;  // std dev = 0,082, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( diedin(A, G), wasbornin(A, G) )
%   | | | then return 0.015741661353662145;  // std dev = 3,340, 69,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=15 */
%   | | | else return 0.19867869667987428;  // std dev = 25,616, 2.740,000 (wgt'ed) examples reached here.  /* #neg=1.593 #pos=1.147 */
%   else if ( ismarriedto(B, H) )
%   | then return 0.0743797629911037;  // std dev = 0,437, 1.861,000 (wgt'ed) examples reached here.  /* #neg=1.374 #pos=487 */
%   | else if ( ismarriedto(A, I) )
%   | | then if ( actedin(I, J), actedin(B, K) )
%   | | | then return 0.7023509985580815;  // std dev = 2,094, 43,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=38 */
%   | | | else return 0.09576087601128018;  // std dev = 31,652, 5.077,000 (wgt'ed) examples reached here.  /* #neg=3.671 #pos=1.406 */
%   | | else if ( wasbornin(B, L), wasbornin(A, M) )
%   | | | then return 0.28882492870183446;  // std dev = 8,140, 280,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=142 */
%   | | | else return 0.1609461110562243;  // std dev = 33,037, 4.852,000 (wgt'ed) examples reached here.  /* #neg=3.165 #pos=1.687 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( wasbornin(A, C), graduatedfrom(B, D) )
%   then if ( isaffiliatedto(A, E) )
%   | then return 0.586707504317892;  // std dev = 0,346, 46,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=39 */
%   | else if ( graduatedfrom(A, F) )
%   | | then return 0.5028814306948945;  // std dev = 0,444, 26,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | else return 0.025166827534398344;  // std dev = 0,413, 107,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=27 */
%   else if ( livesin(B, G) )
%   | then if ( livesin(A, G) )
%   | | then return 0.7600566725024293;  // std dev = 0,071, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.03556304796956677;  // std dev = 0,428, 507,000 (wgt'ed) examples reached here.  /* #neg=381 #pos=126 */
%   | else if ( ismarriedto(B, H), ismarriedto(A, I) )
%   | | then if ( haswonprize(B, J), haswonprize(I, K) )
%   | | | then return 0.582927428412428;  // std dev = 1,588, 32,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | | else return 0.16847041042982255;  // std dev = 25,488, 2.751,000 (wgt'ed) examples reached here.  /* #neg=1.575 #pos=1.176 */
%   | | else if ( ismarriedto(B, L) )
%   | | | then return 0.05949210160917758;  // std dev = 18,377, 1.781,000 (wgt'ed) examples reached here.  /* #neg=1.321 #pos=460 */
%   | | | else return 0.11273428355231918;  // std dev = 45,510, 9.722,000 (wgt'ed) examples reached here.  /* #neg=6.626 #pos=3.096 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( isaffiliatedto(A, E) )
%   | then return -0.02813907000263178;  // std dev = 0,419, 144,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=37 */
%   | else if ( wasbornin(B, F), diedin(A, F) )
%   | | then return 0.49210086310881274;  // std dev = 0,098, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( livesin(D, G), livesin(C, H) )
%   | | | then return 0.644843704246014;  // std dev = 0,223, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.13538528643176126;  // std dev = 25,208, 2.680,000 (wgt'ed) examples reached here.  /* #neg=1.540 #pos=1.140 */
%   else if ( ismarriedto(A, I) )
%   | then if ( diedin(I, J), wasbornin(B, J) )
%   | | then return 0.6802513419788218;  // std dev = 0,163, 48,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | else return 0.061101544930463415;  // std dev = 0,442, 5.072,000 (wgt'ed) examples reached here.  /* #neg=3.675 #pos=1.397 */
%   | else if ( ismarriedto(B, K) )
%   | | then return 0.053041578194701226;  // std dev = 0,437, 1.861,000 (wgt'ed) examples reached here.  /* #neg=1.374 #pos=487 */
%   | | else if ( diedin(A, L), wasbornin(B, L) )
%   | | | then return 0.5771346006142961;  // std dev = 1,043, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.1153619211598133;  // std dev = 33,767, 5.071,000 (wgt'ed) examples reached here.  /* #neg=3.302 #pos=1.769 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( wasbornin(A, E), wasbornin(B, E) )
%   | then return 0.3289011428133914;  // std dev = 0,224, 53,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | else if ( graduatedfrom(A, F) )
%   | | then return -0.04486966590691347;  // std dev = 0,419, 130,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=31 */
%   | | else if ( created(C, G) )
%   | | | then return 0.0016581220586268683;  // std dev = 5,773, 162,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=51 */
%   | | | else return 0.11660861264327009;  // std dev = 24,534, 2.542,000 (wgt'ed) examples reached here.  /* #neg=1.434 #pos=1.108 */
%   else if ( diedin(B, H), diedin(A, I) )
%   | then if ( wasbornin(J, H), livesin(J, I) )
%   | | then return 0.49377606676039526;  // std dev = 0,270, 63,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=58 */
%   | | else return 0.08759467534500998;  // std dev = 0,450, 311,000 (wgt'ed) examples reached here.  /* #neg=204 #pos=107 */
%   | else if ( wasbornin(A, K), wasbornin(B, K) )
%   | | then return 0.6536631417693144;  // std dev = 0,186, 104,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=101 */
%   | | else if ( wasbornin(B, L) )
%   | | | then return 0.019781613511604637;  // std dev = 21,005, 2.411,000 (wgt'ed) examples reached here.  /* #neg=1.764 #pos=647 */
%   | | | else return 0.07530036243227255;  // std dev = 44,135, 9.224,000 (wgt'ed) examples reached here.  /* #neg=6.377 #pos=2.847 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( diedin(B, C), diedin(A, C) )
%   then return 0.41400104648389463;  // std dev = 0,194, 85,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   else if ( livesin(B, D), livesin(A, E) )
%   | then if ( diedin(F, D), playsfor(F, G) )
%   | | then if ( wasbornin(H, E), playsfor(H, G) )
%   | | | then return 0.42333301902422843;  // std dev = 0,771, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.23990103756621686;  // std dev = 0,037, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( wasbornin(B, I), isleaderof(J, I) )
%   | | | then return 0.187733867213297;  // std dev = 1,208, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.5587714262634782;  // std dev = 1,337, 37,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else if ( livesin(B, K), ismarriedto(A, L) )
%   | | then if ( graduatedfrom(L, M) )
%   | | | then return 0.3369796040422038;  // std dev = 1,893, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return -0.11324606591807115;  // std dev = 4,921, 224,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=30 */
%   | | else if ( diedin(A, N), wasbornin(P, N) )
%   | | | then return 0.028908028332883154;  // std dev = 22,932, 2.738,000 (wgt'ed) examples reached here.  /* #neg=1.890 #pos=848 */
%   | | | else return 0.06969341822554671;  // std dev = 50,636, 11.880,000 (wgt'ed) examples reached here.  /* #neg=7.896 #pos=3.984 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, D) )
%   then if ( diedin(E, D), wasbornin(E, C) )
%   | then return 0.34984204843142586;  // std dev = 0,319, 232,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=199 */
%   | else if ( livesin(F, D), happenedin(G, C) )
%   | | then return -0.0625570542316563;  // std dev = 0,402, 295,000 (wgt'ed) examples reached here.  /* #neg=225 #pos=70 */
%   | | else if ( diedin(A, D) )
%   | | | then return -0.2696466046146206;  // std dev = 0,139, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.11673355188385263;  // std dev = 9,619, 432,000 (wgt'ed) examples reached here.  /* #neg=242 #pos=190 */
%   else if ( wasbornin(B, H), diedin(I, H) )
%   | then if ( haswonprize(A, J), livesin(I, H) )
%   | | then return 0.18751504454237083;  // std dev = 0,473, 101,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=49 */
%   | | else return -0.00479220473007255;  // std dev = 0,427, 2.182,000 (wgt'ed) examples reached here.  /* #neg=1.579 #pos=603 */
%   | else if ( iscitizenof(B, K), iscitizenof(A, K) )
%   | | then return 0.675469344246543;  // std dev = 0,157, 47,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else if ( diedin(A, L), wasbornin(M, L) )
%   | | | then return 0.010251698722282048;  // std dev = 20,094, 2.114,000 (wgt'ed) examples reached here.  /* #neg=1.517 #pos=597 */
%   | | | else return 0.06174641089338902;  // std dev = 45,751, 9.570,000 (wgt'ed) examples reached here.  /* #neg=6.324 #pos=3.246 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( wasbornin(B, C), actedin(A, D) )
%   then if ( actedin(B, E) )
%   | then return 0.5107644419509612;  // std dev = 0,304, 54,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=49 */
%   | else if ( isleaderof(F, C), livesin(F, C) )
%   | | then if ( happenedin(G, C), graduatedfrom(F, H) )
%   | | | then return -0.25811229307430517;  // std dev = 0,028, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5637781130518106;  // std dev = 1,370, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( wasbornin(A, I), happenedin(J, I) )
%   | | | then return 0.10215864735694273;  // std dev = 2,371, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return -0.13877262404099855;  // std dev = 2,992, 80,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   else if ( iscitizenof(A, K), ismarriedto(B, L) )
%   | then return -0.1426704542688977;  // std dev = 0,322, 179,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=25 */
%   | else if ( diedin(A, M), wasbornin(B, M) )
%   | | then return 0.36154623434363126;  // std dev = 0,176, 169,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=167 */
%   | | else if ( wasbornin(A, N), wasbornin(B, N) )
%   | | | then return 0.3770669583597258;  // std dev = 2,467, 119,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=114 */
%   | | | else return 0.03456724488326623;  // std dev = 54,871, 14.354,000 (wgt'ed) examples reached here.  /* #neg=9.744 #pos=4.610 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( diedin(B, C), diedin(A, C) )
%   then if ( wasbornin(B, C) )
%   | then return 0.1406619302567237;  // std dev = 0,226, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( livesin(D, C), directed(D, E) )
%   | | then if ( edited(F, E) )
%   | | | then return 0.32665286477820527;  // std dev = 0,185, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.04979063669747356;  // std dev = 1,151, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.422769280278813;  // std dev = 0,062, 42,000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( diedin(A, G), wasbornin(B, G) )
%   | then return 0.323807875889125;  // std dev = 0,162, 145,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=143 */
%   | else if ( diedin(A, H), wasbornin(I, H) )
%   | | then if ( ispoliticianof(I, J) )
%   | | | then return 0.03461850034322677;  // std dev = 12,457, 753,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=236 */
%   | | | else return -0.02828702711583677;  // std dev = 18,536, 1.899,000 (wgt'ed) examples reached here.  /* #neg=1.418 #pos=481 */
%   | | else if ( isaffiliatedto(B, K), ismarriedto(A, L) )
%   | | | then return -0.09417507726698408;  // std dev = 5,985, 270,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=54 */
%   | | | else return 0.03885938168754442;  // std dev = 50,237, 11.848,000 (wgt'ed) examples reached here.  /* #neg=7.845 #pos=4.003 */


Results
   AUC ROC   = 0.650792
   AUC PR    = 0.535646
   CLL	      = -0.600902
   Precision = 0.965293 at threshold = 0.5
   Recall    = 0.089
   F1        = 0.162974


Total learning time: 1292.493 seconds
Total inference time: 68.57900000000001 seconds
AUC ROC: 0.650792


Dataset: 21_uwcse_yago2s, Fold: 3, Type: scratch, Time: 09:30:11
{'AUC ROC': 0.650792, 'Precision': [0.965293, 0.5], 'Inference time': 68.57900000000001, 'CLL': -0.600902, 'AUC PR': 0.535646, 'Learning time': 1292.493, 'Recall': 0.089, 'F1': 0.162974}


