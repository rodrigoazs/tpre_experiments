Starting experiment #1 for 28_cora_yago2s

Start learning from source dataset

WILL Produced-Tree #1
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.8581489350997613;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.8378674781458648;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.8269549587641631;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( author(A, F), author(B, F) )
%   | then if ( venue(A, G), venue(B, G) )
%   | | then return 0.5581489350995077;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return -0.02218643075415075;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | else return 0.038607786828761745;  // std dev = 0,385, 17.522,000 (wgt'ed) examples reached here.  /* #neg=14.360 #pos=3.162 */
WILL Produced-Tree #2
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.7194734122110724;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.7032671113531456;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.6945320465224505;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( author(A, F), author(B, F) )
%   | then if ( venue(A, G), venue(B, G) )
%   | | then return 0.4758860545469119;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return -0.019507091236738876;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | else if ( venue(A, H), venue(B, H) )
%   | | then return 0.4887115746625435;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | | else return -0.005779728613975111;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #3
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.5553664367462224;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.5440759071941712;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.5379876508089667;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( author(A, F), author(B, F) )
%   | then if ( venue(A, G), venue(B, G) )
%   | | then return 0.382647398804749;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return -0.017186491653685926;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | else return 0.028722806398130143;  // std dev = 0,378, 17.522,000 (wgt'ed) examples reached here.  /* #neg=14.360 #pos=3.162 */
WILL Produced-Tree #4
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.41751358415825085;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.4088953620451233;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.40429887741161147;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.2946730206437118;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.4115798161238112;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.015169014748981973;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.00867369825848494;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #5
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.320711847160062;  // std dev = 1,81e-05, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.3128388708347922;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.3086984733823214;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.2221466475140924;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.3321851492161506;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.013409276847657685;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.007574128342160933;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #6
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.25517224256948384;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.24729674067055743;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.24319407676323263;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( author(A, F), author(B, F) )
%   | then return 0.0030918680257693083;  // std dev = 0,341, 8.592,000 (wgt'ed) examples reached here.  /* #neg=7.146 #pos=1.446 */
%   | else if ( venue(A, G), venue(B, G) )
%   | | then return 0.2578322898659438;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | | else return -0.006619420615304092;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #7
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.2097577156325156;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.20168532671037817;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.19750606216434458;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.1659045148769624;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.19562292940695253;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.012223505971883286;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.005789216773081442;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #8
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.1770964977452425;  // std dev = 3,87e-06, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.16880964471521417;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.16454023142947619;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.12494683277604403;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.14700992070662833;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.010830278390542418;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.005066313263482136;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #9
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.1527438580936383;  // std dev = 1,05e-05, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.1442712354485333;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.13992573288589283;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.09473654167318285;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.11028054989621075;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.009606320179534479;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.004436106234172489;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #10
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.13400703000798356;  // std dev = 1,01e-05, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.12538432042942518;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.12098166385919601;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.07234219430459536;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.08288303652208194;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.008528878447270067;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.003886148532188469;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */


Predicates from source: ['samebib(class,class).', 'title(class,title).', 'venue(class,venue).', 'author(class,author).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 21.491098642349243
   Generating paths time   = 2.7274386882781982
   Generating mappings time   = 1.2513830661773682
   Possible mappings   = 43904
   Finding best mapping   = 12.09388279914856
   Total time   = 37.56381106376648


Best mapping found: ['venue(A,B) -> wasbornin(A,B)', 'author(A,B) -> created(A,B)', 'samebib(A,B) -> ismarriedto(A,B)', 'title(A,B) -> actedin(A,B)'] 

Transferred target predicate: ismarriedto 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true
0;true;wasbornin(A, D), wasbornin(B, D).;false;true
0;false,true;wasbornin(A, G), wasbornin(B, G).;false;false
0;true,false;created(A, E), created(B, E).;false;false
0;false;created(A, F), created(B, F).;true;false
1;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true
1;false,true;wasbornin(A, G), wasbornin(B, G).;false;false
1;false,false;wasbornin(A, H), wasbornin(B, H).;false;false
1;true,false;created(A, E), created(B, E).;false;false
1;true;wasbornin(A, D), wasbornin(B, D).;false;true
1;false;created(A, F), created(B, F).;true;true
2;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true
2;true;wasbornin(A, D), wasbornin(B, D).;false;true
2;false,true;wasbornin(A, G), wasbornin(B, G).;false;false
2;true,false;created(A, E), created(B, E).;false;false
2;false;created(A, F), created(B, F).;true;false
3;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true
3;false,true;created(A, G), created(B, G).;false;false
3;false,false;created(A, H), created(B, H).;false;false
3;true,false;created(A, E), created(B, E).;false;false
3;true;wasbornin(A, D), wasbornin(B, D).;false;true
3;false;wasbornin(A, F), wasbornin(B, F).;true;true
4;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true
4;false,true;created(A, G), created(B, G).;false;false
4;false,false;created(A, H), created(B, H).;false;false
4;true,false;created(A, E), created(B, E).;false;false
4;true;wasbornin(A, D), wasbornin(B, D).;false;true
4;false;wasbornin(A, F), wasbornin(B, F).;true;true
5;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true
5;true;wasbornin(A, D), wasbornin(B, D).;false;true
5;false,false;wasbornin(A, G), wasbornin(B, G).;false;false
5;true,false;created(A, E), created(B, E).;false;false
5;false;created(A, F), created(B, F).;false;true
6;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true
6;false,true;created(A, G), created(B, G).;false;false
6;false,false;created(A, H), created(B, H).;false;false
6;true,false;created(A, E), created(B, E).;false;false
6;true;wasbornin(A, D), wasbornin(B, D).;false;true
6;false;wasbornin(A, F), wasbornin(B, F).;true;true
7;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true
7;false,true;created(A, G), created(B, G).;false;false
7;false,false;created(A, H), created(B, H).;false;false
7;true,false;created(A, E), created(B, E).;false;false
7;true;wasbornin(A, D), wasbornin(B, D).;false;true
7;false;wasbornin(A, F), wasbornin(B, F).;true;true
8;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true
8;false,true;created(A, G), created(B, G).;false;false
8;false,false;created(A, H), created(B, H).;false;false
8;true,false;created(A, E), created(B, E).;false;false
8;true;wasbornin(A, D), wasbornin(B, D).;false;true
8;false;wasbornin(A, F), wasbornin(B, F).;true;true
9;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true
9;false,true;created(A, G), created(B, G).;false;false
9;false,false;created(A, H), created(B, H).;false;false
9;true,false;created(A, E), created(B, E).;false;false
9;true;wasbornin(A, D), wasbornin(B, D).;false;true
9;false;wasbornin(A, F), wasbornin(B, F).;true;true


WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.843725858176433;  // std dev = 1,720, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( created(A, F), created(B, F) )
%   | then if ( wasbornin(A, G), wasbornin(B, G) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.858148935099512;  // std dev = 2,53e-07, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else return 0.18336188228886866;  // std dev = 71,782, 23.480,000 (wgt'ed) examples reached here.  /* #neg=15.844 #pos=7.636 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.707952129522429;  // std dev = 1,720, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( created(A, F), created(B, F) )
%   | then if ( wasbornin(A, G), wasbornin(B, G) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.7194734122109548;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( wasbornin(A, H), wasbornin(B, H) )
%   | | then return 0.7833105549909307;  // std dev = 2,178, 98,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | | else return 0.1569295432585416;  // std dev = 71,482, 23.382,000 (wgt'ed) examples reached here.  /* #neg=15.839 #pos=7.543 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5473403710021392;  // std dev = 1,720, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( created(A, F), created(B, F) )
%   | then if ( wasbornin(A, G), wasbornin(B, G) )
%   | | then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462842;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else return 0.13622344109687468;  // std dev = 71,694, 23.480,000 (wgt'ed) examples reached here.  /* #neg=15.844 #pos=7.636 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4113743941579497;  // std dev = 1,720, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6165249980730299;  // std dev = 2,178, 98,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else if ( created(A, H), created(B, H) )
%   | | then return 0.4175135841583104;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.11235953761976357;  // std dev = 71,482, 23.382,000 (wgt'ed) examples reached here.  /* #neg=15.839 #pos=7.543 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.31508898505220456;  // std dev = 1,720, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4691134797999705;  // std dev = 2,178, 98,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else if ( created(A, H), created(B, H) )
%   | | then return 0.32071184716015;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.09309662975074948;  // std dev = 71,482, 23.382,000 (wgt'ed) examples reached here.  /* #neg=15.839 #pos=7.543 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2495379237731341;  // std dev = 1,720, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( created(A, F), created(B, F) )
%   | then return 0.2551722425694894;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( wasbornin(A, G), wasbornin(B, G) )
%   | | then return 0.3530497661679877;  // std dev = 2,178, 98,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | | else return 0.07622150697910192;  // std dev = 71,482, 23.382,000 (wgt'ed) examples reached here.  /* #neg=15.839 #pos=7.543 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2039761028872356;  // std dev = 1,720, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.27163742881230146;  // std dev = 2,178, 98,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else if ( created(A, H), created(B, H) )
%   | | then return 0.20975771563253567;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.06179718603359249;  // std dev = 71,482, 23.382,000 (wgt'ed) examples reached here.  /* #neg=15.839 #pos=7.543 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17115607411787412;  // std dev = 1,720, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.21532945330453698;  // std dev = 2,178, 98,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else if ( created(A, H), created(B, H) )
%   | | then return 0.17709649774527683;  // std dev = 8,43e-08, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.049708834823016135;  // std dev = 71,482, 23.382,000 (wgt'ed) examples reached here.  /* #neg=15.839 #pos=7.543 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14666535227694488;  // std dev = 1,720, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.17541472628096136;  // std dev = 2,178, 98,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else if ( created(A, H), created(B, H) )
%   | | then return 0.15274385809367058;  // std dev = 7,60e-08, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.03973501686089875;  // std dev = 71,482, 23.382,000 (wgt'ed) examples reached here.  /* #neg=15.839 #pos=7.543 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.12781587104943243;  // std dev = 1,720, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.14616715575272868;  // std dev = 2,178, 98,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else if ( created(A, H), created(B, H) )
%   | | then return 0.13400703000801092;  // std dev = 5,16e-08, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.03160562830886422;  // std dev = 71,482, 23.382,000 (wgt'ed) examples reached here.  /* #neg=15.839 #pos=7.543 */


Results
   AUC ROC   = 0.52667
   AUC PR    = 0.404122
   CLL	      = -0.620844
   Precision = 0.983834 at threshold = 0.5
   Recall    = 0.053768
   F1        = 0.101963


Total learning time: 405.495 seconds
Total inference time: 88.928 seconds
AUC ROC: 0.52667


Structure after Parameter Learning
[['ismarriedto(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'true': 'wasbornin(A, D), wasbornin(B, D)', 'false,true': 'wasbornin(A, G), wasbornin(B, G)', 'true,false': 'created(A, E), created(B, E)', 'false': 'created(A, F), created(B, F)'}, {'true,false,false': [1.72, 3, 205], 'false,false': [71.782, 15844, 7636], 'true,true': [2.11e-08, 0, 3], 'false,true,false': [2.53e-07, 0, 75], 'true,false,true': [2.11e-08, 0, 3], 'false,true,true': [0.0, 0, 2]}], ['ismarriedto(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'wasbornin(A, G), wasbornin(B, G)', 'false,false': 'wasbornin(A, H), wasbornin(B, H)', 'true,false': 'created(A, E), created(B, E)', 'true': 'wasbornin(A, D), wasbornin(B, D)', 'false': 'created(A, F), created(B, F)'}, {'true,false,false': [1.72, 3, 205], 'true,true': [0.0, 0, 3], 'false,false,true': [2.178, 5, 93], 'false,false,false': [71.482, 15839, 7543], 'false,true,false': [0.0, 0, 75], 'true,false,true': [0.0, 0, 3], 'false,true,true': [0.0, 0, 2]}], ['ismarriedto(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'true': 'wasbornin(A, D), wasbornin(B, D)', 'false,true': 'wasbornin(A, G), wasbornin(B, G)', 'true,false': 'created(A, E), created(B, E)', 'false': 'created(A, F), created(B, F)'}, {'true,false,false': [1.72, 3, 205], 'false,false': [71.694, 15844, 7636], 'true,true': [1.05e-08, 0, 3], 'false,true,false': [0.0, 0, 75], 'true,false,true': [1.05e-08, 0, 3], 'false,true,true': [0.0, 0, 2]}], ['ismarriedto(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'created(A, G), created(B, G)', 'false,false': 'created(A, H), created(B, H)', 'true,false': 'created(A, E), created(B, E)', 'true': 'wasbornin(A, D), wasbornin(B, D)', 'false': 'wasbornin(A, F), wasbornin(B, F)'}, {'true,false,false': [1.72, 3, 205], 'true,true': [0.0, 0, 3], 'false,false,true': [0.0, 0, 75], 'false,false,false': [71.482, 15839, 7543], 'false,true,false': [2.178, 5, 93], 'true,false,true': [0.0, 0, 3], 'false,true,true': [0.0, 0, 2]}], ['ismarriedto(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'created(A, G), created(B, G)', 'false,false': 'created(A, H), created(B, H)', 'true,false': 'created(A, E), created(B, E)', 'true': 'wasbornin(A, D), wasbornin(B, D)', 'false': 'wasbornin(A, F), wasbornin(B, F)'}, {'true,false,false': [1.72, 3, 205], 'true,true': [0.0, 0, 3], 'false,false,true': [0.0, 0, 75], 'false,false,false': [71.482, 15839, 7543], 'false,true,false': [2.178, 5, 93], 'true,false,true': [0.0, 0, 3], 'false,true,true': [0.0, 0, 2]}], ['ismarriedto(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'true': 'wasbornin(A, D), wasbornin(B, D)', 'false,false': 'wasbornin(A, G), wasbornin(B, G)', 'true,false': 'created(A, E), created(B, E)', 'false': 'created(A, F), created(B, F)'}, {'false,true': [0.0, 0, 77], 'true,false,false': [1.72, 3, 205], 'true,true': [0.0, 0, 3], 'false,false,true': [2.178, 5, 93], 'false,false,false': [71.482, 15839, 7543], 'true,false,true': [0.0, 0, 3]}], ['ismarriedto(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'created(A, G), created(B, G)', 'false,false': 'created(A, H), created(B, H)', 'true,false': 'created(A, E), created(B, E)', 'true': 'wasbornin(A, D), wasbornin(B, D)', 'false': 'wasbornin(A, F), wasbornin(B, F)'}, {'true,false,false': [1.72, 3, 205], 'true,true': [0.0, 0, 3], 'false,false,true': [0.0, 0, 75], 'false,false,false': [71.482, 15839, 7543], 'false,true,false': [2.178, 5, 93], 'true,false,true': [0.0, 0, 3], 'false,true,true': [0.0, 0, 2]}], ['ismarriedto(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'created(A, G), created(B, G)', 'false,false': 'created(A, H), created(B, H)', 'true,false': 'created(A, E), created(B, E)', 'true': 'wasbornin(A, D), wasbornin(B, D)', 'false': 'wasbornin(A, F), wasbornin(B, F)'}, {'true,false,false': [1.72, 3, 205], 'true,true': [0.0, 0, 3], 'false,false,true': [8.43e-08, 0, 75], 'false,false,false': [71.482, 15839, 7543], 'false,true,false': [2.178, 5, 93], 'true,false,true': [0.0, 0, 3], 'false,true,true': [0.0, 0, 2]}], ['ismarriedto(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'created(A, G), created(B, G)', 'false,false': 'created(A, H), created(B, H)', 'true,false': 'created(A, E), created(B, E)', 'true': 'wasbornin(A, D), wasbornin(B, D)', 'false': 'wasbornin(A, F), wasbornin(B, F)'}, {'true,false,false': [1.72, 3, 205], 'true,true': [0.0, 0, 3], 'false,false,true': [7.6e-08, 0, 75], 'false,false,false': [71.482, 15839, 7543], 'false,true,false': [2.178, 5, 93], 'true,false,true': [0.0, 0, 3], 'false,true,true': [0.0, 0, 2]}], ['ismarriedto(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'created(A, G), created(B, G)', 'false,false': 'created(A, H), created(B, H)', 'true,false': 'created(A, E), created(B, E)', 'true': 'wasbornin(A, D), wasbornin(B, D)', 'false': 'wasbornin(A, F), wasbornin(B, F)'}, {'true,false,false': [1.72, 3, 205], 'true,true': [0.0, 0, 3], 'false,false,true': [5.16e-08, 0, 75], 'false,false,false': [71.482, 15839, 7543], 'false,true,false': [2.178, 5, 93], 'true,false,true': [0.0, 0, 3], 'false,true,true': [0.0, 0, 2]}]]
[{'': [0.013822167874929042, 0.22021566095695025], 'true': [1.4802973661668753e-16, 0.014015857685139575], 'false,true': [0.0, 8.526512829121202e-16], 'false': [-1.107339328457299e-15, 0.21944948616939827], 'true,false': [1.4802973661668753e-16, 0.014215051775153552]}, {'': [0.013820116256418127, 0.2197536251046536], 'false,true': [0.0, -7.579122514774402e-16], 'false,false': [0.048417326114117386, 0.21852873621897992], 'false': [7.382262189715327e-16, 0.21944948616960663], 'true': [0.0, 0.014014802498586457], 'true,false': [0.0, 0.014215051775149999]}, {'': [0.013818254387808301, 0.21876491089831485], 'true': [3.700743415417188e-17, 0.014013844904024303], 'false,true': [0.0, -1.8947806286936006e-16], 'false': [7.843653576572534e-16, 0.2189080833550264], 'true,false': [3.700743415417188e-17, 0.01421505177514754]}, {'': [0.013817526013264187, 0.21845898275763462], 'false,true': [0.0, 0.04841732611411927], 'false,false': [-2.842170943040401e-16, 0.21852873621907734], 'false': [0.048225248232056546, 0.2181268066975242], 'true': [-3.700743415417188e-17, 0.014013470287094732], 'true,false': [-3.700743415417188e-17, 0.014215051775148462]}, {'': [0.013817360514131119, 0.2178589655798476], 'false,true': [0.0, 0.04841732611411913], 'false,false': [-3.907985046680551e-16, 0.21852873621879562], 'false': [0.04788063126541243, 0.21799514592933752], 'true': [0.0, 0.01401338516773095], 'true,false': [0.0, 0.014215051775148872]}, {'': [0.013817364028728197, 0.21752721857110166], 'true': [0.0, 0.014013386975356206], 'false,false': [0.048417326114119655, 0.2185287362189017], 'false': [-1.9609133941431335e-16, 0.2181372480191393], 'true,false': [0.0, 0.014215051775147617]}, {'': [0.013817409851705842, 0.21735965490190773], 'false,true': [0.0, 0.048417326114119384], 'false,false': [-1.4210854715202004e-16, 0.21852873621900887], 'false': [0.047524029930339974, 0.21789979896664702], 'true': [0.0, 0.014013410542987971], 'true,false': [0.0, 0.014215051775148164]}, {'': [0.013817460582347731, 0.21727268791763152], 'false,true': [0.0, 0.04841732611411918], 'false,false': [9.473903143468003e-17, 0.21852873621910762], 'false': [0.047477630066096434, 0.21788174490061693], 'true': [0.0, 0.014013436634725391], 'true,false': [0.0, 0.014215051775147912]}, {'': [0.013817505808588676, 0.2172242099062727], 'false,true': [0.0, 0.04841732611411907], 'false,false': [7.697546304067752e-17, 0.21852873621899607], 'false': [0.04745905336981818, 0.21787072825370143], 'true': [-4.625929269271485e-18, 0.014013459895443873], 'true,false': [-4.625929269271485e-18, 0.01421505177514795]}, {'': [0.013817543475763298, 0.21719497023784837], 'false,true': [0.0, 0.048417326114118996], 'false,false': [3.552713678800501e-17, 0.21852873621891913], 'false': [0.04745187781753594, 0.2178634458474138], 'true': [-2.3129646346357427e-18, 0.014013479268390748], 'true,false': [-2.3129646346357427e-18, 0.014215051775148027]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true', '0;true;wasbornin(A, D), wasbornin(B, D).;true;true', '0;false,true;wasbornin(A, G), wasbornin(B, G).;true;true', '0;true,false;created(A, E), created(B, E).;true;true', '0;false;created(A, F), created(B, F).;true;true', '1;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true', '1;true;wasbornin(A, D), wasbornin(B, D).;true;true', '1;false,true;wasbornin(A, G), wasbornin(B, G).;true;true', '1;true,false;created(A, E), created(B, E).;true;true', '1;false;created(A, F), created(B, F).;true;true', '2;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true', '2;true;wasbornin(A, D), wasbornin(B, D).;true;true', '2;false,true;wasbornin(A, G), wasbornin(B, G).;true;true', '2;true,false;created(A, E), created(B, E).;true;true', '2;false;created(A, F), created(B, F).;true;true', '3;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true', '3;false,true;created(A, G), created(B, G).;true;true', '3;false,false;created(A, H), created(B, H).;true;true', '3;true,false;created(A, E), created(B, E).;true;true', '3;true;wasbornin(A, D), wasbornin(B, D).;true;true', '3;false;wasbornin(A, F), wasbornin(B, F).;true;true', '4;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true', '4;false,true;created(A, G), created(B, G).;true;true', '4;false,false;created(A, H), created(B, H).;true;true', '4;true,false;created(A, E), created(B, E).;true;true', '4;true;wasbornin(A, D), wasbornin(B, D).;true;true', '4;false;wasbornin(A, F), wasbornin(B, F).;true;true', '5;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true', '5;true;wasbornin(A, D), wasbornin(B, D).;true;true', '5;true,false;created(A, E), created(B, E).;true;true', '5;false;created(A, F), created(B, F).;true;true', '6;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true', '6;false,true;created(A, G), created(B, G).;true;true', '6;false,false;created(A, H), created(B, H).;true;true', '6;true,false;created(A, E), created(B, E).;true;true', '6;true;wasbornin(A, D), wasbornin(B, D).;true;true', '6;false;wasbornin(A, F), wasbornin(B, F).;true;true', '7;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true', '7;false,true;created(A, G), created(B, G).;true;true', '7;false,false;created(A, H), created(B, H).;true;true', '7;true,false;created(A, E), created(B, E).;true;true', '7;true;wasbornin(A, D), wasbornin(B, D).;true;true', '7;false;wasbornin(A, F), wasbornin(B, F).;true;true', '8;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true', '8;false,true;created(A, G), created(B, G).;true;true', '8;false,false;created(A, H), created(B, H).;true;true', '8;true,false;created(A, E), created(B, E).;true;true', '8;true;wasbornin(A, D), wasbornin(B, D).;true;true', '8;false;wasbornin(A, F), wasbornin(B, F).;true;true', '9;;ismarriedto(A, B) :- actedin(A, C), actedin(B, C).;true;true', '9;false,true;created(A, G), created(B, G).;true;true', '9;false,false;created(A, H), created(B, H).;true;true', '9;true,false;created(A, E), created(B, E).;true;true', '9;true;wasbornin(A, D), wasbornin(B, D).;true;true', '9;false;wasbornin(A, F), wasbornin(B, F).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( influences(F, A), haswonprize(A, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8483928375385337;  // std dev = 1,407, 205,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=203 */
%   else if ( created(A, H), created(B, H) )
%   | then if ( wasbornin(A, I), wasbornin(B, I) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.858148935099512;  // std dev = 2,53e-07, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | else if ( haschild(B, J), haschild(A, J) )
%   | | then return 0.8581489350995075;  // std dev = 4,64e-06, 1.072,000 (wgt'ed) examples reached here.  /* #pos=1.072 */
%   | | else if ( haschild(B, K) )
%   | | | then return 0.012249100206827224;  // std dev = 21,765, 3.634,000 (wgt'ed) examples reached here.  /* #neg=3.074 #pos=560 */
%   | | | else return 0.1779529193332317;  // std dev = 63,905, 18.774,000 (wgt'ed) examples reached here.  /* #neg=12.770 #pos=6.004 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswonprize(B, F) )
%   | | | then return 0.6834027992938227;  // std dev = 1,345, 51,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.7158356097759243;  // std dev = 1,001, 157,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( created(A, G), created(B, G) )
%   | then return 0.7194734122109538;  // std dev = 2,79e-08, 77,000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( actedin(A, H), haschild(B, I) )
%   | | then if ( haschild(A, I) )
%   | | | then return 0.7194734122109556;  // std dev = 0,000, 47,000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.07021226358529126;  // std dev = 6,942, 711,000 (wgt'ed) examples reached here.  /* #neg=659 #pos=52 */
%   | | else if ( haschild(A, J), haschild(B, J) )
%   | | | then return 0.7194734122109588;  // std dev = 0,000, 1.025,000 (wgt'ed) examples reached here.  /* #pos=1.025 */
%   | | | else return 0.13811734979784876;  // std dev = 67,400, 21.697,000 (wgt'ed) examples reached here.  /* #neg=15.185 #pos=6.512 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( influences(F, A), influences(A, G) )
%   | | | then return 0.3687622185562857;  // std dev = 0,840, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5508234788801447;  // std dev = 1,405, 204,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=202 */
%   else if ( created(A, H), created(B, H) )
%   | then return 0.5553664367462836;  // std dev = 3,94e-08, 77,000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( haschild(I, B), haschild(J, A) )
%   | | then if ( haschild(A, K), haschild(B, K) )
%   | | | then return 0.555366436746283;  // std dev = 0,000, 401,000 (wgt'ed) examples reached here.  /* #pos=401 */
%   | | | else return 0.24484157991662522;  // std dev = 14,476, 873,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=365 */
%   | | else if ( haschild(B, L), actedin(A, M) )
%   | | | then return -0.020789568030161517;  // std dev = 7,992, 731,000 (wgt'ed) examples reached here.  /* #neg=633 #pos=98 */
%   | | | else return 0.12577451538538645;  // std dev = 66,620, 21.475,000 (wgt'ed) examples reached here.  /* #neg=14.703 #pos=6.772 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.411431562061763;  // std dev = 0,115, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.4175135841583104;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( haschild(A, H), haschild(B, H) )
%   | | | then return 0.5188010984382819;  // std dev = 0,104, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.7347452300796089;  // std dev = 2,156, 78,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | else if ( created(A, I), created(B, I) )
%   | | then return 0.4175135841583106;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( haschild(B, J), haschild(A, J) )
%   | | | then return 0.4852172286225857;  // std dev = 1,737, 1.052,000 (wgt'ed) examples reached here.  /* #pos=1.052 */
%   | | | else return 0.0910138374617628;  // std dev = 67,563, 22.330,000 (wgt'ed) examples reached here.  /* #neg=15.839 #pos=6.491 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.31521994012929055;  // std dev = 0,115, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.3207118471601498;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( haschild(A, H), haschild(B, H) )
%   | | | then return 0.3911442474797617;  // std dev = 0,094, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.591798786052667;  // std dev = 2,154, 78,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | else if ( created(A, I), created(B, I) )
%   | | then return 0.32071184716015;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( actedin(B, J), actedin(A, K) )
%   | | | then return 0.2960785378629067;  // std dev = 17,573, 1.252,000 (wgt'ed) examples reached here.  /* #neg=607 #pos=645 */
%   | | | else return 0.07754418343742739;  // std dev = 65,466, 22.130,000 (wgt'ed) examples reached here.  /* #neg=15.232 #pos=6.898 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswonprize(B, F) )
%   | | | then return 0.2300552607962822;  // std dev = 1,313, 51,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.25606448611834254;  // std dev = 1,011, 157,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( created(A, G), created(B, G) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else if ( haschild(B, H), haschild(A, H) )
%   | | then if ( haschild(I, A), haschild(J, B) )
%   | | | then return 0.28976002980815907;  // std dev = 0,066, 401,000 (wgt'ed) examples reached here.  /* #pos=401 */
%   | | | else return 0.38468833113575246;  // std dev = 0,401, 671,000 (wgt'ed) examples reached here.  /* #pos=671 */
%   | | else if ( haschild(B, K) )
%   | | | then return -0.044246886654640084;  // std dev = 21,539, 3.634,000 (wgt'ed) examples reached here.  /* #neg=3.074 #pos=560 */
%   | | | else return 0.08239009012017368;  // std dev = 63,597, 18.774,000 (wgt'ed) examples reached here.  /* #neg=12.770 #pos=6.004 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20414223967665426;  // std dev = 0,116, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.20975771563253576;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( haschild(B, H), haschild(A, H) )
%   | | | then return 0.22911446190927132;  // std dev = 0,053, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.4320379023016457;  // std dev = 2,154, 78,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | else if ( created(A, I), created(B, I) )
%   | | then return 0.20975771563253573;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( isaffiliatedto(A, J), isaffiliatedto(B, K) )
%   | | | then return 0.33513246167607724;  // std dev = 8,752, 344,000 (wgt'ed) examples reached here.  /* #neg=133 #pos=211 */
%   | | | else return 0.0549623805223842;  // std dev = 66,890, 23.038,000 (wgt'ed) examples reached here.  /* #neg=15.706 #pos=7.332 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17130605586310213;  // std dev = 0,116, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( haschild(B, H) )
%   | | | then return 0.23409912063987295;  // std dev = 0,998, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.32444434439826947;  // std dev = 1,942, 70,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=66 */
%   | else if ( created(A, I), created(B, I) )
%   | | then return 0.1770964977452772;  // std dev = 2,63e-09, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( actedin(A, J), isaffiliatedto(B, K) )
%   | | | then return -0.14952882105842272;  // std dev = 5,099, 301,000 (wgt'ed) examples reached here.  /* #neg=271 #pos=30 */
%   | | | else return 0.05062763836449695;  // std dev = 67,288, 23.081,000 (wgt'ed) examples reached here.  /* #neg=15.568 #pos=7.513 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14679840748043357;  // std dev = 0,116, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( directed(B, H), created(I, H) )
%   | | | then return -0.024858895749014637;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24307154576324524;  // std dev = 1,980, 95,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=91 */
%   | else if ( created(A, J), created(B, J) )
%   | | then return 0.15274385809367114;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( haschild(A, K), haschild(B, K) )
%   | | | then return 0.2535690304752128;  // std dev = 1,021, 1.052,000 (wgt'ed) examples reached here.  /* #pos=1.052 */
%   | | | else return 0.02875974357360011;  // std dev = 67,141, 22.330,000 (wgt'ed) examples reached here.  /* #neg=15.839 #pos=6.491 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( wasbornin(A, D), wasbornin(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( created(A, E), created(B, E) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1279334152006587;  // std dev = 0,116, 208,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=205 */
%   else if ( wasbornin(A, F), wasbornin(B, F) )
%   | then if ( created(A, G), created(B, G) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( actedin(A, H), created(A, I) )
%   | | | then return -0.040791021071182966;  // std dev = 0,735, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.19792182153418691;  // std dev = 1,988, 95,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=91 */
%   | else if ( created(A, J), created(B, J) )
%   | | then return 0.13400703000801092;  // std dev = 5,89e-09, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( haschild(A, K) )
%   | | | then return -0.05210002203690978;  // std dev = 23,922, 4.973,000 (wgt'ed) examples reached here.  /* #neg=3.349 #pos=1.624 */
%   | | | else return 0.054132558096434275;  // std dev = 62,656, 18.409,000 (wgt'ed) examples reached here.  /* #neg=12.490 #pos=5.919 */


Results
   AUC ROC   = 0.696015
   AUC PR    = 0.607608
   CLL	      = -0.568045
   Precision = 0.995169 at threshold = 0.5
   Recall    = 0.182002
   F1        = 0.307725


Total learning time: 620.591 seconds
Total inference time: 91.748 seconds
AUC ROC: 0.696015


Refined model AUC ROC: 0.696015


Dataset: 28_cora_yago2s, Fold: 1, Type: transfer, Time: 04:10:41
{'Precision': [0.995169, 0.5], 'Parameter Learning results': {'Precision': [0.983834, 0.5], 'CLL': -0.620844, 'Inference time': 88.928, 'Recall': 0.053768, 'AUC ROC': 0.52667, 'F1': 0.101963, 'AUC PR': 0.404122, 'Learning time': 405.495}, 'CLL': -0.568045, 'Inference time': 91.748, 'Recall': 0.182002, 'AUC ROC': 0.696015, 'F1': 0.307725, 'AUC PR': 0.607608, 'Learning time': 1026.086, 'Mapping results': {'Generating mappings time': 1.2513830661773682, 'Possible mappings': 43904, 'Knowledge compiling time': 21.491098642349243, 'Total time': 37.56381106376648, 'Generating paths time': 2.7274386882781982, 'Finding best mapping': 12.09388279914856}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), actedin(A, D) )
%   then if ( directed(E, C), directed(E, D) )
%   | then return 0.807761338200284;  // std dev = 0,219, 258,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=245 */
%   | else if ( haswonprize(B, F), wasbornin(A, G) )
%   | | then if ( livesin(H, G), actedin(H, I) )
%   | | | then return 0.42957750652808374;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | | | else return 0.11968739663797387;  // std dev = 3,543, 65,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
%   | | else if ( haswonprize(A, J), wasbornin(B, K) )
%   | | | then return 0.237895770542549;  // std dev = 4,314, 79,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=30 */
%   | | | else return 0.39427060810331044;  // std dev = 16,175, 1.052,000 (wgt'ed) examples reached here.  /* #neg=488 #pos=564 */
%   else if ( actedin(A, L), haschild(B, M) )
%   | then return -0.059638807800338305;  // std dev = 0,275, 669,000 (wgt'ed) examples reached here.  /* #neg=614 #pos=55 */
%   | else if ( haschild(B, N), haschild(A, N) )
%   | | then return 0.8581489350995075;  // std dev = 4,49e-06, 1.028,000 (wgt'ed) examples reached here.  /* #pos=1.028 */
%   | | else if ( haschild(A, P) )
%   | | | then return 0.0022906965382806068;  // std dev = 21,597, 3.781,000 (wgt'ed) examples reached here.  /* #neg=3.236 #pos=545 */
%   | | | else return 0.18079482172148595;  // std dev = 60,613, 16.811,000 (wgt'ed) examples reached here.  /* #neg=11.387 #pos=5.424 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, D) )
%   then if ( haschild(A, D) )
%   | then return 0.7252186308950197;  // std dev = 0,893, 1.093,000 (wgt'ed) examples reached here.  /* #pos=1.093 */
%   | else return -0.056669535674847504;  // std dev = 0,278, 692,000 (wgt'ed) examples reached here.  /* #neg=633 #pos=59 */
%   else if ( actedin(B, E), actedin(A, F) )
%   | then if ( actedin(A, E) )
%   | | then return 0.7278351445684329;  // std dev = 0,127, 197,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=194 */
%   | | else if ( directed(G, E), created(G, F) )
%   | | | then return 0.7480227299576442;  // std dev = 0,187, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.30688795240068173;  // std dev = 17,357, 1.221,000 (wgt'ed) examples reached here.  /* #neg=606 #pos=615 */
%   | else if ( haschild(A, H) )
%   | | then if ( haschild(I, B), haschild(J, A) )
%   | | | then return 0.28197700414519383;  // std dev = 7,397, 224,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=95 */
%   | | | else return -0.007152406611918173;  // std dev = 18,461, 2.919,000 (wgt'ed) examples reached here.  /* #neg=2.525 #pos=394 */
%   | | else if ( haschild(B, K) )
%   | | | then return 0.006291510369510532;  // std dev = 19,804, 2.872,000 (wgt'ed) examples reached here.  /* #neg=2.397 #pos=475 */
%   | | | else return 0.17683242434688382;  // std dev = 57,174, 14.523,000 (wgt'ed) examples reached here.  /* #neg=9.554 #pos=4.969 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, D) )
%   then if ( haschild(A, D) )
%   | then return 0.5618456796233396;  // std dev = 1,235, 1.093,000 (wgt'ed) examples reached here.  /* #pos=1.093 */
%   | else return -0.049908986506821254;  // std dev = 0,278, 692,000 (wgt'ed) examples reached here.  /* #neg=633 #pos=59 */
%   else if ( actedin(B, E), actedin(A, F) )
%   | then if ( actedin(A, E) )
%   | | then return 0.5684487232584793;  // std dev = 0,130, 197,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=194 */
%   | | else if ( directed(G, E), directed(G, F) )
%   | | | then return 0.503943179605143;  // std dev = 2,873, 77,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=67 */
%   | | | else return 0.24607949791759234;  // std dev = 17,055, 1.174,000 (wgt'ed) examples reached here.  /* #neg=596 #pos=578 */
%   | else if ( haschild(A, H) )
%   | | then if ( haschild(I, B), haschild(J, A) )
%   | | | then return 0.2440163229295127;  // std dev = 7,397, 224,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=95 */
%   | | | else return -0.006282549885012332;  // std dev = 18,461, 2.919,000 (wgt'ed) examples reached here.  /* #neg=2.525 #pos=394 */
%   | | else if ( haschild(B, K) )
%   | | | then return 0.005448945749900996;  // std dev = 19,803, 2.872,000 (wgt'ed) examples reached here.  /* #neg=2.397 #pos=475 */
%   | | | else return 0.1509687564176877;  // std dev = 57,174, 14.523,000 (wgt'ed) examples reached here.  /* #neg=9.554 #pos=4.969 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, D) )
%   then if ( wrotemusicfor(E, C), wrotemusicfor(E, D) )
%   | then if ( directed(F, C), influences(F, G) )
%   | | then return 0.3142729405260484;  // std dev = 0,335, 39,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=32 */
%   | | else return 0.4668689851117947;  // std dev = 0,250, 201,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=187 */
%   | else if ( actedin(A, D) )
%   | | then return 0.45007347213604704;  // std dev = 0,389, 77,000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( wrotemusicfor(H, C), wasbornin(H, I) )
%   | | | then return 0.13484866775771942;  // std dev = 10,964, 503,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=220 */
%   | | | else return 0.23170877864797504;  // std dev = 12,595, 662,000 (wgt'ed) examples reached here.  /* #neg=306 #pos=356 */
%   else if ( actedin(B, J), haschild(K, A) )
%   | then return -0.13804377224051806;  // std dev = 0,176, 537,000 (wgt'ed) examples reached here.  /* #neg=519 #pos=18 */
%   | else if ( haschild(B, L), haschild(A, L) )
%   | | then return 0.42174108966562346;  // std dev = 1,290, 1.062,000 (wgt'ed) examples reached here.  /* #pos=1.062 */
%   | | else if ( haschild(B, M) )
%   | | | then return -0.003634964203409004;  // std dev = 21,097, 3.522,000 (wgt'ed) examples reached here.  /* #neg=2.990 #pos=532 */
%   | | | else return 0.11276601235885422;  // std dev = 60,515, 17.168,000 (wgt'ed) examples reached here.  /* #neg=11.728 #pos=5.440 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), actedin(A, D) )
%   then if ( actedin(A, C) )
%   | then return 0.3255978706590892;  // std dev = 0,124, 214,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=211 */
%   | else if ( directed(A, C) )
%   | | then return 0.5364205798498546;  // std dev = 0,130, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( wrotemusicfor(E, D), wrotemusicfor(E, C) )
%   | | | then return 0.37018120811882954;  // std dev = 3,751, 102,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=84 */
%   | | | else return 0.14414058785170866;  // std dev = 16,669, 1.152,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=563 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then return 0.3241975934040305;  // std dev = 1,265, 1.062,000 (wgt'ed) examples reached here.  /* #pos=1.062 */
%   | else if ( haschild(A, G) )
%   | | then if ( actedin(B, H) )
%   | | | then return -0.10044036059652436;  // std dev = 4,551, 582,000 (wgt'ed) examples reached here.  /* #neg=560 #pos=22 */
%   | | | else return 0.00606722189322382;  // std dev = 20,709, 3.250,000 (wgt'ed) examples reached here.  /* #neg=2.726 #pos=524 */
%   | | else if ( isaffiliatedto(A, I), isaffiliatedto(B, J) )
%   | | | then return 0.4243275364065307;  // std dev = 7,995, 286,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=187 */
%   | | | else return 0.08502253426196683;  // std dev = 59,878, 17.109,000 (wgt'ed) examples reached here.  /* #neg=11.852 #pos=5.257 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.25996494075329224;  // std dev = 1,345, 1.093,000 (wgt'ed) examples reached here.  /* #pos=1.093 */
%   else if ( created(B, D), created(A, D) )
%   | then if ( actedin(B, E), edited(F, E) )
%   | | then if ( actedin(A, G), edited(H, G) )
%   | | | then return 0.4039430328521605;  // std dev = 0,308, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7130500966774928;  // std dev = 0,195, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.754911417121209;  // std dev = 0,232, 60,000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( haschild(B, I) )
%   | | then if ( haschild(J, A) )
%   | | | then return 0.09024382038222283;  // std dev = 11,298, 730,000 (wgt'ed) examples reached here.  /* #neg=552 #pos=178 */
%   | | | else return -0.03949834942411682;  // std dev = 17,963, 2.914,000 (wgt'ed) examples reached here.  /* #neg=2.522 #pos=392 */
%   | | else if ( haschild(A, K) )
%   | | | then return -0.001714131338555215;  // std dev = 20,469, 3.248,000 (wgt'ed) examples reached here.  /* #neg=2.716 #pos=532 */
%   | | | else return 0.09350517983332335;  // std dev = 59,085, 15.711,000 (wgt'ed) examples reached here.  /* #neg=10.057 #pos=5.654 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(D, B) )
%   then if ( haschild(A, E) )
%   | then return 0.14527741863391916;  // std dev = 0,315, 823,000 (wgt'ed) examples reached here.  /* #neg=303 #pos=520 */
%   | else if ( haschild(F, C), haschild(G, D) )
%   | | then if ( haswonprize(D, H) )
%   | | | then return 0.1025268792828892;  // std dev = 1,726, 15,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.4758021108361963;  // std dev = 5,951, 175,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=124 */
%   | | else if ( actedin(A, I) )
%   | | | then return -0.16208432052193175;  // std dev = 1,158, 31,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | | else return 0.2680335076487196;  // std dev = 7,546, 232,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=117 */
%   else if ( haschild(J, A) )
%   | then return -0.011399159397014963;  // std dev = 0,360, 3.247,000 (wgt'ed) examples reached here.  /* #neg=2.503 #pos=744 */
%   | else if ( actedin(A, K), haschild(L, B) )
%   | | then return -0.1236443095236675;  // std dev = 0,254, 620,000 (wgt'ed) examples reached here.  /* #neg=556 #pos=64 */
%   | | else if ( actedin(A, M), directed(B, N) )
%   | | | then return 0.2473683860180167;  // std dev = 8,664, 348,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=211 */
%   | | | else return 0.0644176402543687;  // std dev = 60,299, 18.280,000 (wgt'ed) examples reached here.  /* #neg=12.143 #pos=6.137 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.20066063044077131;  // std dev = 1,253, 1.093,000 (wgt'ed) examples reached here.  /* #pos=1.093 */
%   else if ( haschild(B, D) )
%   | then if ( haschild(E, A), haschild(D, F) )
%   | | then if ( haschild(A, G) )
%   | | | then return -0.04861906136173046;  // std dev = 4,011, 172,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=18 */
%   | | | else return 0.27876190867905093;  // std dev = 6,506, 176,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=90 */
%   | | else if ( wasbornin(A, H), haschild(D, I) )
%   | | | then return -0.12352577887385112;  // std dev = 3,919, 418,000 (wgt'ed) examples reached here.  /* #neg=401 #pos=17 */
%   | | | else return -0.02197964990238765;  // std dev = 18,889, 2.881,000 (wgt'ed) examples reached here.  /* #neg=2.433 #pos=448 */
%   | else if ( iscitizenof(A, J), iscitizenof(B, J) )
%   | | then if ( dealswith(K, J), diedin(L, K) )
%   | | | then return 0.4929079363604375;  // std dev = 2,767, 47,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=37 */
%   | | | else return 0.6910081483045523;  // std dev = 0,294, 47,000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( haschild(M, A), actedin(B, N) )
%   | | | then return -0.10130107436129628;  // std dev = 5,745, 570,000 (wgt'ed) examples reached here.  /* #neg=515 #pos=55 */
%   | | | else return 0.05448433432340279;  // std dev = 61,921, 18.367,000 (wgt'ed) examples reached here.  /* #neg=12.248 #pos=6.119 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), directed(B, D) )
%   then if ( actedin(A, D) )
%   | then return 0.5437752722829652;  // std dev = 0,207, 73,000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else if ( diedin(B, E) )
%   | | then return 0.3367338389242382;  // std dev = 0,404, 40,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=31 */
%   | | else if ( created(B, F), wrotemusicfor(G, C) )
%   | | | then return -0.030693281632008032;  // std dev = 5,007, 126,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=46 */
%   | | | else return 0.14135011445598025;  // std dev = 5,690, 148,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=82 */
%   else if ( diedin(A, H), diedin(B, I) )
%   | then if ( wasbornin(J, H), diedin(J, I) )
%   | | then return 0.4317519417880481;  // std dev = 0,372, 187,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=160 */
%   | | else return 0.08455771141595676;  // std dev = 0,413, 449,000 (wgt'ed) examples reached here.  /* #neg=263 #pos=186 */
%   | else if ( actedin(B, K), directed(A, L) )
%   | | then if ( actedin(B, L) )
%   | | | then return 0.5589656492939706;  // std dev = 1,893, 69,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.17361807493292217;  // std dev = 8,047, 287,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=158 */
%   | | else return 0.028549627777471717;  // std dev = 0,426, 22.392,000 (wgt'ed) examples reached here.  /* #neg=15.272 #pos=7.120 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.16339765656580651;  // std dev = 1,153, 1.093,000 (wgt'ed) examples reached here.  /* #pos=1.093 */
%   else if ( actedin(B, D), isaffiliatedto(A, E) )
%   | then if ( playsfor(A, E), directed(F, D) )
%   | | then if ( actedin(F, G), created(F, H) )
%   | | | then return -0.29887543865807586;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.5344578946752575;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haschild(A, I), directed(J, D) )
%   | | | then return -0.07137291909382103;  // std dev = 1,522, 38,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | | else return -0.20793108615032482;  // std dev = 4,311, 251,000 (wgt'ed) examples reached here.  /* #neg=230 #pos=21 */
%   | else if ( actedin(A, K), haschild(L, B) )
%   | | then if ( actedin(L, M) )
%   | | | then return 0.21434583081068823;  // std dev = 3,222, 47,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=27 */
%   | | | else return -0.14395435792499395;  // std dev = 5,013, 613,000 (wgt'ed) examples reached here.  /* #neg=578 #pos=35 */
%   | | else if ( haschild(A, N) )
%   | | | then return -0.02246161377382181;  // std dev = 21,455, 3.841,000 (wgt'ed) examples reached here.  /* #neg=3.254 #pos=587 */
%   | | | else return 0.043669445782423016;  // std dev = 61,270, 17.877,000 (wgt'ed) examples reached here.  /* #neg=11.724 #pos=6.153 */


Results
   AUC ROC   = 0.719059
   AUC PR    = 0.628411
   CLL	      = -0.546877
   Precision = 0.96284 at threshold = 0.5
   Recall    = 0.183138
   F1        = 0.307741


Total learning time: 855.939 seconds
Total inference time: 94.374 seconds
AUC ROC: 0.719059


Dataset: 28_cora_yago2s, Fold: 1, Type: scratch, Time: 04:26:34
{'Precision': [0.96284, 0.5], 'CLL': -0.546877, 'Inference time': 94.374, 'Recall': 0.183138, 'AUC ROC': 0.719059, 'F1': 0.307741, 'AUC PR': 0.628411, 'Learning time': 855.939}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 21.95796823501587
   Generating paths time   = 2.3235104084014893
   Generating mappings time   = 1.6303284168243408
   Possible mappings   = 43904
   Finding best mapping   = 12.415434837341309
   Total time   = 38.32724928855896


Best mapping found: ['venue(A,B) -> haschild(A,B)', 'author(A,B) -> haschild(B,A)', 'samebib(A,B) -> ismarriedto(B,A)', 'title(A,B) -> created(A,B)'] 

Transferred target predicate: ismarriedto 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;ismarriedto(B, A) :- created(A, C), created(B, C).;true;true
0;true;haschild(A, D), haschild(B, D).;false;true
0;false,true;haschild(A, G), haschild(B, G).;false;false
0;true,false;haschild(E, A), haschild(E, B).;false;false
0;false;haschild(F, A), haschild(F, B).;true;false
1;;ismarriedto(B, A) :- created(A, C), created(B, C).;true;true
1;false,true;haschild(A, G), haschild(B, G).;false;false
1;false,false;haschild(A, H), haschild(B, H).;false;false
1;true,false;haschild(E, A), haschild(E, B).;false;false
1;true;haschild(A, D), haschild(B, D).;false;true
1;false;haschild(F, A), haschild(F, B).;true;true
2;;ismarriedto(B, A) :- created(A, C), created(B, C).;true;true
2;true;haschild(A, D), haschild(B, D).;false;true
2;false,true;haschild(A, G), haschild(B, G).;false;false
2;true,false;haschild(E, A), haschild(E, B).;false;false
2;false;haschild(F, A), haschild(F, B).;true;false
3;;ismarriedto(B, A) :- created(A, C), created(B, C).;true;true
3;false,true;haschild(G, A), haschild(G, B).;false;false
3;false,false;haschild(H, A), haschild(H, B).;false;false
3;true,false;haschild(E, A), haschild(E, B).;false;false
3;true;haschild(A, D), haschild(B, D).;false;true
3;false;haschild(A, F), haschild(B, F).;true;true
4;;ismarriedto(B, A) :- created(A, C), created(B, C).;true;true
4;false,true;haschild(G, A), haschild(G, B).;false;false
4;false,false;haschild(H, A), haschild(H, B).;false;false
4;true,false;haschild(E, A), haschild(E, B).;false;false
4;true;haschild(A, D), haschild(B, D).;false;true
4;false;haschild(A, F), haschild(B, F).;true;true
5;;ismarriedto(B, A) :- created(A, C), created(B, C).;true;true
5;true;haschild(A, D), haschild(B, D).;false;true
5;false,false;haschild(A, G), haschild(B, G).;false;false
5;true,false;haschild(E, A), haschild(E, B).;false;false
5;false;haschild(F, A), haschild(F, B).;false;true
6;;ismarriedto(B, A) :- created(A, C), created(B, C).;true;true
6;false,true;haschild(G, A), haschild(G, B).;false;false
6;false,false;haschild(H, A), haschild(H, B).;false;false
6;true,false;haschild(E, A), haschild(E, B).;false;false
6;true;haschild(A, D), haschild(B, D).;false;true
6;false;haschild(A, F), haschild(B, F).;true;true
7;;ismarriedto(B, A) :- created(A, C), created(B, C).;true;true
7;false,true;haschild(G, A), haschild(G, B).;false;false
7;false,false;haschild(H, A), haschild(H, B).;false;false
7;true,false;haschild(E, A), haschild(E, B).;false;false
7;true;haschild(A, D), haschild(B, D).;false;true
7;false;haschild(A, F), haschild(B, F).;true;true
8;;ismarriedto(B, A) :- created(A, C), created(B, C).;true;true
8;false,true;haschild(G, A), haschild(G, B).;false;false
8;false,false;haschild(H, A), haschild(H, B).;false;false
8;true,false;haschild(E, A), haschild(E, B).;false;false
8;true;haschild(A, D), haschild(B, D).;false;true
8;false;haschild(A, F), haschild(B, F).;true;true
9;;ismarriedto(B, A) :- created(A, C), created(B, C).;true;true
9;false,true;haschild(G, A), haschild(G, B).;false;false
9;false,false;haschild(H, A), haschild(H, B).;false;false
9;true,false;haschild(E, A), haschild(E, B).;false;false
9;true;haschild(A, D), haschild(B, D).;false;true
9;false;haschild(A, F), haschild(B, F).;true;true


WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haschild(E, B), haschild(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995115;  // std dev = 3,15e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(F, B), haschild(F, A) )
%   | then if ( haschild(B, G), haschild(A, G) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.18751838071968924;  // std dev = 72,246, 23.630,000 (wgt'ed) examples reached here.  /* #neg=15.847 #pos=7.783 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haschild(E, B), haschild(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109541;  // std dev = 1,88e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(F, B), haschild(F, A) )
%   | then if ( haschild(B, G), haschild(A, G) )
%   | | then return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7194734122109542;  // std dev = 5,96e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( haschild(B, H), haschild(A, H) )
%   | | then return 0.8337556416084034;  // std dev = 5,82e-06, 1.070,000 (wgt'ed) examples reached here.  /* #pos=1.070 */
%   | | else return 0.13131769834600165;  // std dev = 68,669, 22.560,000 (wgt'ed) examples reached here.  /* #neg=15.847 #pos=6.713 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haschild(E, B), haschild(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462835;  // std dev = 4,13e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(F, B), haschild(F, A) )
%   | then if ( haschild(B, G), haschild(A, G) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.5553664367462846;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.13826093710233764;  // std dev = 71,070, 23.630,000 (wgt'ed) examples reached here.  /* #neg=15.847 #pos=7.783 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haschild(E, B), haschild(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.41751358415830986;  // std dev = 2,31e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(B, F), haschild(A, F) )
%   | then if ( haschild(G, B), haschild(G, A) )
%   | | then return 0.4175135841583098;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.6548585760958178;  // std dev = 0,000, 1.070,000 (wgt'ed) examples reached here.  /* #pos=1.070 */
%   | else if ( haschild(H, B), haschild(H, A) )
%   | | then return 0.4175135841583099;  // std dev = 3,65e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.090528987463521;  // std dev = 68,669, 22.560,000 (wgt'ed) examples reached here.  /* #neg=15.847 #pos=6.713 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haschild(E, B), haschild(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.3207118471601504;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(B, F), haschild(A, F) )
%   | then if ( haschild(G, B), haschild(G, A) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4964016782414043;  // std dev = 1,72e-06, 1.070,000 (wgt'ed) examples reached here.  /* #pos=1.070 */
%   | else if ( haschild(H, B), haschild(H, A) )
%   | | then return 0.32071184716014955;  // std dev = 2,11e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.07527259750108477;  // std dev = 68,669, 22.560,000 (wgt'ed) examples reached here.  /* #neg=15.847 #pos=6.713 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.2551722425694894;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haschild(E, B), haschild(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2551722425694897;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(F, B), haschild(F, A) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( haschild(B, G), haschild(A, G) )
%   | | then return 0.3750071273704521;  // std dev = 1,49e-06, 1.070,000 (wgt'ed) examples reached here.  /* #pos=1.070 */
%   | | else return 0.06198828410970602;  // std dev = 68,669, 22.560,000 (wgt'ed) examples reached here.  /* #neg=15.847 #pos=6.713 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haschild(E, B), haschild(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.20975771563253567;  // std dev = 1,26e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(B, F), haschild(A, F) )
%   | then if ( haschild(G, B), haschild(G, A) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.291976835830497;  // std dev = 1,05e-06, 1.070,000 (wgt'ed) examples reached here.  /* #pos=1.070 */
%   | else if ( haschild(H, B), haschild(H, A) )
%   | | then return 0.20975771563253556;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.05064318144402703;  // std dev = 68,669, 22.560,000 (wgt'ed) examples reached here.  /* #neg=15.847 #pos=6.713 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haschild(E, B), haschild(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17709649774527722;  // std dev = 8,16e-08, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(B, F), haschild(A, F) )
%   | then if ( haschild(G, B), haschild(G, A) )
%   | | then return 0.17709649774527736;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.23545174105634809;  // std dev = 0,000, 1.070,000 (wgt'ed) examples reached here.  /* #pos=1.070 */
%   | else if ( haschild(H, B), haschild(H, A) )
%   | | then return 0.17709649774527747;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.0411058850327616;  // std dev = 68,669, 22.560,000 (wgt'ed) examples reached here.  /* #neg=15.847 #pos=6.713 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haschild(E, B), haschild(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1527438580936713;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(B, F), haschild(A, F) )
%   | then if ( haschild(G, B), haschild(G, A) )
%   | | then return 0.15274385809367094;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.19572495587274938;  // std dev = 8,22e-07, 1.070,000 (wgt'ed) examples reached here.  /* #pos=1.070 */
%   | else if ( haschild(H, B), haschild(H, A) )
%   | | then return 0.15274385809367083;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.033189413851946174;  // std dev = 68,669, 22.560,000 (wgt'ed) examples reached here.  /* #neg=15.847 #pos=6.713 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haschild(E, B), haschild(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.13400703000801117;  // std dev = 3,65e-08, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(B, F), haschild(A, F) )
%   | then if ( haschild(G, B), haschild(G, A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.16673362722128063;  // std dev = 5,43e-07, 1.070,000 (wgt'ed) examples reached here.  /* #pos=1.070 */
%   | else if ( haschild(H, B), haschild(H, A) )
%   | | then return 0.13400703000801117;  // std dev = 7,45e-09, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.0266844712764048;  // std dev = 68,669, 22.560,000 (wgt'ed) examples reached here.  /* #neg=15.847 #pos=6.713 */


Results
   AUC ROC   = 0.572826
   AUC PR    = 0.493773
   CLL	      = -0.589359
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.145652
   F1        = 0.254269


Total learning time: 452.526 seconds
Total inference time: 67.642 seconds
AUC ROC: 0.572826


Structure after Parameter Learning
[['ismarriedto(A, B)', {'': 'created(B, C), created(A, C)', 'true': 'haschild(B, D), haschild(A, D)', 'false,true': 'haschild(B, G), haschild(A, G)', 'true,false': 'haschild(E, B), haschild(E, A)', 'false': 'haschild(F, B), haschild(F, A)'}, {'true,false,false': [3.15e-07, 0, 99], 'false,false': [72.246, 15847, 7783], 'true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 22], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 12]}], ['ismarriedto(A, B)', {'': 'created(B, C), created(A, C)', 'false,true': 'haschild(B, G), haschild(A, G)', 'false,false': 'haschild(B, H), haschild(A, H)', 'true,false': 'haschild(E, B), haschild(E, A)', 'true': 'haschild(B, D), haschild(A, D)', 'false': 'haschild(F, B), haschild(F, A)'}, {'true,false,false': [1.88e-07, 0, 99], 'true,true': [2.98e-08, 0, 8], 'false,false,true': [5.82e-06, 0, 1070], 'false,false,false': [68.669, 15847, 6713], 'false,true,false': [5.96e-08, 0, 22], 'true,false,true': [0.0, 0, 0], 'false,true,true': [4.21e-08, 0, 12]}], ['ismarriedto(A, B)', {'': 'created(B, C), created(A, C)', 'true': 'haschild(B, D), haschild(A, D)', 'false,true': 'haschild(B, G), haschild(A, G)', 'true,false': 'haschild(E, B), haschild(E, A)', 'false': 'haschild(F, B), haschild(F, A)'}, {'true,false,false': [4.13e-07, 0, 99], 'false,false': [71.07, 15847, 7783], 'true,true': [0.0, 0, 8], 'false,true,false': [0.0, 0, 22], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 12]}], ['ismarriedto(A, B)', {'': 'created(B, C), created(A, C)', 'false,true': 'haschild(G, B), haschild(G, A)', 'false,false': 'haschild(H, B), haschild(H, A)', 'true,false': 'haschild(E, B), haschild(E, A)', 'true': 'haschild(B, D), haschild(A, D)', 'false': 'haschild(B, F), haschild(A, F)'}, {'true,false,false': [2.31e-07, 0, 99], 'true,true': [2.98e-08, 0, 8], 'false,false,true': [3.65e-08, 0, 22], 'false,false,false': [68.669, 15847, 6713], 'false,true,false': [0.0, 0, 1070], 'true,false,true': [0.0, 0, 0], 'false,true,true': [4.21e-08, 0, 12]}], ['ismarriedto(A, B)', {'': 'created(B, C), created(A, C)', 'false,true': 'haschild(G, B), haschild(G, A)', 'false,false': 'haschild(H, B), haschild(H, A)', 'true,false': 'haschild(E, B), haschild(E, A)', 'true': 'haschild(B, D), haschild(A, D)', 'false': 'haschild(B, F), haschild(A, F)'}, {'true,false,false': [0.0, 0, 99], 'true,true': [0.0, 0, 8], 'false,false,true': [2.11e-08, 0, 22], 'false,false,false': [68.669, 15847, 6713], 'false,true,false': [1.72e-06, 0, 1070], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 12]}], ['ismarriedto(A, B)', {'': 'created(B, C), created(A, C)', 'true': 'haschild(B, D), haschild(A, D)', 'false,false': 'haschild(B, G), haschild(A, G)', 'true,false': 'haschild(E, B), haschild(E, A)', 'false': 'haschild(F, B), haschild(F, A)'}, {'false,true': [0.0, 0, 34], 'true,false,false': [0.0, 0, 99], 'true,true': [1.49e-08, 0, 8], 'false,false,true': [1.49e-06, 0, 1070], 'false,false,false': [68.669, 15847, 6713], 'true,false,true': [0.0, 0, 0]}], ['ismarriedto(A, B)', {'': 'created(B, C), created(A, C)', 'false,true': 'haschild(G, B), haschild(G, A)', 'false,false': 'haschild(H, B), haschild(H, A)', 'true,false': 'haschild(E, B), haschild(E, A)', 'true': 'haschild(B, D), haschild(A, D)', 'false': 'haschild(B, F), haschild(A, F)'}, {'true,false,false': [1.26e-07, 0, 99], 'true,true': [0.0, 0, 8], 'false,false,true': [0.0, 0, 22], 'false,false,false': [68.669, 15847, 6713], 'false,true,false': [1.05e-06, 0, 1070], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 12]}], ['ismarriedto(A, B)', {'': 'created(B, C), created(A, C)', 'false,true': 'haschild(G, B), haschild(G, A)', 'false,false': 'haschild(H, B), haschild(H, A)', 'true,false': 'haschild(E, B), haschild(E, A)', 'true': 'haschild(B, D), haschild(A, D)', 'false': 'haschild(B, F), haschild(A, F)'}, {'true,false,false': [8.16e-08, 0, 99], 'true,true': [7.45e-09, 0, 8], 'false,false,true': [0.0, 0, 22], 'false,false,false': [68.669, 15847, 6713], 'false,true,false': [0.0, 0, 1070], 'true,false,true': [0.0, 0, 0], 'false,true,true': [1.05e-08, 0, 12]}], ['ismarriedto(A, B)', {'': 'created(B, C), created(A, C)', 'false,true': 'haschild(G, B), haschild(G, A)', 'false,false': 'haschild(H, B), haschild(H, A)', 'true,false': 'haschild(E, B), haschild(E, A)', 'true': 'haschild(B, D), haschild(A, D)', 'false': 'haschild(B, F), haschild(A, F)'}, {'true,false,false': [0.0, 0, 99], 'true,true': [0.0, 0, 8], 'false,false,true': [0.0, 0, 22], 'false,false,false': [68.669, 15847, 6713], 'false,true,false': [8.22e-07, 0, 1070], 'true,false,true': [0.0, 0, 0], 'false,true,true': [1.05e-08, 0, 12]}], ['ismarriedto(A, B)', {'': 'created(B, C), created(A, C)', 'false,true': 'haschild(G, B), haschild(G, A)', 'false,false': 'haschild(H, B), haschild(H, A)', 'true,false': 'haschild(E, B), haschild(E, A)', 'true': 'haschild(B, D), haschild(A, D)', 'false': 'haschild(B, F), haschild(A, F)'}, {'true,false,false': [3.65e-08, 0, 99], 'true,true': [0.0, 0, 8], 'false,false,true': [7.45e-09, 0, 22], 'false,false,false': [68.669, 15847, 6713], 'false,true,false': [5.43e-07, 0, 1070], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 12]}]]
[{'': [2.3906110735853837e-15, 0.22121310750466364], 'true': [-2.220446049250313e-16, 1.0048079091556972e-15], 'false,true': [-1.4802973661668753e-16, -1.6148698540002277e-16], 'false': [1.6718652606120004e-15, 0.22088521391170796], 'true,false': [nan, 1.0048079091556972e-15]}, {'': [-3.984351789308973e-16, 0.2210119287496934], 'false,true': [1.4802973661668753e-16, 1.6148698540002277e-16], 'false,false': [3.1662315552375306e-14, 0.2090188791274794], 'false': [-5.224578939412502e-16, 0.22088521391178914], 'true': [1.1102230246251565e-16, 3.5885996755560615e-16], 'true,false': [nan, 3.5885996755560615e-16]}, {'': [1.7265524420338883e-15, 0.21369540594883196], 'true': [-1.1102230246251565e-16, 1.7225278442669096e-15], 'false,true': [-2.590520390792032e-16, -2.0185873175002846e-16], 'false': [1.5673736818237505e-16, 0.21375291440215619], 'true,false': [nan, 1.7225278442669096e-15]}, {'': [7.636674262842198e-16, 0.2131457592083126], 'false,true': [1.4802973661668753e-16, -4.887471528219007e-15], 'false,false': [6.055761952500853e-17, 0.209018879127595], 'false': [0.0006178323536175236, 0.20891930909165057], 'true': [1.1102230246251565e-16, 4.66517957822288e-16], 'true,false': [nan, 5.382899513334092e-16]}, {'': [1.328117263102991e-16, 0.20699700276271574], 'false,true': [-5.551115123125783e-17, 2.7624839072542213e-15], 'false,false': [2.0185873175002847e-17, 0.2090188791277564], 'false': [0.00033853513809845026, 0.20887387792684378], 'true': [-4.163336342344337e-17, 0.0], 'true,false': [nan, 0.0]}, {'': [-4.980439736636216e-17, 0.20354318949481162], 'true': [2.7755575615628914e-17, -4.485749594445077e-17], 'false,false': [2.071862930440666e-15, 0.20901887912765024], 'false': [-1.3061447348531253e-17, 0.20379001631968657], 'true,false': [nan, -4.485749594445077e-17]}, {'': [2.0751832235984234e-16, 0.20181323684198907], 'false,true': [-2.7755575615628914e-17, 1.0226502925893031e-15], 'false,false': [-1.0092936587501423e-17, 0.20901887912767697], 'false': [7.414060960867922e-05, 0.20883988814368784], 'true': [-2.0816681711721685e-17, 1.4354398702224247e-16], 'true,false': [nan, 1.6148698540002277e-16]}, {'': [-4.1503664471968466e-18, 0.20092120409079886], 'false,true': [9.25185853854297e-18, -1.3878825399426257e-15], 'false,false': [-3.027880976250427e-17, 0.2090188791276096], 'false': [3.734825114432078e-05, 0.20883324650505958], 'true': [6.938893903907228e-18, 6.728624391667616e-17], 'true,false': [nan, 6.728624391667616e-17]}, {'': [-4.150366447196847e-17, 0.20042597844980448], 'false,true': [9.25185853854297e-18, 6.308556999739207e-16], 'false,false': [-3.027880976250427e-17, 0.2090188791277985], 'false': [2.0261216136653406e-05, 0.20882915856029555], 'true': [-3.469446951953614e-18, -5.3828995133340925e-17], 'true,false': [nan, -5.3828995133340925e-17]}, {'': [1.867664901238581e-17, 0.20012882601403348], 'false,true': [0.0, 2.7558433209387063e-16], 'false,false': [2.523234146875356e-18, 0.20901887912778913], 'false': [1.174660066994723e-05, 0.2088264575834807], 'true': [0.0, 1.570012358055777e-17], 'true,false': [nan, 1.3457248783335231e-17]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;ismarriedto(A, B) :- created(B, C), created(A, C).;true;true', '0;true;haschild(B, D), haschild(A, D).;true;true', '0;false,true;haschild(B, G), haschild(A, G).;true;true', '0;false;haschild(F, B), haschild(F, A).;true;true', '1;;ismarriedto(A, B) :- created(B, C), created(A, C).;true;true', '1;true;haschild(B, D), haschild(A, D).;true;true', '1;false,true;haschild(B, G), haschild(A, G).;true;true', '1;false,false;haschild(B, H), haschild(A, H).;true;true', '1;false;haschild(F, B), haschild(F, A).;true;true', '2;;ismarriedto(A, B) :- created(B, C), created(A, C).;true;true', '2;true;haschild(B, D), haschild(A, D).;true;true', '2;false,true;haschild(B, G), haschild(A, G).;true;true', '2;false;haschild(F, B), haschild(F, A).;true;true', '3;;ismarriedto(A, B) :- created(B, C), created(A, C).;true;true', '3;true;haschild(B, D), haschild(A, D).;true;true', '3;false,true;haschild(G, B), haschild(G, A).;true;true', '3;false,false;haschild(H, B), haschild(H, A).;true;true', '3;false;haschild(B, F), haschild(A, F).;true;true', '4;;ismarriedto(A, B) :- created(B, C), created(A, C).;true;true', '4;true;haschild(B, D), haschild(A, D).;true;true', '4;false,true;haschild(G, B), haschild(G, A).;true;true', '4;false,false;haschild(H, B), haschild(H, A).;true;true', '4;false;haschild(B, F), haschild(A, F).;true;true', '5;;ismarriedto(A, B) :- created(B, C), created(A, C).;true;true', '5;true;haschild(B, D), haschild(A, D).;true;true', '5;false,false;haschild(B, G), haschild(A, G).;true;true', '5;false;haschild(F, B), haschild(F, A).;true;true', '6;;ismarriedto(A, B) :- created(B, C), created(A, C).;true;true', '6;true;haschild(B, D), haschild(A, D).;true;true', '6;false,true;haschild(G, B), haschild(G, A).;true;true', '6;false,false;haschild(H, B), haschild(H, A).;true;true', '6;false;haschild(B, F), haschild(A, F).;true;true', '7;;ismarriedto(A, B) :- created(B, C), created(A, C).;true;true', '7;true;haschild(B, D), haschild(A, D).;true;true', '7;false,true;haschild(G, B), haschild(G, A).;true;true', '7;false,false;haschild(H, B), haschild(H, A).;true;true', '7;false;haschild(B, F), haschild(A, F).;true;true', '8;;ismarriedto(A, B) :- created(B, C), created(A, C).;true;true', '8;true;haschild(B, D), haschild(A, D).;true;true', '8;false,true;haschild(G, B), haschild(G, A).;true;true', '8;false,false;haschild(H, B), haschild(H, A).;true;true', '8;false;haschild(B, F), haschild(A, F).;true;true', '9;;ismarriedto(A, B) :- created(B, C), created(A, C).;true;true', '9;true;haschild(B, D), haschild(A, D).;true;true', '9;false,true;haschild(G, B), haschild(G, A).;true;true', '9;false,false;haschild(H, B), haschild(H, A).;true;true', '9;false;haschild(B, F), haschild(A, F).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995115;  // std dev = 3,15e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(E, B), haschild(E, A) )
%   | then if ( haschild(B, F), haschild(A, F) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( haschild(B, G), haschild(A, G) )
%   | | then return 0.8581489350995075;  // std dev = 4,61e-06, 1.070,000 (wgt'ed) examples reached here.  /* #pos=1.070 */
%   | | else if ( haschild(A, H) )
%   | | | then return 0.002024667210534004;  // std dev = 21,993, 3.927,000 (wgt'ed) examples reached here.  /* #neg=3.362 #pos=565 */
%   | | | else return 0.18810117038123347;  // std dev = 64,183, 18.633,000 (wgt'ed) examples reached here.  /* #neg=12.485 #pos=6.148 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109541;  // std dev = 1,88e-07, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(E, B), haschild(E, A) )
%   | then if ( haschild(B, F), haschild(A, F) )
%   | | then return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7194734122109542;  // std dev = 5,96e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( haschild(B, G), haschild(A, G) )
%   | | then return 0.7194734122109588;  // std dev = 0,000, 1.070,000 (wgt'ed) examples reached here.  /* #pos=1.070 */
%   | | else if ( actedin(B, H), actedin(A, I) )
%   | | | then return 0.37993315999377936;  // std dev = 19,302, 1.506,000 (wgt'ed) examples reached here.  /* #neg=686 #pos=820 */
%   | | | else return 0.11796648611585712;  // std dev = 64,955, 21.054,000 (wgt'ed) examples reached here.  /* #neg=15.161 #pos=5.893 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswonprize(A, E) )
%   | | then return 0.5553664367462847;  // std dev = 1,49e-08, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( wasbornin(A, F) )
%   | | | then return 0.5553664367462847;  // std dev = 7,30e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.5553664367462839;  // std dev = 2,31e-07, 48,000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( haschild(G, B), haschild(G, A) )
%   | then return 0.5553664367462844;  // std dev = 1,29e-08, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( haschild(H, A), actedin(B, I) )
%   | | then if ( actedin(A, J) )
%   | | | then return 0.3407174622902922;  // std dev = 4,361, 83,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return -0.12980886554315832;  // std dev = 4,626, 592,000 (wgt'ed) examples reached here.  /* #neg=569 #pos=23 */
%   | | else if ( haschild(A, K), haschild(B, K) )
%   | | | then return 0.5553664367462905;  // std dev = 0,000, 1.062,000 (wgt'ed) examples reached here.  /* #pos=1.062 */
%   | | | else return 0.12193704422533479;  // std dev = 67,659, 21.893,000 (wgt'ed) examples reached here.  /* #neg=15.243 #pos=6.650 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.41751358415830986;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswonprize(B, E) )
%   | | then return 0.41751358415831047;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.4175135841583106;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( haschild(B, F), haschild(A, F) )
%   | then if ( haschild(G, B), haschild(G, A) )
%   | | then return 0.4175135841583098;  // std dev = 1,29e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( diedin(B, H), actedin(B, I) )
%   | | | then return 0.4337198195847161;  // std dev = 0,173, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.41776494190552554;  // std dev = 0,118, 1.053,000 (wgt'ed) examples reached here.  /* #pos=1.053 */
%   | else if ( haschild(J, B), haschild(J, A) )
%   | | then return 0.4175135841583099;  // std dev = 9,13e-09, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( haschild(A, K) )
%   | | | then return -0.028484593621745796;  // std dev = 21,893, 3.927,000 (wgt'ed) examples reached here.  /* #neg=3.362 #pos=565 */
%   | | | else return 0.12461136678425888;  // std dev = 63,932, 18.633,000 (wgt'ed) examples reached here.  /* #neg=12.485 #pos=6.148 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then return 0.32071184716015005;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   else if ( haschild(B, D), haschild(A, D) )
%   | then if ( haschild(E, B), haschild(E, A) )
%   | | then if ( haschild(A, F), haschild(F, G) )
%   | | | then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haschild(H, A), actedin(B, I) )
%   | | | then return 0.3819840306527923;  // std dev = 0,104, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3206114045627354;  // std dev = 0,013, 1.062,000 (wgt'ed) examples reached here.  /* #pos=1.062 */
%   | else if ( haschild(J, B), haschild(J, A) )
%   | | then if ( haschild(A, K) )
%   | | | then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( haschild(B, L) )
%   | | | then return -0.03345827138424127;  // std dev = 23,167, 3.691,000 (wgt'ed) examples reached here.  /* #neg=3.027 #pos=664 */
%   | | | else return 0.10371461648008336;  // std dev = 63,428, 18.869,000 (wgt'ed) examples reached here.  /* #neg=12.820 #pos=6.049 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then return 0.2551722425694896;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   else if ( haschild(D, B), haschild(D, A) )
%   | then if ( haschild(A, E) )
%   | | then if ( haschild(B, E) )
%   | | | then return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2551722425694894;  // std dev = 1,83e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( haschild(B, F) )
%   | | | then return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2551722425694894;  // std dev = 1,29e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haschild(B, G), haschild(A, G) )
%   | | then if ( haswonprize(A, H), diedin(B, I) )
%   | | | then return 0.2664271100732904;  // std dev = 0,127, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2552720618113304;  // std dev = 0,073, 1.056,000 (wgt'ed) examples reached here.  /* #pos=1.056 */
%   | | else if ( actedin(B, J), actedin(A, K) )
%   | | | then return 0.2560598732686935;  // std dev = 19,262, 1.506,000 (wgt'ed) examples reached here.  /* #neg=686 #pos=820 */
%   | | | else return 0.05356341720419398;  // std dev = 64,550, 21.054,000 (wgt'ed) examples reached here.  /* #neg=15.161 #pos=5.893 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.20975771563253545;  // std dev = 6,45e-09, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(B, E), haschild(A, E) )
%   | then if ( haschild(F, B), haschild(F, A) )
%   | | then if ( haschild(A, G), haschild(G, H) )
%   | | | then return 0.2097577156325357;  // std dev = 1,67e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.20975771563253576;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( actedin(B, I), wasbornin(A, J) )
%   | | | then return 0.21548360174759212;  // std dev = 0,120, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.20976429798561977;  // std dev = 0,050, 1.038,000 (wgt'ed) examples reached here.  /* #pos=1.038 */
%   | else if ( haschild(K, B), haschild(K, A) )
%   | | then return 0.20975771563253573;  // std dev = 4,56e-09, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( haschild(A, L) )
%   | | | then return -0.04479177400483932;  // std dev = 21,837, 3.927,000 (wgt'ed) examples reached here.  /* #neg=3.362 #pos=565 */
%   | | | else return 0.07548985771724838;  // std dev = 63,611, 18.633,000 (wgt'ed) examples reached here.  /* #neg=12.485 #pos=6.148 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.17709649774527714;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17709649774527708;  // std dev = 3,73e-09, 99,000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haschild(B, E), haschild(A, E) )
%   | then if ( haschild(F, B), haschild(F, A) )
%   | | then if ( haschild(A, G), haschild(G, H) )
%   | | | then return 0.17709649774527736;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( actedin(B, I), wrotemusicfor(J, I) )
%   | | | then return 0.1798129355855928;  // std dev = 0,114, 69,000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | | else return 0.17705120155505097;  // std dev = 0,024, 1.001,000 (wgt'ed) examples reached here.  /* #pos=1.001 */
%   | else if ( haschild(K, B), haschild(K, A) )
%   | | then return 0.17709649774527747;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( haschild(B, L) )
%   | | | then return -0.047600929348402536;  // std dev = 23,103, 3.691,000 (wgt'ed) examples reached here.  /* #neg=3.027 #pos=664 */
%   | | | else return 0.06160103553209594;  // std dev = 63,109, 18.869,000 (wgt'ed) examples reached here.  /* #neg=12.820 #pos=6.049 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then return 0.15274385809367086;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   else if ( haschild(B, D), haschild(A, D) )
%   | then if ( haschild(E, B), haschild(E, A) )
%   | | then if ( haschild(A, F), haschild(F, G) )
%   | | | then return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( actedin(B, H), haswonprize(A, I) )
%   | | | then return 0.1600889549561606;  // std dev = 0,093, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.15271540114701745;  // std dev = 0,041, 1.051,000 (wgt'ed) examples reached here.  /* #pos=1.051 */
%   | else if ( haschild(J, B), haschild(J, A) )
%   | | then if ( haschild(A, K) )
%   | | | then return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15274385809367091;  // std dev = 1,29e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( haschild(A, L) )
%   | | | then return -0.04445737121838824;  // std dev = 21,827, 3.927,000 (wgt'ed) examples reached here.  /* #neg=3.362 #pos=565 */
%   | | | else return 0.051918415319893926;  // std dev = 63,498, 18.633,000 (wgt'ed) examples reached here.  /* #neg=12.485 #pos=6.148 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.13400703000801095;  // std dev = 1,86e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswonprize(B, E) )
%   | | then return 0.134007030008011;  // std dev = 1,86e-09, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.13400703000801087;  // std dev = 6,45e-09, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( haschild(B, F), haschild(A, F) )
%   | then if ( haschild(G, B), haschild(G, A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( actedin(B, H), diedin(B, I) )
%   | | | then return 0.13878300487300566;  // std dev = 0,084, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.1340120762034709;  // std dev = 0,040, 1.053,000 (wgt'ed) examples reached here.  /* #pos=1.053 */
%   | else if ( haschild(J, B), haschild(J, A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( actedin(A, K), actedin(B, L) )
%   | | | then return 0.16229074628764442;  // std dev = 19,224, 1.506,000 (wgt'ed) examples reached here.  /* #neg=686 #pos=820 */
%   | | | else return 0.01801849154123824;  // std dev = 64,254, 21.054,000 (wgt'ed) examples reached here.  /* #neg=15.161 #pos=5.893 */


Results
   AUC ROC   = 0.686469
   AUC PR    = 0.585544
   CLL	      = -0.565766
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.145652
   F1        = 0.254269


Total learning time: 539.146 seconds
Total inference time: 60.723 seconds
AUC ROC: 0.686469


Refined model AUC ROC: 0.686469


Dataset: 28_cora_yago2s, Fold: 2, Type: transfer, Time: 04:46:16
{'Precision': [1.0, 0.5], 'Parameter Learning results': {'Precision': [1.0, 0.5], 'CLL': -0.589359, 'Inference time': 67.642, 'Recall': 0.145652, 'AUC ROC': 0.572826, 'F1': 0.254269, 'AUC PR': 0.493773, 'Learning time': 452.526}, 'CLL': -0.565766, 'Inference time': 60.723, 'Recall': 0.145652, 'AUC ROC': 0.686469, 'F1': 0.254269, 'AUC PR': 0.585544, 'Learning time': 991.672, 'Mapping results': {'Generating mappings time': 1.6303284168243408, 'Possible mappings': 43904, 'Knowledge compiling time': 21.95796823501587, 'Total time': 38.32724928855896, 'Generating paths time': 2.3235104084014893, 'Finding best mapping': 12.415434837341309}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), actedin(A, D) )
%   then if ( directed(E, D), directed(E, C) )
%   | then return 0.8128414917338127;  // std dev = 0,208, 309,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=295 */
%   | else if ( created(F, C), actedin(F, C) )
%   | | then if ( haschild(B, G), haschild(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2081489350995135;  // std dev = 6,745, 200,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=70 */
%   | | else if ( haswonprize(A, H), edited(I, D) )
%   | | | then return 0.22111189806247597;  // std dev = 5,587, 135,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=49 */
%   | | | else return 0.3576000876790907;  // std dev = 15,091, 911,000 (wgt'ed) examples reached here.  /* #neg=456 #pos=455 */
%   else if ( haschild(A, J), haschild(B, J) )
%   | then return 0.8581489350995075;  // std dev = 4,54e-06, 1.045,000 (wgt'ed) examples reached here.  /* #pos=1.045 */
%   | else if ( haschild(A, K) )
%   | | then return -6.715241906799975E-4;  // std dev = 0,348, 3.832,000 (wgt'ed) examples reached here.  /* #neg=3.291 #pos=541 */
%   | | else if ( actedin(A, L) )
%   | | | then return 0.07963182483334752;  // std dev = 23,328, 3.156,000 (wgt'ed) examples reached here.  /* #neg=2.457 #pos=699 */
%   | | | else return 0.19404564738961574;  // std dev = 56,230, 14.174,000 (wgt'ed) examples reached here.  /* #neg=9.413 #pos=4.761 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.7207857639590453;  // std dev = 0,340, 1.090,000 (wgt'ed) examples reached here.  /* #pos=1.090 */
%   else if ( haschild(A, D) )
%   | then if ( haschild(E, B) )
%   | | then if ( haschild(B, F) )
%   | | | then return -0.03256361478554665;  // std dev = 6,046, 374,000 (wgt'ed) examples reached here.  /* #neg=333 #pos=41 */
%   | | | else return 0.22139173480174118;  // std dev = 9,483, 390,000 (wgt'ed) examples reached here.  /* #neg=248 #pos=142 */
%   | | else if ( haschild(D, G), wasbornin(B, H) )
%   | | | then return -0.12347323451215017;  // std dev = 2,622, 381,000 (wgt'ed) examples reached here.  /* #neg=374 #pos=7 */
%   | | | else return -0.004098319839766406;  // std dev = 18,225, 2.798,000 (wgt'ed) examples reached here.  /* #neg=2.407 #pos=391 */
%   | else if ( actedin(A, I), actedin(B, J) )
%   | | then if ( created(K, I), created(K, J) )
%   | | | then return 0.6804884696731918;  // std dev = 3,305, 202,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=189 */
%   | | | else return 0.3079169787877583;  // std dev = 17,155, 1.206,000 (wgt'ed) examples reached here.  /* #neg=602 #pos=604 */
%   | | else if ( haschild(B, L) )
%   | | | then return 0.02730245490362265;  // std dev = 20,933, 2.846,000 (wgt'ed) examples reached here.  /* #neg=2.301 #pos=545 */
%   | | | else return 0.17494769374352154;  // std dev = 56,932, 14.484,000 (wgt'ed) examples reached here.  /* #neg=9.569 #pos=4.915 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), actedin(B, D) )
%   then if ( actedin(A, E) )
%   | then if ( directed(F, E), created(F, E) )
%   | | then return 0.1872329383546378;  // std dev = 0,454, 58,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=26 */
%   | | else return 0.592568585336616;  // std dev = 0,315, 25,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | else return -0.12247045529594384;  // std dev = 0,190, 592,000 (wgt'ed) examples reached here.  /* #neg=569 #pos=23 */
%   else if ( haschild(G, A), haschild(B, H) )
%   | then if ( haschild(A, H) )
%   | | then return 0.5550423482460122;  // std dev = 0,000, 571,000 (wgt'ed) examples reached here.  /* #pos=571 */
%   | | else if ( haschild(A, I) )
%   | | | then return 0.004239426149395078;  // std dev = 6,608, 357,000 (wgt'ed) examples reached here.  /* #neg=306 #pos=51 */
%   | | | else return 0.24352701300379345;  // std dev = 9,365, 363,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=150 */
%   | else if ( haswonprize(B, J), haswonprize(A, J) )
%   | | then return 0.6930471881038858;  // std dev = 0,238, 88,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=84 */
%   | | else if ( haschild(A, K), haschild(B, K) )
%   | | | then return 0.5579585170764845;  // std dev = 0,391, 501,000 (wgt'ed) examples reached here.  /* #pos=501 */
%   | | | else return 0.12100357237298898;  // std dev = 66,096, 21.216,000 (wgt'ed) examples reached here.  /* #neg=14.720 #pos=6.496 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, D) )
%   then if ( haschild(A, C) )
%   | then return 0.4189080439561081;  // std dev = 0,589, 1.090,000 (wgt'ed) examples reached here.  /* #pos=1.090 */
%   | else if ( livesin(C, E), livesin(A, F) )
%   | | then return 0.6493269583359105;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haschild(G, A), haschild(C, H) )
%   | | | then return 0.03888483404224316;  // std dev = 5,284, 191,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=34 */
%   | | | else return -0.07470156344969452;  // std dev = 6,184, 559,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=42 */
%   else if ( isaffiliatedto(A, I), isaffiliatedto(B, I) )
%   | then return 0.6941228158321465;  // std dev = 0,292, 154,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=139 */
%   | else if ( haschild(A, J) )
%   | | then if ( actedin(B, K) )
%   | | | then return -0.06533606396930945;  // std dev = 6,825, 683,000 (wgt'ed) examples reached here.  /* #neg=624 #pos=59 */
%   | | | else return 0.014394892188166237;  // std dev = 18,799, 2.494,000 (wgt'ed) examples reached here.  /* #neg=2.059 #pos=435 */
%   | | else if ( haschild(B, L) )
%   | | | then return 0.009242939159898156;  // std dev = 21,380, 2.941,000 (wgt'ed) examples reached here.  /* #neg=2.350 #pos=591 */
%   | | | else return 0.13717671430650638;  // std dev = 59,089, 15.654,000 (wgt'ed) examples reached here.  /* #neg=10.124 #pos=5.530 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.32177867805425797;  // std dev = 0,563, 1.090,000 (wgt'ed) examples reached here.  /* #pos=1.090 */
%   else if ( actedin(B, D), actedin(A, D) )
%   | then if ( directed(E, D) )
%   | | then if ( wrotemusicfor(F, D), livesin(A, G) )
%   | | | then return 0.19207083048309131;  // std dev = 0,793, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5206913329628087;  // std dev = 1,607, 186,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=184 */
%   | | else if ( created(H, D) )
%   | | | then return 0.6010926248442292;  // std dev = 0,099, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6884107002844543;  // std dev = 0,221, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( haschild(A, I) )
%   | | then if ( haschild(J, B), haschild(K, A) )
%   | | | then return 0.11428392239393037;  // std dev = 8,811, 400,000 (wgt'ed) examples reached here.  /* #neg=289 #pos=111 */
%   | | | else return -0.023986870818515766;  // std dev = 19,689, 3.532,000 (wgt'ed) examples reached here.  /* #neg=3.073 #pos=459 */
%   | | else if ( haschild(B, L) )
%   | | | then return 0.006452645315769961;  // std dev = 21,348, 2.936,000 (wgt'ed) examples reached here.  /* #neg=2.352 #pos=584 */
%   | | | else return 0.11224030599916734;  // std dev = 59,076, 15.597,000 (wgt'ed) examples reached here.  /* #neg=10.130 #pos=5.467 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(D, B) )
%   then if ( haschild(A, E) )
%   | then return 0.17421383805079488;  // std dev = 0,325, 777,000 (wgt'ed) examples reached here.  /* #neg=289 #pos=488 */
%   | else return 0.3029767842553881;  // std dev = 0,493, 462,000 (wgt'ed) examples reached here.  /* #neg=214 #pos=248 */
%   else if ( actedin(B, F), actedin(A, G) )
%   | then if ( directed(H, F), directed(H, G) )
%   | | then return 0.39713137078795446;  // std dev = 0,211, 309,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=295 */
%   | | else if ( diedin(A, I), diedin(B, I) )
%   | | | then return 0.6169628466560786;  // std dev = 0,969, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.14568479742922222;  // std dev = 17,044, 1.235,000 (wgt'ed) examples reached here.  /* #neg=670 #pos=565 */
%   | else if ( actedin(A, J), directed(B, K) )
%   | | then if ( actedin(A, K) )
%   | | | then return 0.7511756605918881;  // std dev = 0,550, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.19943202812642863;  // std dev = 6,702, 187,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=81 */
%   | | else if ( haschild(A, L), haschild(B, L) )
%   | | | then return 0.25386602726549046;  // std dev = 0,066, 665,000 (wgt'ed) examples reached here.  /* #pos=665 */
%   | | | else return 0.04664708607225277;  // std dev = 61,944, 20.063,000 (wgt'ed) examples reached here.  /* #neg=14.553 #pos=5.510 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(D, B) )
%   then if ( haschild(E, C), haschild(E, D) )
%   | then return 0.4919266083043203;  // std dev = 0,255, 66,000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else if ( actedin(A, F) )
%   | | then return -0.13841803722349594;  // std dev = 0,293, 37,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | | else if ( haschild(A, G) )
%   | | | then return 0.1346231568014023;  // std dev = 8,707, 726,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=444 */
%   | | | else return 0.24545493950981362;  // std dev = 9,990, 410,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=221 */
%   else if ( iscitizenof(A, H), iscitizenof(B, H) )
%   | then if ( haschild(A, I) )
%   | | then return 0.24136202594063944;  // std dev = 0,256, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.5966174322488847;  // std dev = 0,318, 100,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=88 */
%   | else if ( isaffiliatedto(A, J), isaffiliatedto(B, J) )
%   | | then return 0.4661491917707669;  // std dev = 0,302, 163,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=148 */
%   | | else if ( actedin(A, K), actedin(B, L) )
%   | | | then return 0.15664256727002626;  // std dev = 17,754, 1.560,000 (wgt'ed) examples reached here.  /* #neg=684 #pos=876 */
%   | | | else return 0.04036171521569914;  // std dev = 61,902, 20.701,000 (wgt'ed) examples reached here.  /* #neg=14.632 #pos=6.069 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), haschild(D, A) )
%   then if ( actedin(A, E) )
%   | then if ( haswonprize(D, F), directed(G, C) )
%   | | then return -0.12773858077384675;  // std dev = 0,369, 16,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return 0.1538048047630015;  // std dev = 0,401, 67,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=43 */
%   | else return -0.13275748580593136;  // std dev = 0,191, 592,000 (wgt'ed) examples reached here.  /* #neg=569 #pos=23 */
%   else if ( isaffiliatedto(B, H), isaffiliatedto(A, H) )
%   | then if ( haschild(A, I), haschild(B, I) )
%   | | then return 0.15158226234289982;  // std dev = 0,119, 31,000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( ispoliticianof(A, J), livesin(B, K) )
%   | | | then return -0.09605296779255337;  // std dev = 1,308, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.437235203227483;  // std dev = 2,997, 147,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=137 */
%   | else if ( haschild(A, L), haschild(B, L) )
%   | | then return 0.20010306997824964;  // std dev = 0,470, 1.051,000 (wgt'ed) examples reached here.  /* #pos=1.051 */
%   | | else if ( haschild(B, M) )
%   | | | then return -0.024229517152766288;  // std dev = 22,569, 3.649,000 (wgt'ed) examples reached here.  /* #neg=2.984 #pos=665 */
%   | | | else return 0.05738132885377675;  // std dev = 61,447, 18.210,000 (wgt'ed) examples reached here.  /* #neg=12.244 #pos=5.966 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.16970065838458426;  // std dev = 0,590, 1.090,000 (wgt'ed) examples reached here.  /* #pos=1.090 */
%   else if ( haschild(A, D) )
%   | then if ( haschild(A, B) )
%   | | then if ( haschild(E, A), haschild(E, D) )
%   | | | then return 0.6982135886658618;  // std dev = 0,063, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.775562695954195;  // std dev = 0,151, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( haschild(D, F), actedin(B, G) )
%   | | | then return -0.12312683687145229;  // std dev = 1,330, 333,000 (wgt'ed) examples reached here.  /* #neg=330 #pos=3 */
%   | | | else return -0.02464065853839173;  // std dev = 21,103, 3.591,000 (wgt'ed) examples reached here.  /* #neg=3.032 #pos=559 */
%   | else if ( created(A, H), actedin(B, H) )
%   | | then if ( actedin(A, I), created(J, I) )
%   | | | then return 0.31739124058794554;  // std dev = 0,577, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.72029812852423;  // std dev = 0,253, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( haschild(B, K), actedin(A, L) )
%   | | | then return -0.10509295819101919;  // std dev = 6,828, 651,000 (wgt'ed) examples reached here.  /* #neg=578 #pos=73 */
%   | | | else return 0.050364702008577615;  // std dev = 61,731, 18.040,000 (wgt'ed) examples reached here.  /* #neg=11.907 #pos=6.133 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), actedin(A, D) )
%   then if ( actedin(B, E) )
%   | then if ( created(F, D), created(F, E) )
%   | | then return 0.26373741400177425;  // std dev = 0,164, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( diedin(A, G), diedin(B, H) )
%   | | | then return 0.6952498225687913;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07608683559665319;  // std dev = 4,276, 110,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=55 */
%   | else return -0.11821579909433547;  // std dev = 0,193, 639,000 (wgt'ed) examples reached here.  /* #neg=589 #pos=50 */
%   else if ( actedin(B, I), actedin(A, I) )
%   | then return 0.26097372216635917;  // std dev = 0,142, 203,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=200 */
%   | else if ( actedin(B, J), isaffiliatedto(A, K) )
%   | | then if ( playsfor(A, K) )
%   | | | then return 0.12610056330326475;  // std dev = 1,498, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.19674018736126248;  // std dev = 4,235, 275,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=20 */
%   | | else if ( haschild(A, L), haschild(B, L) )
%   | | | then return 0.1463092618552097;  // std dev = 0,355, 1.018,000 (wgt'ed) examples reached here.  /* #pos=1.018 */
%   | | | else return 0.03038200903670325;  // std dev = 65,092, 21.473,000 (wgt'ed) examples reached here.  /* #neg=14.939 #pos=6.534 */


Results
   AUC ROC   = 0.727384
   AUC PR    = 0.636683
   CLL	      = -0.546835
   Precision = 0.98107 at threshold = 0.5
   Recall    = 0.189701
   F1        = 0.317927


Total learning time: 762.728 seconds
Total inference time: 64.599 seconds
AUC ROC: 0.727384


Dataset: 28_cora_yago2s, Fold: 2, Type: scratch, Time: 05:00:06
{'Precision': [0.98107, 0.5], 'CLL': -0.546835, 'Inference time': 64.599, 'Recall': 0.189701, 'AUC ROC': 0.727384, 'F1': 0.317927, 'AUC PR': 0.636683, 'Learning time': 762.728}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 21.134007453918457
   Generating paths time   = 2.738664150238037
   Generating mappings time   = 1.2563819885253906
   Possible mappings   = 43904
   Finding best mapping   = 11.821825742721558
   Total time   = 36.95088529586792


Best mapping found: ['venue(A,B) -> haschild(A,B)', 'author(A,B) -> haschild(B,A)', 'samebib(A,B) -> ismarriedto(A,B)', 'title(A,B) -> created(A,B)'] 

Transferred target predicate: ismarriedto 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true
0;true;haschild(A, D), haschild(B, D).;false;true
0;false,true;haschild(A, G), haschild(B, G).;false;false
0;true,false;haschild(E, A), haschild(E, B).;false;false
0;false;haschild(F, A), haschild(F, B).;true;false
1;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true
1;false,true;haschild(A, G), haschild(B, G).;false;false
1;false,false;haschild(A, H), haschild(B, H).;false;false
1;true,false;haschild(E, A), haschild(E, B).;false;false
1;true;haschild(A, D), haschild(B, D).;false;true
1;false;haschild(F, A), haschild(F, B).;true;true
2;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true
2;true;haschild(A, D), haschild(B, D).;false;true
2;false,true;haschild(A, G), haschild(B, G).;false;false
2;true,false;haschild(E, A), haschild(E, B).;false;false
2;false;haschild(F, A), haschild(F, B).;true;false
3;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true
3;false,true;haschild(G, A), haschild(G, B).;false;false
3;false,false;haschild(H, A), haschild(H, B).;false;false
3;true,false;haschild(E, A), haschild(E, B).;false;false
3;true;haschild(A, D), haschild(B, D).;false;true
3;false;haschild(A, F), haschild(B, F).;true;true
4;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true
4;false,true;haschild(G, A), haschild(G, B).;false;false
4;false,false;haschild(H, A), haschild(H, B).;false;false
4;true,false;haschild(E, A), haschild(E, B).;false;false
4;true;haschild(A, D), haschild(B, D).;false;true
4;false;haschild(A, F), haschild(B, F).;true;true
5;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true
5;true;haschild(A, D), haschild(B, D).;false;true
5;false,false;haschild(A, G), haschild(B, G).;false;false
5;true,false;haschild(E, A), haschild(E, B).;false;false
5;false;haschild(F, A), haschild(F, B).;false;true
6;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true
6;false,true;haschild(G, A), haschild(G, B).;false;false
6;false,false;haschild(H, A), haschild(H, B).;false;false
6;true,false;haschild(E, A), haschild(E, B).;false;false
6;true;haschild(A, D), haschild(B, D).;false;true
6;false;haschild(A, F), haschild(B, F).;true;true
7;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true
7;false,true;haschild(G, A), haschild(G, B).;false;false
7;false,false;haschild(H, A), haschild(H, B).;false;false
7;true,false;haschild(E, A), haschild(E, B).;false;false
7;true;haschild(A, D), haschild(B, D).;false;true
7;false;haschild(A, F), haschild(B, F).;true;true
8;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true
8;false,true;haschild(G, A), haschild(G, B).;false;false
8;false,false;haschild(H, A), haschild(H, B).;false;false
8;true,false;haschild(E, A), haschild(E, B).;false;false
8;true;haschild(A, D), haschild(B, D).;false;true
8;false;haschild(A, F), haschild(B, F).;true;true
9;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true
9;false,true;haschild(G, A), haschild(G, B).;false;false
9;false,false;haschild(H, A), haschild(H, B).;false;false
9;true,false;haschild(E, A), haschild(E, B).;false;false
9;true;haschild(A, D), haschild(B, D).;false;true
9;false;haschild(A, F), haschild(B, F).;true;true


WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haschild(E, A), haschild(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995117;  // std dev = 2,06e-07, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(F, A), haschild(F, B) )
%   | then if ( haschild(A, G), haschild(B, G) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.1880000601208709;  // std dev = 72,294, 23.644,000 (wgt'ed) examples reached here.  /* #neg=15.845 #pos=7.799 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haschild(E, A), haschild(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109538;  // std dev = 2,80e-07, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(F, A), haschild(F, B) )
%   | then if ( haschild(A, G), haschild(B, G) )
%   | | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.7194734122109544;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haschild(A, H), haschild(B, H) )
%   | | then return 0.8336888666552815;  // std dev = 2,26e-06, 1.005,000 (wgt'ed) examples reached here.  /* #pos=1.005 */
%   | | else return 0.13380371779062755;  // std dev = 68,957, 22.638,000 (wgt'ed) examples reached here.  /* #neg=15.844 #pos=6.794 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haschild(E, A), haschild(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462835;  // std dev = 3,95e-07, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(F, A), haschild(F, B) )
%   | then if ( haschild(A, G), haschild(B, G) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.13866857284951367;  // std dev = 71,195, 23.644,000 (wgt'ed) examples reached here.  /* #neg=15.845 #pos=7.799 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haschild(E, A), haschild(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.4175135841583101;  // std dev = 1,79e-07, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.6546726428571177;  // std dev = 0,000, 1.005,000 (wgt'ed) examples reached here.  /* #pos=1.005 */
%   | else if ( haschild(H, A), haschild(H, B) )
%   | | then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.09254036164706646;  // std dev = 68,956, 22.637,000 (wgt'ed) examples reached here.  /* #neg=15.843 #pos=6.794 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haschild(E, A), haschild(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.32071184716015033;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.49624253511493255;  // std dev = 1,74e-06, 1.005,000 (wgt'ed) examples reached here.  /* #pos=1.005 */
%   | else if ( haschild(H, A), haschild(H, B) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.07689276171464439;  // std dev = 68,957, 22.638,000 (wgt'ed) examples reached here.  /* #neg=15.844 #pos=6.794 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haschild(E, A), haschild(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2551722425694897;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(F, A), haschild(F, B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( haschild(A, G), haschild(B, G) )
%   | | then return 0.37489522761479005;  // std dev = 2,38e-06, 1.005,000 (wgt'ed) examples reached here.  /* #pos=1.005 */
%   | | else return 0.06327695243374083;  // std dev = 68,957, 22.638,000 (wgt'ed) examples reached here.  /* #neg=15.844 #pos=6.794 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haschild(E, A), haschild(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.20975771563253578;  // std dev = 1,07e-07, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.2919012698462093;  // std dev = 0,000, 1.005,000 (wgt'ed) examples reached here.  /* #pos=1.005 */
%   | else if ( haschild(H, A), haschild(H, B) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.05165018395575956;  // std dev = 68,957, 22.638,000 (wgt'ed) examples reached here.  /* #neg=15.844 #pos=6.794 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haschild(E, A), haschild(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17709649774527714;  // std dev = 9,42e-08, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.23539954128178314;  // std dev = 5,06e-07, 1.005,000 (wgt'ed) examples reached here.  /* #pos=1.005 */
%   | else if ( haschild(H, A), haschild(H, B) )
%   | | then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.04189405340441567;  // std dev = 68,956, 22.637,000 (wgt'ed) examples reached here.  /* #neg=15.843 #pos=6.794 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haschild(E, A), haschild(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.15274385809367122;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.1956875251557608;  // std dev = 0,000, 1.005,000 (wgt'ed) examples reached here.  /* #pos=1.005 */
%   | else if ( haschild(H, A), haschild(H, B) )
%   | | then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.033761852157707044;  // std dev = 68,957, 22.639,000 (wgt'ed) examples reached here.  /* #neg=15.845 #pos=6.794 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haschild(E, A), haschild(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1340070300080109;  // std dev = 6,14e-08, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.166705791303423;  // std dev = 0,000, 1.005,000 (wgt'ed) examples reached here.  /* #pos=1.005 */
%   | else if ( haschild(H, A), haschild(H, B) )
%   | | then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.027099612543022733;  // std dev = 68,958, 22.640,000 (wgt'ed) examples reached here.  /* #neg=15.846 #pos=6.794 */


Results
   AUC ROC   = 0.575435
   AUC PR    = 0.498323
   CLL	      = -0.587179
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150871
   F1        = 0.262185


Total learning time: 530.33 seconds
Total inference time: 61.7 seconds
AUC ROC: 0.575435


Structure after Parameter Learning
[['ismarriedto(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'haschild(A, D), haschild(B, D)', 'false,true': 'haschild(A, G), haschild(B, G)', 'true,false': 'haschild(E, A), haschild(E, B)', 'false': 'haschild(F, A), haschild(F, B)'}, {'true,false,false': [2.06e-07, 0, 94], 'false,false': [72.294, 15845, 7799], 'true,true': [2.11e-08, 0, 3], 'false,true,false': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['ismarriedto(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'haschild(A, G), haschild(B, G)', 'false,false': 'haschild(A, H), haschild(B, H)', 'true,false': 'haschild(E, A), haschild(E, B)', 'true': 'haschild(A, D), haschild(B, D)', 'false': 'haschild(F, A), haschild(F, B)'}, {'true,false,false': [2.8e-07, 0, 94], 'true,true': [0.0, 0, 3], 'false,false,true': [2.26e-06, 0, 1005], 'false,false,false': [68.957, 15844, 6794], 'false,true,false': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'false,true,true': [5.16e-08, 0, 15]}], ['ismarriedto(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'haschild(A, D), haschild(B, D)', 'false,true': 'haschild(A, G), haschild(B, G)', 'true,false': 'haschild(E, A), haschild(E, B)', 'false': 'haschild(F, A), haschild(F, B)'}, {'true,false,false': [3.95e-07, 0, 94], 'false,false': [71.195, 15845, 7799], 'true,true': [1.05e-08, 0, 3], 'false,true,false': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['ismarriedto(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'haschild(G, A), haschild(G, B)', 'false,false': 'haschild(H, A), haschild(H, B)', 'true,false': 'haschild(E, A), haschild(E, B)', 'true': 'haschild(A, D), haschild(B, D)', 'false': 'haschild(A, F), haschild(B, F)'}, {'true,false,false': [1.79e-07, 0, 94], 'true,true': [0.0, 0, 3], 'false,false,true': [4.21e-08, 0, 11], 'false,false,false': [68.956, 15843, 6794], 'false,true,false': [0.0, 0, 1005], 'true,false,true': [0.0, 0, 0], 'false,true,true': [4.71e-08, 0, 15]}], ['ismarriedto(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'haschild(G, A), haschild(G, B)', 'false,false': 'haschild(H, A), haschild(H, B)', 'true,false': 'haschild(E, A), haschild(E, B)', 'true': 'haschild(A, D), haschild(B, D)', 'false': 'haschild(A, F), haschild(B, F)'}, {'true,false,false': [0.0, 0, 94], 'true,true': [0.0, 0, 3], 'false,false,true': [0.0, 0, 11], 'false,false,false': [68.957, 15844, 6794], 'false,true,false': [1.74e-06, 0, 1005], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['ismarriedto(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'haschild(A, D), haschild(B, D)', 'false,false': 'haschild(A, G), haschild(B, G)', 'true,false': 'haschild(E, A), haschild(E, B)', 'false': 'haschild(F, A), haschild(F, B)'}, {'false,true': [0.0, 0, 26], 'true,false,false': [0.0, 0, 94], 'true,true': [0.0, 0, 3], 'false,false,true': [2.38e-06, 0, 1005], 'false,false,false': [68.957, 15844, 6794], 'true,false,true': [0.0, 0, 0]}], ['ismarriedto(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'haschild(G, A), haschild(G, B)', 'false,false': 'haschild(H, A), haschild(H, B)', 'true,false': 'haschild(E, A), haschild(E, B)', 'true': 'haschild(A, D), haschild(B, D)', 'false': 'haschild(A, F), haschild(B, F)'}, {'true,false,false': [1.07e-07, 0, 94], 'true,true': [0.0, 0, 3], 'false,false,true': [0.0, 0, 11], 'false,false,false': [68.957, 15844, 6794], 'false,true,false': [0.0, 0, 1005], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['ismarriedto(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'haschild(G, A), haschild(G, B)', 'false,false': 'haschild(H, A), haschild(H, B)', 'true,false': 'haschild(E, A), haschild(E, B)', 'true': 'haschild(A, D), haschild(B, D)', 'false': 'haschild(A, F), haschild(B, F)'}, {'true,false,false': [9.42e-08, 0, 94], 'true,true': [0.0, 0, 3], 'false,false,true': [7.45e-09, 0, 11], 'false,false,false': [68.956, 15843, 6794], 'false,true,false': [5.06e-07, 0, 1005], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['ismarriedto(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'haschild(G, A), haschild(G, B)', 'false,false': 'haschild(H, A), haschild(H, B)', 'true,false': 'haschild(E, A), haschild(E, B)', 'true': 'haschild(A, D), haschild(B, D)', 'false': 'haschild(A, F), haschild(B, F)'}, {'true,false,false': [0.0, 0, 94], 'true,true': [0.0, 0, 3], 'false,false,true': [7.45e-09, 0, 11], 'false,false,false': [68.957, 15845, 6794], 'false,true,false': [0.0, 0, 1005], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['ismarriedto(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'haschild(G, A), haschild(G, B)', 'false,false': 'haschild(H, A), haschild(H, B)', 'true,false': 'haschild(E, A), haschild(E, B)', 'true': 'haschild(A, D), haschild(B, D)', 'false': 'haschild(A, F), haschild(B, F)'}, {'true,false,false': [6.14e-08, 0, 94], 'true,true': [0.0, 0, 3], 'false,false,true': [5.27e-09, 0, 11], 'false,false,false': [68.958, 15846, 6794], 'false,true,false': [0.0, 0, 1005], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}]]
[{'': [1.3185329117197736e-15, 0.22129931716687573], 'true': [1.4802973661668753e-16, 7.558965274043619e-16], 'false,true': [-2.3684757858670006e-16, -1.6148698540002277e-16], 'false': [8.198570028001156e-16, 0.22104936034317105], 'true,false': [nan, 4.535379164426171e-16]}, {'': [2.9300731371550523e-16, 0.2211503929578801], 'false,true': [1.7763568394002506e-16, 0.0], 'false,false': [5.090455420370867e-15, 0.21004592726355484], 'false': [0.0, 0.22105410775276266], 'true': [0.0, 6.047172219234895e-16], 'true,false': [nan, 8.314861801447981e-16]}, {'': [1.7580438822930315e-15, 0.214333279162527], 'true': [3.700743415417188e-17, 1.7763568394002505e-15], 'false,true': [-2.3684757858670006e-16, -4.0371746350005693e-17], 'false': [-3.416070845000482e-16, 0.21437824022530869], 'true,false': [nan, 1.6629723602895962e-15]}, {'': [5.127627990021341e-16, 0.21384809942733488], 'false,true': [1.4802973661668753e-16, -1.4705760103293615e-15], 'false,false': [1.6148698540002277e-16, 0.21005122712736785], 'false': [0.0008149602251686853, 0.21000047455874551], 'true': [-3.700743415417188e-17, 4.535379164426171e-16], 'true,false': [nan, 3.4015343733196285e-16]}, {'': [-3.296332279299434e-16, 0.20810203998742977], 'false,true': [-1.4802973661668754e-17, 3.025992944331571e-15], 'false,false': [-6.055761952500853e-17, 0.21004592726320145], 'false': [0.0004464399873885095, 0.20997277182222124], 'true': [0.0, -3.4015343733196285e-16], 'true,false': [nan, -3.4015343733196285e-16]}, {'': [-4.578239276804769e-17, 0.2048794509048072], 'true': [0.0, -4.724353296277262e-17], 'false,false': [5.6560615781898525e-15, 0.21004592726342086], 'false': [-8.540177112501205e-18, 0.2050696963443024], 'true,false': [nan, -4.724353296277262e-17]}, {'': [1.5566013541136214e-16, 0.20326719114532057], 'false,true': [-2.960594732333751e-17, -3.110833868004419e-16], 'false,false': [-2.5232341468753557e-17, 0.21004592726335003], 'false': [9.776962681893972e-05, 0.2099560486443446], 'true': [0.0, 1.5117930548087238e-16], 'true,false': [nan, 1.2283318570320881e-16]}, {'': [5.9517110598462e-17, 0.20244128269388584], 'false,true': [-7.401486830834377e-18, 2.5452277101854337e-16], 'false,false': [5.046468293750712e-18, 0.21005122712739782], 'false': [4.9253764559962044e-05, 0.20995808051627582], 'true': [0.0, 7.558965274043619e-17], 'true,false': [nan, 9.448706592554524e-17]}, {'': [-1.0529950336650969e-16, 0.20197157117462303], 'false,true': [-2.2204460492503132e-17, -5.302557729552986e-16], 'false,false': [5.046468293750712e-18, 0.2100406275159091], 'false': [2.672115532589194e-05, 0.2099454929182912], 'true': [-4.625929269271485e-18, -9.448706592554524e-17], 'true,false': [nan, -7.558965274043619e-17]}, {'': [4.349327312964531e-17, 0.20169065185617369], 'false,true': [0.0, -2.5452277101854337e-16], 'false,false': [2.523234146875356e-18, 0.2100353278851988], 'false': [1.5492431302545704e-05, 0.20993887613889195], 'true': [-2.3129646346357427e-18, 4.2519179666495357e-17], 'true,false': [nan, 4.015700301835673e-17]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true', '0;true;haschild(A, D), haschild(B, D).;true;true', '0;false,true;haschild(A, G), haschild(B, G).;true;true', '0;false;haschild(F, A), haschild(F, B).;true;true', '1;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true', '1;true;haschild(A, D), haschild(B, D).;true;true', '1;false,true;haschild(A, G), haschild(B, G).;true;true', '1;false,false;haschild(A, H), haschild(B, H).;true;true', '1;false;haschild(F, A), haschild(F, B).;true;true', '2;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true', '2;true;haschild(A, D), haschild(B, D).;true;true', '2;false,true;haschild(A, G), haschild(B, G).;true;true', '2;false;haschild(F, A), haschild(F, B).;true;true', '3;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true', '3;true;haschild(A, D), haschild(B, D).;true;true', '3;false,true;haschild(G, A), haschild(G, B).;true;true', '3;false,false;haschild(H, A), haschild(H, B).;true;true', '3;false;haschild(A, F), haschild(B, F).;true;true', '4;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true', '4;true;haschild(A, D), haschild(B, D).;true;true', '4;false,true;haschild(G, A), haschild(G, B).;true;true', '4;false,false;haschild(H, A), haschild(H, B).;true;true', '4;false;haschild(A, F), haschild(B, F).;true;true', '5;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true', '5;true;haschild(A, D), haschild(B, D).;true;true', '5;false,false;haschild(A, G), haschild(B, G).;true;true', '5;false;haschild(F, A), haschild(F, B).;true;true', '6;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true', '6;true;haschild(A, D), haschild(B, D).;true;true', '6;false,true;haschild(G, A), haschild(G, B).;true;true', '6;false,false;haschild(H, A), haschild(H, B).;true;true', '6;false;haschild(A, F), haschild(B, F).;true;true', '7;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true', '7;true;haschild(A, D), haschild(B, D).;true;true', '7;false,true;haschild(G, A), haschild(G, B).;true;true', '7;false,false;haschild(H, A), haschild(H, B).;true;true', '7;false;haschild(A, F), haschild(B, F).;true;true', '8;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true', '8;true;haschild(A, D), haschild(B, D).;true;true', '8;false,true;haschild(G, A), haschild(G, B).;true;true', '8;false,false;haschild(H, A), haschild(H, B).;true;true', '8;false;haschild(A, F), haschild(B, F).;true;true', '9;;ismarriedto(A, B) :- created(A, C), created(B, C).;true;true', '9;true;haschild(A, D), haschild(B, D).;true;true', '9;false,true;haschild(G, A), haschild(G, B).;true;true', '9;false,false;haschild(H, A), haschild(H, B).;true;true', '9;false;haschild(A, F), haschild(B, F).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.8581489350995116;  // std dev = 2,67e-07, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(E, A), haschild(E, B) )
%   | then if ( haschild(A, F), haschild(B, F) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( actedin(B, G), wasbornin(A, H) )
%   | | then if ( actedin(A, I) )
%   | | | then return 0.46122585817643086;  // std dev = 12,474, 650,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=392 */
%   | | | else return 0.1255402394473336;  // std dev = 13,425, 920,000 (wgt'ed) examples reached here.  /* #neg=674 #pos=246 */
%   | | else if ( haschild(B, J), haschild(A, J) )
%   | | | then return 0.8581489350995075;  // std dev = 4,33e-06, 978,000 (wgt'ed) examples reached here.  /* #pos=978 */
%   | | | else return 0.1512654611260031;  // std dev = 66,111, 21.094,000 (wgt'ed) examples reached here.  /* #neg=14.911 #pos=6.183 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( wasbornin(B, E) )
%   | | then return 0.719473412210955;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.7194734122109546;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   else if ( haschild(F, A), haschild(F, B) )
%   | then if ( haschild(A, G), haschild(B, G) )
%   | | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.7194734122109544;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haschild(A, H), haschild(B, H) )
%   | | then if ( wasbornin(A, I), livesin(J, I) )
%   | | | then return 0.7312679544282225;  // std dev = 0,424, 182,000 (wgt'ed) examples reached here.  /* #pos=182 */
%   | | | else return 0.7197994460328816;  // std dev = 0,160, 823,000 (wgt'ed) examples reached here.  /* #pos=823 */
%   | | else if ( actedin(B, K), actedin(A, L) )
%   | | | then return 0.39709582387450226;  // std dev = 19,082, 1.493,000 (wgt'ed) examples reached here.  /* #neg=630 #pos=863 */
%   | | | else return 0.11936040792849051;  // std dev = 65,324, 21.145,000 (wgt'ed) examples reached here.  /* #neg=15.214 #pos=5.931 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( wasbornin(A, E) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( wasbornin(B, F) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.5553664367462842;  // std dev = 1,40e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else if ( haschild(G, A), haschild(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( isaffiliatedto(A, H), isaffiliatedto(B, H) )
%   | | then if ( haswonprize(A, I), livesin(B, J) )
%   | | | then return 0.06542717820839739;  // std dev = 0,596, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.739522419992715;  // std dev = 3,203, 194,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=184 */
%   | | else if ( haschild(B, K), haschild(A, K) )
%   | | | then return 0.5578910916531024;  // std dev = 0,604, 981,000 (wgt'ed) examples reached here.  /* #pos=981 */
%   | | | else return 0.11273035588387471;  // std dev = 67,993, 22.466,000 (wgt'ed) examples reached here.  /* #neg=15.833 #pos=6.633 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( directed(B, E) )
%   | | then return 0.41751358415831014;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.41751358415831047;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #pos=73 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.4175135841583098;  // std dev = 1,18e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( wasbornin(A, H), isleaderof(I, H) )
%   | | | then return 0.4412833019601364;  // std dev = 0,486, 68,000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.41719895089847814;  // std dev = 0,469, 937,000 (wgt'ed) examples reached here.  /* #pos=937 */
%   | else if ( haschild(J, A), haschild(J, B) )
%   | | then return 0.4175135841583098;  // std dev = 1,29e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( haschild(A, K) )
%   | | | then return -0.040877218279765065;  // std dev = 22,513, 3.882,000 (wgt'ed) examples reached here.  /* #neg=3.275 #pos=607 */
%   | | | else return 0.1283808230744585;  // std dev = 63,870, 18.757,000 (wgt'ed) examples reached here.  /* #neg=12.570 #pos=6.187 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3207118471601502;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   else if ( haschild(A, E), haschild(B, E) )
%   | then if ( haschild(F, A), haschild(F, B) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( haschild(A, G), haschild(G, H) )
%   | | | then return 0.3194007533147624;  // std dev = 0,082, 516,000 (wgt'ed) examples reached here.  /* #pos=516 */
%   | | | else return 0.32429546724720787;  // std dev = 0,641, 489,000 (wgt'ed) examples reached here.  /* #pos=489 */
%   | else if ( haschild(I, A), haschild(I, B) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( haschild(B, J) )
%   | | | then return -0.05888843962766567;  // std dev = 21,042, 3.456,000 (wgt'ed) examples reached here.  /* #neg=2.924 #pos=532 */
%   | | | else return 0.10828173486380721;  // std dev = 64,205, 19.182,000 (wgt'ed) examples reached here.  /* #neg=12.920 #pos=6.262 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.25517224256948956;  // std dev = 0,000, 97,000 (wgt'ed) examples reached here.  /* #pos=97 */
%   else if ( haschild(D, A), haschild(D, B) )
%   | then if ( haschild(A, E) )
%   | | then if ( haschild(B, E) )
%   | | | then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haschild(B, F) )
%   | | | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haschild(A, G), haschild(B, G) )
%   | | then if ( actedin(A, H) )
%   | | | then return 0.27756853943720233;  // std dev = 0,273, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.2546961184200906;  // std dev = 0,491, 947,000 (wgt'ed) examples reached here.  /* #pos=947 */
%   | | else if ( haschild(A, I) )
%   | | | then return -0.04707952573816973;  // std dev = 22,466, 3.881,000 (wgt'ed) examples reached here.  /* #neg=3.274 #pos=607 */
%   | | | else return 0.09207214932317767;  // std dev = 63,639, 18.755,000 (wgt'ed) examples reached here.  /* #neg=12.568 #pos=6.187 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( directed(B, E) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.20975771563253573;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #pos=73 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( actedin(A, H) )
%   | | | then return 0.22575394119994063;  // std dev = 0,240, 58,000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.20947597370886317;  // std dev = 0,442, 947,000 (wgt'ed) examples reached here.  /* #pos=947 */
%   | else if ( haschild(I, A), haschild(I, B) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( haschild(A, J) )
%   | | | then return -0.03961049872898131;  // std dev = 22,470, 3.882,000 (wgt'ed) examples reached here.  /* #neg=3.275 #pos=607 */
%   | | | else return 0.07504426288538253;  // std dev = 63,614, 18.756,000 (wgt'ed) examples reached here.  /* #neg=12.569 #pos=6.187 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( wasbornin(B, E) )
%   | | then return 0.17709649774527694;  // std dev = 6,97e-09, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.17709649774527705;  // std dev = 4,56e-09, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( wasbornin(A, H), diedin(I, H) )
%   | | | then return 0.18299041868749283;  // std dev = 0,436, 219,000 (wgt'ed) examples reached here.  /* #pos=219 */
%   | | | else return 0.1761223270393207;  // std dev = 0,112, 786,000 (wgt'ed) examples reached here.  /* #pos=786 */
%   | else if ( haschild(J, A), haschild(J, B) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( actedin(B, K), actedin(A, L) )
%   | | | then return 0.23213631195766912;  // std dev = 19,040, 1.493,000 (wgt'ed) examples reached here.  /* #neg=630 #pos=863 */
%   | | | else return 0.031220329366508325;  // std dev = 64,489, 21.145,000 (wgt'ed) examples reached here.  /* #neg=15.214 #pos=5.931 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( wasbornin(B, E) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.15274385809367083;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( haschild(A, H), isaffiliatedto(H, I) )
%   | | | then return 0.14655367808592595;  // std dev = 0,090, 56,000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.15355817365542254;  // std dev = 0,397, 949,000 (wgt'ed) examples reached here.  /* #pos=949 */
%   | else if ( haschild(J, A), haschild(J, B) )
%   | | then return 0.15274385809367094;  // std dev = 1,86e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( wasbornin(B, K), wasbornin(A, K) )
%   | | | then return 0.6158756401991746;  // std dev = 2,513, 89,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=82 */
%   | | | else return 0.033204550226203396;  // std dev = 67,202, 22.546,000 (wgt'ed) examples reached here.  /* #neg=15.834 #pos=6.712 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( haschild(A, D), haschild(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( wasbornin(B, E) )
%   | | then return 0.1340070300080108;  // std dev = 6,18e-09, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.1340070300080109;  // std dev = 4,93e-09, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   else if ( haschild(A, F), haschild(B, F) )
%   | then if ( haschild(G, A), haschild(G, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( haschild(H, A) )
%   | | | then return 0.13334217189867315;  // std dev = 0,075, 520,000 (wgt'ed) examples reached here.  /* #pos=520 */
%   | | | else return 0.13544805533883;  // std dev = 0,362, 485,000 (wgt'ed) examples reached here.  /* #pos=485 */
%   | else if ( haschild(I, A), haschild(I, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( haschild(A, J) )
%   | | | then return -0.04467169950911555;  // std dev = 22,428, 3.881,000 (wgt'ed) examples reached here.  /* #neg=3.274 #pos=607 */
%   | | | else return 0.04371873333955539;  // std dev = 63,326, 18.753,000 (wgt'ed) examples reached here.  /* #neg=12.566 #pos=6.187 */


Results
   AUC ROC   = 0.691208
   AUC PR    = 0.598369
   CLL	      = -0.563644
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153142
   F1        = 0.265609


Total learning time: 626.462 seconds
Total inference time: 63.531 seconds
AUC ROC: 0.691208


Refined model AUC ROC: 0.691208


Dataset: 28_cora_yago2s, Fold: 3, Type: transfer, Time: 05:22:30
{'Precision': [1.0, 0.5], 'Parameter Learning results': {'Precision': [1.0, 0.5], 'CLL': -0.587179, 'Inference time': 61.7, 'Recall': 0.150871, 'AUC ROC': 0.575435, 'F1': 0.262185, 'AUC PR': 0.498323, 'Learning time': 530.33}, 'CLL': -0.563644, 'Inference time': 63.531, 'Recall': 0.153142, 'AUC ROC': 0.691208, 'F1': 0.265609, 'AUC PR': 0.598369, 'Learning time': 1156.792, 'Mapping results': {'Generating mappings time': 1.2563819885253906, 'Possible mappings': 43904, 'Knowledge compiling time': 21.134007453918457, 'Total time': 36.95088529586792, 'Generating paths time': 2.738664150238037, 'Finding best mapping': 11.821825742721558}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.8581489350995075;  // std dev = 4,47e-06, 1.023,000 (wgt'ed) examples reached here.  /* #pos=1.023 */
%   else if ( haschild(A, D) )
%   | then if ( haschild(E, B), haschild(D, F) )
%   | | then if ( haschild(B, G) )
%   | | | then return -0.030739953789376537;  // std dev = 4,000, 162,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=18 */
%   | | | else return 0.2965050994830707;  // std dev = 7,343, 219,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=96 */
%   | | else if ( actedin(A, H), actedin(B, I) )
%   | | | then return 0.2880554771555877;  // std dev = 5,121, 107,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=46 */
%   | | | else return -0.008792483799519957;  // std dev = 19,795, 3.397,000 (wgt'ed) examples reached here.  /* #neg=2.945 #pos=452 */
%   | else if ( haschild(B, J) )
%   | | then if ( haschild(K, A) )
%   | | | then return 0.21471729971076828;  // std dev = 9,251, 373,000 (wgt'ed) examples reached here.  /* #neg=240 #pos=133 */
%   | | | else return 0.0010656017661749744;  // std dev = 17,146, 2.400,000 (wgt'ed) examples reached here.  /* #neg=2.057 #pos=343 */
%   | | else if ( actedin(A, L), actedin(B, M) )
%   | | | then return 0.4519462119527601;  // std dev = 17,857, 1.322,000 (wgt'ed) examples reached here.  /* #neg=537 #pos=785 */
%   | | | else return 0.1986177062687254;  // std dev = 57,574, 14.762,000 (wgt'ed) examples reached here.  /* #neg=9.736 #pos=5.026 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), actedin(A, D) )
%   then if ( created(E, C), created(E, D) )
%   | then return 0.7649868665869854;  // std dev = 0,174, 226,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=219 */
%   | else if ( actedin(A, C) )
%   | | then return 0.7892637898382953;  // std dev = 0,176, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( haswonprize(B, F), diedin(A, G) )
%   | | | then return 0.07342436759580635;  // std dev = 2,790, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | | else return 0.30568782373896214;  // std dev = 17,310, 1.207,000 (wgt'ed) examples reached here.  /* #neg=593 #pos=614 */
%   else if ( haschild(B, H), haschild(A, I) )
%   | then if ( haschild(A, H) )
%   | | then return 0.7194734122109588;  // std dev = 0,000, 987,000 (wgt'ed) examples reached here.  /* #pos=987 */
%   | | else return -0.05071564600878758;  // std dev = 0,285, 682,000 (wgt'ed) examples reached here.  /* #neg=621 #pos=61 */
%   | else if ( haschild(A, J) )
%   | | then return 0.01931740876554031;  // std dev = 0,367, 3.098,000 (wgt'ed) examples reached here.  /* #neg=2.593 #pos=505 */
%   | | else if ( haschild(B, K) )
%   | | | then return 0.015928516184119383;  // std dev = 19,044, 2.702,000 (wgt'ed) examples reached here.  /* #neg=2.265 #pos=437 */
%   | | | else return 0.1727494679188565;  // std dev = 57,571, 14.759,000 (wgt'ed) examples reached here.  /* #neg=9.733 #pos=5.026 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.5569216295417344;  // std dev = 0,433, 1.023,000 (wgt'ed) examples reached here.  /* #pos=1.023 */
%   else if ( actedin(B, D), actedin(A, E) )
%   | then if ( directed(F, E), directed(F, D) )
%   | | then if ( created(F, G), actedin(H, G) )
%   | | | then return 0.6605594507543207;  // std dev = 1,453, 177,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=175 */
%   | | | else return 0.597362347143062;  // std dev = 2,171, 90,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=84 */
%   | | else if ( edited(I, D), edited(I, E) )
%   | | | then return 0.6775282130633792;  // std dev = 0,967, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.22791017145278733;  // std dev = 17,218, 1.208,000 (wgt'ed) examples reached here.  /* #neg=621 #pos=587 */
%   | else if ( haschild(A, J) )
%   | | then if ( actedin(B, K) )
%   | | | then return -0.11076909076139983;  // std dev = 4,397, 614,000 (wgt'ed) examples reached here.  /* #neg=594 #pos=20 */
%   | | | else return 0.028412697199905433;  // std dev = 21,128, 3.166,000 (wgt'ed) examples reached here.  /* #neg=2.620 #pos=546 */
%   | | else if ( haschild(B, L) )
%   | | | then return 0.013866086324682574;  // std dev = 19,044, 2.703,000 (wgt'ed) examples reached here.  /* #neg=2.266 #pos=437 */
%   | | | else return 0.14718004140427488;  // std dev = 57,573, 14.761,000 (wgt'ed) examples reached here.  /* #neg=9.735 #pos=5.026 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), actedin(A, D) )
%   then if ( actedin(A, C) )
%   | then return 0.49375084906408934;  // std dev = 0,683, 231,000 (wgt'ed) examples reached here.  /* #pos=231 */
%   | else if ( created(B, C), created(E, D) )
%   | | then if ( created(A, F), directed(B, G) )
%   | | | then return 0.6769054973804488;  // std dev = 0,093, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.009004386534714724;  // std dev = 3,047, 49,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | else if ( directed(A, C) )
%   | | | then return 0.6330342282455445;  // std dev = 0,230, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.20626486954661227;  // std dev = 17,218, 1.239,000 (wgt'ed) examples reached here.  /* #neg=596 #pos=643 */
%   else if ( actedin(B, H), haschild(I, A) )
%   | then return -0.12913324471082818;  // std dev = 0,188, 565,000 (wgt'ed) examples reached here.  /* #neg=542 #pos=23 */
%   | else if ( haschild(B, J), haschild(A, J) )
%   | | then return 0.41713541609339816;  // std dev = 4,13e-07, 985,000 (wgt'ed) examples reached here.  /* #pos=985 */
%   | | else if ( haschild(A, K) )
%   | | | then return 0.016642547233884534;  // std dev = 21,599, 3.473,000 (wgt'ed) examples reached here.  /* #neg=2.908 #pos=565 */
%   | | | else return 0.10961331379413576;  // std dev = 60,595, 17.207,000 (wgt'ed) examples reached here.  /* #neg=11.764 #pos=5.443 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( created(B, C), created(A, D) )
%   then if ( created(A, C) )
%   | then return 0.7360248652553696;  // std dev = 0,108, 97,000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else if ( influences(E, A), edited(F, D) )
%   | | then return 0.4319924319573654;  // std dev = 0,399, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( actedin(G, D), diedin(G, H) )
%   | | | then return -0.019809193829509252;  // std dev = 3,555, 78,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=17 */
%   | | | else return 0.158451417291238;  // std dev = 8,550, 337,000 (wgt'ed) examples reached here.  /* #neg=201 #pos=136 */
%   else if ( actedin(A, I), actedin(B, J) )
%   | then if ( actedin(A, J) )
%   | | then return 0.3746541766278534;  // std dev = 0,603, 219,000 (wgt'ed) examples reached here.  /* #pos=219 */
%   | | else if ( diedin(B, K), diedin(A, L) )
%   | | | then return 0.3516481741347258;  // std dev = 2,969, 46,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=33 */
%   | | | else return 0.14899146837444088;  // std dev = 17,019, 1.219,000 (wgt'ed) examples reached here.  /* #neg=602 #pos=617 */
%   | else if ( actedin(B, M), haschild(N, A) )
%   | | then return -0.11343776365078441;  // std dev = 0,185, 561,000 (wgt'ed) examples reached here.  /* #neg=539 #pos=22 */
%   | | else return 0.08573949735227046;  // std dev = 0,439, 21.191,000 (wgt'ed) examples reached here.  /* #neg=14.424 #pos=6.767 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( created(A, C), haschild(D, B) )
%   then if ( actedin(B, E), wrotemusicfor(F, E) )
%   | then if ( created(F, E), haswonprize(B, G) )
%   | | then return -0.07539135914932979;  // std dev = 0,907, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( diedin(F, H) )
%   | | | then return 0.7183411115793278;  // std dev = 0,361, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.28517214902739135;  // std dev = 1,493, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else return -0.11156049836605321;  // std dev = 0,268, 420,000 (wgt'ed) examples reached here.  /* #neg=377 #pos=43 */
%   else if ( actedin(A, I), isaffiliatedto(B, J) )
%   | then return -0.15852878613312277;  // std dev = 0,266, 307,000 (wgt'ed) examples reached here.  /* #neg=279 #pos=28 */
%   | else if ( haschild(K, A), haschild(L, B) )
%   | | then if ( haschild(B, M) )
%   | | | then return 0.20343395688342097;  // std dev = 8,510, 689,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=445 */
%   | | | else return 0.3223880550777343;  // std dev = 10,567, 467,000 (wgt'ed) examples reached here.  /* #neg=212 #pos=255 */
%   | | else if ( isaffiliatedto(B, N), isaffiliatedto(A, N) )
%   | | | then return 0.6381739851905682;  // std dev = 3,755, 192,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=180 */
%   | | | else return 0.06655705322320447;  // std dev = 64,437, 21.665,000 (wgt'ed) examples reached here.  /* #neg=14.713 #pos=6.952 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.2777369451384057;  // std dev = 0,939, 1.023,000 (wgt'ed) examples reached here.  /* #pos=1.023 */
%   else if ( haschild(A, D) )
%   | then if ( haschild(E, B) )
%   | | then if ( haschild(B, F) )
%   | | | then return -0.0602248266697387;  // std dev = 5,508, 330,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=35 */
%   | | | else return 0.1459488862662616;  // std dev = 9,644, 422,000 (wgt'ed) examples reached here.  /* #neg=269 #pos=153 */
%   | | else if ( haschild(D, G) )
%   | | | then return -0.07214293604838536;  // std dev = 10,535, 1.419,000 (wgt'ed) examples reached here.  /* #neg=1.293 #pos=126 */
%   | | | else return -0.0011619895771343117;  // std dev = 15,307, 1.715,000 (wgt'ed) examples reached here.  /* #neg=1.417 #pos=298 */
%   | else if ( haschild(B, H) )
%   | | then if ( actedin(A, I) )
%   | | | then return -0.1093590445617623;  // std dev = 6,067, 608,000 (wgt'ed) examples reached here.  /* #neg=550 #pos=58 */
%   | | | else return 0.0060178097407738605;  // std dev = 18,119, 2.165,000 (wgt'ed) examples reached here.  /* #neg=1.747 #pos=418 */
%   | | else if ( actedin(A, J), created(K, J) )
%   | | | then return 0.0389127208493395;  // std dev = 26,197, 3.482,000 (wgt'ed) examples reached here.  /* #neg=2.202 #pos=1.280 */
%   | | | else return 0.09055091902760405;  // std dev = 53,317, 12.602,000 (wgt'ed) examples reached here.  /* #neg=8.071 #pos=4.531 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), haschild(D, A) )
%   then if ( actedin(A, E), wrotemusicfor(F, C) )
%   | then if ( wasbornin(F, G), wrotemusicfor(H, E) )
%   | | then return 0.34818890773487765;  // std dev = 0,267, 34,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | | else if ( haswonprize(D, I), hasmusicalrole(F, J) )
%   | | | then return 0.5531679510004568;  // std dev = 0,264, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0644825604350618;  // std dev = 2,949, 44,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | else return -0.109791929598747;  // std dev = 0,200, 579,000 (wgt'ed) examples reached here.  /* #neg=550 #pos=29 */
%   else if ( haschild(A, K), haschild(B, K) )
%   | then return 0.2253237585930691;  // std dev = 0,755, 1.016,000 (wgt'ed) examples reached here.  /* #pos=1.016 */
%   | else if ( livesin(B, L), livesin(A, M) )
%   | | then if ( livesin(A, L) )
%   | | | then return 0.6937634128718914;  // std dev = 0,626, 71,000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | | else return 0.10294471718187914;  // std dev = 3,817, 67,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=25 */
%   | | else if ( diedin(A, N), diedin(B, P) )
%   | | | then return 0.20261932236068877;  // std dev = 10,625, 511,000 (wgt'ed) examples reached here.  /* #neg=266 #pos=245 */
%   | | | else return 0.038022943804310094;  // std dev = 64,709, 21.436,000 (wgt'ed) examples reached here.  /* #neg=14.950 #pos=6.486 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), directed(B, C) )
%   then return 0.5935676451379199;  // std dev = 0,189, 74,000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else if ( actedin(A, D), haschild(E, B) )
%   | then if ( created(E, F), wasbornin(A, G) )
%   | | then if ( actedin(H, F), wasbornin(H, I) )
%   | | | then return 0.6946009555303865;  // std dev = 0,148, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.013493292375378246;  // std dev = 1,452, 14,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( actedin(B, J), directed(K, J) )
%   | | | then return 0.05161662420470568;  // std dev = 3,154, 61,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=35 */
%   | | | else return -0.18480469804869573;  // std dev = 3,722, 512,000 (wgt'ed) examples reached here.  /* #neg=497 #pos=15 */
%   | else if ( haschild(L, A), haschild(M, B) )
%   | | then if ( haschild(A, N) )
%   | | | then return 0.11903561345029066;  // std dev = 8,658, 737,000 (wgt'ed) examples reached here.  /* #neg=269 #pos=468 */
%   | | | else return 0.26495335485138316;  // std dev = 9,991, 428,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=244 */
%   | | else if ( haschild(A, P), haschild(B, P) )
%   | | | then return 0.19521835576210897;  // std dev = 0,678, 658,000 (wgt'ed) examples reached here.  /* #pos=658 */
%   | | | else return 0.030270794868180836;  // std dev = 64,121, 21.278,000 (wgt'ed) examples reached here.  /* #neg=14.858 #pos=6.420 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), haschild(D, B) )
%   then if ( haschild(E, D) )
%   | then return -0.16224463022356267;  // std dev = 0,133, 330,000 (wgt'ed) examples reached here.  /* #neg=322 #pos=8 */
%   | else if ( actedin(D, F) )
%   | | then return 0.12200064307789964;  // std dev = 0,414, 40,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=25 */
%   | | else return -0.1076085394207229;  // std dev = 0,266, 227,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=30 */
%   else if ( livesin(B, G), livesin(A, H) )
%   | then if ( livesin(B, H) )
%   | | then return 0.4778154741779866;  // std dev = 0,150, 83,000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( wasbornin(I, G), wasbornin(J, H) )
%   | | | then return -0.18026545629915125;  // std dev = 1,344, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.1682887885095527;  // std dev = 3,333, 53,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=27 */
%   | else if ( haschild(A, K), haschild(B, K) )
%   | | then return 0.1643162944434893;  // std dev = 0,621, 1.003,000 (wgt'ed) examples reached here.  /* #pos=1.003 */
%   | | else if ( haschild(A, L) )
%   | | | then return -0.02629344094293443;  // std dev = 21,611, 3.822,000 (wgt'ed) examples reached here.  /* #neg=3.226 #pos=596 */
%   | | | else return 0.039324507958168324;  // std dev = 61,620, 18.191,000 (wgt'ed) examples reached here.  /* #neg=12.043 #pos=6.148 */


Results
   AUC ROC   = 0.72722
   AUC PR    = 0.632771
   CLL	      = -0.546046
   Precision = 0.972286 at threshold = 0.5
   Recall    = 0.188163
   F1        = 0.315305


Total learning time: 774.933 seconds
Total inference time: 92.075 seconds
AUC ROC: 0.72722


Dataset: 28_cora_yago2s, Fold: 3, Type: scratch, Time: 05:36:59
{'Precision': [0.972286, 0.5], 'CLL': -0.546046, 'Inference time': 92.075, 'Recall': 0.188163, 'AUC ROC': 0.72722, 'F1': 0.315305, 'AUC PR': 0.632771, 'Learning time': 774.933}


