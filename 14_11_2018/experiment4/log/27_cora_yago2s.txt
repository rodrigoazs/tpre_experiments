Starting experiment #1 for 27_cora_yago2s

Start learning from source dataset

WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( author(E, A), venue(E, D) )
%   | | then return 0.8581489350995116;  // std dev = 2,23e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( author(F, B), venue(F, D) )
%   | | | then return 0.8581489350995121;  // std dev = 8,43e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.7794604105093446;  // std dev = 4,702, 305,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=281 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( author(I, B), venue(I, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.8146706742299455;  // std dev = 2,187, 115,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=110 */
%   | | else return 0.8060941405789603;  // std dev = 0,222, 365,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=346 */
%   else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.6661750887293331;  // std dev = 0,249, 361,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=337 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return 0.7272952924371794;  // std dev = 0,016, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.6766672226847783;  // std dev = 2,176, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.6735860426822528;  // std dev = 2,173, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | | else return 0.6781981954413133;  // std dev = 3,644, 271,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=257 */
%   else return -0.12544463852839138;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( author(E, A), venue(E, D) )
%   | | then return 0.5684858146562016;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.5131592034344253;  // std dev = 0,260, 328,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=304 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return 0.5630810688717486;  // std dev = 0,020, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.5254596503863938;  // std dev = 2,176, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | else if ( haswordauthor(B, J), haswordvenue(K, J) )
%   | | | then return 0.522420751755263;  // std dev = 2,172, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | | else return 0.5266173056747316;  // std dev = 3,644, 271,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=257 */
%   else return -0.11231637819360639;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.3896386918473681;  // std dev = 0,248, 361,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=337 */
%   | else if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( author(G, B), venue(G, F) )
%   | | | then return 0.4371324692600438;  // std dev = 0,064, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.39782193135818783;  // std dev = 2,174, 115,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=110 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return 0.3926218671916545;  // std dev = 2,172, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | | else return 0.39580666300032646;  // std dev = 3,644, 271,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=257 */
%   else return -0.10159632948783635;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( author(E, B), venue(E, D) )
%   | | then return 0.3443911822016768;  // std dev = 0,033, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( author(F, A), venue(F, D) )
%   | | | then return 0.33571503527670116;  // std dev = 5,58e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2875394251634161;  // std dev = 4,702, 305,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=281 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( author(I, A), venue(I, H) )
%   | | | then return 0.3432533245767486;  // std dev = 0,043, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.30188077753327475;  // std dev = 2,172, 115,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=110 */
%   | | else if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.29863153198289355;  // std dev = 2,173, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | | else return 0.3011480999943093;  // std dev = 3,644, 271,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=257 */
%   else return -0.09269127618926096;  // std dev = 7,45e-09, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( author(E, B), venue(E, D) )
%   | | then return 0.27128150832212194;  // std dev = 0,029, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.22661850297446182;  // std dev = 0,260, 328,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=304 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then if ( author(H, A), venue(H, G) )
%   | | | then return 0.28048764648203767;  // std dev = 0,048, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.2368068100485431;  // std dev = 2,172, 115,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=110 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.23231959851897582;  // std dev = 2,171, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | | else return 0.23577652821019116;  // std dev = 3,644, 271,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=257 */
%   else return -0.08518475138839682;  // std dev = 1,75e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.18495016909150727;  // std dev = 0,248, 361,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=337 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.22027314944719464;  // std dev = 0,036, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.1873737498105791;  // std dev = 2,171, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.1866883168166599;  // std dev = 2,171, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | | else return 0.18999199204136485;  // std dev = 3,644, 271,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=257 */
%   else return -0.07877675473109175;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( author(E, B), venue(E, D) )
%   | | then return 0.19087869132443858;  // std dev = 0,022, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.14785262797890125;  // std dev = 0,260, 328,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=304 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return 0.18477743676251093;  // std dev = 0,032, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.1548222079546278;  // std dev = 2,171, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | else return 0.15623365782428109;  // std dev = 0,222, 365,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=346 */
%   else return -0.07324622576333704;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( author(E, A), venue(E, D) )
%   | | then return 0.16712580952655487;  // std dev = 0,035, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.1230525126676218;  // std dev = 0,260, 328,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=304 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then if ( author(H, B), venue(H, G) )
%   | | | then return 0.17176742834669242;  // std dev = 0,049, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1334120044100624;  // std dev = 2,171, 115,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=110 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.12979661512155363;  // std dev = 2,172, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | | else return 0.13228123685533572;  // std dev = 3,644, 271,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=257 */
%   else return -0.06842697784420276;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( author(E, A), venue(E, D) )
%   | | then return 0.145142403223058;  // std dev = 0,031, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.10437459865353942;  // std dev = 0,260, 328,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=304 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return 0.14111307358762765;  // std dev = 0,031, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.11118482546980127;  // std dev = 2,172, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | else if ( haswordauthor(B, J), haswordvenue(K, J) )
%   | | | then return 0.11049733669780919;  // std dev = 2,171, 94,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=89 */
%   | | | else return 0.11324835597073461;  // std dev = 3,644, 271,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=257 */
%   else return -0.06419184008202622;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */


Predicates from source: ['sameauthor(author,author).', 'haswordvenue(venue,word).', 'haswordauthor(author,word).', 'venue(class,venue).', 'author(class,author).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 19.977553367614746
   Generating paths time   = 2.3981852531433105
   Generating mappings time   = 12.769974708557129
   Possible mappings   = 95344
   Finding best mapping   = 22.29354691505432
   Total time   = 57.439268589019775


Best mapping found: ['venue(A,B) -> created(A,B)', 'haswordvenue(A,B) -> actedin(B,A)', 'haswordauthor(A,B) -> ismarriedto(A,B)', 'author(A,B) -> ismarriedto(A,B)', 'sameauthor(A,B) -> haschild(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
0;true,true,false;ismarriedto(F, B), created(F, D).;false;false
0;true,true;ismarriedto(E, A), created(E, D).;false;true
0;true,false;ismarriedto(B, G), actedin(G, H).;true;false
0;true;actedin(C, D).;true;true
0;true,false,true;ismarriedto(I, B), created(I, H).;false;false
1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
1;true;actedin(C, D).;false;true
1;true,false,true;ismarriedto(B, G), actedin(G, H).;false;false
1;true,false;ismarriedto(A, E), actedin(E, F).;true;true
1;true,false,false;ismarriedto(B, I), actedin(I, J).;false;false
2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
2;true,false,false;ismarriedto(B, J), actedin(J, K).;false;false
2;true,true;ismarriedto(E, A), created(E, D).;false;false
2;true,false;ismarriedto(A, F), actedin(F, G).;true;true
2;true;actedin(C, D).;true;true
2;true,false,true;ismarriedto(B, H), actedin(H, I).;false;false
3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
3;true;actedin(C, D).;false;true
3;true,false,true;ismarriedto(G, B), created(G, F).;false;false
3;true,false;ismarriedto(A, E), actedin(E, F).;true;true
3;true,false,false;ismarriedto(B, H), actedin(H, I).;false;false
4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
4;true,true,false;ismarriedto(F, A), created(F, D).;false;false
4;true,true;ismarriedto(E, B), created(E, D).;false;true
4;true,false;ismarriedto(B, G), actedin(G, H).;true;true
4;true,false,false;ismarriedto(A, J), actedin(J, K).;false;false
4;true;actedin(C, D).;true;true
4;true,false,true;ismarriedto(I, A), created(I, H).;false;false
5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
5;true,false,false;ismarriedto(B, I), actedin(I, J).;false;false
5;true,true;ismarriedto(E, B), created(E, D).;false;false
5;true,false;ismarriedto(A, F), actedin(F, G).;true;true
5;true;actedin(C, D).;true;true
5;true,false,true;ismarriedto(H, A), created(H, G).;false;false
6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
6;true;actedin(C, D).;false;true
6;true,false,true;ismarriedto(A, G), actedin(G, H).;false;false
6;true,false;ismarriedto(B, E), actedin(E, F).;true;true
6;true,false,false;ismarriedto(A, I), actedin(I, J).;false;false
7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
7;true;actedin(C, D).;true;true
7;true,false,true;ismarriedto(A, H), actedin(H, I).;false;false
7;true,true;ismarriedto(E, B), created(E, D).;false;false
7;true,false;ismarriedto(B, F), actedin(F, G).;true;false
8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
8;true,false,false;ismarriedto(A, I), actedin(I, J).;false;false
8;true,true;ismarriedto(E, A), created(E, D).;false;false
8;true,false;ismarriedto(B, F), actedin(F, G).;true;true
8;true;actedin(C, D).;true;true
8;true,false,true;ismarriedto(H, B), created(H, G).;false;false
9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
9;true,false,false;ismarriedto(B, J), actedin(J, K).;false;false
9;true,true;ismarriedto(E, A), created(E, D).;false;false
9;true,false;ismarriedto(A, F), actedin(F, G).;true;true
9;true;actedin(C, D).;true;true
9;true,false,true;ismarriedto(B, H), actedin(H, I).;false;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(B, E), actedin(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return 0.19081493443217312;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), actedin(E, F) )
%   | | then if ( ismarriedto(B, G), actedin(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(B, I), actedin(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.16596421208577747;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), actedin(E, F) )
%   | | then if ( ismarriedto(B, G), actedin(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(B, I), actedin(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.14161892292418435;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), actedin(E, F) )
%   | | then if ( ismarriedto(G, B), created(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(B, H), actedin(H, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.1187704612161667;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(B, E), actedin(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(A, G), actedin(G, H) )
%   | | | then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.3207118471601497;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.09812252683922773;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), actedin(E, F) )
%   | | then if ( ismarriedto(G, A), created(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(B, H), actedin(H, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2551722425694894;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.0800500715279117;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(B, E), actedin(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(A, G), actedin(G, H) )
%   | | | then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.0646395809615005;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(B, E), actedin(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return 0.0517695532253045;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(B, E), actedin(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(A, G), actedin(G, H) )
%   | | | then return 0.15274385809367075;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1527438580936708;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.0411948470005467;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), actedin(E, F) )
%   | | then if ( ismarriedto(B, G), actedin(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(B, I), actedin(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13400703000801117;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.0326149730273606;  // std dev = 57,677, 14.985,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.985 */


Results
   AUC ROC   = 0.5011
   AUC PR    = 0.338157
   CLL	      = -0.637334
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0024
   F1        = 0.004789


Total learning time: 502.862 seconds
Total inference time: 58.06 seconds
AUC ROC: 0.5011


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false': 'ismarriedto(B, E), actedin(E, F)'}, {'true,false,false': [0.0, 0, 15], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false,true': 'ismarriedto(B, G), actedin(G, H)', 'true,false': 'ismarriedto(A, E), actedin(E, F)', 'true,false,false': 'ismarriedto(B, I), actedin(I, J)'}, {'true,false,true,false': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,false,false,false': [5.16e-08, 0, 14], 'true,false,true,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false,true': 'ismarriedto(B, G), actedin(G, H)', 'true,false': 'ismarriedto(A, E), actedin(E, F)', 'true,false,false': 'ismarriedto(B, I), actedin(I, J)'}, {'true,false,true,false': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,false,false,false': [0.0, 0, 14], 'true,false,true,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false,true': 'ismarriedto(G, B), created(G, F)', 'true,false': 'ismarriedto(A, E), actedin(E, F)', 'true,false,false': 'ismarriedto(B, H), actedin(H, I)'}, {'true,false,true,false': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,false,false,false': [4.21e-08, 0, 14], 'true,false,true,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false': 'ismarriedto(B, E), actedin(E, F)', 'true,false,false': 'ismarriedto(A, G), actedin(G, H)'}, {'true,false,false,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,false,false,false': [0.0, 0, 14]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false,true': 'ismarriedto(G, A), created(G, F)', 'true,false': 'ismarriedto(A, E), actedin(E, F)', 'true,false,false': 'ismarriedto(B, H), actedin(H, I)'}, {'true,false,true,false': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,false,false,false': [2.11e-08, 0, 14], 'true,false,true,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false': 'ismarriedto(B, E), actedin(E, F)', 'true,false,false': 'ismarriedto(A, G), actedin(G, H)'}, {'true,false,false,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,false,false,false': [0.0, 0, 14]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false': 'ismarriedto(B, E), actedin(E, F)'}, {'true,false,false': [0.0, 0, 15], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false': 'ismarriedto(B, E), actedin(E, F)', 'true,false,false': 'ismarriedto(A, G), actedin(G, H)'}, {'true,false,false,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,false,false,false': [0.0, 0, 14]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false,true': 'ismarriedto(B, G), actedin(G, H)', 'true,false': 'ismarriedto(A, E), actedin(E, F)', 'true,false,false': 'ismarriedto(B, I), actedin(I, J)'}, {'true,false,true,false': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.677, 10000, 4985], 'true,false,false,false': [0.0, 0, 14], 'true,false,true,true': [0.0, 0, 0]}]]
[{'': [-2.3684757858670006e-16, 0.2219993322206317], 'true': [nan, -2.3684757858670006e-16], 'true,false': [nan, -2.3684757858670006e-16]}, {'': [1.7763568394002506e-16, 0.22199933222073653], 'true': [nan, 1.7763568394002506e-16], 'true,false,true': [nan, 0.0], 'true,false': [0.0, 1.9032394707859825e-16], 'true,false,false': [nan, 1.9032394707859825e-16]}, {'': [-2.3684757858670006e-16, 0.2219993322206783], 'true': [nan, -2.3684757858670006e-16], 'true,false,true': [nan, 0.0], 'true,false': [0.0, -2.5376526277146434e-16], 'true,false,false': [nan, -2.5376526277146434e-16]}, {'': [1.4802973661668753e-16, 0.22199933222065787], 'true': [nan, 1.4802973661668753e-16], 'true,false,true': [nan, 0.0], 'true,false': [0.0, 1.2688263138573217e-16], 'true,false,false': [nan, 1.2688263138573217e-16]}, {'': [-1.4802973661668754e-17, 0.22199933222060855], 'true': [nan, -1.4802973661668754e-17], 'true,false': [nan, -1.4802973661668754e-17], 'true,false,false': [0.0, -3.172065784643304e-17]}, {'': [3.700743415417188e-17, 0.22199933222065418], 'true': [nan, 3.700743415417188e-17], 'true,false,true': [nan, 0.0], 'true,false': [0.0, 3.172065784643304e-17], 'true,false,false': [nan, 3.172065784643304e-17]}, {'': [-2.960594732333751e-17, 0.22199933222069815], 'true': [nan, -2.960594732333751e-17], 'true,false': [nan, -2.960594732333751e-17], 'true,false,false': [0.0, -3.172065784643304e-17]}, {'': [-7.401486830834377e-18, 0.22199933222062518], 'true': [nan, -7.401486830834377e-18], 'true,false': [nan, -7.401486830834377e-18]}, {'': [-2.2204460492503132e-17, 0.2219993322207338], 'true': [nan, -2.2204460492503132e-17], 'true,false': [nan, -2.2204460492503132e-17], 'true,false,false': [0.0, -1.9825411154020653e-17]}, {'': [0.0, 0.2219993322206716], 'true': [nan, 0.0], 'true,false,true': [nan, 0.0], 'true,false': [0.0, 0.0], 'true,false,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;true;ismarriedto(A, E), actedin(E, F).;true;true', '2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '2;true;ismarriedto(A, E), actedin(E, F).;true;true', '3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '3;true;ismarriedto(A, E), actedin(E, F).;true;true', '4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '4;true;ismarriedto(A, G), actedin(G, H).;true;true', '5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '5;true;ismarriedto(A, E), actedin(E, F).;true;true', '6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '6;true;ismarriedto(A, G), actedin(G, H).;true;true', '7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '8;true;ismarriedto(A, G), actedin(G, H).;true;true', '9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '9;true;ismarriedto(A, E), actedin(E, F).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( wasbornin(A, D), wasbornin(B, D) )
%   | then if ( isaffiliatedto(B, E), ismarriedto(A, F) )
%   | | then if ( isaffiliatedto(A, E) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( actedin(B, G), edited(H, G) )
%   | | | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995102;  // std dev = 8,84e-07, 156,000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( ismarriedto(A, I), ismarriedto(B, J) )
%   | | then if ( isaffiliatedto(A, K) )
%   | | | then return 0.08375869119707197;  // std dev = 5,353, 164,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=37 */
%   | | | else return 0.2857852987358709;  // std dev = 25,944, 2.750,000 (wgt'ed) examples reached here.  /* #neg=1.574 #pos=1.176 */
%   | | else if ( wasbornin(B, L), diedin(A, L) )
%   | | | then return 0.8236661764788223;  // std dev = 1,702, 87,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=84 */
%   | | | else return 0.15610051796729113;  // std dev = 49,711, 11.814,000 (wgt'ed) examples reached here.  /* #neg=8.294 #pos=3.520 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, F), ismarriedto(A, G) )
%   | then if ( diedin(G, H), wasbornin(B, H) )
%   | | then return 0.8082693595003422;  // std dev = 0,252, 59,000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( wasbornin(B, I), diedin(A, I) )
%   | | | then return 0.7669977294452811;  // std dev = 0,997, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.22530375632910324;  // std dev = 26,158, 2.856,000 (wgt'ed) examples reached here.  /* #neg=1.700 #pos=1.156 */
%   | else if ( ismarriedto(A, J) )
%   | | then if ( wasbornin(B, K), wasbornin(A, K) )
%   | | | then return 0.7054918529928715;  // std dev = 0,935, 58,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.11343307067052671;  // std dev = 31,574, 5.013,000 (wgt'ed) examples reached here.  /* #neg=3.628 #pos=1.385 */
%   | | else if ( wasbornin(B, L), happenedin(M, L) )
%   | | | then return 0.11425038687462093;  // std dev = 12,777, 851,000 (wgt'ed) examples reached here.  /* #neg=608 #pos=243 */
%   | | | else return 0.17231501752600922;  // std dev = 36,804, 6.110,000 (wgt'ed) examples reached here.  /* #neg=4.062 #pos=2.048 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( iscitizenof(A, F), ismarriedto(B, G) )
%   | then if ( isaffiliatedto(B, H), ismarriedto(A, I) )
%   | | then return 0.596865259910185;  // std dev = 0,909, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( iscitizenof(B, F) )
%   | | | then return 0.8000732594013784;  // std dev = 0,040, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09930313576045338;  // std dev = 3,940, 191,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=18 */
%   | else if ( ismarriedto(B, J), ismarriedto(A, K) )
%   | | then if ( graduatedfrom(A, L) )
%   | | | then return 0.03082370055170816;  // std dev = 4,559, 122,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=28 */
%   | | | else return 0.2166101111700168;  // std dev = 25,796, 2.765,000 (wgt'ed) examples reached here.  /* #neg=1.556 #pos=1.209 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.10251249277877349;  // std dev = 31,764, 5.071,000 (wgt'ed) examples reached here.  /* #neg=3.629 #pos=1.442 */
%   | | | else return 0.14599196387796232;  // std dev = 38,725, 6.825,000 (wgt'ed) examples reached here.  /* #neg=4.547 #pos=2.278 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.4175135841583098;  // std dev = 1,18e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( actedin(E, F) )
%   | | then if ( actedin(B, G) )
%   | | | then return 0.5981536370250214;  // std dev = 2,057, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   | | | else return -0.14610931889710024;  // std dev = 3,190, 118,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=12 */
%   | | else if ( diedin(E, H), wasbornin(B, I) )
%   | | | then return 0.29973522605464836;  // std dev = 6,847, 226,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=135 */
%   | | | else return 0.16471570976682848;  // std dev = 24,825, 2.576,000 (wgt'ed) examples reached here.  /* #neg=1.499 #pos=1.077 */
%   | else if ( isaffiliatedto(A, J), isaffiliatedto(B, K) )
%   | | then if ( ismarriedto(A, L), isaffiliatedto(L, K) )
%   | | | then return 0.7675107943119245;  // std dev = 0,991, 32,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.4808840801327632;  // std dev = 5,244, 135,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=94 */
%   | | else if ( diedin(A, M), diedin(B, M) )
%   | | | then return 0.6691072662733476;  // std dev = 1,707, 49,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | | | else return 0.09690290527596028;  // std dev = 49,444, 11.816,000 (wgt'ed) examples reached here.  /* #neg=8.254 #pos=3.562 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( wasbornin(B, D), wasbornin(A, E) )
%   | then if ( livesin(F, E), wasbornin(F, D) )
%   | | then if ( graduatedfrom(F, G), isleaderof(H, E) )
%   | | | then return 0.564155214061819;  // std dev = 1,009, 56,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.44331852944351197;  // std dev = 3,158, 103,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=87 */
%   | | else if ( livesin(I, E), wasbornin(I, E) )
%   | | | then return 0.04382182379061964;  // std dev = 8,893, 421,000 (wgt'ed) examples reached here.  /* #neg=302 #pos=119 */
%   | | | else return 0.20214235023119725;  // std dev = 9,444, 421,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=199 */
%   | else if ( isaffiliatedto(B, J), isaffiliatedto(A, J) )
%   | | then if ( ismarriedto(B, K) )
%   | | | then return 0.7139655878366656;  // std dev = 0,287, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.6210773878167407;  // std dev = 2,154, 71,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=66 */
%   | | else if ( ismarriedto(A, L), isaffiliatedto(B, M) )
%   | | | then return -0.12679351618837015;  // std dev = 4,858, 267,000 (wgt'ed) examples reached here.  /* #neg=239 #pos=28 */
%   | | | else return 0.09132936195144667;  // std dev = 54,067, 13.629,000 (wgt'ed) examples reached here.  /* #neg=9.215 #pos=4.414 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 5,27e-09, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( wasbornin(A, F) )
%   | | then if ( wasbornin(B, G), wasbornin(D, H) )
%   | | | then return 0.26560642273633617;  // std dev = 4,565, 114,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=75 */
%   | | | else return 0.02500393901207585;  // std dev = 11,026, 599,000 (wgt'ed) examples reached here.  /* #neg=400 #pos=199 */
%   | | else if ( wasbornin(B, I) )
%   | | | then return 0.0607731174499619;  // std dev = 10,381, 504,000 (wgt'ed) examples reached here.  /* #neg=309 #pos=195 */
%   | | | else return 0.14979377513557232;  // std dev = 20,568, 1.736,000 (wgt'ed) examples reached here.  /* #neg=953 #pos=783 */
%   | else if ( iscitizenof(A, J), ismarriedto(B, K) )
%   | | then if ( iscitizenof(K, J) )
%   | | | then return 0.504193302032833;  // std dev = 0,827, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.13181847527640547;  // std dev = 2,855, 132,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=10 */
%   | | else if ( ismarriedto(A, L) )
%   | | | then return 0.05286770322380021;  // std dev = 31,401, 5.071,000 (wgt'ed) examples reached here.  /* #neg=3.629 #pos=1.442 */
%   | | | else return 0.08609964641662808;  // std dev = 38,430, 6.825,000 (wgt'ed) examples reached here.  /* #neg=4.547 #pos=2.278 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( isaffiliatedto(D, F), graduatedfrom(B, G) )
%   | | then if ( isaffiliatedto(B, H), wasbornin(D, I) )
%   | | | then return 0.5633950399792802;  // std dev = 0,289, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6896487089254638;  // std dev = 0,133, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( diedin(E, J), wasbornin(K, J) )
%   | | | then return 0.13859661709178284;  // std dev = 11,460, 562,000 (wgt'ed) examples reached here.  /* #neg=292 #pos=270 */
%   | | | else return 0.07299123905562102;  // std dev = 23,242, 2.372,000 (wgt'ed) examples reached here.  /* #neg=1.409 #pos=963 */
%   | else if ( iscitizenof(A, L), iscitizenof(B, M) )
%   | | then if ( livesin(N, L), iscitizenof(N, M) )
%   | | | then return 0.5785005143525522;  // std dev = 2,778, 78,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=69 */
%   | | | else return -0.031043196597994607;  // std dev = 1,979, 22,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | else if ( diedin(A, P), wasbornin(B, P) )
%   | | | then return 0.5140904323496646;  // std dev = 1,934, 110,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | | | else return 0.04930234662169679;  // std dev = 49,155, 11.822,000 (wgt'ed) examples reached here.  /* #neg=8.270 #pos=3.552 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( iscitizenof(B, D), ismarriedto(A, E) )
%   | then if ( iscitizenof(A, F), hascapital(D, G) )
%   | | then if ( iscitizenof(B, F) )
%   | | | then return 0.4844277130089553;  // std dev = 1,043, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.14434312953234923;  // std dev = 0,865, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( hascurrency(D, H), created(E, I) )
%   | | | then return 0.11049211733487928;  // std dev = 2,259, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return -0.13413044970262697;  // std dev = 5,856, 319,000 (wgt'ed) examples reached here.  /* #neg=276 #pos=43 */
%   | else if ( diedin(A, J), diedin(B, J) )
%   | | then if ( wasbornin(B, J) )
%   | | | then return 0.3246991455992089;  // std dev = 1,132, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.5587780709126637;  // std dev = 1,424, 50,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | else if ( diedin(A, K), wasbornin(B, K) )
%   | | | then return 0.4205630222613845;  // std dev = 1,901, 144,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=141 */
%   | | | else return 0.04782133494226204;  // std dev = 55,099, 14.392,000 (wgt'ed) examples reached here.  /* #neg=9.696 #pos=4.696 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( wasbornin(B, D), happenedin(E, D) )
%   | then if ( ismarriedto(A, F), wasbornin(F, D) )
%   | | then if ( diedin(A, G) )
%   | | | then return 0.3528631764343563;  // std dev = 1,105, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.5699561196150866;  // std dev = 0,995, 46,000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( wasbornin(A, D) )
%   | | | then return 0.3295719099933398;  // std dev = 1,646, 104,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=102 */
%   | | | else return -0.02518181803574419;  // std dev = 17,944, 1.822,000 (wgt'ed) examples reached here.  /* #neg=1.319 #pos=503 */
%   | else if ( wasbornin(A, H), happenedin(I, H) )
%   | | then if ( actedin(B, J), isleaderof(K, H) )
%   | | | then return 0.313170946737909;  // std dev = 2,962, 39,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return -0.025105296447046392;  // std dev = 16,494, 1.506,000 (wgt'ed) examples reached here.  /* #neg=1.119 #pos=387 */
%   | | else if ( haswonprize(A, L), actedin(A, M) )
%   | | | then return -0.03507636336924338;  // std dev = 5,282, 165,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=41 */
%   | | | else return 0.05397084554076887;  // std dev = 49,325, 11.282,000 (wgt'ed) examples reached here.  /* #neg=7.419 #pos=3.863 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, E) )
%   | then if ( ismarriedto(A, F), isaffiliatedto(F, D) )
%   | | then if ( diedin(A, G), happenedin(H, G) )
%   | | | then return 0.30485861730087105;  // std dev = 0,953, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4641501775085104;  // std dev = 0,605, 42,000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( isaffiliatedto(B, E) )
%   | | | then return 0.4096045033571216;  // std dev = 2,221, 77,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=72 */
%   | | | else return 0.09702982811489379;  // std dev = 3,869, 65,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=29 */
%   | else if ( iscitizenof(B, I), iscitizenof(A, J) )
%   | | then if ( livesin(K, J), iscitizenof(K, I) )
%   | | | then return 0.4105536437117414;  // std dev = 2,747, 76,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=67 */
%   | | | else return -0.006468423694647689;  // std dev = 1,935, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( isaffiliatedto(B, L) )
%   | | | then return -0.10170099677788262;  // std dev = 8,610, 585,000 (wgt'ed) examples reached here.  /* #neg=487 #pos=98 */
%   | | | else return 0.0315581535350693;  // std dev = 54,288, 14.115,000 (wgt'ed) examples reached here.  /* #neg=9.447 #pos=4.668 */


Results
   AUC ROC   = 0.633678
   AUC PR    = 0.526933
   CLL	      = -0.601884
   Precision = 0.965766 at threshold = 0.5
   Recall    = 0.1072
   F1        = 0.192979


Total learning time: 629.975 seconds
Total inference time: 69.618 seconds
AUC ROC: 0.633678


Refined model AUC ROC: 0.633678


Dataset: 27_cora_yago2s, Fold: 1, Type: transfer, Time: 01:51:07
{'Precision': [0.965766, 0.5], 'Parameter Learning results': {'Precision': [1.0, 0.5], 'CLL': -0.637334, 'Inference time': 58.06, 'Recall': 0.0024, 'AUC ROC': 0.5011, 'F1': 0.004789, 'AUC PR': 0.338157, 'Learning time': 502.862}, 'CLL': -0.601884, 'Inference time': 69.618, 'Recall': 0.1072, 'AUC ROC': 0.633678, 'F1': 0.192979, 'AUC PR': 0.526933, 'Learning time': 1132.837, 'Mapping results': {'Generating mappings time': 12.769974708557129, 'Possible mappings': 95344, 'Knowledge compiling time': 19.977553367614746, 'Total time': 57.439268589019775, 'Generating paths time': 2.3981852531433105, 'Finding best mapping': 22.29354691505432}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( actedin(C, E) )
%   | then return 0.1278857772047746;  // std dev = 0,444, 152,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=41 */
%   | else if ( ismarriedto(C, D) )
%   | | then return 0.8581489350995121;  // std dev = 5,96e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( diedin(A, F), wasbornin(B, F) )
%   | | | then return 0.8417554924765617;  // std dev = 0,992, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.276736567737634;  // std dev = 25,790, 2.733,000 (wgt'ed) examples reached here.  /* #neg=1.589 #pos=1.144 */
%   else if ( ismarriedto(A, G) )
%   | then if ( wasbornin(B, H), diedin(A, I) )
%   | | then return 0.2632122262387489;  // std dev = 0,491, 316,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=128 */
%   | | else return 0.1344896291058164;  // std dev = 0,447, 4.755,000 (wgt'ed) examples reached here.  /* #neg=3.441 #pos=1.314 */
%   | else if ( ismarriedto(J, B) )
%   | | then return 0.13211436202459897;  // std dev = 0,446, 1.909,000 (wgt'ed) examples reached here.  /* #neg=1.386 #pos=523 */
%   | | else if ( ispoliticianof(A, K), isaffiliatedto(B, L) )
%   | | | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.20753458710109263;  // std dev = 33,868, 5.046,000 (wgt'ed) examples reached here.  /* #neg=3.283 #pos=1.763 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( wasbornin(A, E), wasbornin(B, E) )
%   | then return 0.781161320773142;  // std dev = 0,306, 39,000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( diedin(C, F), diedin(D, F) )
%   | | then return 0.809109575181353;  // std dev = 0,162, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( actedin(D, G), actedin(B, H) )
%   | | | then return 0.6903423468972897;  // std dev = 2,060, 33,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   | | | else return 0.2293307634094834;  // std dev = 26,204, 2.873,000 (wgt'ed) examples reached here.  /* #neg=1.696 #pos=1.177 */
%   else if ( isaffiliatedto(A, I), isaffiliatedto(B, J) )
%   | then if ( isaffiliatedto(A, J) )
%   | | then return 0.7737742326034233;  // std dev = 0,234, 103,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=97 */
%   | | else return 0.2692283998439714;  // std dev = 0,495, 64,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=28 */
%   | else if ( actedin(A, K), actedin(B, L) )
%   | | then return 0.7029939474714721;  // std dev = 0,339, 98,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=85 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.11243291668267896;  // std dev = 31,346, 4.961,000 (wgt'ed) examples reached here.  /* #neg=3.609 #pos=1.352 */
%   | | | else return 0.15278953950967666;  // std dev = 38,426, 6.806,000 (wgt'ed) examples reached here.  /* #neg=4.635 #pos=2.171 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, C) )
%   then if ( ismarriedto(B, D), diedin(E, C) )
%   | then return 0.6703056494520994;  // std dev = 0,102, 51,000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else return 0.7827045089358665;  // std dev = 0,131, 119,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=117 */
%   else if ( ismarriedto(B, F), ismarriedto(A, G) )
%   | then if ( wasbornin(G, H), wasbornin(B, H) )
%   | | then return 0.7593714086220437;  // std dev = 0,312, 46,000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( isaffiliatedto(A, I) )
%   | | | then return -0.003426426624899332;  // std dev = 5,149, 161,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=34 */
%   | | | else return 0.20358080004948853;  // std dev = 25,531, 2.722,000 (wgt'ed) examples reached here.  /* #neg=1.574 #pos=1.148 */
%   | else if ( wasbornin(A, J), hascapital(K, J) )
%   | | then if ( diedin(L, J), ismarriedto(L, M) )
%   | | | then return 0.033442091077314245;  // std dev = 12,539, 938,000 (wgt'ed) examples reached here.  /* #neg=735 #pos=203 */
%   | | | else return 0.1951352476632685;  // std dev = 5,263, 118,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=45 */
%   | | else if ( wasbornin(B, N), diedin(A, N) )
%   | | | then return 0.7544449448493499;  // std dev = 1,707, 74,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.1199946535047478;  // std dev = 47,526, 10.771,000 (wgt'ed) examples reached here.  /* #neg=7.486 #pos=3.285 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(A, D) )
%   then if ( ismarriedto(D, C) )
%   | then return 0.6009125762686603;  // std dev = 0,064, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( iscitizenof(B, E), hascapital(E, F) )
%   | | then if ( hascurrency(E, G), isaffiliatedto(A, H) )
%   | | | then return 0.5353901876349952;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.11831738219881836;  // std dev = 2,715, 66,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=9 */
%   | | else if ( wasbornin(A, I), isleaderof(J, I) )
%   | | | then return 0.04124170587612091;  // std dev = 5,595, 171,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=52 */
%   | | | else return 0.17860759193866943;  // std dev = 25,302, 2.700,000 (wgt'ed) examples reached here.  /* #neg=1.523 #pos=1.177 */
%   else if ( ismarriedto(A, K), iscitizenof(B, L) )
%   | then return -0.014771708037799449;  // std dev = 0,377, 292,000 (wgt'ed) examples reached here.  /* #neg=238 #pos=54 */
%   | else if ( isaffiliatedto(A, M), ismarriedto(B, N) )
%   | | then return -0.08997275445778158;  // std dev = 0,305, 154,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=18 */
%   | | else if ( diedin(B, P), diedin(A, Q) )
%   | | | then return 0.20815178617800137;  // std dev = 9,190, 373,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=160 */
%   | | | else return 0.10750777404105553;  // std dev = 48,526, 11.213,000 (wgt'ed) examples reached here.  /* #neg=7.712 #pos=3.501 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( diedin(A, C), wasbornin(B, C) )
%   then return 0.5671652601697202;  // std dev = 0,177, 180,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=176 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, E) )
%   | then if ( isaffiliatedto(A, D) )
%   | | then if ( livesin(B, F), hascapital(F, G) )
%   | | | then return 0.4464615442849116;  // std dev = 1,222, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6098064457452277;  // std dev = 2,071, 107,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | | else if ( wasbornin(A, H) )
%   | | | then return -0.0525228648658308;  // std dev = 1,689, 20,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.31015599120000237;  // std dev = 3,293, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | else if ( isaffiliatedto(B, I) )
%   | | then if ( ismarriedto(A, J), isaffiliatedto(J, I) )
%   | | | then return 0.7047116003774173;  // std dev = 0,980, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.08023840021293645;  // std dev = 8,332, 573,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=84 */
%   | | else if ( diedin(A, K), livesin(L, K) )
%   | | | then return 0.04656703469576568;  // std dev = 20,081, 2.064,000 (wgt'ed) examples reached here.  /* #neg=1.482 #pos=582 */
%   | | | else return 0.1007118747425211;  // std dev = 50,950, 11.986,000 (wgt'ed) examples reached here.  /* #neg=7.982 #pos=4.004 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), isaffiliatedto(A, D) )
%   then if ( isaffiliatedto(B, D) )
%   | then return 0.49486191132036655;  // std dev = 0,205, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return -0.11638552817364554;  // std dev = 0,308, 296,000 (wgt'ed) examples reached here.  /* #neg=262 #pos=34 */
%   else if ( livesin(B, E), livesin(A, F) )
%   | then if ( livesin(A, E) )
%   | | then return 0.6667990292761257;  // std dev = 0,117, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( hascapital(E, G), wasbornin(B, H) )
%   | | | then return -0.22287478336990055;  // std dev = 0,102, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.4113456214703749;  // std dev = 3,243, 51,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=35 */
%   | else if ( ismarriedto(B, I), ismarriedto(A, J) )
%   | | then if ( influences(J, K), created(K, L) )
%   | | | then return -0.16948813772341287;  // std dev = 1,808, 30,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return 0.12507606633760646;  // std dev = 25,353, 2.763,000 (wgt'ed) examples reached here.  /* #neg=1.546 #pos=1.217 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.050453332319211196;  // std dev = 31,173, 5.039,000 (wgt'ed) examples reached here.  /* #neg=3.620 #pos=1.419 */
%   | | | else return 0.08321552665675028;  // std dev = 38,059, 6.753,000 (wgt'ed) examples reached here.  /* #neg=4.522 #pos=2.231 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( wasbornin(A, C), actedin(B, D) )
%   then if ( actedin(A, E) )
%   | then return 0.520867714718635;  // std dev = 0,292, 65,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=59 */
%   | else if ( isleaderof(F, C), diedin(G, C) )
%   | | then if ( directed(G, H), haswonprize(B, I) )
%   | | | then return -0.1650532113667235;  // std dev = 0,920, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0.34516636915571225;  // std dev = 3,116, 48,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=31 */
%   | | else return -0.03523050571220545;  // std dev = 0,416, 88,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=20 */
%   else if ( wasbornin(B, J), wasbornin(A, K) )
%   | then if ( livesin(L, K), wasbornin(L, J) )
%   | | then return 0.438363896287936;  // std dev = 0,255, 137,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=125 */
%   | | else return 0.07733777190499982;  // std dev = 0,438, 772,000 (wgt'ed) examples reached here.  /* #neg=487 #pos=285 */
%   | else if ( wasbornin(A, M), diedin(N, M) )
%   | | then return 0.0012385514408934121;  // std dev = 0,429, 2.129,000 (wgt'ed) examples reached here.  /* #neg=1.588 #pos=541 */
%   | | else if ( livesin(A, P), livesin(B, Q) )
%   | | | then return 0.34258944326758484;  // std dev = 3,461, 76,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=56 */
%   | | | else return 0.06442566466552933;  // std dev = 49,877, 11.674,000 (wgt'ed) examples reached here.  /* #neg=7.792 #pos=3.882 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( diedin(A, C), wasbornin(B, C) )
%   then return 0.37327646178828905;  // std dev = 0,180, 180,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=176 */
%   else if ( wasbornin(B, D), happenedin(E, D) )
%   | then if ( wasbornin(A, F), happenedin(G, F) )
%   | | then if ( diedin(H, D), wasbornin(H, F) )
%   | | | then return 0.3101656152963817;  // std dev = 4,223, 136,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=102 */
%   | | | else return -0.04502707271132445;  // std dev = 5,601, 194,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=47 */
%   | | else if ( haswonprize(A, I), livesin(J, D) )
%   | | | then return 0.1180565940007556;  // std dev = 5,096, 119,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=50 */
%   | | | else return -0.03705725333599011;  // std dev = 15,768, 1.424,000 (wgt'ed) examples reached here.  /* #neg=1.069 #pos=355 */
%   | else if ( wasbornin(A, K), happenedin(L, K) )
%   | | then if ( participatedin(K, M) )
%   | | | then return -0.05709144614079889;  // std dev = 6,879, 306,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=62 */
%   | | | else return 0.018653105373704414;  // std dev = 15,260, 1.230,000 (wgt'ed) examples reached here.  /* #neg=890 #pos=340 */
%   | | else if ( isaffiliatedto(B, N), isaffiliatedto(A, N) )
%   | | | then return 0.37680506314417084;  // std dev = 1,989, 77,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | | | else return 0.058177684592271364;  // std dev = 49,397, 11.334,000 (wgt'ed) examples reached here.  /* #neg=7.539 #pos=3.795 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( graduatedfrom(A, E) )
%   | then return -0.09009531997437431;  // std dev = 0,364, 141,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=32 */
%   | else if ( wasbornin(B, F), wasbornin(C, F) )
%   | | then return 0.40841258223330185;  // std dev = 0,138, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( wasbornin(C, G), livesin(H, G) )
%   | | | then return -0.0053780613341423145;  // std dev = 10,488, 543,000 (wgt'ed) examples reached here.  /* #neg=351 #pos=192 */
%   | | | else return 0.08114564297119645;  // std dev = 22,828, 2.234,000 (wgt'ed) examples reached here.  /* #neg=1.241 #pos=993 */
%   else if ( wasbornin(B, I), diedin(A, I) )
%   | then return 0.3251532281132827;  // std dev = 0,177, 117,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=114 */
%   | else if ( ismarriedto(J, B), diedin(A, K) )
%   | | then if ( livesin(L, K), isaffiliatedto(L, M) )
%   | | | then return -0.11925655269489792;  // std dev = 4,700, 201,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=27 */
%   | | | else return 0.035282389412563175;  // std dev = 4,605, 102,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=30 */
%   | | else if ( isaffiliatedto(B, N), isaffiliatedto(A, P) )
%   | | | then return 0.24695011514324125;  // std dev = 4,473, 153,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=116 */
%   | | | else return 0.03137503710165211;  // std dev = 48,288, 11.459,000 (wgt'ed) examples reached here.  /* #neg=8.013 #pos=3.446 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( actedin(B, C), wasbornin(A, D) )
%   then if ( actedin(A, E) )
%   | then if ( wasbornin(B, F), hascapital(G, D) )
%   | | then return 0.09354883184023806;  // std dev = 0,395, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.4065995975069711;  // std dev = 0,257, 58,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=54 */
%   | else if ( hascapital(H, D), ismarriedto(A, I) )
%   | | then return -0.17883955650284084;  // std dev = 0,288, 32,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | else if ( diedin(A, J) )
%   | | | then return -0.08189964909005815;  // std dev = 2,253, 41,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | | else return 0.20344642854034115;  // std dev = 4,068, 74,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=39 */
%   else if ( diedin(A, K), diedin(B, K) )
%   | then return 0.44833738008948637;  // std dev = 0,284, 82,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   | else if ( wasbornin(A, L), wasbornin(B, L) )
%   | | then return 0.34798438575755275;  // std dev = 0,163, 142,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=141 */
%   | | else if ( wasbornin(B, M) )
%   | | | then return -0.01385804690873593;  // std dev = 23,634, 3.116,000 (wgt'ed) examples reached here.  /* #neg=2.193 #pos=923 */
%   | | | else return 0.03509600963966299;  // std dev = 49,245, 11.448,000 (wgt'ed) examples reached here.  /* #neg=7.701 #pos=3.747 */


Results
   AUC ROC   = 0.650257
   AUC PR    = 0.539407
   CLL	      = -0.599036
   Precision = 0.957865 at threshold = 0.5
   Recall    = 0.1023
   F1        = 0.184857


Total learning time: 787.12 seconds
Total inference time: 69.894 seconds
AUC ROC: 0.650257


Dataset: 27_cora_yago2s, Fold: 1, Type: scratch, Time: 02:05:27
{'Precision': [0.957865, 0.5], 'CLL': -0.599036, 'Inference time': 69.894, 'Recall': 0.1023, 'AUC ROC': 0.650257, 'F1': 0.184857, 'AUC PR': 0.539407, 'Learning time': 787.12}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 21.21234703063965
   Generating paths time   = 2.837662935256958
   Generating mappings time   = 14.055646896362305
   Possible mappings   = 95344
   Finding best mapping   = 22.428836822509766
   Total time   = 60.53450083732605


Best mapping found: ['venue(A,B) -> created(A,B)', 'haswordvenue(A,B) -> actedin(B,A)', 'haswordauthor(A,B) -> ismarriedto(A,B)', 'author(A,B) -> ismarriedto(A,B)', 'sameauthor(A,B) -> haschild(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
0;true,true,false;ismarriedto(F, B), created(F, D).;false;false
0;true,true;ismarriedto(E, A), created(E, D).;false;true
0;true,false;ismarriedto(B, G), actedin(G, H).;true;false
0;true;actedin(C, D).;true;true
0;true,false,true;ismarriedto(I, B), created(I, H).;false;false
1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
1;true;actedin(C, D).;false;true
1;true,false,true;ismarriedto(B, G), actedin(G, H).;false;false
1;true,false;ismarriedto(A, E), actedin(E, F).;true;true
1;true,false,false;ismarriedto(B, I), actedin(I, J).;false;false
2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
2;true,false,false;ismarriedto(B, J), actedin(J, K).;false;false
2;true,true;ismarriedto(E, A), created(E, D).;false;false
2;true,false;ismarriedto(A, F), actedin(F, G).;true;true
2;true;actedin(C, D).;true;true
2;true,false,true;ismarriedto(B, H), actedin(H, I).;false;false
3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
3;true;actedin(C, D).;false;true
3;true,false,true;ismarriedto(G, B), created(G, F).;false;false
3;true,false;ismarriedto(A, E), actedin(E, F).;true;true
3;true,false,false;ismarriedto(B, H), actedin(H, I).;false;false
4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
4;true,true,false;ismarriedto(F, A), created(F, D).;false;false
4;true,true;ismarriedto(E, B), created(E, D).;false;true
4;true,false;ismarriedto(B, G), actedin(G, H).;true;true
4;true,false,false;ismarriedto(A, J), actedin(J, K).;false;false
4;true;actedin(C, D).;true;true
4;true,false,true;ismarriedto(I, A), created(I, H).;false;false
5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
5;true,false,false;ismarriedto(B, I), actedin(I, J).;false;false
5;true,true;ismarriedto(E, B), created(E, D).;false;false
5;true,false;ismarriedto(A, F), actedin(F, G).;true;true
5;true;actedin(C, D).;true;true
5;true,false,true;ismarriedto(H, A), created(H, G).;false;false
6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
6;true;actedin(C, D).;false;true
6;true,false,true;ismarriedto(A, G), actedin(G, H).;false;false
6;true,false;ismarriedto(B, E), actedin(E, F).;true;true
6;true,false,false;ismarriedto(A, I), actedin(I, J).;false;false
7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
7;true;actedin(C, D).;true;true
7;true,false,true;ismarriedto(A, H), actedin(H, I).;false;false
7;true,true;ismarriedto(E, B), created(E, D).;false;false
7;true,false;ismarriedto(B, F), actedin(F, G).;true;false
8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
8;true,false,false;ismarriedto(A, I), actedin(I, J).;false;false
8;true,true;ismarriedto(E, A), created(E, D).;false;false
8;true,false;ismarriedto(B, F), actedin(F, G).;true;true
8;true;actedin(C, D).;true;true
8;true,false,true;ismarriedto(H, B), created(H, G).;false;false
9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;false
9;true,false,false;ismarriedto(B, J), actedin(J, K).;false;false
9;true,true;ismarriedto(E, A), created(E, D).;false;false
9;true,false;ismarriedto(A, F), actedin(F, G).;true;true
9;true;actedin(C, D).;true;true
9;true,false,true;ismarriedto(B, H), actedin(H, I).;false;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then if ( ismarriedto(E, A), created(E, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(F, B), created(F, D) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( ismarriedto(B, G), actedin(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return 0.1909039894799702;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( ismarriedto(A, E), actedin(E, F) )
%   | | then if ( ismarriedto(B, G), actedin(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(B, I), actedin(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7194734122109543;  // std dev = 4,21e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.1660408959247194;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then if ( ismarriedto(E, A), created(E, D) )
%   | | then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( ismarriedto(A, F), actedin(F, G) )
%   | | then if ( ismarriedto(B, H), actedin(H, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(B, J), actedin(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.1416823620318531;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( ismarriedto(A, E), actedin(E, F) )
%   | | then if ( ismarriedto(G, B), created(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(B, H), actedin(H, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.11882097877837529;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then if ( ismarriedto(E, B), created(E, D) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(F, A), created(F, D) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( ismarriedto(B, G), actedin(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(A, I), actedin(I, J) )
%   | | | then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.09816136362342648;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then if ( ismarriedto(E, B), created(E, D) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( ismarriedto(A, F), actedin(F, G) )
%   | | then if ( ismarriedto(H, A), created(H, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(B, I), actedin(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.08007898257396728;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( ismarriedto(B, E), actedin(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(A, G), actedin(G, H) )
%   | | | then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.06466046620299025;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then if ( ismarriedto(E, B), created(E, D) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( ismarriedto(B, F), actedin(F, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return 0.051784202231603696;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then if ( ismarriedto(E, A), created(E, D) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( ismarriedto(B, F), actedin(F, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(A, H), actedin(H, I) )
%   | | | then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.04120480483066268;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( actedin(C, D) )
%   | then if ( ismarriedto(E, A), created(E, D) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( ismarriedto(A, F), actedin(F, G) )
%   | | then if ( ismarriedto(B, H), actedin(H, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( ismarriedto(B, J), actedin(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.03262149712537019;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */


Results
   AUC ROC   = 0.5014
   AUC PR    = 0.338917
   CLL	      = -0.637132
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0028
   F1        = 0.005584


Total learning time: 331.629 seconds
Total inference time: 63.887 seconds
AUC ROC: 0.5014


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,true': 'ismarriedto(E, A), created(E, D)', 'true,false': 'ismarriedto(B, G), actedin(G, H)', 'true,true,false': 'ismarriedto(F, B), created(F, D)'}, {'true,false,false': [0.0, 0, 11], 'true,true,false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 1], 'false': [57.685, 10000, 4987]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false,true': 'ismarriedto(B, G), actedin(G, H)', 'true,false': 'ismarriedto(A, E), actedin(E, F)', 'true,false,false': 'ismarriedto(B, I), actedin(I, J)'}, {'true,false,true,false': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false': [57.685, 10000, 4987], 'true,false,false,false': [4.21e-08, 0, 10], 'true,false,true,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,false,false': 'ismarriedto(B, J), actedin(J, K)', 'true,true': 'ismarriedto(E, A), created(E, D)', 'true,false': 'ismarriedto(A, F), actedin(F, G)', 'true': 'actedin(C, D)', 'true,false,true': 'ismarriedto(B, H), actedin(H, I)'}, {'true,false,true,false': [0.0, 0, 1], 'true,true,false': [0.0, 0, 1], 'true,true,true': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 10], 'true,false,true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false,true': 'ismarriedto(G, B), created(G, F)', 'true,false': 'ismarriedto(A, E), actedin(E, F)', 'true,false,false': 'ismarriedto(B, H), actedin(H, I)'}, {'true,false,true,false': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false': [57.685, 10000, 4987], 'true,false,false,false': [3.65e-08, 0, 10], 'true,false,true,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,true,false': 'ismarriedto(F, A), created(F, D)', 'true,true': 'ismarriedto(E, B), created(E, D)', 'true,false': 'ismarriedto(B, G), actedin(G, H)', 'true,false,false': 'ismarriedto(A, I), actedin(I, J)', 'true': 'actedin(C, D)'}, {'true,false,false,true': [0.0, 0, 1], 'true,true,false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 10], 'true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 1], 'false': [57.685, 10000, 4987]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,false,false': 'ismarriedto(B, I), actedin(I, J)', 'true,true': 'ismarriedto(E, B), created(E, D)', 'true,false': 'ismarriedto(A, F), actedin(F, G)', 'true': 'actedin(C, D)', 'true,false,true': 'ismarriedto(H, A), created(H, G)'}, {'true,false,true,false': [0.0, 0, 1], 'true,true,false': [0.0, 0, 1], 'true,true,true': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [1.83e-08, 0, 10], 'true,false,true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,false': 'ismarriedto(B, E), actedin(E, F)', 'true,false,false': 'ismarriedto(A, G), actedin(G, H)'}, {'true,false,false,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false': [57.685, 10000, 4987], 'true,false,false,false': [0.0, 0, 10]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,true': 'ismarriedto(E, B), created(E, D)', 'true,false': 'ismarriedto(B, F), actedin(F, G)'}, {'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,false,false': [7.45e-09, 0, 11], 'true,true,true': [0.0, 0, 1]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true': 'actedin(C, D)', 'true,true': 'ismarriedto(E, A), created(E, D)', 'true,false': 'ismarriedto(B, F), actedin(F, G)', 'true,false,false': 'ismarriedto(A, H), actedin(H, I)'}, {'true,true,false': [0.0, 0, 1], 'true,true,true': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 10], 'true,false,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'true,false,false': 'ismarriedto(B, J), actedin(J, K)', 'true,true': 'ismarriedto(E, A), created(E, D)', 'true,false': 'ismarriedto(A, F), actedin(F, G)', 'true': 'actedin(C, D)', 'true,false,true': 'ismarriedto(B, H), actedin(H, I)'}, {'true,false,true,false': [0.0, 0, 1], 'true,true,false': [0.0, 0, 1], 'true,true,true': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 10], 'true,false,true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987]}]]
[{'': [-2.7328566760003855e-16, 0.2220291281646526], 'true': [0.0, -1.6148698540002277e-16], 'true,true': [0.0, 0.0], 'true,false': [nan, -1.6148698540002277e-16], 'true,true,false': [nan, 0.0]}, {'': [1.3664283380001927e-16, 0.22202912816466822], 'true': [0.0, 1.6148698540002277e-16], 'true,false,true': [nan, 0.0], 'true,false': [0.0, 1.7763568394002506e-16], 'true,false,false': [nan, 1.7763568394002506e-16]}, {'': [-2.7328566760003855e-16, 0.22202912816472367], 'true,false,false': [nan, -1.7763568394002506e-16], 'true,true': [0.0, 0.0], 'true,false': [0.0, -1.7763568394002506e-16], 'true': [0.0, -2.0185873175002846e-16], 'true,false,true': [nan, 0.0]}, {'': [1.3664283380001927e-16, 0.22202912816464399], 'true': [0.0, 1.6148698540002277e-16], 'true,false,true': [nan, 0.0], 'true,false': [0.0, 1.3322676295501878e-16], 'true,false,false': [nan, 1.3322676295501878e-16]}, {'': [-5.124106267500723e-17, 0.22202912816470613], 'true,true,false': [nan, 0.0], 'true,true': [0.0, 0.0], 'true,false': [nan, -6.055761952500853e-17], 'true,false,false': [0.0, -4.4408920985006264e-17], 'true': [0.0, -6.055761952500853e-17]}, {'': [3.416070845000482e-17, 0.22202912816472845], 'true,false,false': [nan, 3.3306690738754695e-17], 'true,true': [0.0, 0.0], 'true,false': [0.0, 3.3306690738754695e-17], 'true': [0.0, 4.0371746350005693e-17], 'true,false,true': [nan, 0.0]}, {'': [-3.416070845000482e-17, 0.2220291281647513], 'true': [0.0, -2.5232341468753557e-17], 'true,false': [nan, -2.5232341468753557e-17], 'true,false,false': [0.0, -2.7755575615628914e-17]}, {'': [0.0, 0.22202912816473508], 'true': [0.0, 5.046468293750712e-18], 'true,true': [0.0, 0.0], 'true,false': [nan, 5.046468293750712e-18]}, {'': [1.2810265668751807e-17, 0.22202912816470974], 'true': [0.0, 5.046468293750712e-18], 'true,true': [0.0, 0.0], 'true,false': [nan, 5.046468293750712e-18], 'true,false,false': [0.0, 0.0]}, {'': [0.0, 0.222029128164791], 'true,false,false': [nan, 0.0], 'true,true': [0.0, 0.0], 'true,false': [0.0, 0.0], 'true': [0.0, 2.523234146875356e-18], 'true,false,true': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '0;true;actedin(C, D).;true;true', '0;true,true;ismarriedto(E, A), created(E, D).;true;true', '1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '1;true;actedin(C, D).;true;true', '1;true,false;ismarriedto(A, E), actedin(E, F).;true;true', '2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '2;true;actedin(C, D).;true;true', '2;true,true;ismarriedto(E, A), created(E, D).;true;true', '2;true,false;ismarriedto(A, F), actedin(F, G).;true;true', '3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '3;true;actedin(C, D).;true;true', '3;true,false;ismarriedto(A, E), actedin(E, F).;true;true', '4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '4;true;actedin(C, D).;true;true', '4;true,true;ismarriedto(E, B), created(E, D).;true;true', '4;true,false;ismarriedto(A, I), actedin(I, J).;true;true', '5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '5;true;actedin(C, D).;true;true', '5;true,true;ismarriedto(E, B), created(E, D).;true;true', '5;true,false;ismarriedto(A, F), actedin(F, G).;true;true', '6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '6;true;actedin(C, D).;true;true', '6;true,false;ismarriedto(A, G), actedin(G, H).;true;true', '7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '7;true;actedin(C, D).;true;true', '7;true,true;ismarriedto(E, B), created(E, D).;true;true', '8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '8;true;actedin(C, D).;true;true', '8;true,true;ismarriedto(E, A), created(E, D).;true;true', '8;true,false;ismarriedto(A, H), actedin(H, I).;true;true', '9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '9;true;actedin(C, D).;true;true', '9;true,true;ismarriedto(E, A), created(E, D).;true;true', '9;true,false;ismarriedto(A, F), actedin(F, G).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( diedin(B, D), diedin(A, D) )
%   | then if ( wasbornin(A, D), ismarriedto(A, E) )
%   | | then if ( ismarriedto(B, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( isleaderof(G, D), created(G, H) )
%   | | | then return 0.7152917922423694;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995117;  // std dev = 2,53e-07, 55,000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( isaffiliatedto(B, I), isaffiliatedto(A, I) )
%   | | then if ( livesin(B, J), ispoliticianof(K, J) )
%   | | | then return 0.5248156017661789;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.8040948810454579;  // std dev = 2,382, 111,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=105 */
%   | | else if ( ismarriedto(A, L), ismarriedto(M, B) )
%   | | | then return 0.26626266602877213;  // std dev = 26,394, 2.884,000 (wgt'ed) examples reached here.  /* #neg=1.707 #pos=1.177 */
%   | | | else return 0.16270851189016966;  // std dev = 50,223, 11.909,000 (wgt'ed) examples reached here.  /* #neg=8.282 #pos=3.627 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 1,49e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(B, D), wasbornin(A, E) )
%   | then if ( livesin(F, D), wasbornin(F, E) )
%   | | then if ( isleaderof(G, D), holdspoliticalposition(G, H) )
%   | | | then return 0.512531566567451;  // std dev = 2,754, 35,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=24 */
%   | | | else return 0.7625096331502134;  // std dev = 2,904, 155,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=146 */
%   | | else if ( diedin(A, D) )
%   | | | then return 0.8133500719613824;  // std dev = 0,309, 52,000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.18051631762721376;  // std dev = 13,182, 778,000 (wgt'ed) examples reached here.  /* #neg=506 #pos=272 */
%   | else if ( ismarriedto(A, I), ismarriedto(B, J) )
%   | | then if ( wasbornin(B, K), diedin(I, K) )
%   | | | then return 0.7908114696735624;  // std dev = 0,991, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.21395502644384007;  // std dev = 25,040, 2.641,000 (wgt'ed) examples reached here.  /* #neg=1.605 #pos=1.036 */
%   | | else if ( isaffiliatedto(B, L), isaffiliatedto(A, L) )
%   | | | then return 0.644917302194694;  // std dev = 2,495, 80,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=73 */
%   | | | else return 0.13545777656327726;  // std dev = 48,405, 11.208,000 (wgt'ed) examples reached here.  /* #neg=7.861 #pos=3.347 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(D, B), ismarriedto(A, E) )
%   | then if ( diedin(E, F), wasbornin(B, F) )
%   | | then if ( haswonprize(A, G), diedin(A, F) )
%   | | | then return 0.39193387017734094;  // std dev = 0,831, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.6844191991046981;  // std dev = 0,564, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else if ( wasbornin(E, H), wasbornin(B, H) )
%   | | | then return 0.7702470316826475;  // std dev = 0,246, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.18026684275379543;  // std dev = 25,768, 2.812,000 (wgt'ed) examples reached here.  /* #neg=1.706 #pos=1.106 */
%   | else if ( iscitizenof(A, I), iscitizenof(B, I) )
%   | | then if ( wasbornin(B, J), happenedin(K, J) )
%   | | | then return 0.5884255896976123;  // std dev = 1,507, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.7775249258328821;  // std dev = 1,094, 63,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( ismarriedto(A, L) )
%   | | | then return 0.08866255871128828;  // std dev = 31,549, 5.087,000 (wgt'ed) examples reached here.  /* #neg=3.693 #pos=1.394 */
%   | | | else return 0.14716386130836093;  // std dev = 38,795, 6.899,000 (wgt'ed) examples reached here.  /* #neg=4.596 #pos=2.303 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.4175135841583098;  // std dev = 1,18e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( isaffiliatedto(A, D), isaffiliatedto(B, E) )
%   | then if ( isaffiliatedto(A, E) )
%   | | then if ( ismarriedto(A, F), isaffiliatedto(F, D) )
%   | | | then return 0.6072288688630516;  // std dev = 0,345, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.4655285009201596;  // std dev = 2,816, 93,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=84 */
%   | | else if ( ismarriedto(A, G) )
%   | | | then return 0.024237476708861456;  // std dev = 2,252, 30,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | | else return 0.34356611011672017;  // std dev = 3,053, 38,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=21 */
%   | else if ( ismarriedto(A, H), ismarriedto(I, B) )
%   | | then if ( isaffiliatedto(H, J) )
%   | | | then return -0.03340858998804478;  // std dev = 4,468, 123,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=26 */
%   | | | else return 0.16953090434910859;  // std dev = 25,539, 2.778,000 (wgt'ed) examples reached here.  /* #neg=1.607 #pos=1.171 */
%   | | else if ( ismarriedto(A, K) )
%   | | | then return 0.07383135182908065;  // std dev = 31,411, 5.044,000 (wgt'ed) examples reached here.  /* #neg=3.672 #pos=1.372 */
%   | | | else return 0.12346035836222395;  // std dev = 38,667, 6.851,000 (wgt'ed) examples reached here.  /* #neg=4.575 #pos=2.276 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), ismarriedto(E, B) )
%   | then if ( ismarriedto(D, E) )
%   | | then if ( wasbornin(B, F), livesin(G, F) )
%   | | | then return 0.5570864455604381;  // std dev = 0,154, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7181926658000178;  // std dev = 0,128, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( actedin(A, H), actedin(B, I) )
%   | | | then return 0.5962344354257905;  // std dev = 1,866, 35,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=31 */
%   | | | else return 0.1209669132397564;  // std dev = 25,661, 2.860,000 (wgt'ed) examples reached here.  /* #neg=1.703 #pos=1.157 */
%   | else if ( wasbornin(B, J), wasbornin(A, K) )
%   | | then if ( livesin(L, J), wasbornin(L, K) )
%   | | | then return 0.5187349565139748;  // std dev = 3,699, 136,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=120 */
%   | | | else return 0.12172529533605078;  // std dev = 11,732, 643,000 (wgt'ed) examples reached here.  /* #neg=409 #pos=234 */
%   | | else if ( ismarriedto(B, M) )
%   | | | then return 0.026387533163539083;  // std dev = 18,072, 1.741,000 (wgt'ed) examples reached here.  /* #neg=1.298 #pos=443 */
%   | | | else return 0.09103240183031067;  // std dev = 44,786, 9.547,000 (wgt'ed) examples reached here.  /* #neg=6.570 #pos=2.977 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( diedin(A, D), wasbornin(B, E) )
%   | then if ( diedin(F, E), wasbornin(F, D) )
%   | | then if ( isleaderof(G, E), happenedin(H, E) )
%   | | | then return 0.33969631855023374;  // std dev = 3,583, 84,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=60 */
%   | | | else return 0.5353282551706691;  // std dev = 3,764, 179,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=164 */
%   | | else if ( hascapital(I, D), livesin(J, E) )
%   | | | then return -0.09902767822864844;  // std dev = 4,456, 162,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=28 */
%   | | | else return 0.09781080990750161;  // std dev = 9,070, 389,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=145 */
%   | else if ( diedin(A, K) )
%   | | then if ( diedin(B, L), wasbornin(M, K) )
%   | | | then return 0.12873033597884506;  // std dev = 7,150, 234,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=94 */
%   | | | else return 0.007893469627932451;  // std dev = 18,387, 1.833,000 (wgt'ed) examples reached here.  /* #neg=1.364 #pos=469 */
%   | | else if ( wasbornin(B, N), diedin(P, N) )
%   | | | then return 0.03440367630879447;  // std dev = 22,249, 2.583,000 (wgt'ed) examples reached here.  /* #neg=1.810 #pos=773 */
%   | | | else return 0.09412412362702045;  // std dev = 45,776, 9.523,000 (wgt'ed) examples reached here.  /* #neg=6.269 #pos=3.254 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(B, D), isaffiliatedto(A, E) )
%   | then if ( isaffiliatedto(B, E) )
%   | | then if ( wasbornin(D, F), created(B, G) )
%   | | | then return 0.09857317370478895;  // std dev = 0,849, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4258786737951675;  // std dev = 0,368, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( graduatedfrom(D, H), worksat(I, H) )
%   | | | then return 0.36375138736824925;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return -0.1584530354827119;  // std dev = 4,918, 265,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=31 */
%   | else if ( haswonprize(A, J), actedin(B, K) )
%   | | then if ( actedin(A, L) )
%   | | | then return 0.6185789324030929;  // std dev = 1,881, 58,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | | | else return 0.09452175709820879;  // std dev = 2,851, 37,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | | else if ( wasbornin(B, M), wasbornin(A, N) )
%   | | | then return 0.14211835514568286;  // std dev = 13,893, 978,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=470 */
%   | | | else return 0.05866393090775215;  // std dev = 53,605, 13.613,000 (wgt'ed) examples reached here.  /* #neg=9.227 #pos=4.386 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( isaffiliatedto(B, D), ismarriedto(A, E) )
%   | then if ( isaffiliatedto(E, D) )
%   | | then if ( isaffiliatedto(A, F) )
%   | | | then return 0.36523344084929965;  // std dev = 0,406, 31,000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.6614793564010765;  // std dev = 0,944, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( isaffiliatedto(A, D) )
%   | | | then return 0.2689492283254863;  // std dev = 1,273, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.17832859464803766;  // std dev = 4,898, 309,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=27 */
%   | else if ( created(B, G), wasbornin(A, H) )
%   | | then if ( diedin(I, H), created(A, J) )
%   | | | then return 0.5048177220898117;  // std dev = 2,150, 35,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=29 */
%   | | | else return 0.09882823262380967;  // std dev = 6,145, 179,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=75 */
%   | | else if ( wasbornin(B, K), diedin(A, K) )
%   | | | then return 0.4459131082152276;  // std dev = 2,706, 185,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=182 */
%   | | | else return 0.0472310329144098;  // std dev = 54,687, 14.216,000 (wgt'ed) examples reached here.  /* #neg=9.602 #pos=4.614 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(B, D), diedin(A, D) )
%   | then if ( wasbornin(A, E), livesin(F, D) )
%   | | then if ( wasbornin(F, D) )
%   | | | then return 0.25821647923716606;  // std dev = 1,240, 81,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | | else return 0.370123260684135;  // std dev = 0,204, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( ismarriedto(B, G), ismarriedto(A, H) )
%   | | | then return 0.26251149177985844;  // std dev = 1,473, 30,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return 0.4818289705953678;  // std dev = 0,952, 73,000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else if ( iscitizenof(B, I), iscitizenof(A, J) )
%   | | then if ( happenedin(K, J), happenedin(K, I) )
%   | | | then return 0.48686504997397345;  // std dev = 2,172, 77,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=72 */
%   | | | else return -0.05319849751294071;  // std dev = 1,949, 25,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | else if ( wasbornin(B, L), diedin(M, L) )
%   | | | then return 1.9745241260339148E-4;  // std dev = 24,144, 3.127,000 (wgt'ed) examples reached here.  /* #neg=2.187 #pos=940 */
%   | | | else return 0.043197817510731255;  // std dev = 49,660, 11.562,000 (wgt'ed) examples reached here.  /* #neg=7.786 #pos=3.776 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(A, D), wasbornin(B, E) )
%   | then if ( diedin(A, E) )
%   | | then if ( livesin(F, E), wrotemusicfor(F, G) )
%   | | | then return 0.08515445647496404;  // std dev = 0,943, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2371692014169472;  // std dev = 0,710, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( ismarriedto(A, H), diedin(H, E) )
%   | | | then return 0.5326115309600041;  // std dev = 0,778, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.05613005131596252;  // std dev = 13,364, 889,000 (wgt'ed) examples reached here.  /* #neg=525 #pos=364 */
%   | else if ( wasbornin(B, I) )
%   | | then if ( diedin(A, I) )
%   | | | then return 0.33084966113035214;  // std dev = 1,811, 93,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=91 */
%   | | | else return -0.021952149829784544;  // std dev = 20,929, 2.429,000 (wgt'ed) examples reached here.  /* #neg=1.796 #pos=633 */
%   | | else if ( created(B, J), created(A, K) )
%   | | | then return 0.3492494430849004;  // std dev = 3,794, 68,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=46 */
%   | | | else return 0.034356190934553915;  // std dev = 49,152, 11.377,000 (wgt'ed) examples reached here.  /* #neg=7.654 #pos=3.723 */


Results
   AUC ROC   = 0.64
   AUC PR    = 0.53203
   CLL	      = -0.60247
   Precision = 0.956274 at threshold = 0.5
   Recall    = 0.1006
   F1        = 0.182048


Total learning time: 618.581 seconds
Total inference time: 63.265 seconds
AUC ROC: 0.64


Refined model AUC ROC: 0.64


Dataset: 27_cora_yago2s, Fold: 2, Type: transfer, Time: 02:24:48
{'Precision': [0.956274, 0.5], 'Parameter Learning results': {'Precision': [1.0, 0.5], 'CLL': -0.637132, 'Inference time': 63.887, 'Recall': 0.0028, 'AUC ROC': 0.5014, 'F1': 0.005584, 'AUC PR': 0.338917, 'Learning time': 331.629}, 'CLL': -0.60247, 'Inference time': 63.265, 'Recall': 0.1006, 'AUC ROC': 0.64, 'F1': 0.182048, 'AUC PR': 0.53203, 'Learning time': 950.21, 'Mapping results': {'Generating mappings time': 14.055646896362305, 'Possible mappings': 95344, 'Knowledge compiling time': 21.21234703063965, 'Total time': 60.53450083732605, 'Generating paths time': 2.837662935256958, 'Finding best mapping': 22.428836822509766}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( graduatedfrom(A, E) )
%   | then return 0.06350607795665476;  // std dev = 0,404, 112,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=23 */
%   | else if ( diedin(C, F), wasbornin(B, F) )
%   | | then return 0.8448156017661795;  // std dev = 0,115, 75,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | else if ( wasbornin(B, G), ismarriedto(B, D) )
%   | | | then return 0.20983089228605206;  // std dev = 12,211, 654,000 (wgt'ed) examples reached here.  /* #neg=424 #pos=230 */
%   | | | else return 0.2878812486750331;  // std dev = 22,642, 2.092,000 (wgt'ed) examples reached here.  /* #neg=1.193 #pos=899 */
%   else if ( wasbornin(A, H), wasbornin(B, I) )
%   | then if ( livesin(J, I), wasbornin(J, H) )
%   | | then return 0.7405018762759807;  // std dev = 0,322, 136,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=120 */
%   | | else if ( livesin(K, H), wasbornin(K, H) )
%   | | | then return 0.1403575240565664;  // std dev = 8,126, 326,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=92 */
%   | | | else return 0.30609846191339285;  // std dev = 8,854, 317,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=142 */
%   | else if ( ismarriedto(A, L) )
%   | | then return 0.12227203796628626;  // std dev = 0,441, 4.744,000 (wgt'ed) examples reached here.  /* #neg=3.491 #pos=1.253 */
%   | | else return 0.1892919668843482;  // std dev = 0,471, 6.544,000 (wgt'ed) examples reached here.  /* #neg=4.377 #pos=2.167 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(A, D) )
%   then if ( diedin(D, E), diedin(C, E) )
%   | then return 0.7932075828848751;  // std dev = 0,239, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( actedin(A, F), actedin(C, G) )
%   | | then return 0.6546545437217228;  // std dev = 0,373, 36,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=30 */
%   | | else if ( graduatedfrom(D, H) )
%   | | | then return 0.04073021093950575;  // std dev = 4,126, 103,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=22 */
%   | | | else return 0.2349194313205279;  // std dev = 25,743, 2.766,000 (wgt'ed) examples reached here.  /* #neg=1.620 #pos=1.146 */
%   else if ( created(B, I), created(A, J) )
%   | then if ( actedin(K, J), wrotemusicfor(L, I) )
%   | | then return 0.8264392522353541;  // std dev = 0,090, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5031352495984363;  // std dev = 0,468, 88,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=59 */
%   | else if ( ismarriedto(A, M) )
%   | | then return 0.11289654841301808;  // std dev = 0,444, 5.061,000 (wgt'ed) examples reached here.  /* #neg=3.684 #pos=1.377 */
%   | | else if ( ismarriedto(B, N) )
%   | | | then return 0.09437132014588688;  // std dev = 18,855, 1.851,000 (wgt'ed) examples reached here.  /* #neg=1.366 #pos=485 */
%   | | | else return 0.19668058473582548;  // std dev = 34,144, 5.058,000 (wgt'ed) examples reached here.  /* #neg=3.214 #pos=1.844 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, D) )
%   then if ( livesin(E, D), wasbornin(E, C) )
%   | then return 0.6192288976893695;  // std dev = 0,308, 190,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=170 */
%   | else if ( diedin(F, C), wasbornin(F, D) )
%   | | then return 0.5686864605944495;  // std dev = 0,410, 106,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=82 */
%   | | else if ( diedin(A, D) )
%   | | | then return 0.7755381969373355;  // std dev = 0,389, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.09298768459839729;  // std dev = 11,657, 680,000 (wgt'ed) examples reached here.  /* #neg=482 #pos=198 */
%   else if ( ismarriedto(B, G), ismarriedto(A, H) )
%   | then if ( isaffiliatedto(H, I), isaffiliatedto(B, I) )
%   | | then return 0.8105346280115732;  // std dev = 0,057, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( wasbornin(A, J), wasbornin(H, K) )
%   | | | then return 0.03353523638246212;  // std dev = 5,927, 194,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=48 */
%   | | | else return 0.1952252234819215;  // std dev = 24,302, 2.484,000 (wgt'ed) examples reached here.  /* #neg=1.460 #pos=1.024 */
%   | else if ( ismarriedto(A, L) )
%   | | then return 0.09066338903021375;  // std dev = 0,440, 4.744,000 (wgt'ed) examples reached here.  /* #neg=3.491 #pos=1.253 */
%   | | else return 0.13924336157898687;  // std dev = 0,470, 6.544,000 (wgt'ed) examples reached here.  /* #neg=4.377 #pos=2.167 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(A, D) )
%   then if ( wasbornin(B, E), diedin(D, E) )
%   | then return 0.5581795444459022;  // std dev = 0,127, 76,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else if ( actedin(A, F), actedin(C, G) )
%   | | then return 0.49413479868534865;  // std dev = 0,382, 34,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   | | else if ( wasbornin(B, H) )
%   | | | then return 0.09330704773252121;  // std dev = 11,865, 659,000 (wgt'ed) examples reached here.  /* #neg=438 #pos=221 */
%   | | | else return 0.1674867397196545;  // std dev = 22,761, 2.164,000 (wgt'ed) examples reached here.  /* #neg=1.262 #pos=902 */
%   else if ( diedin(A, I), wasbornin(B, J) )
%   | then if ( diedin(K, J), wasbornin(K, I) )
%   | | then return 0.5457054348532222;  // std dev = 0,367, 179,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=147 */
%   | | else return 0.07905407199400094;  // std dev = 0,443, 415,000 (wgt'ed) examples reached here.  /* #neg=292 #pos=123 */
%   | else if ( graduatedfrom(A, L), graduatedfrom(B, M) )
%   | | then return 0.483468151126932;  // std dev = 0,449, 77,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=54 */
%   | | else if ( diedin(A, N) )
%   | | | then return 0.04287983031716891;  // std dev = 17,111, 1.602,000 (wgt'ed) examples reached here.  /* #neg=1.212 #pos=390 */
%   | | | else return 0.10665476916797365;  // std dev = 45,493, 9.794,000 (wgt'ed) examples reached here.  /* #neg=6.734 #pos=3.060 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( diedin(B, C), diedin(A, D) )
%   then if ( wasbornin(B, D) )
%   | then return 0.5666111131071968;  // std dev = 0,142, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( isaffiliatedto(B, E), livesin(F, C) )
%   | | then return -0.010982732677969979;  // std dev = 0,395, 42,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | else if ( wasbornin(G, C), diedin(G, D) )
%   | | | then return 0.4355906299568827;  // std dev = 4,047, 80,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=55 */
%   | | | else return 0.12229982856925527;  // std dev = 8,320, 318,000 (wgt'ed) examples reached here.  /* #neg=203 #pos=115 */
%   else if ( haswonprize(A, H), actedin(B, I) )
%   | then return 0.436904369182972;  // std dev = 0,442, 97,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=69 */
%   | else if ( graduatedfrom(B, J), isaffiliatedto(A, K) )
%   | | then if ( isaffiliatedto(B, K) )
%   | | | then return 0.5888367435269323;  // std dev = 2,058, 51,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=46 */
%   | | | else return 0.22475924663633248;  // std dev = 3,755, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | else if ( ismarriedto(A, L), iscitizenof(B, M) )
%   | | | then return -0.030684886964249924;  // std dev = 6,886, 321,000 (wgt'ed) examples reached here.  /* #neg=260 #pos=61 */
%   | | | else return 0.08982149827939316;  // std dev = 54,380, 13.949,000 (wgt'ed) examples reached here.  /* #neg=9.415 #pos=4.534 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, D) )
%   then if ( diedin(A, C) )
%   | then return 0.40842552878788263;  // std dev = 0,149, 103,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=102 */
%   | else if ( diedin(A, D), livesin(E, D) )
%   | | then return -0.2250671481504154;  // std dev = 0,195, 40,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | else if ( ismarriedto(A, F), wasbornin(F, C) )
%   | | | then return 0.6084377613956647;  // std dev = 0,720, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.1243202692224391;  // std dev = 13,127, 845,000 (wgt'ed) examples reached here.  /* #neg=487 #pos=358 */
%   else if ( wasbornin(B, G) )
%   | then if ( ismarriedto(A, H), wasbornin(H, I) )
%   | | then return 0.1650080802389451;  // std dev = 0,464, 337,000 (wgt'ed) examples reached here.  /* #neg=190 #pos=147 */
%   | | else return 0.01243208866896866;  // std dev = 0,431, 2.187,000 (wgt'ed) examples reached here.  /* #neg=1.608 #pos=579 */
%   | else if ( diedin(A, J) )
%   | | then return 0.030388084166585887;  // std dev = 0,437, 2.068,000 (wgt'ed) examples reached here.  /* #neg=1.504 #pos=564 */
%   | | else if ( isaffiliatedto(B, K), ismarriedto(A, L) )
%   | | | then return -0.05379657334094917;  // std dev = 4,569, 156,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=31 */
%   | | | else return 0.09571216204539984;  // std dev = 45,263, 9.231,000 (wgt'ed) examples reached here.  /* #neg=6.047 #pos=3.184 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, C) )
%   then if ( graduatedfrom(B, D) )
%   | then if ( livesin(B, E), ispoliticianof(F, E) )
%   | | then return 0.11270912347845082;  // std dev = 0,402, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0.503264240627802;  // std dev = 0,211, 48,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return 0.650257997696047;  // std dev = 0,257, 67,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=63 */
%   else if ( iscitizenof(B, G), ismarriedto(A, H) )
%   | then if ( iscitizenof(H, G) )
%   | | then return 0.7413516788868363;  // std dev = 0,116, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( created(H, I), created(B, J) )
%   | | | then return 0.7319095074588128;  // std dev = 0,204, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.09320658523952949;  // std dev = 5,971, 317,000 (wgt'ed) examples reached here.  /* #neg=274 #pos=43 */
%   | else if ( wasbornin(B, K), wasbornin(A, K) )
%   | | then return 0.45568563882954655;  // std dev = 0,190, 178,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=175 */
%   | | else if ( directed(A, L), actedin(B, M) )
%   | | | then return 0.6004564254925184;  // std dev = 1,708, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | | else return 0.0549247521352791;  // std dev = 54,793, 14.312,000 (wgt'ed) examples reached here.  /* #neg=9.711 #pos=4.601 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, C) )
%   then if ( graduatedfrom(B, D) )
%   | then if ( livesin(B, E), ispoliticianof(F, E) )
%   | | then if ( livesin(A, G), livesin(B, G) )
%   | | | then return 0.4664279565850906;  // std dev = 0,247, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1401404911076937;  // std dev = 0,739, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.38436469023847203;  // std dev = 0,209, 48,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return 0.50724885630753;  // std dev = 0,258, 67,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=63 */
%   else if ( wasbornin(B, H), wasbornin(A, H) )
%   | then return 0.3560514954497055;  // std dev = 0,183, 180,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=177 */
%   | else if ( wasbornin(B, I), diedin(J, I) )
%   | | then if ( ismarriedto(K, A), diedin(K, L) )
%   | | | then return 0.10736658946736649;  // std dev = 9,970, 508,000 (wgt'ed) examples reached here.  /* #neg=286 #pos=222 */
%   | | | else return -0.005861773120378258;  // std dev = 21,802, 2.621,000 (wgt'ed) examples reached here.  /* #neg=1.904 #pos=717 */
%   | | else if ( wasbornin(A, M) )
%   | | | then return 0.01199057221765726;  // std dev = 22,386, 2.560,000 (wgt'ed) examples reached here.  /* #neg=1.841 #pos=719 */
%   | | | else return 0.06346361727411187;  // std dev = 44,360, 9.008,000 (wgt'ed) examples reached here.  /* #neg=5.957 #pos=3.051 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( graduatedfrom(A, E) )
%   | then return -0.09345547890240267;  // std dev = 0,364, 112,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=23 */
%   | else if ( wasbornin(C, F), wasbornin(B, F) )
%   | | then return 0.4408458827305233;  // std dev = 0,180, 49,000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( actedin(A, G) )
%   | | | then return -0.08981354002392107;  // std dev = 4,299, 125,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=37 */
%   | | | else return 0.0739159931278836;  // std dev = 24,537, 2.647,000 (wgt'ed) examples reached here.  /* #neg=1.530 #pos=1.117 */
%   else if ( ismarriedto(A, H) )
%   | then if ( actedin(A, I), actedin(B, J) )
%   | | then return 0.5714813938159236;  // std dev = 0,274, 56,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | else return 0.010464288332790323;  // std dev = 0,429, 5.046,000 (wgt'ed) examples reached here.  /* #neg=3.690 #pos=1.356 */
%   | else if ( iscitizenof(B, K), iscitizenof(A, K) )
%   | | then return 0.5999232675032872;  // std dev = 0,231, 66,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | else if ( ismarriedto(B, L) )
%   | | | then return -0.01482508039895067;  // std dev = 18,432, 1.859,000 (wgt'ed) examples reached here.  /* #neg=1.374 #pos=485 */
%   | | | else return 0.061844838292005724;  // std dev = 33,280, 5.040,000 (wgt'ed) examples reached here.  /* #neg=3.222 #pos=1.818 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(A, D) )
%   then if ( iscitizenof(A, E) )
%   | then return -0.18577574055582924;  // std dev = 0,328, 63,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=10 */
%   | else if ( actedin(D, F), actedin(B, G) )
%   | | then return 0.3656829057911611;  // std dev = 0,351, 48,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=41 */
%   | | else if ( created(A, H) )
%   | | | then return -0.04514030935428441;  // std dev = 5,562, 169,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=50 */
%   | | | else return 0.05789577731743023;  // std dev = 24,309, 2.653,000 (wgt'ed) examples reached here.  /* #neg=1.528 #pos=1.125 */
%   else if ( isaffiliatedto(B, I), isaffiliatedto(A, I) )
%   | then return 0.3144166672426912;  // std dev = 0,271, 108,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=99 */
%   | else if ( isaffiliatedto(B, J) )
%   | | then if ( graduatedfrom(A, K) )
%   | | | then return 0.1790818966408895;  // std dev = 3,033, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   | | | else return -0.1057483024058112;  // std dev = 8,270, 538,000 (wgt'ed) examples reached here.  /* #neg=449 #pos=89 */
%   | | else if ( actedin(A, L), actedin(B, M) )
%   | | | then return 0.4521053197974907;  // std dev = 2,913, 90,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=81 */
%   | | | else return 0.026324806103055806;  // std dev = 47,798, 11.286,000 (wgt'ed) examples reached here.  /* #neg=7.804 #pos=3.482 */


Results
   AUC ROC   = 0.652314
   AUC PR    = 0.542763
   CLL	      = -0.599807
   Precision = 0.941799 at threshold = 0.5
   Recall    = 0.089
   F1        = 0.162631


Total learning time: 822.524 seconds
Total inference time: 69.492 seconds
AUC ROC: 0.652314


Dataset: 27_cora_yago2s, Fold: 2, Type: scratch, Time: 02:39:43
{'Precision': [0.941799, 0.5], 'CLL': -0.599807, 'Inference time': 69.492, 'Recall': 0.089, 'AUC ROC': 0.652314, 'F1': 0.162631, 'AUC PR': 0.542763, 'Learning time': 822.524}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 21.768330097198486
   Generating paths time   = 2.8205785751342773
   Generating mappings time   = 14.003560781478882
   Possible mappings   = 95344
   Finding best mapping   = 25.4724338054657
   Total time   = 64.06491208076477


Best mapping found: ['venue(A,B) -> actedin(A,B)', 'haswordvenue(A,B) -> created(B,A)', 'haswordauthor(A,B) -> ismarriedto(B,A)', 'author(A,B) -> ismarriedto(B,A)', 'sameauthor(A,B) -> haschild(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
0;true,true,false;ismarriedto(B, F), actedin(F, D).;false;false
0;true,true;ismarriedto(A, E), actedin(E, D).;false;true
0;true,false;ismarriedto(G, B), created(G, H).;true;false
0;true;created(C, D).;true;true
0;true,false,true;ismarriedto(B, I), actedin(I, H).;false;false
1;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
1;true;created(C, D).;false;true
1;true,false,true;ismarriedto(G, B), created(G, H).;false;false
1;true,false;ismarriedto(E, A), created(E, F).;true;true
1;true,false,false;ismarriedto(I, B), created(I, J).;false;false
2;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
2;true,false,false;ismarriedto(J, B), created(J, K).;false;false
2;true,true;ismarriedto(A, E), actedin(E, D).;false;false
2;true,false;ismarriedto(F, A), created(F, G).;true;true
2;true;created(C, D).;true;true
2;true,false,true;ismarriedto(H, B), created(H, I).;false;false
3;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
3;true;created(C, D).;false;true
3;true,false,true;ismarriedto(B, G), actedin(G, F).;false;false
3;true,false;ismarriedto(E, A), created(E, F).;true;true
3;true,false,false;ismarriedto(H, B), created(H, I).;false;false
4;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
4;true,true,false;ismarriedto(A, F), actedin(F, D).;false;false
4;true,true;ismarriedto(B, E), actedin(E, D).;false;true
4;true,false;ismarriedto(G, B), created(G, H).;true;true
4;true,false,false;ismarriedto(J, A), created(J, K).;false;false
4;true;created(C, D).;true;true
4;true,false,true;ismarriedto(A, I), actedin(I, H).;false;false
5;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
5;true,false,false;ismarriedto(I, B), created(I, J).;false;false
5;true,true;ismarriedto(B, E), actedin(E, D).;false;false
5;true,false;ismarriedto(F, A), created(F, G).;true;true
5;true;created(C, D).;true;true
5;true,false,true;ismarriedto(A, H), actedin(H, G).;false;false
6;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
6;true;created(C, D).;false;true
6;true,false,true;ismarriedto(G, A), created(G, H).;false;false
6;true,false;ismarriedto(E, B), created(E, F).;true;true
6;true,false,false;ismarriedto(I, A), created(I, J).;false;false
7;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
7;true;created(C, D).;true;true
7;true,false,true;ismarriedto(H, A), created(H, I).;false;false
7;true,true;ismarriedto(B, E), actedin(E, D).;false;false
7;true,false;ismarriedto(F, B), created(F, G).;true;false
8;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
8;true,false,false;ismarriedto(I, A), created(I, J).;false;false
8;true,true;ismarriedto(A, E), actedin(E, D).;false;false
8;true,false;ismarriedto(F, B), created(F, G).;true;true
8;true;created(C, D).;true;true
8;true,false,true;ismarriedto(B, H), actedin(H, G).;false;false
9;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;false
9;true,false,false;ismarriedto(J, B), created(J, K).;false;false
9;true,true;ismarriedto(A, E), actedin(E, D).;false;false
9;true,false;ismarriedto(F, A), created(F, G).;true;true
9;true;created(C, D).;true;true
9;true,false,true;ismarriedto(H, B), created(H, I).;false;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( created(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, B), created(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.1909039894799702;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( created(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), created(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(G, B), created(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.1660408959247194;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( created(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), created(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(G, B), created(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.14168236203184917;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( created(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), created(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(G, B), created(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.11882097877837529;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( created(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, B), created(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(G, A), created(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.09816136362342648;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( created(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), created(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(G, B), created(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.08007898257396746;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( created(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, B), created(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(G, A), created(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.06466046620299006;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( created(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, B), created(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.051784202231603696;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( created(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, B), created(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(G, A), created(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.04120480483066268;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then if ( created(C, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), created(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( ismarriedto(G, B), created(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return 0.032621497125370165;  // std dev = 57,685, 14.987,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.987 */


Results
   AUC ROC   = 0.5012
   AUC PR    = 0.338516
   CLL	      = -0.637288
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0025
   F1        = 0.004988


Total learning time: 336.704 seconds
Total inference time: 86.622 seconds
AUC ROC: 0.5012


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'created(C, D)', 'true,false': 'ismarriedto(E, B), created(E, F)'}, {'true,false,false': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'created(C, D)', 'true,false': 'ismarriedto(E, A), created(E, F)', 'true,false,false': 'ismarriedto(G, B), created(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,false,false,false': [4.21e-08, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'created(C, D)', 'true,false': 'ismarriedto(E, A), created(E, F)', 'true,false,false': 'ismarriedto(G, B), created(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,false,false,false': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'created(C, D)', 'true,false': 'ismarriedto(E, A), created(E, F)', 'true,false,false': 'ismarriedto(G, B), created(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,false,false,false': [4.21e-08, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'created(C, D)', 'true,false': 'ismarriedto(E, B), created(E, F)', 'true,false,false': 'ismarriedto(G, A), created(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,false,false,false': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'created(C, D)', 'true,false': 'ismarriedto(E, A), created(E, F)', 'true,false,false': 'ismarriedto(G, B), created(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,false,false,false': [2.11e-08, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'created(C, D)', 'true,false': 'ismarriedto(E, B), created(E, F)', 'true,false,false': 'ismarriedto(G, A), created(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,false,false,false': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'created(C, D)', 'true,false': 'ismarriedto(E, B), created(E, F)'}, {'true,false,false': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'created(C, D)', 'true,false': 'ismarriedto(E, B), created(E, F)', 'true,false,false': 'ismarriedto(G, A), created(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,false,false,false': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'ismarriedto(C, A), ismarriedto(C, B)', 'true': 'created(C, D)', 'true,false': 'ismarriedto(E, A), created(E, F)', 'true,false,false': 'ismarriedto(G, B), created(G, H)'}, {'true,false,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'false': [57.685, 10000, 4987], 'true,false,false,false': [0.0, 0, 13]}]]
[{'': [-2.7328566760003855e-16, 0.22202912816467227], 'true': [nan, -2.7328566760003855e-16], 'true,false': [nan, -2.7328566760003855e-16]}, {'': [1.3664283380001927e-16, 0.22202912816466822], 'true': [nan, 1.3664283380001927e-16], 'true,false': [nan, 1.3664283380001927e-16], 'true,false,false': [nan, 1.3664283380001927e-16]}, {'': [-2.7328566760003855e-16, 0.22202912816472478], 'true': [nan, -2.7328566760003855e-16], 'true,false': [nan, -2.7328566760003855e-16], 'true,false,false': [nan, -2.7328566760003855e-16]}, {'': [1.3664283380001927e-16, 0.22202912816464399], 'true': [nan, 1.3664283380001927e-16], 'true,false': [nan, 1.3664283380001927e-16], 'true,false,false': [nan, 1.3664283380001927e-16]}, {'': [-5.124106267500723e-17, 0.22202912816470619], 'true': [nan, -5.124106267500723e-17], 'true,false': [nan, -5.124106267500723e-17], 'true,false,false': [nan, -5.124106267500723e-17]}, {'': [3.416070845000482e-17, 0.22202912816472847], 'true': [nan, 3.416070845000482e-17], 'true,false': [nan, 3.416070845000482e-17], 'true,false,false': [nan, 3.416070845000482e-17]}, {'': [-3.416070845000482e-17, 0.22202912816475134], 'true': [nan, -3.416070845000482e-17], 'true,false': [nan, -3.416070845000482e-17], 'true,false,false': [nan, -3.416070845000482e-17]}, {'': [0.0, 0.22202912816473513], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [-1.2810265668751807e-17, 0.2220291281647098], 'true': [nan, -1.2810265668751807e-17], 'true,false': [nan, -1.2810265668751807e-17], 'true,false,false': [nan, -1.2810265668751807e-17]}, {'': [0.0, 0.222029128164791], 'true': [nan, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '1;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '2;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '3;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '4;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '5;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '6;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '7;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '8;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true', '9;;haschild(A, B) :- ismarriedto(C, A), ismarriedto(C, B).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(B, D), wasbornin(A, D) )
%   | then if ( isleaderof(E, D), wasbornin(E, D) )
%   | | then if ( graduatedfrom(E, F), owns(F, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.8581489350995117;  // std dev = 3,77e-07, 148,000 (wgt'ed) examples reached here.  /* #pos=148 */
%   | else if ( ismarriedto(B, H), ismarriedto(A, I) )
%   | | then if ( wasbornin(B, J), wasbornin(I, J) )
%   | | | then return 0.8581489350995117;  // std dev = 1,69e-07, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.2698293363893677;  // std dev = 26,000, 2.791,000 (wgt'ed) examples reached here.  /* #neg=1.642 #pos=1.149 */
%   | | else if ( ismarriedto(A, K) )
%   | | | then return 0.1327399069110585;  // std dev = 31,788, 5.073,000 (wgt'ed) examples reached here.  /* #neg=3.680 #pos=1.393 */
%   | | | else return 0.1828673873085744;  // std dev = 38,971, 6.926,000 (wgt'ed) examples reached here.  /* #neg=4.677 #pos=2.249 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then if ( wasbornin(E, F), wasbornin(D, F) )
%   | | then return 0.7946825174301543;  // std dev = 0,176, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( wasbornin(B, G), diedin(A, H) )
%   | | | then return 0.36883913144269076;  // std dev = 7,055, 212,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=119 */
%   | | | else return 0.23387736955950514;  // std dev = 25,224, 2.643,000 (wgt'ed) examples reached here.  /* #neg=1.550 #pos=1.093 */
%   | else if ( iscitizenof(A, I), iscitizenof(B, I) )
%   | | then if ( ismarriedto(B, J) )
%   | | | then return 0.33439930233889004;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.8119860116598444;  // std dev = 1,017, 66,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | else if ( isaffiliatedto(A, K), isaffiliatedto(B, L) )
%   | | | then return 0.5804002039375757;  // std dev = 5,227, 150,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=113 */
%   | | | else return 0.13721779582856294;  // std dev = 49,859, 11.897,000 (wgt'ed) examples reached here.  /* #neg=8.317 #pos=3.580 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(A, D), wasbornin(B, D) )
%   | then if ( isaffiliatedto(B, E), isaffiliatedto(A, E) )
%   | | then return 0.591357499109996;  // std dev = 0,098, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( directed(A, F), edited(G, F) )
%   | | | then return 0.45978055345094015;  // std dev = 0,834, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.6746875319937301;  // std dev = 0,399, 153,000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | else if ( ismarriedto(B, H), ismarriedto(A, I) )
%   | | then if ( graduatedfrom(A, J) )
%   | | | then return 0.007621599245924645;  // std dev = 4,903, 138,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=31 */
%   | | | else return 0.20925421360693536;  // std dev = 25,503, 2.681,000 (wgt'ed) examples reached here.  /* #neg=1.535 #pos=1.146 */
%   | | else if ( iscitizenof(B, K), iscitizenof(A, L) )
%   | | | then return 0.5669983602546682;  // std dev = 2,926, 79,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=67 */
%   | | | else return 0.1167662590227141;  // std dev = 49,926, 11.920,000 (wgt'ed) examples reached here.  /* #neg=8.345 #pos=3.575 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( created(D, F) )
%   | | then if ( diedin(B, G), wasbornin(H, G) )
%   | | | then return -0.11384913811736969;  // std dev = 2,073, 37,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | | | else return 0.1069540290812004;  // std dev = 5,876, 154,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=56 */
%   | | else if ( diedin(A, I), wasbornin(B, I) )
%   | | | then return 0.6367639984437224;  // std dev = 0,798, 51,000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.1676153357392309;  // std dev = 25,084, 2.628,000 (wgt'ed) examples reached here.  /* #neg=1.513 #pos=1.115 */
%   | else if ( wasbornin(A, J), wasbornin(B, K) )
%   | | then if ( happenedin(L, K), participatedin(M, L) )
%   | | | then return 0.12079170667332395;  // std dev = 8,128, 362,000 (wgt'ed) examples reached here.  /* #neg=227 #pos=135 */
%   | | | else return 0.25768353364720503;  // std dev = 9,034, 381,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=193 */
%   | | else if ( ismarriedto(N, B) )
%   | | | then return 0.03630256980978381;  // std dev = 18,520, 1.879,000 (wgt'ed) examples reached here.  /* #neg=1.426 #pos=453 */
%   | | | else return 0.11183051133766053;  // std dev = 44,956, 9.495,000 (wgt'ed) examples reached here.  /* #neg=6.516 #pos=2.979 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( wasbornin(B, D), diedin(A, D) )
%   | then if ( wasbornin(A, D) )
%   | | then if ( ismarriedto(B, E), ismarriedto(A, F) )
%   | | | then return 0.3441263723223853;  // std dev = 0,197, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.48467840638536236;  // std dev = 0,207, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( happenedin(G, D), wasbornin(A, H) )
%   | | | then return 0.5402321840126916;  // std dev = 1,735, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | | else return 0.7179599819677891;  // std dev = 0,980, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( isaffiliatedto(B, I), isaffiliatedto(A, J) )
%   | | then if ( isaffiliatedto(B, J) )
%   | | | then return 0.6147587126546092;  // std dev = 2,123, 103,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=99 */
%   | | | else return 0.15860754689704143;  // std dev = 3,973, 68,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=33 */
%   | | else if ( wasbornin(B, K), diedin(L, K) )
%   | | | then return 0.041625589375085294;  // std dev = 23,788, 2.999,000 (wgt'ed) examples reached here.  /* #neg=2.133 #pos=866 */
%   | | | else return 0.0978295164257653;  // std dev = 50,260, 11.640,000 (wgt'ed) examples reached here.  /* #neg=7.824 #pos=3.816 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( graduatedfrom(B, D), graduatedfrom(A, E) )
%   | then if ( worksat(F, D), owns(E, G) )
%   | | then if ( owns(D, H), hasacademicadvisor(I, F) )
%   | | | then return 0.6518746867948289;  // std dev = 1,034, 23,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.3763794874644373;  // std dev = 2,203, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | else if ( isaffiliatedto(A, J) )
%   | | | then return 0.4558584762348199;  // std dev = 2,000, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | | else return 0.21745111169034073;  // std dev = 2,380, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   | else if ( ismarriedto(A, K), graduatedfrom(B, L) )
%   | | then if ( isaffiliatedto(A, M) )
%   | | | then return 0.4205051253433724;  // std dev = 1,491, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.09385902898127557;  // std dev = 5,792, 272,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=44 */
%   | | else if ( ismarriedto(A, N), ismarriedto(B, P) )
%   | | | then return 0.1176662574790107;  // std dev = 25,511, 2.778,000 (wgt'ed) examples reached here.  /* #neg=1.584 #pos=1.194 */
%   | | | else return 0.06969693227104022;  // std dev = 49,347, 11.813,000 (wgt'ed) examples reached here.  /* #neg=8.157 #pos=3.656 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( diedin(A, F), diedin(B, F) )
%   | | then if ( wasbornin(B, F) )
%   | | | then return 0.3250749551514014;  // std dev = 0,209, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6098393497019619;  // std dev = 0,974, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( graduatedfrom(A, G) )
%   | | | then return -0.06572837856127109;  // std dev = 4,743, 140,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=33 */
%   | | | else return 0.09473090245712439;  // std dev = 25,226, 2.706,000 (wgt'ed) examples reached here.  /* #neg=1.535 #pos=1.171 */
%   | else if ( iscitizenof(B, H), iscitizenof(A, H) )
%   | | then if ( wasbornin(A, I), hascapital(J, I) )
%   | | | then return 0.3065348388460246;  // std dev = 0,929, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4401742119407795;  // std dev = 1,263, 60,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | else if ( ismarriedto(A, K) )
%   | | | then return 0.03210027918722925;  // std dev = 31,511, 5.109,000 (wgt'ed) examples reached here.  /* #neg=3.680 #pos=1.429 */
%   | | | else return 0.07140223631748878;  // std dev = 38,389, 6.938,000 (wgt'ed) examples reached here.  /* #neg=4.674 #pos=2.264 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( diedin(A, D), diedin(B, E) )
%   | then if ( wasbornin(B, D) )
%   | | then if ( ismarriedto(B, F) )
%   | | | then return 0.3104851532814843;  // std dev = 0,931, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.5131833924726704;  // std dev = 0,764, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( isleaderof(G, D), wasbornin(A, H) )
%   | | | then return -0.04686530758009783;  // std dev = 3,303, 70,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=18 */
%   | | | else return 0.15285803407854973;  // std dev = 9,506, 388,000 (wgt'ed) examples reached here.  /* #neg=214 #pos=174 */
%   | else if ( ismarriedto(B, I), isaffiliatedto(A, J) )
%   | | then if ( isaffiliatedto(I, K) )
%   | | | then return 0.30810431443520253;  // std dev = 1,992, 23,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   | | | else return -0.14656107466082147;  // std dev = 5,173, 250,000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
%   | | else if ( wasbornin(B, L), wasbornin(A, M) )
%   | | | then return 0.10509676955742414;  // std dev = 12,412, 825,000 (wgt'ed) examples reached here.  /* #neg=447 #pos=378 */
%   | | | else return 0.04626614998251097;  // std dev = 53,169, 13.370,000 (wgt'ed) examples reached here.  /* #neg=9.066 #pos=4.304 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( livesin(B, D), ismarriedto(A, E) )
%   | then if ( livesin(E, F) )
%   | | then if ( livesin(B, F) )
%   | | | then return 0.6685547861900797;  // std dev = 0,298, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.21283642802780162;  // std dev = 1,487, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | else if ( graduatedfrom(E, G), worksat(H, G) )
%   | | | then return 0.2809313738344682;  // std dev = 1,711, 15,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return -0.15185327781926658;  // std dev = 5,057, 241,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=32 */
%   | else if ( iscitizenof(A, I), ismarriedto(B, J) )
%   | | then if ( iscitizenof(B, I), ismarriedto(A, K) )
%   | | | then return 0.656680960333243;  // std dev = 0,080, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.18612260859447852;  // std dev = 3,977, 184,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=19 */
%   | | else if ( ismarriedto(L, B), isaffiliatedto(A, M) )
%   | | | then return -0.07636647445342412;  // std dev = 5,645, 252,000 (wgt'ed) examples reached here.  /* #neg=200 #pos=52 */
%   | | | else return 0.047459526395621135;  // std dev = 54,972, 14.268,000 (wgt'ed) examples reached here.  /* #neg=9.415 #pos=4.853 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(C, A), ismarriedto(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( isaffiliatedto(B, D), ismarriedto(A, E) )
%   | then if ( isaffiliatedto(E, D) )
%   | | then if ( isaffiliatedto(A, D) )
%   | | | then return 0.41385174791858065;  // std dev = 0,484, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6314497899179138;  // std dev = 0,468, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( isaffiliatedto(A, F) )
%   | | | then return 0.1506397401864055;  // std dev = 2,584, 40,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return -0.19416755935428348;  // std dev = 4,110, 261,000 (wgt'ed) examples reached here.  /* #neg=240 #pos=21 */
%   | else if ( wasbornin(B, G), diedin(A, G) )
%   | | then if ( happenedin(H, G), wasbornin(A, I) )
%   | | | then return 0.26895542110361154;  // std dev = 1,751, 63,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=59 */
%   | | | else return 0.4563106213024877;  // std dev = 1,361, 111,000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( wasbornin(B, J), livesin(A, J) )
%   | | | then return 0.5969095271595918;  // std dev = 0,849, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.029455801327619685;  // std dev = 55,102, 14.455,000 (wgt'ed) examples reached here.  /* #neg=9.742 #pos=4.713 */


Results
   AUC ROC   = 0.636991
   AUC PR    = 0.523339
   CLL	      = -0.602899
   Precision = 0.961086 at threshold = 0.5
   Recall    = 0.1062
   F1        = 0.191265


Total learning time: 676.301 seconds
Total inference time: 91.773 seconds
AUC ROC: 0.636991


Refined model AUC ROC: 0.636991


Dataset: 27_cora_yago2s, Fold: 3, Type: transfer, Time: 03:01:03
{'Precision': [0.961086, 0.5], 'Parameter Learning results': {'Precision': [1.0, 0.5], 'CLL': -0.637288, 'Inference time': 86.622, 'Recall': 0.0025, 'AUC ROC': 0.5012, 'F1': 0.004988, 'AUC PR': 0.338516, 'Learning time': 336.704}, 'CLL': -0.602899, 'Inference time': 91.773, 'Recall': 0.1062, 'AUC ROC': 0.636991, 'F1': 0.191265, 'AUC PR': 0.523339, 'Learning time': 1013.0050000000001, 'Mapping results': {'Generating mappings time': 14.003560781478882, 'Possible mappings': 95344, 'Knowledge compiling time': 21.768330097198486, 'Total time': 64.06491208076477, 'Generating paths time': 2.8205785751342773, 'Finding best mapping': 25.4724338054657}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( actedin(A, E), actedin(B, F) )
%   | then if ( wasbornin(C, G), wasbornin(A, H) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.8278459047964819;  // std dev = 0,171, 33,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( haswonprize(A, I), haswonprize(B, I) )
%   | | then return 0.8581489350995121;  // std dev = 5,96e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( graduatedfrom(C, J) )
%   | | | then return 0.0759707172777298;  // std dev = 4,148, 101,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=22 */
%   | | | else return 0.2850946032346027;  // std dev = 25,816, 2.724,000 (wgt'ed) examples reached here.  /* #neg=1.561 #pos=1.163 */
%   else if ( diedin(A, K), wasbornin(B, K) )
%   | then return 0.825362049853609;  // std dev = 0,178, 122,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else if ( iscitizenof(A, L), iscitizenof(B, L) )
%   | | then return 0.8133728156965276;  // std dev = 0,207, 67,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | else if ( graduatedfrom(A, M), graduatedfrom(B, N) )
%   | | | then return 0.5707926132604326;  // std dev = 4,221, 87,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=62 */
%   | | | else return 0.1550833156416911;  // std dev = 49,719, 11.841,000 (wgt'ed) examples reached here.  /* #neg=8.325 #pos=3.516 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( diedin(A, C), wasbornin(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then return 0.8153648525995268;  // std dev = 0,175, 55,000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else return 0.6932560885367717;  // std dev = 0,178, 122,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   else if ( graduatedfrom(A, F), isaffiliatedto(B, G) )
%   | then if ( isaffiliatedto(A, G) )
%   | | then return 0.7750728948649315;  // std dev = 0,157, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else if ( wasbornin(A, H) )
%   | | | then return 0.41026442700543037;  // std dev = 2,401, 25,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=15 */
%   | | | else return 0.027980843308393885;  // std dev = 1,989, 23,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | else if ( ismarriedto(B, I), ismarriedto(A, J) )
%   | | then if ( graduatedfrom(A, K) )
%   | | | then return 0.023878019163820575;  // std dev = 4,457, 128,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=25 */
%   | | | else return 0.24734383962498818;  // std dev = 25,554, 2.689,000 (wgt'ed) examples reached here.  /* #neg=1.536 #pos=1.153 */
%   | | else if ( wasbornin(A, L), wasbornin(B, L) )
%   | | | then return 0.8310131191774569;  // std dev = 0,237, 88,000 (wgt'ed) examples reached here.  /* #pos=88 */
%   | | | else return 0.13352497441332783;  // std dev = 49,560, 11.832,000 (wgt'ed) examples reached here.  /* #neg=8.328 #pos=3.504 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( wasbornin(D, E), wasbornin(C, E) )
%   | then return 0.7727679602492654;  // std dev = 0,110, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( wasbornin(B, F), diedin(C, F) )
%   | | then return 0.7125873464329154;  // std dev = 0,137, 63,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else if ( isaffiliatedto(A, G) )
%   | | | then return 0.04889147324774796;  // std dev = 4,955, 140,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=34 */
%   | | | else return 0.2020883527216109;  // std dev = 25,307, 2.665,000 (wgt'ed) examples reached here.  /* #neg=1.536 #pos=1.129 */
%   else if ( ismarriedto(H, B) )
%   | then return 0.061562622343027666;  // std dev = 0,426, 1.986,000 (wgt'ed) examples reached here.  /* #neg=1.499 #pos=487 */
%   | else if ( ismarriedto(A, I) )
%   | | then if ( wasbornin(B, J), wasbornin(I, K) )
%   | | | then return 0.233424949183866;  // std dev = 8,724, 343,000 (wgt'ed) examples reached here.  /* #neg=192 #pos=151 */
%   | | | else return 0.08660780048178794;  // std dev = 30,446, 4.781,000 (wgt'ed) examples reached here.  /* #neg=3.488 #pos=1.293 */
%   | | else if ( isaffiliatedto(A, L), isaffiliatedto(B, M) )
%   | | | then return 0.589500797269165;  // std dev = 3,607, 98,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=81 */
%   | | | else return 0.17011082733632138;  // std dev = 33,166, 4.909,000 (wgt'ed) examples reached here.  /* #neg=3.161 #pos=1.748 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, C) )
%   then if ( diedin(A, C) )
%   | then return 0.5343628254821298;  // std dev = 0,068, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.6515744691390232;  // std dev = 0,100, 124,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=123 */
%   else if ( diedin(A, D), wasbornin(B, D) )
%   | then if ( wasbornin(A, E), happenedin(F, D) )
%   | | then if ( livesin(B, G) )
%   | | | then return -0.12989574268319856;  // std dev = 0,806, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.4776695301864742;  // std dev = 1,386, 26,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else return 0.5402189516534214;  // std dev = 0,450, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( wasbornin(B, H), diedin(I, H) )
%   | | then if ( haswonprize(A, J), haswonprize(I, J) )
%   | | | then return 0.5050813008977327;  // std dev = 3,908, 82,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=61 */
%   | | | else return 0.0401484963316872;  // std dev = 22,909, 2.862,000 (wgt'ed) examples reached here.  /* #neg=2.128 #pos=734 */
%   | | else if ( actedin(A, K), actedin(B, L) )
%   | | | then return 0.5946493455276625;  // std dev = 2,931, 67,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=56 */
%   | | | else return 0.11908546502593845;  // std dev = 50,351, 11.688,000 (wgt'ed) examples reached here.  /* #neg=7.835 #pos=3.853 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, D) )
%   then return 0.5095802045898399;  // std dev = 0,338, 122,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=105 */
%   else if ( ismarriedto(A, E), ismarriedto(B, F) )
%   | then if ( actedin(E, G) )
%   | | then if ( actedin(F, H), directed(I, G) )
%   | | | then return 0.4397183207109819;  // std dev = 1,507, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return -0.1784547099972076;  // std dev = 2,503, 73,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=7 */
%   | | else if ( actedin(F, J) )
%   | | | then return -0.13327459292549584;  // std dev = 3,480, 105,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=14 */
%   | | | else return 0.15964412612041234;  // std dev = 24,989, 2.656,000 (wgt'ed) examples reached here.  /* #neg=1.480 #pos=1.176 */
%   | else if ( ismarriedto(K, B) )
%   | | then if ( diedin(K, L), happenedin(M, L) )
%   | | | then return -0.042927151259064225;  // std dev = 5,569, 236,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=40 */
%   | | | else return 0.039443395496908715;  // std dev = 17,834, 1.737,000 (wgt'ed) examples reached here.  /* #neg=1.303 #pos=434 */
%   | | else if ( ismarriedto(A, N) )
%   | | | then return 0.05738693386806451;  // std dev = 31,243, 5.082,000 (wgt'ed) examples reached here.  /* #neg=3.673 #pos=1.409 */
%   | | | else return 0.1266216770646567;  // std dev = 33,164, 4.976,000 (wgt'ed) examples reached here.  /* #neg=3.171 #pos=1.805 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( diedin(A, C), diedin(B, D) )
%   then if ( participatedin(D, E), participatedin(C, F) )
%   | then return 0.5530469550166517;  // std dev = 0,230, 27,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else if ( wasbornin(G, C), diedin(G, D) )
%   | | then return 0.4599835556326401;  // std dev = 0,324, 125,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=109 */
%   | | else if ( isleaderof(H, C), wasbornin(I, D) )
%   | | | then return -0.07920345551833892;  // std dev = 3,882, 119,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=19 */
%   | | | else return 0.1383818877773789;  // std dev = 7,488, 248,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=98 */
%   else if ( diedin(A, J), wasbornin(K, J) )
%   | then return 0.028471384686533454;  // std dev = 0,428, 2.385,000 (wgt'ed) examples reached here.  /* #neg=1.682 #pos=703 */
%   | else if ( wasbornin(B, L), diedin(M, L) )
%   | | then if ( wasbornin(A, N) )
%   | | | then return 0.14728745074821054;  // std dev = 10,294, 565,000 (wgt'ed) examples reached here.  /* #neg=309 #pos=256 */
%   | | | else return 0.016190868865269565;  // std dev = 18,549, 1.906,000 (wgt'ed) examples reached here.  /* #neg=1.414 #pos=492 */
%   | | else if ( wasbornin(A, P) )
%   | | | then return 0.03824114940312342;  // std dev = 17,933, 1.628,000 (wgt'ed) examples reached here.  /* #neg=1.154 #pos=474 */
%   | | | else return 0.1038026211419097;  // std dev = 42,155, 7.997,000 (wgt'ed) examples reached here.  /* #neg=5.174 #pos=2.823 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, C) )
%   then return 0.40379990242978675;  // std dev = 0,108, 169,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, D) )
%   | then if ( iscitizenof(A, E), exports(E, F) )
%   | | then if ( wasbornin(A, G) )
%   | | | then return 0.11527508706363321;  // std dev = 0,839, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5108884695696095;  // std dev = 0,314, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( wasbornin(B, H), isleaderof(I, H) )
%   | | | then return 0.44890864598667807;  // std dev = 1,125, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.6105779939053819;  // std dev = 0,911, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( isaffiliatedto(B, J) )
%   | | then if ( ismarriedto(A, K), isaffiliatedto(K, J) )
%   | | | then return 0.7248189632871832;  // std dev = 0,175, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07770242369133909;  // std dev = 9,135, 616,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=116 */
%   | | else if ( isaffiliatedto(A, L) )
%   | | | then return -0.00445605435947218;  // std dev = 13,393, 1.009,000 (wgt'ed) examples reached here.  /* #neg=759 #pos=250 */
%   | | | else return 0.06644734712493024;  // std dev = 52,609, 13.101,000 (wgt'ed) examples reached here.  /* #neg=8.736 #pos=4.365 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, C) )
%   then return 0.3132688612827692;  // std dev = 0,102, 169,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   else if ( wasbornin(A, D), diedin(A, D) )
%   | then if ( livesin(E, D), isleaderof(E, F) )
%   | | then if ( influences(B, G) )
%   | | | then return 0.7314610933494595;  // std dev = 0,080, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.03700060955438617;  // std dev = 3,155, 62,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=14 */
%   | | else if ( diedin(B, D) )
%   | | | then return 0.5647131614197061;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12204668469560896;  // std dev = 4,894, 200,000 (wgt'ed) examples reached here.  /* #neg=171 #pos=29 */
%   | else if ( livesin(B, H), ismarriedto(A, I) )
%   | | then if ( livesin(I, H) )
%   | | | then return 0.667889586877339;  // std dev = 0,334, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09935636021627857;  // std dev = 5,660, 259,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=43 */
%   | | else if ( wasbornin(A, J) )
%   | | | then return 0.03111458001134804;  // std dev = 24,091, 2.953,000 (wgt'ed) examples reached here.  /* #neg=2.036 #pos=917 */
%   | | | else return 0.057564968429049436;  // std dev = 48,909, 11.339,000 (wgt'ed) examples reached here.  /* #neg=7.528 #pos=3.811 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), iscitizenof(B, D) )
%   then if ( wasbornin(A, E), created(A, F) )
%   | then if ( actedin(G, F) )
%   | | then return -0.24179550991749363;  // std dev = 0,017, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6388804097197477;  // std dev = 0,270, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( iscitizenof(A, D) )
%   | | then return 0.5763343914708546;  // std dev = 0,112, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.11981730716767569;  // std dev = 0,332, 314,000 (wgt'ed) examples reached here.  /* #neg=268 #pos=46 */
%   else if ( wasbornin(B, H), diedin(A, H) )
%   | then return 0.2709067639308143;  // std dev = 0,150, 177,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=173 */
%   | else if ( graduatedfrom(A, I), graduatedfrom(B, J) )
%   | | then if ( worksat(K, J), ismarriedto(K, L) )
%   | | | then return 0.5048702785555224;  // std dev = 1,299, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.22375587579279865;  // std dev = 3,575, 76,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=52 */
%   | | else if ( created(A, M), created(B, N) )
%   | | | then return 0.26181624239002843;  // std dev = 4,368, 80,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=46 */
%   | | | else return 0.03709769439765482;  // std dev = 54,294, 14.301,000 (wgt'ed) examples reached here.  /* #neg=9.663 #pos=4.638 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, D) )
%   then if ( wasbornin(B, E) )
%   | then return 0.21600351698255826;  // std dev = 0,332, 77,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=58 */
%   | else if ( isaffiliatedto(B, D) )
%   | | then return 0.4136857205386444;  // std dev = 0,161, 58,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0.23962691229487093;  // std dev = 0,472, 44,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   else if ( isaffiliatedto(B, F) )
%   | then if ( iscitizenof(A, G), hascurrency(G, H) )
%   | | then if ( iscitizenof(B, G) )
%   | | | then return 0.5410740958427368;  // std dev = 0,115, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.0831269488248125;  // std dev = 2,718, 31,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | | else return -0.11057374730606685;  // std dev = 0,328, 525,000 (wgt'ed) examples reached here.  /* #neg=446 #pos=79 */
%   | else if ( actedin(B, I), actedin(A, J) )
%   | | then return 0.3304064180303254;  // std dev = 0,344, 121,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=104 */
%   | | else if ( actedin(B, K) )
%   | | | then return -0.08742975529081728;  // std dev = 9,185, 592,000 (wgt'ed) examples reached here.  /* #neg=472 #pos=120 */
%   | | | else return 0.03647487723519196;  // std dev = 53,066, 13.546,000 (wgt'ed) examples reached here.  /* #neg=9.007 #pos=4.539 */


Results
   AUC ROC   = 0.668851
   AUC PR    = 0.561866
   CLL	      = -0.593143
   Precision = 0.953901 at threshold = 0.5
   Recall    = 0.1076
   F1        = 0.193386


Total learning time: 899.442 seconds
Total inference time: 70.936 seconds
AUC ROC: 0.668851


Dataset: 27_cora_yago2s, Fold: 3, Type: scratch, Time: 03:17:16
{'Precision': [0.953901, 0.5], 'CLL': -0.593143, 'Inference time': 70.936, 'Recall': 0.1076, 'AUC ROC': 0.668851, 'F1': 0.193386, 'AUC PR': 0.561866, 'Learning time': 899.442}


