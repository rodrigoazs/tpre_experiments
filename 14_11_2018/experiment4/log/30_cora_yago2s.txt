Starting experiment #1 for 30_cora_yago2s

Start learning from source dataset

WILL Produced-Tree #1
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.8581489350997613;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.8378674781458648;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.8269549587641631;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.5581489350995077;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.4934765704271427;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.02218643075415075;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.0010147328493697336;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #2
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.7194734122110724;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.7032671113531456;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.6945320465224505;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( author(A, F), author(B, F) )
%   | then if ( venue(A, G), venue(B, G) )
%   | | then return 0.4758860545469119;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return -0.019507091236738876;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | else return 0.033014816874873086;  // std dev = 0,378, 17.522,000 (wgt'ed) examples reached here.  /* #neg=14.360 #pos=3.162 */
WILL Produced-Tree #3
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.5553664367462224;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else return 0.539827684262469;  // std dev = 0,165, 15.988,000 (wgt'ed) examples reached here.  /* #neg=446 #pos=15.542 */
%   else if ( venue(A, E), venue(B, E) )
%   | then if ( author(A, F), author(B, F) )
%   | | then return 0.382647398804749;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.4166704082241807;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, G), author(B, G) )
%   | | then return -0.017186491653685926;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.004954903232071122;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #4
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.41751358415825085;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.40993642067949787;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.40384657955697567;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.2946730206437118;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.3373272769650083;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.015169014748981973;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.004338921007242539;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #5
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.320711847160062;  // std dev = 1,81e-05, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.3135517270689524;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.30838718250518987;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.2221466475140924;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.2623610330254356;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.013409276847657685;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.0038012920717412717;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #6
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.25517224256948384;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.24778585873218673;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.2429798094844353;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( author(A, F), author(B, F) )
%   | then return 0.0030918680257693083;  // std dev = 0,341, 8.592,000 (wgt'ed) examples reached here.  /* #neg=7.146 #pos=1.446 */
%   | else if ( venue(A, G), venue(B, G) )
%   | | then return 0.1992631794479105;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | | else return -0.0033316403968624473;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #7
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.2097577156325156;  // std dev = 0,000, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.20203181112431065;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.19735401280192846;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( author(A, F), author(B, F) )
%   | then if ( venue(A, G), venue(B, G) )
%   | | then return 0.1659045148769624;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return -0.012223505971883286;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | else return 0.009315771880907467;  // std dev = 0,363, 17.522,000 (wgt'ed) examples reached here.  /* #neg=14.360 #pos=3.162 */
WILL Produced-Tree #8
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.1770964977452425;  // std dev = 3,87e-06, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.169064114599548;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.16442846556779833;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.12494683277604403;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.14746798448168272;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.010830278390542418;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.004071557222415427;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #9
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.1527438580936383;  // std dev = 1,05e-05, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else if ( author(A, E), author(B, E) )
%   | | then return 0.14446437384320168;  // std dev = 0,141, 4.832,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=4.734 */
%   | | else return 0.1398408792333003;  // std dev = 0,174, 11.156,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=10.808 */
%   else if ( venue(A, F), venue(B, F) )
%   | then if ( author(A, G), author(B, G) )
%   | | then return 0.09473654167318285;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.11062350686528899;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, H), author(B, H) )
%   | | then return -0.009606320179534479;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.0035677812685789897;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */
WILL Produced-Tree #10
% FOR samebib(A, B):
%   if ( title(A, C), title(B, C) )
%   then if ( venue(A, D), venue(B, D) )
%   | then return 0.13400703000798356;  // std dev = 1,01e-05, 10.821,000 (wgt'ed) examples reached here.  /* #pos=10.821 */
%   | else return 0.12231161397129421;  // std dev = 0,165, 15.988,000 (wgt'ed) examples reached here.  /* #neg=446 #pos=15.542 */
%   else if ( venue(A, E), venue(B, E) )
%   | then if ( author(A, F), author(B, F) )
%   | | then return 0.07234219430459536;  // std dev = 0,458, 720,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=504 */
%   | | else return 0.08313827983973629;  // std dev = 0,481, 1.404,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=892 */
%   | else if ( author(A, G), author(B, G) )
%   | | then return -0.008528878447270067;  // std dev = 0,325, 7.872,000 (wgt'ed) examples reached here.  /* #neg=6.930 #pos=942 */
%   | | else return -0.003127535309841795;  // std dev = 0,348, 16.118,000 (wgt'ed) examples reached here.  /* #neg=13.848 #pos=2.270 */


Predicates from source: ['samebib(class,class).', 'title(class,title).', 'venue(class,venue).', 'author(class,author).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 20.5885591506958
   Generating paths time   = 2.7503347396850586
   Generating mappings time   = 1.457597017288208
   Possible mappings   = 43904
   Finding best mapping   = 12.096861124038696
   Total time   = 36.89336013793945


Best mapping found: ['venue(A,B) -> ismarriedto(A,B)', 'author(A,B) -> ismarriedto(B,A)', 'samebib(A,B) -> haschild(A,B)', 'title(A,B) -> created(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- created(A, C), created(B, C).;true;true
0;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
0;false,false;ismarriedto(H, A), ismarriedto(H, B).;false;false
0;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
0;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
0;false;ismarriedto(A, F), ismarriedto(B, F).;true;true
1;;haschild(A, B) :- created(A, C), created(B, C).;true;true
1;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
1;false,true;ismarriedto(A, G), ismarriedto(B, G).;false;false
1;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
1;false;ismarriedto(F, A), ismarriedto(F, B).;true;false
2;;haschild(A, B) :- created(A, C), created(B, C).;true;true
2;true;ismarriedto(A, D), ismarriedto(B, D).;false;false
2;false,true;ismarriedto(F, A), ismarriedto(F, B).;false;false
2;false,false;ismarriedto(G, A), ismarriedto(G, B).;false;false
2;false;ismarriedto(A, E), ismarriedto(B, E).;true;true
3;;haschild(A, B) :- created(A, C), created(B, C).;true;true
3;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
3;false,false;ismarriedto(H, A), ismarriedto(H, B).;false;false
3;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
3;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
3;false;ismarriedto(A, F), ismarriedto(B, F).;true;true
4;;haschild(A, B) :- created(A, C), created(B, C).;true;true
4;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
4;false,false;ismarriedto(H, A), ismarriedto(H, B).;false;false
4;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
4;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
4;false;ismarriedto(A, F), ismarriedto(B, F).;true;true
5;;haschild(A, B) :- created(A, C), created(B, C).;true;true
5;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
5;false,false;ismarriedto(A, G), ismarriedto(B, G).;false;false
5;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
5;false;ismarriedto(F, A), ismarriedto(F, B).;false;true
6;;haschild(A, B) :- created(A, C), created(B, C).;true;true
6;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
6;false,true;ismarriedto(A, G), ismarriedto(B, G).;false;false
6;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
6;false;ismarriedto(F, A), ismarriedto(F, B).;true;false
7;;haschild(A, B) :- created(A, C), created(B, C).;true;true
7;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
7;false,false;ismarriedto(H, A), ismarriedto(H, B).;false;false
7;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
7;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
7;false;ismarriedto(A, F), ismarriedto(B, F).;true;true
8;;haschild(A, B) :- created(A, C), created(B, C).;true;true
8;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
8;false,false;ismarriedto(H, A), ismarriedto(H, B).;false;false
8;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
8;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
8;false;ismarriedto(A, F), ismarriedto(B, F).;true;true
9;;haschild(A, B) :- created(A, C), created(B, C).;true;true
9;true;ismarriedto(A, D), ismarriedto(B, D).;false;false
9;false,true;ismarriedto(F, A), ismarriedto(F, B).;false;false
9;false,false;ismarriedto(G, A), ismarriedto(G, B).;false;false
9;false;ismarriedto(A, E), ismarriedto(B, E).;true;true


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(H, A), ismarriedto(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1904138923644644;  // std dev = 57,642, 14.976,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.976 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109545;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.1656188722484443;  // std dev = 57,642, 14.976,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.976 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.5553664367462845;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | then if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.14133320615613093;  // std dev = 57,642, 14.976,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.976 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.41751358415830997;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(H, A), ismarriedto(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.11854290934733329;  // std dev = 57,642, 14.976,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.976 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.32071184716014967;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(H, A), ismarriedto(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09794755777589201;  // std dev = 57,642, 14.976,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.976 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.25517224256948945;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.07991979110930753;  // std dev = 57,642, 14.976,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.976 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.20975771563253554;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.06454544242916634;  // std dev = 57,642, 14.976,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.976 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17709649774527736;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(H, A), ismarriedto(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.0517035045350104;  // std dev = 57,642, 14.976,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.976 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(H, A), ismarriedto(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.041149934368209996;  // std dev = 57,642, 14.976,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.976 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.13400703000801117;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | then if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.03258553544475633;  // std dev = 57,642, 14.976,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.976 */


Results
   AUC ROC   = 0.50235
   AUC PR    = 0.342161
   CLL	      = -0.636521
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0047
   F1        = 0.009356


Total learning time: 292.146 seconds
Total inference time: 85.89099999999999 seconds
AUC ROC: 0.50235


Structure after Parameter Learning
[['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'false,false': 'ismarriedto(H, A), ismarriedto(H, B)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.642, 10000, 4976], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false,true': 'ismarriedto(A, G), ismarriedto(B, G)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'true,false,false': [2.98e-08, 0, 9], 'false,false': [57.642, 10000, 4976], 'true,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [5.16e-08, 0, 15]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false,true': 'ismarriedto(F, A), ismarriedto(F, B)', 'false,false': 'ismarriedto(G, A), ismarriedto(G, B)', 'false': 'ismarriedto(A, E), ismarriedto(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 9], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false': [57.642, 10000, 4976], 'false,true,true': [0.0, 0, 15]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'false,false': 'ismarriedto(H, A), ismarriedto(H, B)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.642, 10000, 4976], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [4.71e-08, 0, 15]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'false,false': 'ismarriedto(H, A), ismarriedto(H, B)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.642, 10000, 4976], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false,false': 'ismarriedto(A, G), ismarriedto(B, G)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'false,true': [2.36e-08, 0, 15], 'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.642, 10000, 4976], 'true,false,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false,true': 'ismarriedto(A, G), ismarriedto(B, G)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'true,false,false': [0.0, 0, 9], 'false,false': [57.642, 10000, 4976], 'true,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'false,false': 'ismarriedto(H, A), ismarriedto(H, B)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.642, 10000, 4976], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'false,false': 'ismarriedto(H, A), ismarriedto(H, B)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.642, 10000, 4976], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 15]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false,true': 'ismarriedto(F, A), ismarriedto(F, B)', 'false,false': 'ismarriedto(G, A), ismarriedto(G, B)', 'false': 'ismarriedto(A, E), ismarriedto(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 9], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false': [57.642, 10000, 4976], 'false,true,true': [0.0, 0, 15]}]]
[{'': [-2.9605947323337506e-16, 0.22208864864878403], 'false,true': [-2.3684757858670006e-16, nan], 'false,false': [nan, 0.22186495543863766], 'false': [-2.3684757858670006e-16, 0.22186495543863766], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [0.0, 0.22194958917578808], 'false,true': [1.7763568394002506e-16, nan], 'true,false': [nan, 9.868649107779169e-17], 'false': [1.7763568394002506e-16, 0.22186495543871107], 'true': [nan, 9.868649107779169e-17]}, {'': [-1.4802973661668753e-16, 0.2218143120867587], 'true': [nan, -4.9343245538895844e-17], 'false,true': [-2.3684757858670006e-16, nan], 'false,false': [nan, 0.22186495543870066], 'false': [-2.3684757858670006e-16, 0.22186495543870066]}, {'': [1.2335811384723962e-16, 0.221732304920139], 'false,true': [1.4802973661668753e-16, nan], 'false,false': [nan, 0.2218649554386141], 'false': [1.4802973661668753e-16, 0.2218649554386141], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [-3.700743415417188e-17, 0.2216925613215848], 'false,true': [-1.4802973661668754e-17, nan], 'false,false': [nan, 0.22186495543872006], 'false': [-1.4802973661668754e-17, 0.22186495543872006], 'true': [nan, -3.700743415417188e-17], 'true,false': [nan, -3.700743415417188e-17]}, {'': [3.700743415417188e-17, 0.22167365839495562], 'true': [nan, 0.0], 'false,false': [nan, 0.22186495543860635], 'false': [3.700743415417188e-17, 0.22186495543860635], 'true,false': [nan, 0.0]}, {'': [-2.4671622769447922e-17, 0.22166403543613314], 'true': [nan, -6.1679056923619804e-18], 'false,true': [-2.960594732333751e-17, nan], 'false': [-2.960594732333751e-17, 0.22186495543870202], 'true,false': [nan, -6.1679056923619804e-18]}, {'': [6.1679056923619804e-18, 0.22165867438446585], 'false,true': [-7.401486830834377e-18, nan], 'false,false': [nan, 0.22186495543861892], 'false': [-7.401486830834377e-18, 0.22186495543861892], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [-3.0839528461809902e-18, 0.22165540549654106], 'false,true': [-2.2204460492503132e-17, nan], 'false,false': [nan, 0.22186495543865725], 'false': [-2.2204460492503132e-17, 0.22186495543865725], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [0.0, 0.22165323948085153], 'true': [nan, 0.0], 'false,true': [0.0, nan], 'false,false': [nan, 0.22186495543865595], 'false': [0.0, 0.22186495543865595]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '0;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '1;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '1;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '2;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '2;false;ismarriedto(A, E), ismarriedto(B, E).;true;true', '3;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '3;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '4;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '4;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '5;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '5;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '6;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '6;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '7;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '7;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '8;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '8;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '9;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '9;false;ismarriedto(A, E), ismarriedto(B, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( wasbornin(B, E), diedin(A, E) )
%   | | then if ( livesin(F, E), hasmusicalrole(F, G) )
%   | | | then return 0.7331489350995123;  // std dev = 1,323, 16,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.8458032560871648;  // std dev = 1,405, 162,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=160 */
%   | | else if ( ismarriedto(A, H), ismarriedto(B, I) )
%   | | | then return 0.2697100289035917;  // std dev = 26,451, 2.889,000 (wgt'ed) examples reached here.  /* #neg=1.700 #pos=1.189 */
%   | | | else return 0.16153293039718117;  // std dev = 50,168, 11.909,000 (wgt'ed) examples reached here.  /* #neg=8.296 #pos=3.613 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( isaffiliatedto(B, E), isaffiliatedto(A, F) )
%   | | then if ( ismarriedto(A, G), isaffiliatedto(G, E) )
%   | | | then return 0.8062645773537959;  // std dev = 0,992, 47,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.543276446157361;  // std dev = 5,366, 142,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=101 */
%   | | else if ( ismarriedto(B, H), ismarriedto(A, I) )
%   | | | then return 0.23903595216536222;  // std dev = 26,581, 2.928,000 (wgt'ed) examples reached here.  /* #neg=1.701 #pos=1.227 */
%   | | | else return 0.1400237199850117;  // std dev = 49,928, 11.859,000 (wgt'ed) examples reached here.  /* #neg=8.257 #pos=3.602 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( ismarriedto(A, E), ismarriedto(B, F) )
%   | | then if ( diedin(A, G), wasbornin(B, G) )
%   | | | then return 0.6559454933690237;  // std dev = 0,993, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.19520947988840448;  // std dev = 26,409, 2.889,000 (wgt'ed) examples reached here.  /* #neg=1.700 #pos=1.189 */
%   | | else if ( iscitizenof(A, H), iscitizenof(B, H) )
%   | | | then return 0.755843419296144;  // std dev = 1,711, 71,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | | else return 0.12122381229462012;  // std dev = 50,122, 11.955,000 (wgt'ed) examples reached here.  /* #neg=8.296 #pos=3.659 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( ismarriedto(B, E), ismarriedto(A, F) )
%   | | then if ( diedin(E, G), diedin(A, G) )
%   | | | then return 0.6800380315927613;  // std dev = 0,582, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.1620486901073574;  // std dev = 26,397, 2.920,000 (wgt'ed) examples reached here.  /* #neg=1.701 #pos=1.219 */
%   | | else if ( actedin(A, H), actedin(B, I) )
%   | | | then return 0.6579764680016524;  // std dev = 3,341, 97,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=84 */
%   | | | else return 0.10079406444816894;  // std dev = 49,909, 11.929,000 (wgt'ed) examples reached here.  /* #neg=8.286 #pos=3.643 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( isaffiliatedto(B, E), isaffiliatedto(A, E) )
%   | | then if ( haswonprize(B, F), graduatedfrom(B, G) )
%   | | | then return 0.43656873780472727;  // std dev = 0,823, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.6159822248740929;  // std dev = 2,207, 119,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=114 */
%   | | else if ( wasbornin(A, H), wasbornin(B, H) )
%   | | | then return 0.6985410044454382;  // std dev = 1,840, 159,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=157 */
%   | | | else return 0.0859133405616086;  // std dev = 55,905, 14.693,000 (wgt'ed) examples reached here.  /* #neg=9.992 #pos=4.701 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( wasbornin(B, E), diedin(A, E) )
%   | | then if ( ismarriedto(A, F), ismarriedto(B, G) )
%   | | | then return 0.3849045442211092;  // std dev = 1,096, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.5339546397272249;  // std dev = 1,864, 117,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=114 */
%   | | else if ( graduatedfrom(B, H), isaffiliatedto(A, I) )
%   | | | then return 0.32084292720142094;  // std dev = 4,544, 118,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=81 */
%   | | | else return 0.07174731616772344;  // std dev = 55,895, 14.680,000 (wgt'ed) examples reached here.  /* #neg=9.959 #pos=4.721 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( ismarriedto(A, E), ismarriedto(B, F) )
%   | | then if ( graduatedfrom(A, G) )
%   | | | then return -0.11732558473722446;  // std dev = 4,465, 140,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=31 */
%   | | | else return 0.107408623436828;  // std dev = 25,799, 2.810,000 (wgt'ed) examples reached here.  /* #neg=1.592 #pos=1.218 */
%   | | else if ( ismarriedto(H, B), isaffiliatedto(A, I) )
%   | | | then return -0.15146081349821525;  // std dev = 3,669, 154,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=18 */
%   | | | else return 0.057831865229890665;  // std dev = 49,525, 11.872,000 (wgt'ed) examples reached here.  /* #neg=8.163 #pos=3.709 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( wasbornin(B, E), diedin(A, E) )
%   | | then if ( ismarriedto(A, F) )
%   | | | then return 0.31980820349252764;  // std dev = 2,045, 113,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=109 */
%   | | | else return 0.412093918537366;  // std dev = 0,691, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( wasbornin(A, G), ismarriedto(B, H) )
%   | | | then return -0.015935399949449876;  // std dev = 14,387, 1.067,000 (wgt'ed) examples reached here.  /* #neg=749 #pos=318 */
%   | | | else return 0.05195144772762773;  // std dev = 54,113, 13.731,000 (wgt'ed) examples reached here.  /* #neg=9.247 #pos=4.484 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( isaffiliatedto(B, E), ismarriedto(A, F) )
%   | | then if ( isaffiliatedto(F, E) )
%   | | | then return 0.43539479379471835;  // std dev = 1,706, 65,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | | else return -0.16832492497050958;  // std dev = 5,448, 324,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=46 */
%   | | else if ( wasbornin(B, G), wasbornin(A, H) )
%   | | | then return 0.11188258468038605;  // std dev = 13,449, 925,000 (wgt'ed) examples reached here.  /* #neg=502 #pos=423 */
%   | | | else return 0.038762084593142704;  // std dev = 53,938, 13.662,000 (wgt'ed) examples reached here.  /* #neg=9.218 #pos=4.444 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( iscitizenof(B, E), iscitizenof(A, E) )
%   | | then if ( wasbornin(B, F), livesin(G, F) )
%   | | | then return 0.3264844569900316;  // std dev = 1,372, 19,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.5435740527211574;  // std dev = 1,106, 55,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else if ( wasbornin(A, H), livesin(I, H) )
%   | | | then return 7.935173184586259E-4;  // std dev = 22,480, 2.663,000 (wgt'ed) examples reached here.  /* #neg=1.830 #pos=833 */
%   | | | else return 0.036249818090855146;  // std dev = 51,114, 12.239,000 (wgt'ed) examples reached here.  /* #neg=8.167 #pos=4.072 */


Results
   AUC ROC   = 0.6117
   AUC PR    = 0.510257
   CLL	      = -0.609418
   Precision = 0.97319 at threshold = 0.5
   Recall    = 0.0726
   F1        = 0.13512


Total learning time: 512.217 seconds
Total inference time: 61.291 seconds
AUC ROC: 0.6117


Refined model AUC ROC: 0.6117


Dataset: 30_cora_yago2s, Fold: 1, Type: transfer, Time: 08:05:20
{'Precision': [0.97319, 0.5], 'Parameter Learning results': {'Precision': [1.0, 0.5], 'CLL': -0.636521, 'Inference time': 85.89099999999999, 'Recall': 0.0047, 'AUC ROC': 0.50235, 'F1': 0.009356, 'AUC PR': 0.342161, 'Learning time': 292.146}, 'CLL': -0.609418, 'Inference time': 61.291, 'Recall': 0.0726, 'AUC ROC': 0.6117, 'F1': 0.13512, 'AUC PR': 0.510257, 'Learning time': 804.363, 'Mapping results': {'Generating mappings time': 1.457597017288208, 'Possible mappings': 43904, 'Knowledge compiling time': 20.5885591506958, 'Total time': 36.89336013793945, 'Generating paths time': 2.7503347396850586, 'Finding best mapping': 12.096861124038696}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( diedin(C, E), wasbornin(D, F) )
%   | then if ( wasbornin(C, G), diedin(H, F) )
%   | | then return 0.5525933795439573;  // std dev = 0,461, 72,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=50 */
%   | | else if ( wasbornin(B, E) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2561081187729808;  // std dev = 4,846, 98,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=39 */
%   | else if ( graduatedfrom(A, I) )
%   | | then return 0.07027014722072364;  // std dev = 0,409, 132,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=28 */
%   | | else if ( wasbornin(D, J), wasbornin(B, K) )
%   | | | then return 0.14193271888329542;  // std dev = 5,485, 148,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=42 */
%   | | | else return 0.29572372568586563;  // std dev = 24,839, 2.507,000 (wgt'ed) examples reached here.  /* #neg=1.410 #pos=1.097 */
%   else if ( ismarriedto(A, L) )
%   | then return 0.14251099386503663;  // std dev = 0,451, 5.071,000 (wgt'ed) examples reached here.  /* #neg=3.629 #pos=1.442 */
%   | else if ( diedin(A, M), diedin(B, M) )
%   | | then return 0.8287371703936293;  // std dev = 0,169, 34,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else return 0.1841197738464395;  // std dev = 0,469, 6.927,000 (wgt'ed) examples reached here.  /* #neg=4.669 #pos=2.258 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( isaffiliatedto(A, E) )
%   | then return 0.08716284516515263;  // std dev = 0,432, 170,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=43 */
%   | else if ( actedin(A, F), actedin(B, G) )
%   | | then return 0.7062026691537806;  // std dev = 0,315, 35,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=31 */
%   | | else if ( diedin(C, H), diedin(D, I) )
%   | | | then return 0.3840612749661827;  // std dev = 6,300, 168,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=97 */
%   | | | else return 0.24170942623776015;  // std dev = 25,123, 2.595,000 (wgt'ed) examples reached here.  /* #neg=1.499 #pos=1.096 */
%   else if ( iscitizenof(A, J), iscitizenof(B, K) )
%   | then return 0.5712905932734786;  // std dev = 0,436, 100,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=74 */
%   | else if ( ismarriedto(A, L) )
%   | | then if ( isaffiliatedto(L, M), isaffiliatedto(B, N) )
%   | | | then return 0.7026457420061857;  // std dev = 2,457, 51,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=44 */
%   | | | else return 0.1165773206436593;  // std dev = 31,617, 4.995,000 (wgt'ed) examples reached here.  /* #neg=3.613 #pos=1.382 */
%   | | else if ( wasbornin(B, P), diedin(A, P) )
%   | | | then return 0.8181655984823187;  // std dev = 0,302, 61,000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.15213299835528796;  // std dev = 38,446, 6.825,000 (wgt'ed) examples reached here.  /* #neg=4.653 #pos=2.172 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( wasbornin(D, E), wasbornin(B, F) )
%   | then if ( diedin(A, F) )
%   | | then return 0.764042598328369;  // std dev = 0,223, 34,000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( livesin(G, E), wasbornin(G, F) )
%   | | | then return 0.7512944381118171;  // std dev = 0,982, 37,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.24218221348792165;  // std dev = 6,930, 200,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=94 */
%   | else if ( wasbornin(D, H) )
%   | | then if ( haswonprize(B, I), diedin(A, J) )
%   | | | then return 0.6529934793016908;  // std dev = 0,928, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.07853093204094523;  // std dev = 10,669, 551,000 (wgt'ed) examples reached here.  /* #neg=386 #pos=165 */
%   | | else if ( wasbornin(B, K), isleaderof(L, K) )
%   | | | then return 0.031007960171234986;  // std dev = 5,449, 166,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=41 */
%   | | | else return 0.23165765252794782;  // std dev = 21,973, 1.970,000 (wgt'ed) examples reached here.  /* #neg=1.082 #pos=888 */
%   else if ( isaffiliatedto(A, M), isaffiliatedto(B, M) )
%   | then return 0.7148027841008873;  // std dev = 0,234, 103,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=97 */
%   | else return 0.12008658589967902;  // std dev = 0,458, 11.929,000 (wgt'ed) examples reached here.  /* #neg=8.293 #pos=3.636 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( actedin(A, E), actedin(B, F) )
%   | then return 0.5438263376414659;  // std dev = 0,314, 36,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=32 */
%   | else if ( actedin(B, G) )
%   | | then if ( actedin(C, H), wrotemusicfor(I, H) )
%   | | | then return 0.6381298894316221;  // std dev = 0,923, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.0866250015577549;  // std dev = 3,603, 104,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */
%   | | else if ( actedin(C, J) )
%   | | | then return -0.1359781366167579;  // std dev = 3,304, 119,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=13 */
%   | | | else return 0.1848370716712086;  // std dev = 25,411, 2.697,000 (wgt'ed) examples reached here.  /* #neg=1.503 #pos=1.194 */
%   else if ( ismarriedto(K, B), wasbornin(A, L) )
%   | then return -0.001011730680261113;  // std dev = 0,400, 393,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=83 */
%   | else if ( ismarriedto(A, M), iscitizenof(B, N) )
%   | | then return -0.02088873608167582;  // std dev = 0,373, 292,000 (wgt'ed) examples reached here.  /* #neg=238 #pos=54 */
%   | | else if ( isaffiliatedto(B, P), isaffiliatedto(A, P) )
%   | | | then return 0.5733489625623092;  // std dev = 2,206, 95,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=90 */
%   | | | else return 0.10839614530697121;  // std dev = 48,925, 11.252,000 (wgt'ed) examples reached here.  /* #neg=7.746 #pos=3.506 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( iscitizenof(B, C), ismarriedto(A, D) )
%   then if ( iscitizenof(D, C) )
%   | then return 0.6455760019898831;  // std dev = 0,299, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | else return -0.059013867214060906;  // std dev = 0,355, 352,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=56 */
%   else if ( wasbornin(A, E), wasbornin(B, F) )
%   | then if ( diedin(A, F) )
%   | | then return 0.64339563572085;  // std dev = 0,114, 89,000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else if ( happenedin(G, F), diedin(A, H) )
%   | | | then return 0.003654974939635166;  // std dev = 5,517, 177,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=43 */
%   | | | else return 0.1983236686186264;  // std dev = 12,622, 693,000 (wgt'ed) examples reached here.  /* #neg=384 #pos=309 */
%   | else if ( wasbornin(A, I), diedin(J, I) )
%   | | then if ( playsfor(J, K), diedin(A, L) )
%   | | | then return -0.040197107597095154;  // std dev = 6,259, 261,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=51 */
%   | | | else return 0.048774745463999646;  // std dev = 19,409, 1.920,000 (wgt'ed) examples reached here.  /* #neg=1.384 #pos=536 */
%   | | else if ( ismarriedto(B, M), ismarriedto(A, N) )
%   | | | then return 0.15037108628377197;  // std dev = 23,096, 2.252,000 (wgt'ed) examples reached here.  /* #neg=1.256 #pos=996 */
%   | | | else return 0.09134476632533199;  // std dev = 44,301, 9.238,000 (wgt'ed) examples reached here.  /* #neg=6.334 #pos=2.904 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( wasbornin(B, C), diedin(A, D) )
%   then if ( wasbornin(E, D), diedin(E, C) )
%   | then return 0.43312586814083986;  // std dev = 0,355, 257,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=207 */
%   | else if ( livesin(F, C), hascapital(G, D) )
%   | | then return -0.08795983151129846;  // std dev = 0,364, 210,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=35 */
%   | | else return 0.11980252197305377;  // std dev = 0,457, 417,000 (wgt'ed) examples reached here.  /* #neg=253 #pos=164 */
%   else if ( wasbornin(B, H), wasbornin(A, I) )
%   | then if ( livesin(J, H), wasbornin(J, I) )
%   | | then return 0.6033746604080544;  // std dev = 0,309, 97,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=87 */
%   | | else if ( diedin(K, I), wasbornin(K, H) )
%   | | | then return 0.36227747672325883;  // std dev = 3,761, 67,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=44 */
%   | | | else return 0.04471468001408225;  // std dev = 9,205, 424,000 (wgt'ed) examples reached here.  /* #neg=287 #pos=137 */
%   | else if ( wasbornin(B, L) )
%   | | then return 0.002134367981098275;  // std dev = 0,427, 1.933,000 (wgt'ed) examples reached here.  /* #neg=1.439 #pos=494 */
%   | | else if ( isaffiliatedto(A, M), ismarriedto(B, N) )
%   | | | then return -0.10336548020899668;  // std dev = 5,130, 229,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=32 */
%   | | | else return 0.08383527976028952;  // std dev = 49,621, 11.366,000 (wgt'ed) examples reached here.  /* #neg=7.566 #pos=3.800 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, D) )
%   then if ( diedin(A, D) )
%   | then return 0.4110082435102712;  // std dev = 0,123, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   | else if ( ismarriedto(A, E), wasbornin(E, D) )
%   | | then return 0.5958084989095562;  // std dev = 0,110, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( livesin(F, C), livesin(F, D) )
%   | | | then return 0.5230463490883257;  // std dev = 2,978, 102,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=91 */
%   | | | else return 0.01757817684546438;  // std dev = 12,028, 767,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=237 */
%   else if ( ismarriedto(A, G), wasbornin(A, H) )
%   | then if ( livesin(B, I), livesin(A, J) )
%   | | then return 0.5394834920740625;  // std dev = 0,872, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.0019445233187383563;  // std dev = 0,428, 1.472,000 (wgt'ed) examples reached here.  /* #neg=1.095 #pos=377 */
%   | else if ( ismarriedto(B, K), iscitizenof(A, L) )
%   | | then return -0.1403260190073331;  // std dev = 0,311, 164,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=20 */
%   | | else if ( wasbornin(B, M), diedin(N, M) )
%   | | | then return 0.026977028702978783;  // std dev = 20,371, 2.216,000 (wgt'ed) examples reached here.  /* #neg=1.564 #pos=652 */
%   | | | else return 0.07711778979960265;  // std dev = 47,194, 10.141,000 (wgt'ed) examples reached here.  /* #neg=6.655 #pos=3.486 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( diedin(A, C), diedin(B, D) )
%   then if ( wasbornin(E, C), diedin(E, D) )
%   | then return 0.3571842342054045;  // std dev = 0,352, 157,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=127 */
%   | else if ( wasbornin(F, C), directed(F, G) )
%   | | then return -0.033712353115569575;  // std dev = 0,414, 279,000 (wgt'ed) examples reached here.  /* #neg=211 #pos=68 */
%   | | else if ( livesin(H, D), ismarriedto(B, I) )
%   | | | then return 0.028635304393240354;  // std dev = 3,026, 48,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
%   | | | else return 0.2717602568785484;  // std dev = 4,485, 86,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=47 */
%   else if ( diedin(A, J), wasbornin(B, J) )
%   | then return 0.41903542568308383;  // std dev = 0,192, 114,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=111 */
%   | else if ( wasbornin(A, K), happenedin(L, K) )
%   | | then if ( actedin(B, M), actedin(A, N) )
%   | | | then return 0.5464647979094878;  // std dev = 1,171, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.004643868994274523;  // std dev = 17,626, 1.721,000 (wgt'ed) examples reached here.  /* #neg=1.236 #pos=485 */
%   | | else if ( wasbornin(B, P), happenedin(Q, P) )
%   | | | then return -0.008217991359635248;  // std dev = 16,080, 1.441,000 (wgt'ed) examples reached here.  /* #neg=1.065 #pos=376 */
%   | | | else return 0.05665096103381296;  // std dev = 48,992, 11.134,000 (wgt'ed) examples reached here.  /* #neg=7.384 #pos=3.750 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, C) )
%   then if ( ismarriedto(B, D), ismarriedto(A, E) )
%   | then return 0.6388692602113992;  // std dev = 0,117, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.3544567991204642;  // std dev = 0,244, 103,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=97 */
%   else if ( isaffiliatedto(B, F) )
%   | then if ( ismarriedto(A, G), isaffiliatedto(G, F) )
%   | | then return 0.49510999226085306;  // std dev = 0,246, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( ismarriedto(A, H) )
%   | | | then return -0.19739906230748014;  // std dev = 4,166, 300,000 (wgt'ed) examples reached here.  /* #neg=277 #pos=23 */
%   | | | else return -0.004700499563925668;  // std dev = 8,026, 340,000 (wgt'ed) examples reached here.  /* #neg=248 #pos=92 */
%   | else if ( diedin(A, I), livesin(J, I) )
%   | | then if ( wasbornin(B, K), wasbornin(J, K) )
%   | | | then return 0.3245916271716913;  // std dev = 3,312, 165,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=150 */
%   | | | else return -0.004623380041983104;  // std dev = 19,558, 2.042,000 (wgt'ed) examples reached here.  /* #neg=1.471 #pos=571 */
%   | | else if ( isaffiliatedto(A, L) )
%   | | | then return -0.010537240071794829;  // std dev = 12,076, 791,000 (wgt'ed) examples reached here.  /* #neg=592 #pos=199 */
%   | | | else return 0.050612450701173504;  // std dev = 49,113, 11.219,000 (wgt'ed) examples reached here.  /* #neg=7.390 #pos=3.829 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( graduatedfrom(A, C), ismarriedto(B, D) )
%   then if ( graduatedfrom(B, E) )
%   | then if ( livesin(B, F) )
%   | | then return 0.6281123577867288;  // std dev = 0,131, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.30785274805969604;  // std dev = 0,385, 16,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | else return -0.15687586114725854;  // std dev = 0,291, 217,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=23 */
%   else if ( iscitizenof(B, G), ismarriedto(A, H) )
%   | then if ( created(H, I), wrotemusicfor(J, I) )
%   | | then return 0.7385143550588715;  // std dev = 0,068, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08002416097858898;  // std dev = 0,340, 358,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=62 */
%   | else if ( graduatedfrom(B, K), isaffiliatedto(A, L) )
%   | | then if ( created(B, M) )
%   | | | then return -0.062443471055397916;  // std dev = 0,956, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.26061786901199585;  // std dev = 3,730, 94,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=68 */
%   | | else if ( wasbornin(A, N), participatedin(N, P) )
%   | | | then return -0.019441465967999026;  // std dev = 7,981, 402,000 (wgt'ed) examples reached here.  /* #neg=282 #pos=120 */
%   | | | else return 0.03664753780840662;  // std dev = 53,951, 13.892,000 (wgt'ed) examples reached here.  /* #neg=9.191 #pos=4.701 */


Results
   AUC ROC   = 0.654208
   AUC PR    = 0.534587
   CLL	      = -0.601662
   Precision = 0.947429 at threshold = 0.5
   Recall    = 0.0829
   F1        = 0.15246


Total learning time: 788.266 seconds
Total inference time: 67.597 seconds
AUC ROC: 0.654208


Dataset: 30_cora_yago2s, Fold: 1, Type: scratch, Time: 08:19:39
{'Precision': [0.947429, 0.5], 'CLL': -0.601662, 'Inference time': 67.597, 'Recall': 0.0829, 'AUC ROC': 0.654208, 'F1': 0.15246, 'AUC PR': 0.534587, 'Learning time': 788.266}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 19.757524013519287
   Generating paths time   = 2.457831859588623
   Generating mappings time   = 1.6361172199249268
   Possible mappings   = 43904
   Finding best mapping   = 12.076870679855347
   Total time   = 35.928351640701294


Best mapping found: ['venue(A,B) -> ismarriedto(B,A)', 'author(A,B) -> ismarriedto(A,B)', 'samebib(A,B) -> haschild(A,B)', 'title(A,B) -> actedin(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true
0;false,true;ismarriedto(A, G), ismarriedto(B, G).;false;false
0;false,false;ismarriedto(A, H), ismarriedto(B, H).;false;false
0;true,false;ismarriedto(A, E), ismarriedto(B, E).;false;false
0;true;ismarriedto(D, A), ismarriedto(D, B).;false;true
0;false;ismarriedto(F, A), ismarriedto(F, B).;true;true
1;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true
1;true;ismarriedto(D, A), ismarriedto(D, B).;false;true
1;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
1;true,false;ismarriedto(A, E), ismarriedto(B, E).;false;false
1;false;ismarriedto(A, F), ismarriedto(B, F).;true;false
2;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true
2;true;ismarriedto(D, A), ismarriedto(D, B).;false;false
2;false,true;ismarriedto(A, F), ismarriedto(B, F).;false;false
2;false,false;ismarriedto(A, G), ismarriedto(B, G).;false;false
2;false;ismarriedto(E, A), ismarriedto(E, B).;true;true
3;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true
3;false,true;ismarriedto(A, G), ismarriedto(B, G).;false;false
3;false,false;ismarriedto(A, H), ismarriedto(B, H).;false;false
3;true,false;ismarriedto(A, E), ismarriedto(B, E).;false;false
3;true;ismarriedto(D, A), ismarriedto(D, B).;false;true
3;false;ismarriedto(F, A), ismarriedto(F, B).;true;true
4;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true
4;false,true;ismarriedto(A, G), ismarriedto(B, G).;false;false
4;false,false;ismarriedto(A, H), ismarriedto(B, H).;false;false
4;true,false;ismarriedto(A, E), ismarriedto(B, E).;false;false
4;true;ismarriedto(D, A), ismarriedto(D, B).;false;true
4;false;ismarriedto(F, A), ismarriedto(F, B).;true;true
5;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true
5;true;ismarriedto(D, A), ismarriedto(D, B).;false;true
5;false,false;ismarriedto(G, A), ismarriedto(G, B).;false;false
5;true,false;ismarriedto(A, E), ismarriedto(B, E).;false;false
5;false;ismarriedto(A, F), ismarriedto(B, F).;false;true
6;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true
6;true;ismarriedto(D, A), ismarriedto(D, B).;false;true
6;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
6;true,false;ismarriedto(A, E), ismarriedto(B, E).;false;false
6;false;ismarriedto(A, F), ismarriedto(B, F).;true;false
7;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true
7;false,true;ismarriedto(A, G), ismarriedto(B, G).;false;false
7;false,false;ismarriedto(A, H), ismarriedto(B, H).;false;false
7;true,false;ismarriedto(A, E), ismarriedto(B, E).;false;false
7;true;ismarriedto(D, A), ismarriedto(D, B).;false;true
7;false;ismarriedto(F, A), ismarriedto(F, B).;true;true
8;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true
8;false,true;ismarriedto(A, G), ismarriedto(B, G).;false;false
8;false,false;ismarriedto(A, H), ismarriedto(B, H).;false;false
8;true,false;ismarriedto(A, E), ismarriedto(B, E).;false;false
8;true;ismarriedto(D, A), ismarriedto(D, B).;false;true
8;false;ismarriedto(F, A), ismarriedto(F, B).;true;true
9;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true
9;true;ismarriedto(D, A), ismarriedto(D, B).;false;false
9;false,true;ismarriedto(A, F), ismarriedto(B, F).;false;false
9;false,false;ismarriedto(A, G), ismarriedto(B, G).;false;false
9;false;ismarriedto(E, A), ismarriedto(E, B).;true;true


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, H), ismarriedto(B, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.19001236798518897;  // std dev = 57,608, 14.967,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.967 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109543;  // std dev = 4,21e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.16527310217106922;  // std dev = 57,608, 14.967,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.967 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.5553664367462845;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | then if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.14104709478441096;  // std dev = 57,608, 14.967,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.967 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.41751358415830986;  // std dev = 4,71e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, H), ismarriedto(B, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1183149922067022;  // std dev = 57,608, 14.967,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.967 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.32071184716014967;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, H), ismarriedto(B, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09777225498693082;  // std dev = 57,608, 14.967,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.967 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2551722425694894;  // std dev = 2,58e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.0797892142752271;  // std dev = 57,608, 14.967,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.967 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.06445104963037553;  // std dev = 57,608, 14.967,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.967 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17709649774527741;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, H), ismarriedto(B, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.05163724542100438;  // std dev = 57,608, 14.967,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.967 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, H), ismarriedto(B, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.04110485351682786;  // std dev = 57,608, 14.967,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.967 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | then if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.03255596776242323;  // std dev = 57,608, 14.967,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.967 */


Results
   AUC ROC   = 0.50285
   AUC PR    = 0.343793
   CLL	      = -0.636215
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0057
   F1        = 0.011335


Total learning time: 273.903 seconds
Total inference time: 59.779 seconds
AUC ROC: 0.50285


Structure after Parameter Learning
[['haschild(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'ismarriedto(A, G), ismarriedto(B, G)', 'false,false': 'ismarriedto(A, H), ismarriedto(B, H)', 'true,false': 'ismarriedto(A, E), ismarriedto(B, E)', 'true': 'ismarriedto(D, A), ismarriedto(D, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'true,false,false': [0.0, 0, 20], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.608, 10000, 4967], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'true': 'ismarriedto(D, A), ismarriedto(D, B)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'true,false': 'ismarriedto(A, E), ismarriedto(B, E)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [4.21e-08, 0, 20], 'false,false': [57.608, 10000, 4967], 'true,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [4.21e-08, 0, 13]}], ['haschild(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'true': 'ismarriedto(D, A), ismarriedto(D, B)', 'false,true': 'ismarriedto(A, F), ismarriedto(B, F)', 'false,false': 'ismarriedto(A, G), ismarriedto(B, G)', 'false': 'ismarriedto(E, A), ismarriedto(E, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 20], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false': [57.608, 10000, 4967], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'ismarriedto(A, G), ismarriedto(B, G)', 'false,false': 'ismarriedto(A, H), ismarriedto(B, H)', 'true,false': 'ismarriedto(A, E), ismarriedto(B, E)', 'true': 'ismarriedto(D, A), ismarriedto(D, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'true,false,false': [4.71e-08, 0, 20], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.608, 10000, 4967], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [4.21e-08, 0, 13]}], ['haschild(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'ismarriedto(A, G), ismarriedto(B, G)', 'false,false': 'ismarriedto(A, H), ismarriedto(B, H)', 'true,false': 'ismarriedto(A, E), ismarriedto(B, E)', 'true': 'ismarriedto(D, A), ismarriedto(D, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'true,false,false': [0.0, 0, 20], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.608, 10000, 4967], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'true': 'ismarriedto(D, A), ismarriedto(D, B)', 'false,false': 'ismarriedto(G, A), ismarriedto(G, B)', 'true,false': 'ismarriedto(A, E), ismarriedto(B, E)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'false,true': [2.11e-08, 0, 13], 'true,false,false': [2.58e-08, 0, 20], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.608, 10000, 4967], 'true,false,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'true': 'ismarriedto(D, A), ismarriedto(D, B)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'true,false': 'ismarriedto(A, E), ismarriedto(B, E)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 20], 'false,false': [57.608, 10000, 4967], 'true,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'ismarriedto(A, G), ismarriedto(B, G)', 'false,false': 'ismarriedto(A, H), ismarriedto(B, H)', 'true,false': 'ismarriedto(A, E), ismarriedto(B, E)', 'true': 'ismarriedto(D, A), ismarriedto(D, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'true,false,false': [0.0, 0, 20], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.608, 10000, 4967], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'false,true': 'ismarriedto(A, G), ismarriedto(B, G)', 'false,false': 'ismarriedto(A, H), ismarriedto(B, H)', 'true,false': 'ismarriedto(A, E), ismarriedto(B, E)', 'true': 'ismarriedto(D, A), ismarriedto(D, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'true,false,false': [0.0, 0, 20], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.608, 10000, 4967], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'actedin(A, C), actedin(B, C)', 'true': 'ismarriedto(D, A), ismarriedto(D, B)', 'false,true': 'ismarriedto(A, F), ismarriedto(B, F)', 'false,false': 'ismarriedto(A, G), ismarriedto(B, G)', 'false': 'ismarriedto(E, A), ismarriedto(E, B)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 20], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false': [57.608, 10000, 4967], 'false,true,true': [0.0, 0, 13]}]]
[{'': [-8.881784197001253e-17, 0.22192473810217467], 'false,true': [-2.7328566760003855e-16, nan], 'false,false': [nan, 0.22173009479894687], 'false': [-2.7328566760003855e-16, 0.22173009479894687], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [2.6645352591003756e-16, 0.22180398248343688], 'true': [nan, 8.881784197001253e-17], 'false,true': [1.3664283380001927e-16, nan], 'false': [1.3664283380001927e-16, 0.22173009479905506], 'true,false': [nan, 8.881784197001253e-17]}, {'': [-2.6645352591003756e-16, 0.22168651394893724], 'true': [nan, -1.3322676295501878e-16], 'false,true': [-2.7328566760003855e-16, nan], 'false,false': [nan, 0.22173009479900826], 'false': [-2.7328566760003855e-16, 0.22173009479900826]}, {'': [1.3322676295501878e-16, 0.22161529214199363], 'false,true': [1.3664283380001927e-16, nan], 'false,false': [nan, 0.2217300947990293], 'false': [1.3664283380001927e-16, 0.2217300947990293], 'true': [nan, 1.1102230246251565e-16], 'true,false': [nan, 1.1102230246251565e-16]}, {'': [2.2204460492503132e-17, 0.2215807673521875], 'false,true': [-5.124106267500723e-17, nan], 'false,false': [nan, 0.22173009479904468], 'false': [-5.124106267500723e-17, 0.22173009479904468], 'true': [nan, -2.2204460492503132e-17], 'true,false': [nan, -2.2204460492503132e-17]}, {'': [1.1102230246251566e-17, 0.22156434255861265], 'true': [nan, 3.3306690738754695e-17], 'false,false': [nan, 0.22173009479898473], 'false': [3.416070845000482e-17, 0.22173009479898473], 'true,false': [nan, 3.3306690738754695e-17]}, {'': [-2.7755575615628914e-17, 0.22155597950662417], 'true': [nan, -2.7755575615628914e-17], 'false,true': [-3.416070845000482e-17, nan], 'false': [-3.416070845000482e-17, 0.2217300947989408], 'true,false': [nan, -2.7755575615628914e-17]}, {'': [-2.2204460492503132e-17, 0.22155131986606397], 'false,true': [0.0, nan], 'false,false': [nan, 0.22173009479896158], 'false': [0.0, 0.22173009479896158], 'true': [nan, -1.1102230246251566e-17], 'true,false': [nan, -1.1102230246251566e-17]}, {'': [-3.3306690738754695e-17, 0.22154847868655103], 'false,true': [-1.2810265668751807e-17, nan], 'false,false': [nan, 0.22173009479895475], 'false': [-1.2810265668751807e-17, 0.22173009479895475], 'true': [nan, -1.6653345369377347e-17], 'true,false': [nan, -1.6653345369377347e-17]}, {'': [0.0, 0.22154659632026596], 'true': [nan, 0.0], 'false,true': [0.0, nan], 'false,false': [nan, 0.22173009479895905], 'false': [0.0, 0.22173009479895905]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true', '0;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '1;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true', '1;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '2;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true', '2;false;ismarriedto(E, A), ismarriedto(E, B).;true;true', '3;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true', '3;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '4;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true', '4;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '5;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true', '5;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '6;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true', '6;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '7;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true', '7;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '8;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true', '8;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '9;;haschild(A, B) :- actedin(A, C), actedin(B, C).;true;true', '9;false;ismarriedto(E, A), ismarriedto(E, B).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( wasbornin(B, E), diedin(A, E) )
%   | | then if ( influences(F, A), wasbornin(F, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8477862407989911;  // std dev = 1,407, 193,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=191 */
%   | | else if ( ismarriedto(A, H), ismarriedto(I, B) )
%   | | | then return 0.2603228481429855;  // std dev = 26,186, 2.852,000 (wgt'ed) examples reached here.  /* #neg=1.705 #pos=1.147 */
%   | | | else return 0.1624529874528925;  // std dev = 50,232, 11.919,000 (wgt'ed) examples reached here.  /* #neg=8.292 #pos=3.627 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( wasbornin(A, E), wasbornin(B, E) )
%   | | then if ( diedin(A, F), hascapital(G, F) )
%   | | | then return 0.7011301235085899;  // std dev = 1,370, 51,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.8208288016499085;  // std dev = 1,037, 142,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=141 */
%   | | else if ( actedin(A, H), wasbornin(B, I) )
%   | | | then return 0.2759858278681065;  // std dev = 6,655, 183,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=82 */
%   | | | else return 0.15528545789316325;  // std dev = 56,213, 14.591,000 (wgt'ed) examples reached here.  /* #neg=9.896 #pos=4.695 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( ismarriedto(E, B), ismarriedto(A, F) )
%   | | then if ( livesin(F, G), livesin(B, G) )
%   | | | then return 0.799695399480904;  // std dev = 5,96e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.20597301063124285;  // std dev = 26,246, 2.899,000 (wgt'ed) examples reached here.  /* #neg=1.707 #pos=1.192 */
%   | | else if ( diedin(A, H), wasbornin(B, H) )
%   | | | then return 0.6491663617934712;  // std dev = 1,277, 135,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=134 */
%   | | | else return 0.11792463493328904;  // std dev = 50,064, 11.919,000 (wgt'ed) examples reached here.  /* #neg=8.292 #pos=3.627 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( created(B, E), created(A, F) )
%   | | then if ( isaffiliatedto(B, G), wasbornin(B, H) )
%   | | | then return -0.22709833929618237;  // std dev = 0,047, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.49065289462832296;  // std dev = 4,650, 107,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=76 */
%   | | else if ( ismarriedto(I, B), ismarriedto(A, J) )
%   | | | then return 0.17214767854893856;  // std dev = 26,212, 2.898,000 (wgt'ed) examples reached here.  /* #neg=1.700 #pos=1.198 */
%   | | | else return 0.10073815320634649;  // std dev = 49,940, 11.957,000 (wgt'ed) examples reached here.  /* #neg=8.264 #pos=3.693 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( wasbornin(B, E), wasbornin(A, E) )
%   | | then if ( diedin(A, E) )
%   | | | then return 0.38406590141298547;  // std dev = 1,064, 50,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.6154923945866874;  // std dev = 1,445, 143,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=141 */
%   | | else if ( livesin(B, F), livesin(A, G) )
%   | | | then return 0.5318556218778832;  // std dev = 3,782, 88,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=69 */
%   | | | else return 0.08805204045110605;  // std dev = 56,034, 14.686,000 (wgt'ed) examples reached here.  /* #neg=9.978 #pos=4.708 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( ismarriedto(A, E), ismarriedto(F, B) )
%   | | then if ( wasbornin(E, G), wasbornin(B, G) )
%   | | | then return 0.6507804081135672;  // std dev = 0,688, 48,000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.11056393097530398;  // std dev = 25,882, 2.865,000 (wgt'ed) examples reached here.  /* #neg=1.707 #pos=1.158 */
%   | | else if ( wasbornin(B, H), diedin(A, H) )
%   | | | then return 0.4281447908523752;  // std dev = 1,514, 135,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=134 */
%   | | | else return 0.06468466604398668;  // std dev = 49,805, 11.919,000 (wgt'ed) examples reached here.  /* #neg=8.292 #pos=3.627 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( wasbornin(A, E), wasbornin(B, E) )
%   | | then if ( diedin(A, E) )
%   | | | then return 0.23331531239394646;  // std dev = 1,126, 50,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.4421493952359919;  // std dev = 1,504, 143,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=141 */
%   | | else if ( ismarriedto(A, B) )
%   | | | then return 0.6164816805027793;  // std dev = 0,356, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.05842168410060463;  // std dev = 56,059, 14.757,000 (wgt'ed) examples reached here.  /* #neg=9.997 #pos=4.760 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( diedin(B, E), diedin(A, F) )
%   | | then if ( wasbornin(G, E), diedin(G, F) )
%   | | | then return 0.387739538872018;  // std dev = 4,258, 127,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=101 */
%   | | | else return 0.08545954962145684;  // std dev = 8,948, 394,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=159 */
%   | | else if ( isaffiliatedto(B, H), isaffiliatedto(A, H) )
%   | | | then return 0.5966375101549746;  // std dev = 2,908, 113,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=105 */
%   | | | else return 0.042511662666041575;  // std dev = 54,818, 14.333,000 (wgt'ed) examples reached here.  /* #neg=9.731 #pos=4.602 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actedin(A, E), actedin(B, F) )
%   | | then if ( edited(G, F), created(B, H) )
%   | | | then return 0.23163463698913667;  // std dev = 2,053, 19,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.6180422126692915;  // std dev = 2,298, 88,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=83 */
%   | | else if ( isaffiliatedto(B, I), isaffiliatedto(A, I) )
%   | | | then return 0.46465884987342376;  // std dev = 3,040, 123,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=114 */
%   | | | else return 0.03324300950070871;  // std dev = 55,402, 14.737,000 (wgt'ed) examples reached here.  /* #neg=9.978 #pos=4.759 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( actedin(A, C), actedin(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( ismarriedto(A, E), iscitizenof(B, F) )
%   | | then if ( created(E, G), hascurrency(F, H) )
%   | | | then return 0.2140523508776389;  // std dev = 2,462, 25,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return -0.12916728199124547;  // std dev = 6,328, 316,000 (wgt'ed) examples reached here.  /* #neg=263 #pos=53 */
%   | | else if ( diedin(A, I), wasbornin(B, I) )
%   | | | then return 0.3044908873439836;  // std dev = 2,179, 194,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=191 */
%   | | | else return 0.03160903718232923;  // std dev = 55,176, 14.432,000 (wgt'ed) examples reached here.  /* #neg=9.722 #pos=4.710 */


Results
   AUC ROC   = 0.599016
   AUC PR    = 0.503993
   CLL	      = -0.608834
   Precision = 0.969663 at threshold = 0.5
   Recall    = 0.0863
   F1        = 0.158494


Total learning time: 417.473 seconds
Total inference time: 59.136 seconds
AUC ROC: 0.599016


Refined model AUC ROC: 0.599016


Dataset: 30_cora_yago2s, Fold: 2, Type: transfer, Time: 08:34:09
{'Precision': [0.969663, 0.5], 'Parameter Learning results': {'Precision': [1.0, 0.5], 'CLL': -0.636215, 'Inference time': 59.779, 'Recall': 0.0057, 'AUC ROC': 0.50285, 'F1': 0.011335, 'AUC PR': 0.343793, 'Learning time': 273.903}, 'CLL': -0.608834, 'Inference time': 59.136, 'Recall': 0.0863, 'AUC ROC': 0.599016, 'F1': 0.158494, 'AUC PR': 0.503993, 'Learning time': 691.376, 'Mapping results': {'Generating mappings time': 1.6361172199249268, 'Possible mappings': 43904, 'Knowledge compiling time': 19.757524013519287, 'Total time': 35.928351640701294, 'Generating paths time': 2.457831859588623, 'Finding best mapping': 12.076870679855347}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(D, B) )
%   then if ( diedin(C, E), wasbornin(B, F) )
%   | then if ( diedin(A, F) )
%   | | then return 0.8303711573217337;  // std dev = 0,164, 36,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else if ( wasbornin(C, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.29564893509951123;  // std dev = 6,874, 192,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=84 */
%   | else if ( ismarriedto(C, D) )
%   | | then return 0.8581489350995121;  // std dev = 8,43e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( wasbornin(B, G) )
%   | | | then return 0.20202245288606918;  // std dev = 10,685, 506,000 (wgt'ed) examples reached here.  /* #neg=332 #pos=174 */
%   | | | else return 0.2723090461592019;  // std dev = 22,898, 2.161,000 (wgt'ed) examples reached here.  /* #neg=1.266 #pos=895 */
%   else if ( ismarriedto(A, H) )
%   | then return 0.13411914286116924;  // std dev = 0,447, 5.102,000 (wgt'ed) examples reached here.  /* #neg=3.694 #pos=1.408 */
%   | else if ( ismarriedto(B, I) )
%   | | then return 0.12023271598028068;  // std dev = 0,440, 1.862,000 (wgt'ed) examples reached here.  /* #neg=1.374 #pos=488 */
%   | | else return 0.22616774756276406;  // std dev = 0,482, 5.103,000 (wgt'ed) examples reached here.  /* #neg=3.225 #pos=1.878 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(C, B) )
%   then if ( ismarriedto(A, D) )
%   | then if ( actedin(D, E), actedin(B, F) )
%   | | then return 0.6729230972724654;  // std dev = 0,348, 49,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=42 */
%   | | else if ( diedin(D, G), wasbornin(B, G) )
%   | | | then return 0.7515395692849229;  // std dev = 1,111, 76,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | | else return 0.21721272067387679;  // std dev = 25,835, 2.808,000 (wgt'ed) examples reached here.  /* #neg=1.699 #pos=1.109 */
%   | else return 0.10495749410468638;  // std dev = 0,440, 1.862,000 (wgt'ed) examples reached here.  /* #neg=1.374 #pos=488 */
%   else if ( ismarriedto(A, H) )
%   | then return 0.11699606722864885;  // std dev = 0,447, 5.102,000 (wgt'ed) examples reached here.  /* #neg=3.694 #pos=1.408 */
%   | else if ( wasbornin(B, I), diedin(J, I) )
%   | | then if ( wasbornin(A, K), livesin(L, I) )
%   | | | then return 0.3649146059401501;  // std dev = 7,821, 246,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=132 */
%   | | | else return 0.1153770813933822;  // std dev = 13,243, 857,000 (wgt'ed) examples reached here.  /* #neg=611 #pos=246 */
%   | | else if ( wasbornin(A, M), hascapital(N, M) )
%   | | | then return 0.10991768773992598;  // std dev = 7,486, 277,000 (wgt'ed) examples reached here.  /* #neg=199 #pos=78 */
%   | | | else return 0.2102792803766081;  // std dev = 29,646, 3.723,000 (wgt'ed) examples reached here.  /* #neg=2.301 #pos=1.422 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, C) )
%   then return 0.730942682795786;  // std dev = 0,260, 123,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=114 */
%   else if ( ismarriedto(A, D), ismarriedto(E, B) )
%   | then if ( graduatedfrom(D, F) )
%   | | then if ( haswonprize(B, G), diedin(D, H) )
%   | | | then return 0.5401498360014089;  // std dev = 0,865, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.051311172163588804;  // std dev = 3,576, 97,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | else if ( wasbornin(B, I), wasbornin(A, J) )
%   | | | then return 0.3475262857060868;  // std dev = 7,025, 227,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=134 */
%   | | | else return 0.1925231753456867;  // std dev = 24,765, 2.589,000 (wgt'ed) examples reached here.  /* #neg=1.532 #pos=1.057 */
%   | else if ( wasbornin(B, K), wasbornin(A, L) )
%   | | then if ( livesin(M, K), wasbornin(M, L) )
%   | | | then return 0.6787943254531237;  // std dev = 3,630, 124,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=109 */
%   | | | else return 0.1578025186696254;  // std dev = 11,905, 627,000 (wgt'ed) examples reached here.  /* #neg=408 #pos=219 */
%   | | else if ( ismarriedto(A, N) )
%   | | | then return 0.08618359317072333;  // std dev = 30,202, 4.724,000 (wgt'ed) examples reached here.  /* #neg=3.489 #pos=1.235 */
%   | | | else return 0.1331769473554987;  // std dev = 37,623, 6.484,000 (wgt'ed) examples reached here.  /* #neg=4.372 #pos=2.112 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(A, D) )
%   then if ( wasbornin(C, E), isleaderof(F, E) )
%   | then if ( actedin(A, G), isaffiliatedto(F, H) )
%   | | then return 0.5119116905201486;  // std dev = 0,369, 17,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return 0.05414144730955181;  // std dev = 0,445, 197,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=61 */
%   | else if ( ismarriedto(D, C) )
%   | | then return 0.6093765425709677;  // std dev = 0,202, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( wasbornin(A, I), wasbornin(B, J) )
%   | | | then return 0.2679651355931785;  // std dev = 6,822, 217,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=125 */
%   | | | else return 0.15715757592016114;  // std dev = 24,220, 2.479,000 (wgt'ed) examples reached here.  /* #neg=1.476 #pos=1.003 */
%   else if ( ismarriedto(A, K) )
%   | then return 0.0855320712237368;  // std dev = 0,445, 5.102,000 (wgt'ed) examples reached here.  /* #neg=3.694 #pos=1.408 */
%   | else if ( ismarriedto(B, L) )
%   | | then return 0.06905019273893682;  // std dev = 0,438, 1.862,000 (wgt'ed) examples reached here.  /* #neg=1.374 #pos=488 */
%   | | else if ( iscitizenof(B, M), iscitizenof(A, M) )
%   | | | then return 0.7119828492622864;  // std dev = 1,682, 63,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | | else return 0.13394057382462352;  // std dev = 33,831, 5.040,000 (wgt'ed) examples reached here.  /* #neg=3.222 #pos=1.818 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( isaffiliatedto(A, C), graduatedfrom(B, D) )
%   then if ( isaffiliatedto(B, C) )
%   | then return 0.5523191113763526;  // std dev = 0,283, 56,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=51 */
%   | else if ( graduatedfrom(A, D) )
%   | | then return 0.7316561240571632;  // std dev = 0,065, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( isaffiliatedto(B, E) )
%   | | | then return -0.028476096970583765;  // std dev = 1,718, 20,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.3601570294698664;  // std dev = 3,040, 39,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=23 */
%   else if ( isaffiliatedto(B, F), ismarriedto(A, G) )
%   | then if ( isaffiliatedto(G, H) )
%   | | then return 0.5094775263977755;  // std dev = 0,398, 39,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=30 */
%   | | else return -0.1162437631805707;  // std dev = 0,296, 297,000 (wgt'ed) examples reached here.  /* #neg=265 #pos=32 */
%   | else if ( isaffiliatedto(A, I), isaffiliatedto(B, I) )
%   | | then return 0.5487412035571828;  // std dev = 0,252, 45,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | else if ( diedin(A, J), wasbornin(B, K) )
%   | | | then return 0.231006361542891;  // std dev = 13,126, 756,000 (wgt'ed) examples reached here.  /* #neg=379 #pos=377 */
%   | | | else return 0.08846791484803165;  // std dev = 54,136, 13.741,000 (wgt'ed) examples reached here.  /* #neg=9.307 #pos=4.434 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(C, B), ismarriedto(A, D) )
%   then if ( graduatedfrom(A, E) )
%   | then return -0.09725552865995338;  // std dev = 0,375, 112,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=23 */
%   | else if ( wasbornin(B, F), ismarriedto(B, C) )
%   | | then return 0.07947357244398942;  // std dev = 0,453, 729,000 (wgt'ed) examples reached here.  /* #neg=425 #pos=304 */
%   | | else if ( iscitizenof(A, G) )
%   | | | then return -0.17421251739129184;  // std dev = 1,985, 41,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | | | else return 0.13977855505340506;  // std dev = 22,258, 2.051,000 (wgt'ed) examples reached here.  /* #neg=1.157 #pos=894 */
%   else if ( diedin(B, H), diedin(A, I) )
%   | then if ( wasbornin(B, I) )
%   | | then return 0.6729062315122377;  // std dev = 0,098, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( wasbornin(J, H), diedin(J, I) )
%   | | | then return 0.4140932835295234;  // std dev = 3,573, 62,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=42 */
%   | | | else return 0.05426075481429445;  // std dev = 7,229, 253,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=77 */
%   | else if ( wasbornin(B, K), wasbornin(A, K) )
%   | | then return 0.619025643924079;  // std dev = 0,165, 123,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | | else return 0.06053598872063632;  // std dev = 0,453, 11.576,000 (wgt'ed) examples reached here.  /* #neg=8.095 #pos=3.481 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( iscitizenof(B, C), ismarriedto(A, D) )
%   then if ( iscitizenof(A, C) )
%   | then return 0.6617870898579071;  // std dev = 0,246, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( hascurrency(C, E), haswonprize(D, F) )
%   | | then if ( created(B, G) )
%   | | | then return 0.7123115716814451;  // std dev = 0,302, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.015491335086326661;  // std dev = 2,125, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return -0.1113623702351294;  // std dev = 0,330, 296,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=39 */
%   else if ( directed(A, H), actedin(B, I) )
%   | then return 0.6289690859874802;  // std dev = 0,259, 50,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | else if ( diedin(A, J), wasbornin(B, K) )
%   | | then if ( diedin(L, K), wasbornin(L, J) )
%   | | | then return 0.44457786834987556;  // std dev = 5,302, 254,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=218 */
%   | | | else return 0.007484995641733642;  // std dev = 10,173, 527,000 (wgt'ed) examples reached here.  /* #neg=358 #pos=169 */
%   | | else if ( iscitizenof(A, M), iscitizenof(B, M) )
%   | | | then return 0.5205994344985385;  // std dev = 1,774, 58,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | | | else return 0.056907943176038284;  // std dev = 53,804, 13.768,000 (wgt'ed) examples reached here.  /* #neg=9.325 #pos=4.443 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( diedin(A, C), wasbornin(B, C) )
%   then return 0.449241211216713;  // std dev = 0,200, 197,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=194 */
%   else if ( diedin(A, D), wasbornin(E, D) )
%   | then if ( diedin(E, F), wasbornin(B, F) )
%   | | then if ( isleaderof(G, F), happenedin(H, D) )
%   | | | then return -0.10457995431026325;  // std dev = 2,186, 31,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.29759068058965793;  // std dev = 3,107, 54,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=40 */
%   | | else if ( influences(B, I), isleaderof(J, D) )
%   | | | then return 0.37595835560889496;  // std dev = 1,625, 13,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return -0.009729301474947607;  // std dev = 21,533, 2.478,000 (wgt'ed) examples reached here.  /* #neg=1.802 #pos=676 */
%   | else if ( wasbornin(B, K), diedin(L, K) )
%   | | then if ( wasbornin(A, M), wasbornin(L, M) )
%   | | | then return 0.3753073994671574;  // std dev = 4,929, 185,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=150 */
%   | | | else return -0.012391711878513316;  // std dev = 21,000, 2.422,000 (wgt'ed) examples reached here.  /* #neg=1.787 #pos=635 */
%   | | else if ( wasbornin(A, N) )
%   | | | then return 0.027647017419907816;  // std dev = 18,619, 1.727,000 (wgt'ed) examples reached here.  /* #neg=1.207 #pos=520 */
%   | | | else return 0.0741204310566972;  // std dev = 41,711, 7.893,000 (wgt'ed) examples reached here.  /* #neg=5.126 #pos=2.767 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C) )
%   then if ( isaffiliatedto(A, C) )
%   | then return 0.3673978351747586;  // std dev = 0,268, 123,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=114 */
%   | else if ( ismarriedto(A, D), isaffiliatedto(D, C) )
%   | | then return 0.5532399419833346;  // std dev = 0,244, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.08875122463041016;  // std dev = 0,357, 643,000 (wgt'ed) examples reached here.  /* #neg=529 #pos=114 */
%   else if ( ismarriedto(B, E), influences(F, A) )
%   | then if ( actedin(E, G), edited(H, G) )
%   | | then return 0.43797829960192247;  // std dev = 0,876, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.17073913484692899;  // std dev = 0,340, 59,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=8 */
%   | else if ( isaffiliatedto(A, I) )
%   | | then if ( ismarriedto(B, J) )
%   | | | then return -0.1490029525699038;  // std dev = 4,957, 251,000 (wgt'ed) examples reached here.  /* #neg=219 #pos=32 */
%   | | | else return 0.007248701964035234;  // std dev = 11,964, 727,000 (wgt'ed) examples reached here.  /* #neg=516 #pos=211 */
%   | | else if ( ismarriedto(A, K), ismarriedto(L, B) )
%   | | | then return 0.0726520760408266;  // std dev = 24,743, 2.692,000 (wgt'ed) examples reached here.  /* #neg=1.526 #pos=1.166 */
%   | | | else return 0.04249937504429248;  // std dev = 46,518, 10.484,000 (wgt'ed) examples reached here.  /* #neg=7.148 #pos=3.336 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( haswonprize(B, C), haswonprize(A, C) )
%   then return 0.5368145210316223;  // std dev = 0,245, 40,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   else if ( diedin(A, D) )
%   | then if ( diedin(B, E) )
%   | | then if ( wasbornin(F, E), diedin(F, D) )
%   | | | then return 0.29924751685627354;  // std dev = 4,197, 126,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=100 */
%   | | | else return 0.06205330618444336;  // std dev = 8,721, 393,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=158 */
%   | | else if ( ismarriedto(B, G), diedin(G, D) )
%   | | | then return 0.5761546007035068;  // std dev = 0,491, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.014525909327484078;  // std dev = 20,453, 2.339,000 (wgt'ed) examples reached here.  /* #neg=1.660 #pos=679 */
%   | else if ( wasbornin(B, H), diedin(I, H) )
%   | | then if ( ismarriedto(A, I) )
%   | | | then return 0.5754963910795124;  // std dev = 1,651, 63,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return -0.015323983470203114;  // std dev = 21,038, 2.509,000 (wgt'ed) examples reached here.  /* #neg=1.809 #pos=700 */
%   | | else if ( iscitizenof(B, J), ismarriedto(A, K) )
%   | | | then return -0.07650188661956991;  // std dev = 4,679, 186,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=32 */
%   | | | else return 0.046049943643313156;  // std dev = 45,059, 9.329,000 (wgt'ed) examples reached here.  /* #neg=6.113 #pos=3.216 */


Results
   AUC ROC   = 0.653001
   AUC PR    = 0.540606
   CLL	      = -0.600162
   Precision = 0.955128 at threshold = 0.5
   Recall    = 0.0894
   F1        = 0.163497


Total learning time: 1944.087 seconds
Total inference time: 74.786 seconds
AUC ROC: 0.653001


Dataset: 30_cora_yago2s, Fold: 2, Type: scratch, Time: 09:07:51
{'Precision': [0.955128, 0.5], 'CLL': -0.600162, 'Inference time': 74.786, 'Recall': 0.0894, 'AUC ROC': 0.653001, 'F1': 0.163497, 'AUC PR': 0.540606, 'Learning time': 1944.087}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 21.25984239578247
   Generating paths time   = 2.192401170730591
   Generating mappings time   = 1.4492943286895752
   Possible mappings   = 43904
   Finding best mapping   = 12.021615266799927
   Total time   = 36.923160552978516


Best mapping found: ['venue(A,B) -> ismarriedto(A,B)', 'author(A,B) -> ismarriedto(B,A)', 'samebib(A,B) -> haschild(A,B)', 'title(A,B) -> created(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- created(A, C), created(B, C).;true;true
0;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
0;false,false;ismarriedto(H, A), ismarriedto(H, B).;false;false
0;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
0;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
0;false;ismarriedto(A, F), ismarriedto(B, F).;true;true
1;;haschild(A, B) :- created(A, C), created(B, C).;true;true
1;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
1;false,true;ismarriedto(A, G), ismarriedto(B, G).;false;false
1;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
1;false;ismarriedto(F, A), ismarriedto(F, B).;true;false
2;;haschild(A, B) :- created(A, C), created(B, C).;true;true
2;true;ismarriedto(A, D), ismarriedto(B, D).;false;false
2;false,true;ismarriedto(F, A), ismarriedto(F, B).;false;false
2;false,false;ismarriedto(G, A), ismarriedto(G, B).;false;false
2;false;ismarriedto(A, E), ismarriedto(B, E).;true;true
3;;haschild(A, B) :- created(A, C), created(B, C).;true;true
3;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
3;false,false;ismarriedto(H, A), ismarriedto(H, B).;false;false
3;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
3;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
3;false;ismarriedto(A, F), ismarriedto(B, F).;true;true
4;;haschild(A, B) :- created(A, C), created(B, C).;true;true
4;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
4;false,false;ismarriedto(H, A), ismarriedto(H, B).;false;false
4;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
4;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
4;false;ismarriedto(A, F), ismarriedto(B, F).;true;true
5;;haschild(A, B) :- created(A, C), created(B, C).;true;true
5;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
5;false,false;ismarriedto(A, G), ismarriedto(B, G).;false;false
5;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
5;false;ismarriedto(F, A), ismarriedto(F, B).;false;true
6;;haschild(A, B) :- created(A, C), created(B, C).;true;true
6;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
6;false,true;ismarriedto(A, G), ismarriedto(B, G).;false;false
6;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
6;false;ismarriedto(F, A), ismarriedto(F, B).;true;false
7;;haschild(A, B) :- created(A, C), created(B, C).;true;true
7;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
7;false,false;ismarriedto(H, A), ismarriedto(H, B).;false;false
7;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
7;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
7;false;ismarriedto(A, F), ismarriedto(B, F).;true;true
8;;haschild(A, B) :- created(A, C), created(B, C).;true;true
8;false,true;ismarriedto(G, A), ismarriedto(G, B).;false;false
8;false,false;ismarriedto(H, A), ismarriedto(H, B).;false;false
8;true,false;ismarriedto(E, A), ismarriedto(E, B).;false;false
8;true;ismarriedto(A, D), ismarriedto(B, D).;false;true
8;false;ismarriedto(A, F), ismarriedto(B, F).;true;true
9;;haschild(A, B) :- created(A, C), created(B, C).;true;true
9;true;ismarriedto(A, D), ismarriedto(B, D).;false;false
9;false,true;ismarriedto(F, A), ismarriedto(F, B).;false;false
9;false,false;ismarriedto(G, A), ismarriedto(G, B).;false;false
9;false;ismarriedto(A, E), ismarriedto(B, E).;true;true


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.8581489350995122;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(H, A), ismarriedto(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1905030544745906;  // std dev = 57,650, 14.978,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.978 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.7194734122109545;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.1656956515875466;  // std dev = 57,650, 14.978,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.978 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.5553664367462845;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | then if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.14139673284456433;  // std dev = 57,650, 14.978,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.978 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.41751358415830997;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(H, A), ismarriedto(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1185935079662432;  // std dev = 57,650, 14.978,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.978 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.32071184716014967;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(H, A), ismarriedto(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09798646859863526;  // std dev = 57,650, 14.978,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.978 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.25517224256948945;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.0799487678960826;  // std dev = 57,650, 14.978,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.978 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.20975771563253554;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | then if ( ismarriedto(A, G), ismarriedto(B, G) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.06456638404242868;  // std dev = 57,650, 14.978,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.978 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17709649774527736;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(H, A), ismarriedto(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.051718200172995006;  // std dev = 57,650, 14.978,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.978 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(E, A), ismarriedto(E, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, F), ismarriedto(B, F) )
%   | then if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(H, A), ismarriedto(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.041159929459211854;  // std dev = 57,650, 14.978,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.978 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.13400703000801117;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, E), ismarriedto(B, E) )
%   | then if ( ismarriedto(F, A), ismarriedto(F, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(G, A), ismarriedto(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.03259208834460439;  // std dev = 57,650, 14.978,000 (wgt'ed) examples reached here.  /* #neg=10.000 #pos=4.978 */


Results
   AUC ROC   = 0.50245
   AUC PR    = 0.342491
   CLL	      = -0.63644
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.0049
   F1        = 0.009752


Total learning time: 273.548 seconds
Total inference time: 87.81700000000001 seconds
AUC ROC: 0.50245


Structure after Parameter Learning
[['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'false,false': 'ismarriedto(H, A), ismarriedto(H, B)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.65, 10000, 4978], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false,true': 'ismarriedto(A, G), ismarriedto(B, G)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'true,false,false': [2.98e-08, 0, 9], 'false,false': [57.65, 10000, 4978], 'true,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [4.21e-08, 0, 13]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false,true': 'ismarriedto(F, A), ismarriedto(F, B)', 'false,false': 'ismarriedto(G, A), ismarriedto(G, B)', 'false': 'ismarriedto(A, E), ismarriedto(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 9], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false': [57.65, 10000, 4978], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'false,false': 'ismarriedto(H, A), ismarriedto(H, B)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.65, 10000, 4978], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [4.21e-08, 0, 13]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'false,false': 'ismarriedto(H, A), ismarriedto(H, B)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.65, 10000, 4978], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false,false': 'ismarriedto(A, G), ismarriedto(B, G)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'false,true': [2.11e-08, 0, 13], 'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.65, 10000, 4978], 'true,false,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false,true': 'ismarriedto(A, G), ismarriedto(B, G)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'false': 'ismarriedto(F, A), ismarriedto(F, B)'}, {'true,false,false': [0.0, 0, 9], 'false,false': [57.65, 10000, 4978], 'true,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'false,false': 'ismarriedto(H, A), ismarriedto(H, B)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.65, 10000, 4978], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'false,true': 'ismarriedto(G, A), ismarriedto(G, B)', 'false,false': 'ismarriedto(H, A), ismarriedto(H, B)', 'true,false': 'ismarriedto(E, A), ismarriedto(E, B)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false': 'ismarriedto(A, F), ismarriedto(B, F)'}, {'true,false,false': [0.0, 0, 9], 'true,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [57.65, 10000, 4978], 'false,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 13]}], ['haschild(A, B)', {'': 'created(A, C), created(B, C)', 'true': 'ismarriedto(A, D), ismarriedto(B, D)', 'false,true': 'ismarriedto(F, A), ismarriedto(F, B)', 'false,false': 'ismarriedto(G, A), ismarriedto(G, B)', 'false': 'ismarriedto(A, E), ismarriedto(B, E)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 9], 'false,false,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false': [57.65, 10000, 4978], 'false,true,true': [0.0, 0, 13]}]]
[{'': [-2.9605947323337506e-16, 0.22208864864878503], 'false,true': [-2.7328566760003855e-16, nan], 'false,false': [nan, 0.2218948587094481], 'false': [-2.7328566760003855e-16, 0.2218948587094481], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [0.0, 0.221968143822063], 'false,true': [1.3664283380001927e-16, nan], 'true,false': [nan, 9.868649107779169e-17], 'false': [1.3664283380001927e-16, 0.2218948587095751], 'true': [nan, 9.868649107779169e-17]}, {'': [-1.4802973661668753e-16, 0.2218509161307936], 'true': [nan, -4.9343245538895844e-17], 'false,true': [-2.7328566760003855e-16, nan], 'false,false': [nan, 0.22189485870943484], 'false': [-2.7328566760003855e-16, 0.22189485870943484]}, {'': [1.2335811384723962e-16, 0.22177985312455062], 'false,true': [1.3664283380001927e-16, nan], 'false,false': [nan, 0.22189485870945352], 'false': [1.3664283380001927e-16, 0.22189485870945352], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [-3.700743415417188e-17, 0.22174541526517752], 'false,true': [-5.124106267500723e-17, nan], 'false,false': [nan, 0.22189485870955852], 'false': [-5.124106267500723e-17, 0.22189485870955852], 'true': [nan, -3.700743415417188e-17], 'true,false': [nan, -3.700743415417188e-17]}, {'': [3.700743415417188e-17, 0.22172903676073644], 'true': [nan, 0.0], 'false,false': [nan, 0.22189485870946904], 'false': [3.416070845000482e-17, 0.22189485870946904], 'true,false': [nan, 0.0]}, {'': [-2.4671622769447922e-17, 0.2217206992793765], 'true': [nan, -6.1679056923619804e-18], 'false,true': [-3.416070845000482e-17, nan], 'false': [-3.416070845000482e-17, 0.22189485870952294], 'true,false': [nan, -6.1679056923619804e-18]}, {'': [6.1679056923619804e-18, 0.22171605449016846], 'false,true': [0.0, nan], 'false,false': [nan, 0.22189485870956027], 'false': [0.0, 0.22189485870956027], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [-3.0839528461809902e-18, 0.22171322233580795], 'false,true': [-1.2810265668751807e-17, nan], 'false,false': [nan, 0.2218948587094762], 'false': [-1.2810265668751807e-17, 0.2218948587094762], 'true': [nan, 0.0], 'true,false': [nan, 0.0]}, {'': [0.0, 0.2217113456526815], 'true': [nan, 0.0], 'false,true': [0.0, nan], 'false,false': [nan, 0.2218948587095357], 'false': [0.0, 0.2218948587095357]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '0;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '1;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '1;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '2;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '2;false;ismarriedto(A, E), ismarriedto(B, E).;true;true', '3;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '3;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '4;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '4;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '5;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '5;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '6;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '6;false;ismarriedto(F, A), ismarriedto(F, B).;true;true', '7;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '7;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '8;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '8;false;ismarriedto(A, F), ismarriedto(B, F).;true;true', '9;;haschild(A, B) :- created(A, C), created(B, C).;true;true', '9;false;ismarriedto(A, E), ismarriedto(B, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( iscitizenof(A, E), iscitizenof(B, F) )
%   | | then if ( ismarriedto(B, G), hascapital(E, H) )
%   | | | then return 0.44148226843284566;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.7555848325354103;  // std dev = 2,679, 78,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=70 */
%   | | else if ( wasbornin(A, I), wasbornin(B, J) )
%   | | | then return 0.3220232806492458;  // std dev = 15,411, 955,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=443 */
%   | | | else return 0.1781087427504079;  // std dev = 55,060, 13.933,000 (wgt'ed) examples reached here.  /* #neg=9.475 #pos=4.458 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( ismarriedto(E, B), ismarriedto(A, F) )
%   | | then if ( haswonprize(B, G), haswonprize(A, G) )
%   | | | then return 0.8278595962023858;  // std dev = 0,050, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.25542674864880305;  // std dev = 26,308, 2.843,000 (wgt'ed) examples reached here.  /* #neg=1.643 #pos=1.200 */
%   | | else if ( diedin(A, H), diedin(B, I) )
%   | | | then return 0.28165644095682735;  // std dev = 9,480, 365,000 (wgt'ed) examples reached here.  /* #neg=200 #pos=165 */
%   | | | else return 0.13872554797568143;  // std dev = 49,810, 11.744,000 (wgt'ed) examples reached here.  /* #neg=8.157 #pos=3.587 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( ismarriedto(B, E), ismarriedto(A, F) )
%   | | then if ( graduatedfrom(A, G) )
%   | | | then return 0.023528289981401534;  // std dev = 4,943, 139,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=32 */
%   | | | else return 0.23112488568882322;  // std dev = 25,831, 2.730,000 (wgt'ed) examples reached here.  /* #neg=1.536 #pos=1.194 */
%   | | else if ( ismarriedto(H, B) )
%   | | | then return 0.05803889604702626;  // std dev = 19,163, 1.986,000 (wgt'ed) examples reached here.  /* #neg=1.499 #pos=487 */
%   | | | else return 0.13475236596911888;  // std dev = 46,884, 10.123,000 (wgt'ed) examples reached here.  /* #neg=6.858 #pos=3.265 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( ismarriedto(A, E), ismarriedto(B, F) )
%   | | then if ( actedin(A, G), actedin(B, H) )
%   | | | then return 0.6582695075399474;  // std dev = 1,648, 36,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | | else return 0.17643786166444458;  // std dev = 26,156, 2.833,000 (wgt'ed) examples reached here.  /* #neg=1.640 #pos=1.193 */
%   | | else if ( iscitizenof(B, I), iscitizenof(A, J) )
%   | | | then return 0.5436333197211558;  // std dev = 3,128, 83,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=71 */
%   | | | else return 0.09976244768547932;  // std dev = 50,451, 12.026,000 (wgt'ed) examples reached here.  /* #neg=8.345 #pos=3.681 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( wasbornin(A, E), wasbornin(B, F) )
%   | | then if ( diedin(A, F) )
%   | | | then return 0.6747934062145925;  // std dev = 1,947, 93,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=89 */
%   | | | else return 0.1548248785675765;  // std dev = 14,461, 879,000 (wgt'ed) examples reached here.  /* #neg=509 #pos=370 */
%   | | else if ( ismarriedto(A, G), ismarriedto(B, H) )
%   | | | then return 0.1372812178266061;  // std dev = 25,167, 2.640,000 (wgt'ed) examples reached here.  /* #neg=1.545 #pos=1.095 */
%   | | | else return 0.07857702296889174;  // std dev = 48,740, 11.366,000 (wgt'ed) examples reached here.  /* #neg=7.942 #pos=3.424 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( wasbornin(B, E), wasbornin(A, F) )
%   | | then if ( participatedin(F, G), participatedin(E, G) )
%   | | | then return 0.6229029823198152;  // std dev = 1,057, 31,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.1468115494853988;  // std dev = 14,773, 941,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=429 */
%   | | else if ( wasbornin(A, H) )
%   | | | then return 0.025800668848075;  // std dev = 22,074, 2.480,000 (wgt'ed) examples reached here.  /* #neg=1.796 #pos=684 */
%   | | | else return 0.08321926350170003;  // std dev = 50,184, 11.526,000 (wgt'ed) examples reached here.  /* #neg=7.691 #pos=3.835 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(D, A), ismarriedto(D, B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( diedin(A, E), diedin(B, F) )
%   | | then if ( wasbornin(B, E) )
%   | | | then return 0.5750268802505656;  // std dev = 1,383, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.11901125855545462;  // std dev = 10,451, 458,000 (wgt'ed) examples reached here.  /* #neg=266 #pos=192 */
%   | | else if ( ismarriedto(A, G), iscitizenof(B, H) )
%   | | | then return -0.07471827935944945;  // std dev = 6,917, 335,000 (wgt'ed) examples reached here.  /* #neg=266 #pos=69 */
%   | | | else return 0.06283425266975767;  // std dev = 55,258, 14.124,000 (wgt'ed) examples reached here.  /* #neg=9.467 #pos=4.657 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( ismarriedto(A, E), ismarriedto(B, F) )
%   | | then if ( isaffiliatedto(E, G) )
%   | | | then return -0.09375757973559817;  // std dev = 4,774, 129,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=30 */
%   | | | else return 0.09298559094272682;  // std dev = 25,591, 2.740,000 (wgt'ed) examples reached here.  /* #neg=1.544 #pos=1.196 */
%   | | else if ( ismarriedto(A, H) )
%   | | | then return 0.013336787733369106;  // std dev = 31,859, 5.121,000 (wgt'ed) examples reached here.  /* #neg=3.680 #pos=1.441 */
%   | | | else return 0.0645902339725869;  // std dev = 38,949, 6.988,000 (wgt'ed) examples reached here.  /* #neg=4.677 #pos=2.311 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( wasbornin(A, E), wasbornin(B, E) )
%   | | then if ( diedin(A, E) )
%   | | | then return 0.40695229229380314;  // std dev = 0,681, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.6118046582509146;  // std dev = 1,298, 124,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=123 */
%   | | else if ( wasbornin(B, F), diedin(G, F) )
%   | | | then return -0.010475861489516756;  // std dev = 24,769, 3.074,000 (wgt'ed) examples reached here.  /* #neg=2.153 #pos=921 */
%   | | | else return 0.046255246011239225;  // std dev = 50,481, 11.735,000 (wgt'ed) examples reached here.  /* #neg=7.846 #pos=3.889 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( created(A, C), created(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( ismarriedto(A, D), ismarriedto(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( wasbornin(B, E), diedin(A, E) )
%   | | then if ( wasbornin(A, E) )
%   | | | then return 0.3171073125149765;  // std dev = 0,606, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.5630113414608306;  // std dev = 2,505, 132,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | | else if ( wasbornin(B, F), diedin(G, F) )
%   | | | then return -0.01458319477987137;  // std dev = 24,335, 3.061,000 (wgt'ed) examples reached here.  /* #neg=2.150 #pos=911 */
%   | | | else return 0.036999493742367634;  // std dev = 50,487, 11.740,000 (wgt'ed) examples reached here.  /* #neg=7.846 #pos=3.894 */


Results
   AUC ROC   = 0.613292
   AUC PR    = 0.491018
   CLL	      = -0.615327
   Precision = 0.937288 at threshold = 0.5
   Recall    = 0.0553
   F1        = 0.104438


Total learning time: 1101.163 seconds
Total inference time: 89.07900000000001 seconds
AUC ROC: 0.613292


Refined model AUC ROC: 0.613292


Dataset: 30_cora_yago2s, Fold: 3, Type: transfer, Time: 09:34:42
{'Precision': [0.937288, 0.5], 'Parameter Learning results': {'Precision': [1.0, 0.5], 'CLL': -0.63644, 'Inference time': 87.81700000000001, 'Recall': 0.0049, 'AUC ROC': 0.50245, 'F1': 0.009752, 'AUC PR': 0.342491, 'Learning time': 273.548}, 'CLL': -0.615327, 'Inference time': 89.07900000000001, 'Recall': 0.0553, 'AUC ROC': 0.613292, 'F1': 0.104438, 'AUC PR': 0.491018, 'Learning time': 1374.711, 'Mapping results': {'Generating mappings time': 1.4492943286895752, 'Possible mappings': 43904, 'Knowledge compiling time': 21.25984239578247, 'Total time': 36.923160552978516, 'Generating paths time': 2.192401170730591, 'Finding best mapping': 12.021615266799927}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( haswonprize(B, E), haswonprize(A, E) )
%   | then return 0.8581489350995118;  // std dev = 1,46e-07, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( wasbornin(B, F), wasbornin(A, G) )
%   | | then if ( livesin(H, F), wasbornin(H, G) )
%   | | | then return 0.8348931211460235;  // std dev = 0,988, 43,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.31012633622945657;  // std dev = 6,621, 177,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=80 */
%   | | else if ( graduatedfrom(A, I) )
%   | | | then return 0.058148935099511835;  // std dev = 4,382, 120,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=24 */
%   | | | else return 0.28246359540939997;  // std dev = 24,796, 2.517,000 (wgt'ed) examples reached here.  /* #neg=1.449 #pos=1.068 */
%   else if ( ismarriedto(A, J) )
%   | then return 0.13996002018928078;  // std dev = 0,450, 5.124,000 (wgt'ed) examples reached here.  /* #neg=3.680 #pos=1.444 */
%   | else if ( isaffiliatedto(B, K), isaffiliatedto(A, K) )
%   | | then return 0.8146706742299475;  // std dev = 0,204, 69,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=66 */
%   | | else if ( ismarriedto(L, B) )
%   | | | then return 0.10029685809849413;  // std dev = 19,033, 1.974,000 (wgt'ed) examples reached here.  /* #neg=1.496 #pos=478 */
%   | | | else return 0.21612873307930514;  // std dev = 33,729, 4.950,000 (wgt'ed) examples reached here.  /* #neg=3.178 #pos=1.772 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( ismarriedto(A, D) )
%   | then return 0.8201754171282297;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( wasbornin(D, E), actedin(D, F) )
%   | | then return 0.05831183784911293;  // std dev = 0,420, 67,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=16 */
%   | | else if ( wasbornin(A, G), wasbornin(B, G) )
%   | | | then return 0.7146126988532902;  // std dev = 1,023, 50,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.24245525645527288;  // std dev = 25,840, 2.753,000 (wgt'ed) examples reached here.  /* #neg=1.591 #pos=1.162 */
%   else if ( diedin(A, H), wasbornin(B, H) )
%   | then return 0.8002294323781448;  // std dev = 0,178, 122,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else if ( ismarriedto(I, B) )
%   | | then if ( diedin(I, J), happenedin(K, J) )
%   | | | then return 1.6263383582907804E-4;  // std dev = 5,498, 232,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=36 */
%   | | | else return 0.097338297532042;  // std dev = 18,105, 1.742,000 (wgt'ed) examples reached here.  /* #neg=1.302 #pos=440 */
%   | | else if ( ismarriedto(A, L) )
%   | | | then return 0.11551430575782501;  // std dev = 31,819, 5.075,000 (wgt'ed) examples reached here.  /* #neg=3.678 #pos=1.397 */
%   | | | else return 0.1863057173718806;  // std dev = 33,612, 4.946,000 (wgt'ed) examples reached here.  /* #neg=3.177 #pos=1.769 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( graduatedfrom(A, E) )
%   | then return 0.0463432113490068;  // std dev = 0,418, 140,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=33 */
%   | else if ( wasbornin(A, F), wasbornin(B, F) )
%   | | then return 0.5567359657156224;  // std dev = 0,150, 49,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else if ( wasbornin(B, G), diedin(D, G) )
%   | | | then return 0.7527160947735911;  // std dev = 1,000, 48,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.20083525599978466;  // std dev = 25,300, 2.646,000 (wgt'ed) examples reached here.  /* #neg=1.534 #pos=1.112 */
%   else if ( ismarriedto(H, B) )
%   | then return 0.07761914479208556;  // std dev = 0,428, 1.986,000 (wgt'ed) examples reached here.  /* #neg=1.499 #pos=487 */
%   | else if ( ismarriedto(A, I) )
%   | | then if ( diedin(B, J), diedin(A, K) )
%   | | | then return 0.2627614762944845;  // std dev = 6,272, 168,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=76 */
%   | | | else return 0.09941524219055076;  // std dev = 31,401, 4.956,000 (wgt'ed) examples reached here.  /* #neg=3.588 #pos=1.368 */
%   | | else if ( actedin(B, L), actedin(A, M) )
%   | | | then return 0.5685500156084565;  // std dev = 2,311, 31,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   | | | else return 0.16187058324531856;  // std dev = 33,692, 4.976,000 (wgt'ed) examples reached here.  /* #neg=3.171 #pos=1.805 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( livesin(B, C), ismarriedto(A, D) )
%   then if ( isaffiliatedto(D, E) )
%   | then return 0.3659816800047758;  // std dev = 0,483, 21,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | else return -0.029173818695419514;  // std dev = 0,377, 258,000 (wgt'ed) examples reached here.  /* #neg=211 #pos=47 */
%   else if ( wasbornin(A, F), wasbornin(B, G) )
%   | then if ( diedin(A, G) )
%   | | then return 0.5754627712392686;  // std dev = 0,215, 92,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=88 */
%   | | else if ( diedin(A, H), wasbornin(I, H) )
%   | | | then return 0.11745363378040669;  // std dev = 7,529, 264,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=90 */
%   | | | else return 0.22509005099183363;  // std dev = 11,698, 586,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=269 */
%   | else if ( ismarriedto(B, J), ismarriedto(A, K) )
%   | | then if ( diedin(K, L), diedin(J, L) )
%   | | | then return 0.6554921069949676;  // std dev = 0,982, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.16525388911144703;  // std dev = 24,787, 2.566,000 (wgt'ed) examples reached here.  /* #neg=1.491 #pos=1.075 */
%   | | else if ( wasbornin(B, M), diedin(N, M) )
%   | | | then return 0.05437640594998865;  // std dev = 18,104, 1.769,000 (wgt'ed) examples reached here.  /* #neg=1.305 #pos=464 */
%   | | | else return 0.10760918183414889;  // std dev = 44,718, 9.426,000 (wgt'ed) examples reached here.  /* #neg=6.488 #pos=2.938 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( diedin(A, C), diedin(B, C) )
%   then if ( wasbornin(B, C), wasbornin(A, D) )
%   | then return 0.47624928107760406;  // std dev = 0,101, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.6904596575147788;  // std dev = 0,178, 69,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   else if ( isaffiliatedto(B, E), isaffiliatedto(A, E) )
%   | then if ( ismarriedto(A, F) )
%   | | then return 0.7344615884759942;  // std dev = 0,169, 37,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else if ( wasbornin(B, G), ismarriedto(B, H) )
%   | | | then return 0.23387094174092674;  // std dev = 1,298, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.6253300101074629;  // std dev = 0,233, 61,000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else if ( wasbornin(B, I), wasbornin(A, I) )
%   | | then if ( ismarriedto(A, J), ismarriedto(B, K) )
%   | | | then return 0.3509570048993726;  // std dev = 1,106, 47,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.7111470429659505;  // std dev = 0,955, 98,000 (wgt'ed) examples reached here.  /* #pos=98 */
%   | | else if ( ismarriedto(B, L), ismarriedto(A, M) )
%   | | | then return 0.12651901012242056;  // std dev = 25,723, 2.801,000 (wgt'ed) examples reached here.  /* #neg=1.641 #pos=1.160 */
%   | | | else return 0.07468814264001075;  // std dev = 49,349, 11.864,000 (wgt'ed) examples reached here.  /* #neg=8.352 #pos=3.512 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( diedin(A, C), wasbornin(B, C) )
%   then if ( wasbornin(A, D) )
%   | then return 0.36706887633008534;  // std dev = 0,213, 93,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=89 */
%   | else return 0.6028713862519577;  // std dev = 0,085, 84,000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( isaffiliatedto(B, E), isaffiliatedto(A, F) )
%   | then if ( isaffiliatedto(B, F) )
%   | | then return 0.49438081796658206;  // std dev = 0,192, 103,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=99 */
%   | | else if ( haswonprize(A, G) )
%   | | | then return 0.7485735897422379;  // std dev = 0,037, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.20352563694755896;  // std dev = 3,868, 64,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=29 */
%   | else if ( diedin(A, H), wasbornin(I, H) )
%   | | then if ( diedin(B, J), wasbornin(K, J) )
%   | | | then return 0.12420653148006497;  // std dev = 9,287, 404,000 (wgt'ed) examples reached here.  /* #neg=240 #pos=164 */
%   | | | else return 0.006607579207375015;  // std dev = 20,415, 2.252,000 (wgt'ed) examples reached here.  /* #neg=1.680 #pos=572 */
%   | | else if ( wasbornin(B, L), diedin(M, L) )
%   | | | then return 0.037377181234750305;  // std dev = 21,649, 2.432,000 (wgt'ed) examples reached here.  /* #neg=1.715 #pos=717 */
%   | | | else return 0.09047876330435593;  // std dev = 45,845, 9.564,000 (wgt'ed) examples reached here.  /* #neg=6.322 #pos=3.242 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( diedin(A, C), diedin(B, D) )
%   then if ( wasbornin(B, C) )
%   | then return 0.33315373006158067;  // std dev = 0,155, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( wasbornin(E, C), diedin(E, D) )
%   | | then return 0.45791991541787935;  // std dev = 0,356, 87,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=72 */
%   | | else if ( isleaderof(F, C), wasbornin(G, D) )
%   | | | then return -0.12130359142319666;  // std dev = 3,770, 120,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=20 */
%   | | | else return 0.10058194199576306;  // std dev = 7,424, 251,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=100 */
%   else if ( ismarriedto(A, H), iscitizenof(B, I) )
%   | then if ( graduatedfrom(A, J), livesin(K, I) )
%   | | then return 0.4086563010444649;  // std dev = 0,451, 31,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else return -0.08046778090364748;  // std dev = 0,357, 306,000 (wgt'ed) examples reached here.  /* #neg=256 #pos=50 */
%   | else if ( wasbornin(A, L), wasbornin(B, L) )
%   | | then return 0.4449119345532063;  // std dev = 0,189, 140,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=139 */
%   | | else if ( diedin(B, M), wasbornin(N, M) )
%   | | | then return 0.023968489377517926;  // std dev = 17,783, 1.585,000 (wgt'ed) examples reached here.  /* #neg=1.122 #pos=463 */
%   | | | else return 0.06319061130806056;  // std dev = 51,308, 12.419,000 (wgt'ed) examples reached here.  /* #neg=8.344 #pos=4.075 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( livesin(B, C), ismarriedto(A, D) )
%   then if ( livesin(D, C) )
%   | then return 0.6859811577443414;  // std dev = 0,104, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( holdspoliticalposition(B, E), graduatedfrom(B, F) )
%   | | then return 0.6913922761833123;  // std dev = 0,032, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08901710839079242;  // std dev = 0,339, 263,000 (wgt'ed) examples reached here.  /* #neg=220 #pos=43 */
%   else if ( isaffiliatedto(A, G), ismarriedto(B, H) )
%   | then if ( graduatedfrom(H, I) )
%   | | then return 0.2573239702887727;  // std dev = 0,443, 25,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | else return -0.13121512326111495;  // std dev = 0,312, 262,000 (wgt'ed) examples reached here.  /* #neg=224 #pos=38 */
%   | else if ( actedin(B, J), actedin(A, K) )
%   | | then if ( wasbornin(A, L), isleaderof(M, L) )
%   | | | then return 0.35714102671955994;  // std dev = 2,424, 32,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=24 */
%   | | | else return 0.5941791453261839;  // std dev = 2,776, 86,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=78 */
%   | | else if ( isaffiliatedto(B, N), ismarriedto(A, P) )
%   | | | then return -0.08164591096781737;  // std dev = 5,736, 261,000 (wgt'ed) examples reached here.  /* #neg=208 #pos=53 */
%   | | | else return 0.05374471606616617;  // std dev = 54,322, 14.055,000 (wgt'ed) examples reached here.  /* #neg=9.323 #pos=4.732 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( wasbornin(A, C) )
%   then if ( wasbornin(B, C) )
%   | then return 0.325143198871145;  // std dev = 0,171, 169,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   | else if ( haswonprize(B, D) )
%   | | then if ( haswonprize(A, D) )
%   | | | then return 0.45362562866206074;  // std dev = 0,776, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.09515296159102313;  // std dev = 6,190, 174,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=70 */
%   | | else if ( influences(A, E), iscitizenof(B, F) )
%   | | | then return 0.6727134300797996;  // std dev = 0,245, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.004509883057590847;  // std dev = 24,263, 3.094,000 (wgt'ed) examples reached here.  /* #neg=2.203 #pos=891 */
%   else if ( wasbornin(B, G), diedin(H, G) )
%   | then return -0.002627944864874502;  // std dev = 0,423, 2.320,000 (wgt'ed) examples reached here.  /* #neg=1.668 #pos=652 */
%   | else if ( iscitizenof(B, I), iscitizenof(A, I) )
%   | | then return 0.5995657145667932;  // std dev = 0,239, 38,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | else if ( ismarriedto(A, J), ismarriedto(B, K) )
%   | | | then return 0.09851256327671977;  // std dev = 20,076, 1.683,000 (wgt'ed) examples reached here.  /* #neg=917 #pos=766 */
%   | | | else return 0.04685896568086846;  // std dev = 39,867, 7.502,000 (wgt'ed) examples reached here.  /* #neg=5.104 #pos=2.398 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( wasbornin(B, C), wasbornin(A, D) )
%   then if ( livesin(A, C) )
%   | then return 0.4555291403910617;  // std dev = 0,169, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.06805353219692778;  // std dev = 0,417, 955,000 (wgt'ed) examples reached here.  /* #neg=513 #pos=442 */
%   else if ( wasbornin(A, E) )
%   | then if ( isaffiliatedto(A, F), isaffiliatedto(B, F) )
%   | | then return 0.34790418602191625;  // std dev = 0,214, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( created(B, G), graduatedfrom(A, H) )
%   | | | then return 0.3287834067270745;  // std dev = 2,007, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.01238913710133544;  // std dev = 21,544, 2.449,000 (wgt'ed) examples reached here.  /* #neg=1.788 #pos=661 */
%   | else if ( wasbornin(B, I), diedin(J, I) )
%   | | then if ( ismarriedto(A, J) )
%   | | | then return 0.5317296176630095;  // std dev = 1,665, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return -0.0165296042751607;  // std dev = 19,884, 2.259,000 (wgt'ed) examples reached here.  /* #neg=1.667 #pos=592 */
%   | | else if ( actedin(B, K) )
%   | | | then return -0.04589066095507714;  // std dev = 7,159, 301,000 (wgt'ed) examples reached here.  /* #neg=220 #pos=81 */
%   | | | else return 0.04939564605367626;  // std dev = 44,144, 8.922,000 (wgt'ed) examples reached here.  /* #neg=5.803 #pos=3.119 */


Results
   AUC ROC   = 0.652933
   AUC PR    = 0.540434
   CLL	      = -0.598394
   Precision = 0.956767 at threshold = 0.5
   Recall    = 0.1018
   F1        = 0.18402


Total learning time: 1123.241 seconds
Total inference time: 63.996 seconds
AUC ROC: 0.652933


Dataset: 30_cora_yago2s, Fold: 3, Type: scratch, Time: 09:54:32
{'Precision': [0.956767, 0.5], 'CLL': -0.598394, 'Inference time': 63.996, 'Recall': 0.1018, 'AUC ROC': 0.652933, 'F1': 0.18402, 'AUC PR': 0.540434, 'Learning time': 1123.241}


