Starting experiment #1 for 15_cora_yago2s

Start learning from source dataset

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6981489350995119;  // std dev = 0,367, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.4490580260086027;  // std dev = 3,994, 66,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=39 */
%   | | | else return 0.3007718859191833;  // std dev = 3,879, 61,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=27 */
%   | else return 0.4070749494193162;  // std dev = 0,498, 5.028,000 (wgt'ed) examples reached here.  /* #neg=2.268 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.22178529873587596;  // std dev = 0,481, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.1123862232351056;  // std dev = 0,435, 59,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.15444523139580865;  // std dev = 3,355, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | else return 0.15792522145297558;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5906067787080471;  // std dev = 0,367, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.374829396197973;  // std dev = 4,076, 68,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=39 */
%   | | | else return 0.21004705460248566;  // std dev = 3,995, 66,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=27 */
%   | else return 0.3508583705747093;  // std dev = 0,497, 5.021,000 (wgt'ed) examples reached here.  /* #neg=2.261 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordvenue(A, J) )
%   | | then return -0.15858300334514966;  // std dev = 0,014, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return 0.22895152751901957;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.12168786825979389;  // std dev = 3,291, 54,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | else return 0.1359022808379367;  // std dev = 0,457, 507,000 (wgt'ed) examples reached here.  /* #neg=356 #pos=151 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2887156960053768;  // std dev = 0,497, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4606758066834189;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.19473671648637825;  // std dev = 0,050, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordauthor(E, H), haswordvenue(A, H) )
%   | | | then return -0.13632005729530852;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.10497981625516771;  // std dev = 3,291, 54,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.10418578632637322;  // std dev = 0,450, 60,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | | else return 0.11826956470219532;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22938278209421165;  // std dev = 0,497, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return -0.12197247100846548;  // std dev = 0,005, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.1746345406037055;  // std dev = 1,594, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.09608817874092428;  // std dev = 3,231, 51,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
%   | else return 0.09739305083440712;  // std dev = 0,456, 509,000 (wgt'ed) examples reached here.  /* #neg=358 #pos=151 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17756270106874614;  // std dev = 0,497, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return -0.10950079252762217;  // std dev = 0,005, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.1366708977753064;  // std dev = 1,431, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07387702868143885;  // std dev = 3,289, 54,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | else return 0.0824294482484996;  // std dev = 0,457, 507,000 (wgt'ed) examples reached here.  /* #neg=356 #pos=151 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1352473333504275;  // std dev = 0,497, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return -0.09927131527703263;  // std dev = 0,004, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.06915783677312358;  // std dev = 0,448, 64,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | else return 0.06817267869061444;  // std dev = 0,457, 507,000 (wgt'ed) examples reached here.  /* #neg=356 #pos=151 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then if ( author(F, E), venue(F, A) )
%   | | | then return 0.4207575806474142;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.22075758064741438;  // std dev = 1,789, 20,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.11793955995977673;  // std dev = 4,177, 73,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=41 */
%   | | | else return -0.011023164908658312;  // std dev = 3,884, 61,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
%   | else return 0.10246293651911469;  // std dev = 0,497, 5.021,000 (wgt'ed) examples reached here.  /* #neg=2.261 #pos=2.760 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordvenue(B, J) )
%   | | then return -0.09074142173436738;  // std dev = 0,004, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.11987293446285806;  // std dev = 1,594, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.053797062289704115;  // std dev = 3,226, 51,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
%   | else return 0.05484033708496034;  // std dev = 0,456, 509,000 (wgt'ed) examples reached here.  /* #neg=358 #pos=151 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07676664146992755;  // std dev = 0,497, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.39613124798124183;  // std dev = 1,166, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.23189061796334962;  // std dev = 0,166, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.17787316802704048;  // std dev = 0,116, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04437613731672001;  // std dev = 3,213, 53,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.023564782612360106;  // std dev = 1,295, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.026513819830186188;  // std dev = 3,210, 53,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=14 */
%   | | else return 0.047228033150276225;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.1816090917456958;  // std dev = 0,363, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.07772313575742636;  // std dev = 4,029, 68,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=39 */
%   | | | else return -0.028195857010727875;  // std dev = 4,028, 66,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=27 */
%   | else return 0.05785382777648832;  // std dev = 0,497, 5.021,000 (wgt'ed) examples reached here.  /* #neg=2.261 #pos=2.760 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordvenue(B, J) )
%   | | then return -0.08108304139998017;  // std dev = 0,022, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.0428052607011012;  // std dev = 0,449, 62,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.018613650494825933;  // std dev = 1,294, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.021677062228872005;  // std dev = 3,210, 53,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=14 */
%   | | else return 0.03820918522427382;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043240071445710286;  // std dev = 0,497, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return -0.0752491567902062;  // std dev = 0,021, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.07416757649162467;  // std dev = 1,411, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0292365788689067;  // std dev = 3,269, 54,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.014760020421149858;  // std dev = 0,443, 60,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | | else return 0.03076215163389829;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */


Predicates from source: ['samevenue(venue,venue).', 'author(class,author).', 'venue(class,venue).', 'samebib(class,class).', 'haswordvenue(venue,word).', 'haswordauthor(author,word).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 23.492096662521362
   Generating paths time   = 2.8556084632873535
   Generating mappings time   = 104.86703753471375
   Possible mappings   = 441488
   Finding best mapping   = 180.43679451942444
   Total time   = 311.6515462398529


Best mapping found: ['samevenue(A,B) -> ismarriedto(B,A)', 'samebib(A,B) -> influences(A,B)', 'author(A,B) -> created(A,B)', 'haswordauthor(A,B) -> actedin(B,A)', 'venue(A,B) -> haschild(A,B)', 'haswordvenue(A,B) -> haschild(A,B)'] 

Transferred target predicate: ismarriedto 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;ismarriedto(B, A) :- haschild(A, C), haschild(B, C).;true;true
0;false,true;created(J, I), haschild(J, A).;false;false
0;false;haschild(B, H), actedin(H, I).;true;true
0;true,true;actedin(C, F).;false;true
0;false,false,true;created(M, L), haschild(M, A).;false;false
0;true,true,false;created(G, E), haschild(G, B).;false;false
0;true;haschild(A, D), actedin(D, E).;true;false
0;false,false;haschild(A, K), actedin(K, L).;true;false
1;;ismarriedto(B, A) :- haschild(A, C), haschild(B, C).;true;true
1;false,true;actedin(J, I), haschild(A, J).;false;true
1;false;haschild(B, H), actedin(H, I).;true;false
1;true,true;actedin(C, F).;false;true
1;false,true,false;created(K, I), haschild(K, A).;false;false
1;true,true,false;created(G, E), haschild(G, A).;false;false
1;true;haschild(B, D), actedin(D, E).;true;false
2;;ismarriedto(B, A) :- haschild(A, C), haschild(B, C).;false;true
2;false,true,true;influences(F, G), haschild(G, B).;false;false
2;false,true;created(F, E), haschild(F, A).;true;true
2;false;haschild(B, D), actedin(D, E).;true;true
2;false,true,false;actedin(H, E), haschild(A, H).;false;false
2;false,false;haschild(A, I), actedin(I, J).;false;false
3;;ismarriedto(B, A) :- haschild(A, C), haschild(B, C).;false;true
3;false,true,false;created(G, E), haschild(G, B).;false;false
3;false,true;actedin(F, E), haschild(B, F).;false;true
3;false;haschild(A, D), actedin(D, E).;true;false
4;;ismarriedto(B, A) :- haschild(A, C), haschild(B, C).;false;true
4;false,true,false;created(G, E), haschild(G, A).;false;false
4;false,true;actedin(F, E), haschild(A, F).;false;true
4;false;haschild(B, D), actedin(D, E).;true;false
5;;ismarriedto(B, A) :- haschild(A, C), haschild(B, C).;false;true
5;false,true;actedin(F, E), haschild(A, F).;false;false
5;false;haschild(B, D), actedin(D, E).;true;false
6;;ismarriedto(B, A) :- haschild(A, C), haschild(B, C).;true;true
6;false,true;actedin(J, I), haschild(B, J).;false;true
6;false;haschild(A, H), actedin(H, I).;true;false
6;true,true;haschild(A, D).;true;true
6;true,true,true;created(F, E), haschild(F, A).;false;false
6;false,true,false;created(K, I), haschild(K, B).;false;false
6;true,true,false;created(G, E), haschild(G, B).;false;false
6;true;haschild(B, D), actedin(D, E).;true;false
7;;ismarriedto(B, A) :- haschild(A, C), haschild(B, C).;false;true
7;false,true,true;influences(F, G), haschild(G, A).;false;false
7;false,true;created(F, E), haschild(F, B).;true;true
7;false;haschild(A, D), actedin(D, E).;true;true
7;false,true,false;created(H, E), haschild(H, A).;false;false
7;false,false,true;created(K, J), haschild(K, A).;false;false
7;false,false;haschild(B, I), actedin(I, J).;true;false
8;;ismarriedto(B, A) :- haschild(A, C), haschild(B, C).;true;true
8;false,true;actedin(J, I), haschild(B, J).;false;false
8;false;haschild(A, H), actedin(H, I).;true;true
8;true,true;actedin(C, F).;false;true
8;false,false,true;created(M, L), haschild(M, A).;false;false
8;true,true,false;created(G, E), haschild(G, A).;false;false
8;true;haschild(B, D), actedin(D, E).;true;false
8;false,false;haschild(B, K), actedin(K, L).;true;false
9;;ismarriedto(B, A) :- haschild(A, C), haschild(B, C).;false;true
9;false,true,false;created(G, E), haschild(G, A).;false;false
9;false,true;actedin(F, E), haschild(A, F).;false;true
9;false;haschild(B, D), actedin(D, E).;true;true
9;false,false;haschild(A, H), actedin(H, I).;false;false


WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then if ( haschild(B, D), actedin(D, E) )
%   | then if ( actedin(C, F) )
%   | | then return 0.8581489350995125;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( created(G, E), haschild(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.8581489350995075;  // std dev = 4,33e-06, 974,000 (wgt'ed) examples reached here.  /* #pos=974 */
%   else if ( haschild(A, H), actedin(H, I) )
%   | then if ( created(J, I), haschild(J, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.15570991070926904;  // std dev = 6,546, 205,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=61 */
%   | else if ( haschild(B, K), actedin(K, L) )
%   | | then if ( created(M, L), haschild(M, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.20451765018331233;  // std dev = 6,366, 179,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=62 */
%   | | else return 0.32636545140787077;  // std dev = 59,899, 14.410,000 (wgt'ed) examples reached here.  /* #neg=7.663 #pos=6.747 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then if ( haschild(A, D), actedin(D, E) )
%   | then if ( actedin(C, F) )
%   | | then return 0.7194734122109538;  // std dev = 2,23e-07, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( created(G, E), haschild(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7194734122109554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109588;  // std dev = 0,000, 971,000 (wgt'ed) examples reached here.  /* #pos=971 */
%   else if ( haschild(A, H), actedin(H, I) )
%   | then if ( actedin(J, I), haschild(B, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(K, I), haschild(K, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.1356788212139441;  // std dev = 6,546, 205,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=61 */
%   | else return 0.28054880684363115;  // std dev = 60,253, 14.589,000 (wgt'ed) examples reached here.  /* #neg=7.780 #pos=6.809 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.5553664367462902;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(A, D), actedin(D, E) )
%   | then if ( created(F, E), haschild(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( actedin(G, E), haschild(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.11641628126142155;  // std dev = 6,546, 205,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=61 */
%   | else if ( haschild(B, H), actedin(H, I) )
%   | | then return 0.13470626018784088;  // std dev = 6,366, 179,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=62 */
%   | | else return 0.23550900867931476;  // std dev = 59,899, 14.410,000 (wgt'ed) examples reached here.  /* #neg=7.663 #pos=6.747 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.41751358415831324;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(B, D), actedin(D, E) )
%   | then if ( actedin(F, E), haschild(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(G, E), haschild(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.11722966342527509;  // std dev = 6,447, 182,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=64 */
%   | else return 0.18950043682220383;  // std dev = 60,263, 14.612,000 (wgt'ed) examples reached here.  /* #neg=7.806 #pos=6.806 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.3207118471601514;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), haschild(B, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(G, E), haschild(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.06674896885812552;  // std dev = 6,548, 205,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=61 */
%   | else return 0.15056422781463957;  // std dev = 60,242, 14.589,000 (wgt'ed) examples reached here.  /* #neg=7.780 #pos=6.809 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.2551722425694924;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), haschild(B, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.054686398050019035;  // std dev = 6,548, 205,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=61 */
%   | else return 0.11715735037034496;  // std dev = 60,242, 14.589,000 (wgt'ed) examples reached here.  /* #neg=7.780 #pos=6.809 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then if ( haschild(A, D), actedin(D, E) )
%   | then if ( haschild(B, D) )
%   | | then if ( created(F, E), haschild(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.20975771563253306;  // std dev = 7,60e-08, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( created(G, E), haschild(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.20975771563253387;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2097577156325289;  // std dev = 1,45e-06, 971,000 (wgt'ed) examples reached here.  /* #pos=971 */
%   else if ( haschild(B, H), actedin(H, I) )
%   | then if ( actedin(J, I), haschild(A, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(K, I), haschild(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.04178492110009842;  // std dev = 6,453, 182,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=64 */
%   | else return 0.09004106439390647;  // std dev = 60,252, 14.612,000 (wgt'ed) examples reached here.  /* #neg=7.806 #pos=6.806 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.1770964977452797;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(B, D), actedin(D, E) )
%   | then if ( created(F, E), haschild(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(G, E), haschild(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.03278258049580685;  // std dev = 6,453, 182,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=64 */
%   | else if ( haschild(A, H), actedin(H, I) )
%   | | then if ( created(J, I), haschild(J, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.021407664367152357;  // std dev = 6,463, 202,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=59 */
%   | | else return 0.06937960103700608;  // std dev = 59,899, 14.410,000 (wgt'ed) examples reached here.  /* #neg=7.663 #pos=6.747 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then if ( haschild(A, D), actedin(D, E) )
%   | then if ( actedin(C, F) )
%   | | then return 0.15274385809366878;  // std dev = 7,30e-08, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( created(G, E), haschild(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809366953;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.15274385809366922;  // std dev = 5,46e-07, 971,000 (wgt'ed) examples reached here.  /* #pos=971 */
%   else if ( haschild(B, H), actedin(H, I) )
%   | then if ( actedin(J, I), haschild(A, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.02562348307585681;  // std dev = 6,454, 182,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=64 */
%   | else if ( haschild(A, K), actedin(K, L) )
%   | | then if ( created(M, L), haschild(M, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.017160923624726217;  // std dev = 6,463, 202,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=59 */
%   | | else return 0.052633913937422526;  // std dev = 59,899, 14.410,000 (wgt'ed) examples reached here.  /* #neg=7.663 #pos=6.747 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.13400703000800795;  // std dev = 7,56e-07, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), haschild(B, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(G, E), haschild(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.019497968974417117;  // std dev = 6,549, 205,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=61 */
%   | else if ( haschild(B, H), actedin(H, I) )
%   | | then return 0.013465881671668652;  // std dev = 6,366, 179,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=62 */
%   | | else return 0.03979644421105042;  // std dev = 59,899, 14.410,000 (wgt'ed) examples reached here.  /* #neg=7.663 #pos=6.747 */


Results
   AUC ROC   = 0.574878
   AUC PR    = 0.630613
   CLL	      = -0.652627
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.135807
   F1        = 0.239138


Total learning time: 493.04 seconds
Total inference time: 83.595 seconds
AUC ROC: 0.574878


Structure after Parameter Learning
[['ismarriedto(A, B)', {'': 'haschild(B, C), haschild(A, C)', 'false,true': 'created(J, I), haschild(J, B)', 'true,true': 'actedin(C, F)', 'false': 'haschild(A, H), actedin(H, I)', 'false,false,true': 'created(M, L), haschild(M, B)', 'true': 'haschild(B, D), actedin(D, E)', 'true,true,false': 'created(G, E), haschild(G, A)', 'false,false': 'haschild(B, K), actedin(K, L)'}, {'true,true,false,true': [0.0, 0, 0], 'false,false,false': [59.899, 7663, 6747], 'true,false': [4.33e-06, 0, 974], 'false,true,false': [6.546, 144, 61], 'true,true,false,false': [0.0, 0, 1], 'false,false,true,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 79], 'false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.366, 117, 62]}], ['ismarriedto(A, B)', {'': 'haschild(B, C), haschild(A, C)', 'false,true': 'actedin(J, I), haschild(B, J)', 'true,true': 'actedin(C, F)', 'false': 'haschild(A, H), actedin(H, I)', 'false,true,false': 'created(K, I), haschild(K, B)', 'true': 'haschild(A, D), actedin(D, E)', 'true,true,false': 'created(G, E), haschild(G, B)'}, {'true,true,false,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 971], 'true,true,true': [2.23e-07, 0, 79], 'true,true,false,false': [0.0, 0, 4], 'false,true,true': [0.0, 0, 0], 'false,false': [60.253, 7780, 6809], 'false,true,false,false': [6.546, 144, 61]}], ['ismarriedto(A, B)', {'': 'haschild(B, C), haschild(A, C)', 'false,true,false': 'actedin(G, E), haschild(B, G)', 'false,true': 'created(F, E), haschild(F, B)', 'false,false': 'haschild(B, H), actedin(H, I)', 'false': 'haschild(A, D), actedin(D, E)'}, {'false,true,true': [0.0, 0, 0], 'false,false,true': [6.366, 117, 62], 'false,false,false': [59.899, 7663, 6747], 'false,true,false,true': [0.0, 0, 0], 'true': [0.0, 0, 1054], 'false,true,false,false': [6.546, 144, 61]}], ['ismarriedto(A, B)', {'': 'haschild(B, C), haschild(A, C)', 'false,true,false': 'created(G, E), haschild(G, A)', 'false,true': 'actedin(F, E), haschild(A, F)', 'false': 'haschild(B, D), actedin(D, E)'}, {'false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 1054], 'false,true,false,true': [0.0, 0, 0], 'false,false': [60.263, 7806, 6806], 'false,true,false,false': [6.447, 118, 64]}], ['ismarriedto(A, B)', {'': 'haschild(B, C), haschild(A, C)', 'false,true,false': 'created(G, E), haschild(G, B)', 'false,true': 'actedin(F, E), haschild(B, F)', 'false': 'haschild(A, D), actedin(D, E)'}, {'false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 1054], 'false,true,false,true': [0.0, 0, 0], 'false,false': [60.242, 7780, 6809], 'false,true,false,false': [6.548, 144, 61]}], ['ismarriedto(A, B)', {'': 'haschild(B, C), haschild(A, C)', 'false,true': 'actedin(F, E), haschild(B, F)', 'false': 'haschild(A, D), actedin(D, E)'}, {'false,true,false': [6.548, 144, 61], 'false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 1054], 'false,false': [60.242, 7780, 6809]}], ['ismarriedto(A, B)', {'': 'haschild(B, C), haschild(A, C)', 'false,true': 'actedin(J, I), haschild(A, J)', 'true,true': 'haschild(B, D)', 'false': 'haschild(B, H), actedin(H, I)', 'false,true,false': 'created(K, I), haschild(K, A)', 'true,true,false': 'created(G, E), haschild(G, A)', 'true': 'haschild(A, D), actedin(D, E)', 'true,true,true': 'created(F, E), haschild(F, B)'}, {'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'true,false': [1.45e-06, 0, 971], 'true,true,true,true': [0.0, 0, 0], 'false,true,false,false': [6.453, 118, 64], 'true,true,false,false': [0.0, 0, 4], 'true,true,false,true': [0.0, 0, 0], 'false,false': [60.252, 7806, 6806], 'true,true,true,false': [7.6e-08, 0, 79]}], ['ismarriedto(A, B)', {'': 'haschild(B, C), haschild(A, C)', 'false,true': 'created(F, E), haschild(F, A)', 'false': 'haschild(B, D), actedin(D, E)', 'false,true,false': 'created(G, E), haschild(G, B)', 'false,false,true': 'created(J, I), haschild(J, B)', 'false,false': 'haschild(A, H), actedin(H, I)'}, {'false,true,true': [0.0, 0, 0], 'false,false,false': [59.899, 7663, 6747], 'false,true,false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 1054], 'false,false,true,false': [6.463, 143, 59], 'false,true,false,false': [6.453, 118, 64]}], ['ismarriedto(A, B)', {'': 'haschild(B, C), haschild(A, C)', 'false,true': 'actedin(J, I), haschild(A, J)', 'true,true': 'actedin(C, F)', 'false': 'haschild(B, H), actedin(H, I)', 'false,false,true': 'created(M, L), haschild(M, B)', 'true': 'haschild(A, D), actedin(D, E)', 'true,true,false': 'created(G, E), haschild(G, B)', 'false,false': 'haschild(A, K), actedin(K, L)'}, {'true,true,false,true': [0.0, 0, 0], 'false,false,false': [59.899, 7663, 6747], 'true,false': [5.46e-07, 0, 971], 'false,true,false': [6.454, 118, 64], 'true,true,false,false': [0.0, 0, 4], 'false,false,true,true': [0.0, 0, 0], 'true,true,true': [7.3e-08, 0, 79], 'false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.463, 143, 59]}], ['ismarriedto(A, B)', {'': 'haschild(B, C), haschild(A, C)', 'false,true,false': 'created(G, E), haschild(G, B)', 'false,true': 'actedin(F, E), haschild(B, F)', 'false,false': 'haschild(B, H), actedin(H, I)', 'false': 'haschild(A, D), actedin(D, E)'}, {'false,true,true': [0.0, 0, 0], 'false,false,true': [6.366, 117, 62], 'false,false,false': [59.899, 7663, 6747], 'false,true,false,true': [0.0, 0, 0], 'true': [7.56e-07, 0, 1054], 'false,true,false,false': [6.549, 144, 61]}]]
[{'': [1.9846658577587617e-14, 0.24873103395384263], 'false,true': [nan, 0.2090184414039268], 'true,true': [-8.99421184506456e-16, 0.0], 'false': [0.20901844140392659, 0.24889254160397808], 'false,false,true': [nan, 0.22639742829499723], 'true,true,false': [nan, 0.0], 'true': [-7.993605777301127e-16, 1.9259063885078692e-14], 'false,false': [0.2263974282949972, 0.24898981016411667]}, {'': [-6.471736492691614e-15, 0.24857880122673875], 'false,true': [nan, 0.20901844140392753], 'true,true': [6.295948291545192e-16, 0.0], 'false': [0.20901844140392753, 0.2488438703105693], 'false,true,false': [nan, 0.2090184414039273], 'true,true,false': [nan, 0.0], 'true': [7.704680267278195e-16, -6.498063330123264e-15]}, {'': [-8.736844265133679e-15, 0.2484738149786972], 'false,true,false': [nan, 0.20901844140392484], 'false,true': [nan, 0.20901844140392503], 'false': [0.20901844140392484, 0.24883575580371978], 'false,false': [0.22639742829499584, 0.24898981016447408]}, {'': [-2.6965568719548395e-15, 0.24835218846023724], 'false,true,false': [nan, 0.22838613269634292], 'false,true': [nan, 0.228386132696343], 'false': [0.228386132696343, 0.2485366203587025]}, {'': [-8.22449845946226e-16, 0.2483059646500574], 'false,true,false': [nan, 0.20915671304882308], 'false,true': [nan, 0.20915671304882305], 'false': [0.20915671304882305, 0.2487587323396927]}, {'': [-2.3055561255213876e-15, 0.24825809484348507], 'false,true': [nan, 0.2091618634026498], 'false': [0.2091618634026498, 0.24875338420246854]}, {'': [2.4538667534789038e-15, 0.24822973429810472], 'false,true': [nan, 0.2288132994439146], 'true,true': [8.432073604748025e-17, 0.0], 'false': [0.2288132994439146, 0.2484429282320716], 'false,true,false': [nan, 0.22881329944391535], 'true,true,true': [nan, 7.307797124114954e-17], 'true': [3.2102834446992477e-17, 2.173338748926362e-15], 'true,true,false': [nan, 0.0]}, {'': [-1.0988469253215972e-15, 0.24821198637775618], 'false,true': [nan, 0.22883012598512037], 'false': [0.2288301259851202, 0.24843751223380478], 'false,true,false': [nan, 0.22883012598512037], 'false,false,true': [nan, 0.20676894422115497], 'false,false': [0.206768944221155, 0.24898981016447702]}, {'': [5.898718157401212e-16, 0.2481909583118203], 'false,true': [nan, 0.2288431236386174], 'true,true': [6.74565888379842e-17, 0.0], 'false': [0.2288431236386174, 0.2484232932234433], 'false,false,true': [nan, 0.2067689442211543], 'true,true,false': [nan, 0.0], 'true': [5.3504724078320797e-17, 3.0734083318150574e-16], 'false,false': [0.20676894422115424, 0.2489898101643306]}, {'': [5.426820704809114e-16, 0.24817934710913186], 'false,true,false': [nan, 0.20923763020229053], 'false,true': [nan, 0.2092376302022893], 'false': [0.2092376302022893, 0.24872101459446017], 'false,false': [0.22639742829499646, 0.24898981016451013]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;ismarriedto(A, B) :- haschild(B, C), haschild(A, C).;true;true', '0;true,true;actedin(C, F).;true;true', '0;true;haschild(B, D), actedin(D, E).;true;true', '1;;ismarriedto(A, B) :- haschild(B, C), haschild(A, C).;true;true', '1;true,true;actedin(C, F).;true;true', '1;true;haschild(A, D), actedin(D, E).;true;true', '2;;ismarriedto(A, B) :- haschild(B, C), haschild(A, C).;true;true', '3;;ismarriedto(A, B) :- haschild(B, C), haschild(A, C).;true;true', '4;;ismarriedto(A, B) :- haschild(B, C), haschild(A, C).;true;true', '5;;ismarriedto(A, B) :- haschild(B, C), haschild(A, C).;true;true', '6;;ismarriedto(A, B) :- haschild(B, C), haschild(A, C).;true;true', '6;true,true;haschild(B, D).;true;true', '6;true;haschild(A, D), actedin(D, E).;true;true', '7;;ismarriedto(A, B) :- haschild(B, C), haschild(A, C).;true;true', '8;;ismarriedto(A, B) :- haschild(B, C), haschild(A, C).;true;true', '8;true,true;actedin(C, F).;true;true', '8;true;haschild(A, D), actedin(D, E).;true;true', '9;;ismarriedto(A, B) :- haschild(B, C), haschild(A, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.8581489350995075;  // std dev = 1,41e-07, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(A, D) )
%   | then if ( haschild(E, B), haschild(D, F) )
%   | | then if ( haschild(B, G) )
%   | | | then return 0.11901850031690298;  // std dev = 4,212, 92,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=24 */
%   | | | else return 0.4581489350995101;  // std dev = 5,797, 140,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=84 */
%   | | else if ( haschild(D, H) )
%   | | | then return 0.0011935545220831797;  // std dev = 9,665, 762,000 (wgt'ed) examples reached here.  /* #neg=653 #pos=109 */
%   | | | else return 0.1566807458662285;  // std dev = 16,023, 1.226,000 (wgt'ed) examples reached here.  /* #neg=860 #pos=366 */
%   | else if ( haschild(B, I) )
%   | | then if ( haschild(J, A) )
%   | | | then return 0.4366613317937237;  // std dev = 7,682, 242,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=140 */
%   | | | else return 0.13902542912341176;  // std dev = 17,441, 1.506,000 (wgt'ed) examples reached here.  /* #neg=1.083 #pos=423 */
%   | | else if ( diedin(B, K), diedin(A, K) )
%   | | | then return 0.8581489350995128;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return 0.38367669479455946;  // std dev = 51,781, 10.753,000 (wgt'ed) examples reached here.  /* #neg=5.102 #pos=5.651 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.7194734122109588;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(A, D) )
%   | then if ( haschild(D, E), actedin(B, F) )
%   | | then if ( haschild(G, A) )
%   | | | then return -0.14441158054033296;  // std dev = 0,128, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | | else return -0.08460479357381795;  // std dev = 1,647, 50,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=3 */
%   | | else if ( haschild(H, B), haschild(D, I) )
%   | | | then return 0.28669730255620135;  // std dev = 7,383, 226,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=107 */
%   | | | else return 0.10226204958153698;  // std dev = 18,690, 1.836,000 (wgt'ed) examples reached here.  /* #neg=1.363 #pos=473 */
%   | else if ( haschild(B, J) )
%   | | then if ( haschild(K, A) )
%   | | | then return 0.3748141796886603;  // std dev = 7,682, 242,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=140 */
%   | | | else return 0.12124527824869757;  // std dev = 17,441, 1.506,000 (wgt'ed) examples reached here.  /* #neg=1.083 #pos=423 */
%   | | else if ( actedin(A, L), actedin(B, M) )
%   | | | then return 0.5241954702978804;  // std dev = 14,759, 1.083,000 (wgt'ed) examples reached here.  /* #neg=303 #pos=780 */
%   | | | else return 0.31165113195037886;  // std dev = 49,299, 9.743,000 (wgt'ed) examples reached here.  /* #neg=4.799 #pos=4.944 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.5553664367462902;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(A, D) )
%   | then if ( haschild(E, B) )
%   | | then if ( haschild(B, F) )
%   | | | then return -0.0063572480768077505;  // std dev = 5,168, 182,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=33 */
%   | | | else return 0.3096061373152035;  // std dev = 8,382, 288,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=151 */
%   | | else if ( actedin(B, G), actedin(A, H) )
%   | | | then return 0.42961100025361276;  // std dev = 3,879, 63,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=38 */
%   | | | else return 0.04967603027956194;  // std dev = 16,734, 1.687,000 (wgt'ed) examples reached here.  /* #neg=1.326 #pos=361 */
%   | else if ( haschild(B, I) )
%   | | then if ( actedin(A, J), haschild(I, K) )
%   | | | then return -0.15869061579485966;  // std dev = 1,680, 136,000 (wgt'ed) examples reached here.  /* #neg=133 #pos=3 */
%   | | | else return 0.15696603840671014;  // std dev = 18,880, 1.612,000 (wgt'ed) examples reached here.  /* #neg=1.052 #pos=560 */
%   | | else if ( actedin(B, L), actedin(A, M) )
%   | | | then return 0.428568173894204;  // std dev = 14,756, 1.083,000 (wgt'ed) examples reached here.  /* #neg=303 #pos=780 */
%   | | | else return 0.25793818244499356;  // std dev = 49,292, 9.743,000 (wgt'ed) examples reached here.  /* #neg=4.799 #pos=4.944 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.41751358415831324;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, D) )
%   | then if ( ispoliticianof(A, E), livesin(A, F) )
%   | | then return 0.21928222649425835;  // std dev = 1,181, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( livesin(A, G), ispoliticianof(H, G) )
%   | | | then return 0.3997325241415368;  // std dev = 0,860, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.683480354397608;  // std dev = 2,044, 137,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=133 */
%   | else if ( haschild(B, I) )
%   | | then if ( wasbornin(A, J), haschild(I, K) )
%   | | | then return -0.06152010481252062;  // std dev = 4,882, 218,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=30 */
%   | | | else return 0.10710244201405689;  // std dev = 19,762, 1.880,000 (wgt'ed) examples reached here.  /* #neg=1.290 #pos=590 */
%   | | else if ( haschild(A, L) )
%   | | | then return 0.08555025054467172;  // std dev = 18,670, 1.851,000 (wgt'ed) examples reached here.  /* #neg=1.343 #pos=508 */
%   | | | else return 0.21422708216331576;  // std dev = 51,310, 10.699,000 (wgt'ed) examples reached here.  /* #neg=5.095 #pos=5.604 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.3207118471601514;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( actedin(A, D), actedin(B, E) )
%   | then if ( actedin(A, E) )
%   | | then if ( haschild(A, F) )
%   | | | then return 0.7447581418140186;  // std dev = 0,070, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5722499884565073;  // std dev = 0,711, 180,000 (wgt'ed) examples reached here.  /* #pos=180 */
%   | | else if ( haswonprize(A, G), diedin(B, H) )
%   | | | then return -0.019634031819192464;  // std dev = 2,816, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | | | else return 0.2456519080720122;  // std dev = 14,933, 1.004,000 (wgt'ed) examples reached here.  /* #neg=341 #pos=663 */
%   | else if ( haschild(A, I) )
%   | | then if ( actedin(B, J) )
%   | | | then return -0.09585561326866107;  // std dev = 4,682, 317,000 (wgt'ed) examples reached here.  /* #neg=292 #pos=25 */
%   | | | else return 0.07755161870014556;  // std dev = 18,834, 1.837,000 (wgt'ed) examples reached here.  /* #neg=1.320 #pos=517 */
%   | | else if ( actedin(A, K) )
%   | | | then return 0.04746935576617568;  // std dev = 20,593, 1.913,000 (wgt'ed) examples reached here.  /* #neg=1.202 #pos=711 */
%   | | | else return 0.16731969334278152;  // std dev = 48,156, 9.500,000 (wgt'ed) examples reached here.  /* #neg=4.750 #pos=4.750 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.2551722425694924;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( actedin(B, D), haschild(E, A) )
%   | then if ( actedin(A, F), wrotemusicfor(G, D) )
%   | | then if ( isaffiliatedto(E, H), wasbornin(B, I) )
%   | | | then return -0.49907983334431;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3185318393611678;  // std dev = 2,848, 49,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=39 */
%   | | else if ( actedin(E, J) )
%   | | | then return 0.26575626698132726;  // std dev = 1,488, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return -0.19006240588004503;  // std dev = 4,244, 292,000 (wgt'ed) examples reached here.  /* #neg=272 #pos=20 */
%   | else if ( haschild(K, B), haschild(L, A) )
%   | | then if ( haschild(A, M), haschild(B, N) )
%   | | | then return -0.014837127243345903;  // std dev = 3,866, 94,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=19 */
%   | | | else return 0.33805986515338476;  // std dev = 9,929, 474,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=330 */
%   | | else if ( actedin(A, P), isaffiliatedto(B, Q) )
%   | | | then return -0.1724510600122359;  // std dev = 4,596, 169,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=28 */
%   | | | else return 0.11492962781137009;  // std dev = 56,328, 13.704,000 (wgt'ed) examples reached here.  /* #neg=7.276 #pos=6.428 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.2097577156325282;  // std dev = 4,96e-08, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haswonprize(B, D), haswonprize(A, D) )
%   | then if ( actedin(B, E), actedin(A, F) )
%   | | then if ( edited(G, F), wasbornin(G, H) )
%   | | | then return 0.13027471590747297;  // std dev = 0,988, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.4498736057469965;  // std dev = 0,289, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( wasbornin(B, I), diedin(J, I) )
%   | | | then return 0.517893772656488;  // std dev = 1,293, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.6152617526963742;  // std dev = 0,390, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( actedin(B, K), actedin(A, L) )
%   | | then if ( directed(M, K), directed(M, L) )
%   | | | then return 0.4249536183385353;  // std dev = 2,087, 213,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=210 */
%   | | | else return 0.13926688622242006;  // std dev = 14,928, 996,000 (wgt'ed) examples reached here.  /* #neg=355 #pos=641 */
%   | | else if ( actedin(A, N), haschild(P, B) )
%   | | | then return -0.19948976226123014;  // std dev = 4,566, 288,000 (wgt'ed) examples reached here.  /* #neg=264 #pos=24 */
%   | | | else return 0.08124946869546408;  // std dev = 55,280, 13.221,000 (wgt'ed) examples reached here.  /* #neg=7.298 #pos=5.923 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.17709649774527972;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(D, A) )
%   | then if ( haschild(E, B) )
%   | | then if ( haschild(B, F), haschild(A, G) )
%   | | | then return -0.025850122485072593;  // std dev = 3,864, 94,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=19 */
%   | | | else return 0.22878225175941688;  // std dev = 10,129, 496,000 (wgt'ed) examples reached here.  /* #neg=159 #pos=337 */
%   | | else if ( wasbornin(B, H) )
%   | | | then return -0.13223380939842608;  // std dev = 7,490, 469,000 (wgt'ed) examples reached here.  /* #neg=385 #pos=84 */
%   | | | else return 0.008190008524412625;  // std dev = 15,791, 1.238,000 (wgt'ed) examples reached here.  /* #neg=820 #pos=418 */
%   | else if ( haschild(I, B), haschild(J, I) )
%   | | then if ( actedin(A, K) )
%   | | | then return -0.19524088336173098;  // std dev = 2,486, 184,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=8 */
%   | | | else return 0.015114602833695924;  // std dev = 12,830, 748,000 (wgt'ed) examples reached here.  /* #neg=480 #pos=268 */
%   | | else if ( actedin(B, L), actedin(A, L) )
%   | | | then return 0.3228053311274223;  // std dev = 0,851, 177,000 (wgt'ed) examples reached here.  /* #pos=177 */
%   | | | else return 0.07868582069078382;  // std dev = 51,817, 11.388,000 (wgt'ed) examples reached here.  /* #neg=5.829 #pos=5.559 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.1527438580936683;  // std dev = 2,43e-08, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( actedin(A, D), directed(B, E) )
%   | then if ( actedin(F, E), actedin(F, D) )
%   | | then if ( actedin(B, G) )
%   | | | then return 0.3225086210581901;  // std dev = 1,193, 40,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.5602784461017607;  // std dev = 1,063, 66,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | else if ( wasbornin(A, H), hascapital(I, H) )
%   | | | then return -0.12820604119273155;  // std dev = 2,885, 35,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | | else return 0.13912667634183556;  // std dev = 6,146, 176,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=108 */
%   | else if ( haschild(B, J), wasbornin(A, K) )
%   | | then if ( created(B, L) )
%   | | | then return 0.2267183570251645;  // std dev = 3,733, 59,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=31 */
%   | | | else return -0.1012358431297884;  // std dev = 7,685, 468,000 (wgt'ed) examples reached here.  /* #neg=386 #pos=82 */
%   | | else if ( diedin(B, M), diedin(A, M) )
%   | | | then return 0.41748785556782003;  // std dev = 1,421, 86,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=84 */
%   | | | else return 0.04894987865000909;  // std dev = 56,103, 13.864,000 (wgt'ed) examples reached here.  /* #neg=7.415 #pos=6.449 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.13400703000800798;  // std dev = 7,59e-07, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(D, A), wasbornin(B, E) )
%   | then if ( haschild(F, B), haschild(G, F) )
%   | | then if ( haschild(B, H), wasbornin(F, I) )
%   | | | then return -0.19071358052561124;  // std dev = 1,712, 20,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.25886022906137574;  // std dev = 3,175, 66,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=50 */
%   | | else if ( wasbornin(D, J), actedin(A, K) )
%   | | | then return 0.16425367375397132;  // std dev = 2,845, 38,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=24 */
%   | | | else return -0.1374829468908081;  // std dev = 7,200, 468,000 (wgt'ed) examples reached here.  /* #neg=396 #pos=72 */
%   | else if ( haschild(B, L), diedin(L, M) )
%   | | then if ( isaffiliatedto(A, N) )
%   | | | then return -0.2598641456757936;  // std dev = 0,987, 39,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | | | else return -0.05857555046592375;  // std dev = 8,296, 447,000 (wgt'ed) examples reached here.  /* #neg=345 #pos=102 */
%   | | else if ( actedin(A, P), actedin(B, Q) )
%   | | | then return 0.10958191515390407;  // std dev = 15,075, 1.194,000 (wgt'ed) examples reached here.  /* #neg=347 #pos=847 */
%   | | | else return 0.04186121706404052;  // std dev = 53,802, 12.522,000 (wgt'ed) examples reached here.  /* #neg=6.752 #pos=5.770 */


Results
   AUC ROC   = 0.725547
   AUC PR    = 0.748525
   CLL	      = -0.599651
   Precision = 0.855462 at threshold = 0.5
   Recall    = 0.307396
   F1        = 0.452275


Total learning time: 583.698 seconds
Total inference time: 102.369 seconds
AUC ROC: 0.725547


Refined model AUC ROC: 0.725547


Dataset: 15_cora_yago2s, Fold: 1, Type: transfer, Time: 08:15:21
{'Learning time': 1076.738, 'Inference time': 102.369, 'AUC PR': 0.748525, 'F1': 0.452275, 'Recall': 0.307396, 'Parameter Learning results': {'Learning time': 493.04, 'Inference time': 83.595, 'AUC PR': 0.630613, 'F1': 0.239138, 'Recall': 0.135807, 'AUC ROC': 0.574878, 'CLL': -0.652627, 'Precision': [1.0, 0.5]}, 'AUC ROC': 0.725547, 'Mapping results': {'Knowledge compiling time': 23.492096662521362, 'Generating mappings time': 104.86703753471375, 'Possible mappings': 441488, 'Finding best mapping': 180.43679451942444, 'Total time': 311.6515462398529, 'Generating paths time': 2.8556084632873535}, 'CLL': -0.599651, 'Precision': [0.855462, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, D) )
%   then if ( haschild(A, C) )
%   | then return 0.8581489350995075;  // std dev = 4,57e-06, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   | else return 0.03971318090956858;  // std dev = 0,385, 358,000 (wgt'ed) examples reached here.  /* #neg=293 #pos=65 */
%   else if ( actedin(A, E), actedin(B, F) )
%   | then if ( actedin(A, F) )
%   | | then return 0.8581489350995093;  // std dev = 1,08e-06, 190,000 (wgt'ed) examples reached here.  /* #pos=190 */
%   | | else if ( created(G, F), created(G, E) )
%   | | | then return 0.749453282925599;  // std dev = 2,111, 46,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=41 */
%   | | | else return 0.5001367647141125;  // std dev = 15,054, 986,000 (wgt'ed) examples reached here.  /* #neg=353 #pos=633 */
%   | else if ( haschild(A, H) )
%   | | then if ( haschild(I, B) )
%   | | | then return 0.37912795607852956;  // std dev = 8,448, 286,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=149 */
%   | | | else return 0.07663078328432585;  // std dev = 16,084, 1.515,000 (wgt'ed) examples reached here.  /* #neg=1.184 #pos=331 */
%   | | else if ( haschild(B, J) )
%   | | | then return 0.16772977342286063;  // std dev = 18,893, 1.670,000 (wgt'ed) examples reached here.  /* #neg=1.153 #pos=517 */
%   | | | else return 0.36559017496408147;  // std dev = 49,348, 9.743,000 (wgt'ed) examples reached here.  /* #neg=4.799 #pos=4.944 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.7194734122109588;  // std dev = 0,000, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(A, D) )
%   | then if ( actedin(B, E) )
%   | | then if ( actedin(A, F), wrotemusicfor(G, F) )
%   | | | then return 0.4285022454265663;  // std dev = 3,643, 60,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=39 */
%   | | | else return -0.0708128969454572;  // std dev = 4,945, 323,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=27 */
%   | | else if ( haschild(H, B), haschild(D, I) )
%   | | | then return 0.29837281043019975;  // std dev = 7,389, 226,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=107 */
%   | | | else return 0.100158951621267;  // std dev = 17,412, 1.611,000 (wgt'ed) examples reached here.  /* #neg=1.201 #pos=410 */
%   | else if ( haschild(J, B), haschild(K, A) )
%   | | then if ( isaffiliatedto(J, L), haschild(M, K) )
%   | | | then return -0.18518928419648084;  // std dev = 0,025, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5590903025526471;  // std dev = 7,898, 327,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=242 */
%   | | else if ( actedin(B, N), actedin(A, P) )
%   | | | then return 0.4847223326439129;  // std dev = 15,207, 1.159,000 (wgt'ed) examples reached here.  /* #neg=335 #pos=824 */
%   | | | else return 0.2826359629690982;  // std dev = 52,400, 11.084,000 (wgt'ed) examples reached here.  /* #neg=5.863 #pos=5.221 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, C) )
%   then if ( ispoliticianof(A, D), hascapital(D, E) )
%   | then if ( livesin(A, F) )
%   | | then return -0.022431658124982934;  // std dev = 0,670, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.6878680099050454;  // std dev = 0,117, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haschild(A, G), haschild(B, G) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( wasbornin(A, H), isleaderof(I, H) )
%   | | | then return 0.6429824295021581;  // std dev = 1,886, 33,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=29 */
%   | | | else return 0.7571971561490304;  // std dev = 1,026, 106,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=105 */
%   else if ( haschild(A, J), haschild(B, J) )
%   | then return 0.5553664367462888;  // std dev = 0,000, 1.026,000 (wgt'ed) examples reached here.  /* #pos=1.026 */
%   | else if ( diedin(A, K), diedin(B, K) )
%   | | then return 0.729292292805562;  // std dev = 0,145, 94,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=92 */
%   | | else if ( haschild(A, L) )
%   | | | then return 0.08304785138832922;  // std dev = 20,068, 2.201,000 (wgt'ed) examples reached here.  /* #neg=1.636 #pos=565 */
%   | | | else return 0.24732369500773632;  // std dev = 54,944, 12.353,000 (wgt'ed) examples reached here.  /* #neg=6.278 #pos=6.075 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.41755902690735125;  // std dev = 0,154, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(B, D) )
%   | then if ( actedin(A, E), haschild(D, F) )
%   | | then if ( haschild(G, A), haschild(F, H) )
%   | | | then return 6.927861683718797E-4;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22311888887562895;  // std dev = 1,628, 151,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=3 */
%   | | else if ( haschild(I, A) )
%   | | | then return 0.1723818719142182;  // std dev = 9,478, 410,000 (wgt'ed) examples reached here.  /* #neg=241 #pos=169 */
%   | | | else return 0.04681637956523272;  // std dev = 17,674, 1.541,000 (wgt'ed) examples reached here.  /* #neg=1.086 #pos=455 */
%   | else if ( haschild(A, J) )
%   | | then if ( haschild(K, B) )
%   | | | then return 0.2819272958696686;  // std dev = 8,374, 288,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=151 */
%   | | | else return 0.05430089109261192;  // std dev = 16,472, 1.574,000 (wgt'ed) examples reached here.  /* #neg=1.207 #pos=367 */
%   | | else if ( actedin(A, L), actedin(B, M) )
%   | | | then return 0.34178163865935296;  // std dev = 14,487, 1.083,000 (wgt'ed) examples reached here.  /* #neg=303 #pos=780 */
%   | | | else return 0.21608013244527802;  // std dev = 49,114, 9.743,000 (wgt'ed) examples reached here.  /* #neg=4.799 #pos=4.944 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.32075104658842757;  // std dev = 0,145, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(B, D) )
%   | then if ( actedin(A, E) )
%   | | then if ( actedin(B, F), wrotemusicfor(G, F) )
%   | | | then return 0.24810195995512707;  // std dev = 4,139, 76,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=48 */
%   | | | else return -0.16084308573148193;  // std dev = 4,623, 330,000 (wgt'ed) examples reached here.  /* #neg=306 #pos=24 */
%   | | else if ( wasbornin(A, H), livesin(I, H) )
%   | | | then return -0.046878747893609025;  // std dev = 6,913, 300,000 (wgt'ed) examples reached here.  /* #neg=237 #pos=63 */
%   | | | else return 0.09753168699623391;  // std dev = 17,516, 1.400,000 (wgt'ed) examples reached here.  /* #neg=907 #pos=493 */
%   | else if ( isaffiliatedto(B, J), actedin(A, K) )
%   | | then if ( directed(L, K), influences(M, L) )
%   | | | then return -0.255442063999242;  // std dev = 1,687, 48,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | | | else return -0.11530662055566511;  // std dev = 3,883, 98,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=22 */
%   | | else if ( haschild(A, N) )
%   | | | then return 0.07537331965486352;  // std dev = 18,650, 1.850,000 (wgt'ed) examples reached here.  /* #neg=1.333 #pos=517 */
%   | | | else return 0.18289519850128327;  // std dev = 50,936, 10.692,000 (wgt'ed) examples reached here.  /* #neg=4.992 #pos=5.700 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.25520439504295805;  // std dev = 0,131, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(B, D) )
%   | then if ( actedin(A, E), haschild(D, F) )
%   | | then if ( haschild(A, G), haswonprize(A, H) )
%   | | | then return -0.026354812656579598;  // std dev = 0,848, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.1651163934007374;  // std dev = 1,513, 146,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=3 */
%   | | else if ( isaffiliatedto(A, I) )
%   | | | then return -0.1083536137497148;  // std dev = 4,186, 144,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
%   | | | else return 0.06036440727082613;  // std dev = 19,434, 1.807,000 (wgt'ed) examples reached here.  /* #neg=1.206 #pos=601 */
%   | else if ( actedin(B, J), haschild(K, A) )
%   | | then if ( actedin(A, L), wrotemusicfor(M, J) )
%   | | | then return 0.2670514017423559;  // std dev = 3,024, 49,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=37 */
%   | | | else return -0.18436974698102845;  // std dev = 4,608, 282,000 (wgt'ed) examples reached here.  /* #neg=256 #pos=26 */
%   | | else if ( directed(A, N), actedin(B, P) )
%   | | | then return 0.30729720818330114;  // std dev = 7,301, 275,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=201 */
%   | | | else return 0.1287410290837589;  // std dev = 53,449, 12.082,000 (wgt'ed) examples reached here.  /* #neg=6.104 #pos=5.978 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), isaffiliatedto(B, D) )
%   then if ( haschild(E, C), haschild(F, E) )
%   | then return -0.22548066752156457;  // std dev = 0,191, 76,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=4 */
%   | else return -0.05072874938974641;  // std dev = 0,375, 82,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=25 */
%   else if ( actedin(B, G), haschild(H, A) )
%   | then if ( haschild(I, H) )
%   | | then return -0.19285425397555783;  // std dev = 0,177, 183,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=6 */
%   | | else if ( actedin(H, J) )
%   | | | then return 0.3388005613516322;  // std dev = 1,890, 27,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | | else return -0.06911971388099473;  // std dev = 4,543, 146,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=39 */
%   | else if ( actedin(A, K), haschild(L, B) )
%   | | then if ( actedin(B, M), wrotemusicfor(N, K) )
%   | | | then return 0.34496157187430393;  // std dev = 2,237, 43,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=37 */
%   | | | else return -0.18605024075528612;  // std dev = 5,061, 304,000 (wgt'ed) examples reached here.  /* #neg=272 #pos=32 */
%   | | else if ( actedin(A, P), isaffiliatedto(B, Q) )
%   | | | then return -0.14715685431038755;  // std dev = 4,291, 151,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=27 */
%   | | | else return 0.10957736583030812;  // std dev = 56,808, 14.836,000 (wgt'ed) examples reached here.  /* #neg=7.105 #pos=7.731 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), haschild(B, D) )
%   then return -0.03747048412475733;  // std dev = 0,314, 471,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=137 */
%   else if ( actedin(B, E), actedin(A, F) )
%   | then if ( wasbornin(B, G), happenedin(H, G) )
%   | | then if ( created(I, E), created(I, F) )
%   | | | then return 0.37411912376639406;  // std dev = 0,251, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.02403991265287566;  // std dev = 6,128, 161,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=93 */
%   | | else if ( directed(J, E), directed(J, F) )
%   | | | then return 0.36136790511633576;  // std dev = 1,677, 174,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=171 */
%   | | | else return 0.1280624491667178;  // std dev = 13,028, 784,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=529 */
%   | else if ( haschild(K, B), haschild(L, A) )
%   | | then if ( haschild(A, M), haschild(B, N) )
%   | | | then return 0.1426162371289135;  // std dev = 4,412, 469,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=395 */
%   | | | else return 0.25809651777475273;  // std dev = 9,922, 490,000 (wgt'ed) examples reached here.  /* #neg=155 #pos=335 */
%   | | else if ( haschild(P, A) )
%   | | | then return -0.004836780181171678;  // std dev = 17,444, 1.834,000 (wgt'ed) examples reached here.  /* #neg=1.179 #pos=655 */
%   | | | else return 0.07110022095517178;  // std dev = 51,270, 11.440,000 (wgt'ed) examples reached here.  /* #neg=5.856 #pos=5.584 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), directed(A, C) )
%   then if ( created(D, C), actedin(A, E) )
%   | then if ( directed(A, E), created(D, E) )
%   | | then return 0.2607784413244372;  // std dev = 0,162, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3458916437730563;  // std dev = 0,067, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( diedin(A, F), created(B, G) )
%   | | then return 0.30158723876965454;  // std dev = 0,267, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.513099980762132;  // std dev = 0,071, 55,000 (wgt'ed) examples reached here.  /* #pos=55 */
%   else if ( haschild(A, H), haschild(B, H) )
%   | then return 0.18119182820989516;  // std dev = 0,345, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   | else if ( wasbornin(B, I), haschild(A, J) )
%   | | then if ( haschild(J, K), livesin(L, I) )
%   | | | then return -0.17601689575224921;  // std dev = 2,946, 215,000 (wgt'ed) examples reached here.  /* #neg=203 #pos=12 */
%   | | | else return -0.016830216150674236;  // std dev = 7,382, 343,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=82 */
%   | | else if ( haschild(M, B), haschild(N, A) )
%   | | | then return 0.16708654334518172;  // std dev = 10,349, 534,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=338 */
%   | | | else return 0.04527350857703419;  // std dev = 55,844, 13.626,000 (wgt'ed) examples reached here.  /* #neg=7.264 #pos=6.362 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.15581407772091413;  // std dev = 0,309, 1.054,000 (wgt'ed) examples reached here.  /* #pos=1.054 */
%   else if ( haschild(D, B), created(A, E) )
%   | then if ( actedin(B, F), created(G, F) )
%   | | then if ( wrotemusicfor(G, H), wasbornin(B, I) )
%   | | | then return -0.23746010496550113;  // std dev = 1,000, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.3210628507004313;  // std dev = 1,718, 28,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=24 */
%   | | else if ( created(B, E) )
%   | | | then return 0.6120693964119612;  // std dev = 0,247, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.23294533480138663;  // std dev = 4,454, 201,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=24 */
%   | else if ( actedin(B, J), isaffiliatedto(A, K) )
%   | | then if ( wrotemusicfor(L, J), hasmusicalrole(L, M) )
%   | | | then return -0.3502615406685583;  // std dev = 2,048, 62,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=5 */
%   | | | else return -0.1829868177101632;  // std dev = 3,993, 91,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | else if ( created(A, N), created(B, N) )
%   | | | then return 0.5103169984555909;  // std dev = 0,962, 97,000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | | else return 0.03891923815288906;  // std dev = 56,650, 14.303,000 (wgt'ed) examples reached here.  /* #neg=7.610 #pos=6.693 */


Results
   AUC ROC   = 0.72607
   AUC PR    = 0.749854
   CLL	      = -0.600603
   Precision = 0.85151 at threshold = 0.5
   Recall    = 0.32027
   F1        = 0.465468


Total learning time: 643.496 seconds
Total inference time: 84.332 seconds
AUC ROC: 0.72607


Dataset: 15_cora_yago2s, Fold: 1, Type: scratch, Time: 08:27:33
{'Learning time': 643.496, 'Inference time': 84.332, 'AUC PR': 0.749854, 'F1': 0.465468, 'Recall': 0.32027, 'AUC ROC': 0.72607, 'CLL': -0.600603, 'Precision': [0.85151, 0.5]}


Starting fold 2

Mapping Results
   Knowledge compiling time   = 24.369903087615967
   Generating paths time   = 2.8696560859680176
   Generating mappings time   = 106.4520263671875
   Possible mappings   = 441488
   Finding best mapping   = 180.66451048851013
   Total time   = 314.35610365867615


Best mapping found: ['samevenue(A,B) -> ismarriedto(A,B)', 'samebib(A,B) -> influences(A,B)', 'author(A,B) -> wasbornin(A,B)', 'haswordauthor(A,B) -> diedin(B,A)', 'venue(A,B) -> haschild(A,B)', 'haswordvenue(A,B) -> haschild(A,B)'] 

Transferred target predicate: ismarriedto 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true
0;false,true;wasbornin(J, I), haschild(J, A).;false;false
0;false;haschild(B, H), diedin(H, I).;true;true
0;true,true;diedin(C, F).;false;true
0;false,false,true;wasbornin(M, L), haschild(M, A).;false;false
0;true,true,false;wasbornin(G, E), haschild(G, B).;false;false
0;true;haschild(A, D), diedin(D, E).;true;false
0;false,false;haschild(A, K), diedin(K, L).;true;false
1;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true
1;false,true;diedin(J, I), haschild(A, J).;false;true
1;false;haschild(B, H), diedin(H, I).;true;false
1;true,true;diedin(C, F).;false;true
1;false,true,false;wasbornin(K, I), haschild(K, A).;false;false
1;true,true,false;wasbornin(G, E), haschild(G, A).;false;false
1;true;haschild(B, D), diedin(D, E).;true;false
2;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;false;true
2;false,true,true;influences(F, G), haschild(G, B).;false;false
2;false,true;wasbornin(F, E), haschild(F, A).;true;true
2;false;haschild(B, D), diedin(D, E).;true;true
2;false,true,false;diedin(H, E), haschild(A, H).;false;false
2;false,false;haschild(A, I), diedin(I, J).;false;false
3;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;false;true
3;false,true,false;wasbornin(G, E), haschild(G, B).;false;false
3;false,true;diedin(F, E), haschild(B, F).;false;true
3;false;haschild(A, D), diedin(D, E).;true;false
4;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;false;true
4;false,true,false;wasbornin(G, E), haschild(G, A).;false;false
4;false,true;diedin(F, E), haschild(A, F).;false;true
4;false;haschild(B, D), diedin(D, E).;true;false
5;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;false;true
5;false,true;diedin(F, E), haschild(A, F).;false;false
5;false;haschild(B, D), diedin(D, E).;true;false
6;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true
6;false,true;diedin(J, I), haschild(B, J).;false;true
6;false;haschild(A, H), diedin(H, I).;true;false
6;true,true;haschild(A, D).;true;true
6;true,true,true;wasbornin(F, E), haschild(F, A).;false;false
6;false,true,false;wasbornin(K, I), haschild(K, B).;false;false
6;true,true,false;wasbornin(G, E), haschild(G, B).;false;false
6;true;haschild(B, D), diedin(D, E).;true;false
7;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;false;true
7;false,true,true;influences(F, G), haschild(G, A).;false;false
7;false,true;wasbornin(F, E), haschild(F, B).;true;true
7;false;haschild(A, D), diedin(D, E).;true;true
7;false,true,false;wasbornin(H, E), haschild(H, A).;false;false
7;false,false,true;wasbornin(K, J), haschild(K, A).;false;false
7;false,false;haschild(B, I), diedin(I, J).;true;false
8;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true
8;false,true;diedin(J, I), haschild(B, J).;false;false
8;false;haschild(A, H), diedin(H, I).;true;true
8;true,true;diedin(C, F).;false;true
8;false,false,true;wasbornin(M, L), haschild(M, A).;false;false
8;true,true,false;wasbornin(G, E), haschild(G, A).;false;false
8;true;haschild(B, D), diedin(D, E).;true;false
8;false,false;haschild(B, K), diedin(K, L).;true;false
9;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;false;true
9;false,true,false;wasbornin(G, E), haschild(G, A).;false;false
9;false,true;diedin(F, E), haschild(A, F).;false;true
9;false;haschild(B, D), diedin(D, E).;true;true
9;false,false;haschild(A, H), diedin(H, I).;false;false


WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then if ( haschild(A, D), diedin(D, E) )
%   | then if ( diedin(C, F) )
%   | | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else if ( wasbornin(G, E), haschild(G, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.8581489350995115;  // std dev = 2,60e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return 0.8581489350995077;  // std dev = 3,47e-06, 739,000 (wgt'ed) examples reached here.  /* #pos=739 */
%   else if ( haschild(B, H), diedin(H, I) )
%   | then if ( wasbornin(J, I), haschild(J, A) )
%   | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.07756641082766598;  // std dev = 9,392, 515,000 (wgt'ed) examples reached here.  /* #neg=402 #pos=113 */
%   | else if ( haschild(A, K), diedin(K, L) )
%   | | then if ( wasbornin(M, L), haschild(M, A) )
%   | | | then return -0.030739953789376686;  // std dev = 1,333, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.1081489350995088;  // std dev = 10,283, 564,000 (wgt'ed) examples reached here.  /* #neg=423 #pos=141 */
%   | | else return 0.34110140644384035;  // std dev = 58,483, 13.697,000 (wgt'ed) examples reached here.  /* #neg=7.082 #pos=6.615 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then if ( haschild(B, D), diedin(D, E) )
%   | then if ( diedin(C, F) )
%   | | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else if ( wasbornin(G, E), haschild(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7194734122109555;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0.7194734122109586;  // std dev = 0,000, 747,000 (wgt'ed) examples reached here.  /* #pos=747 */
%   else if ( haschild(B, H), diedin(H, I) )
%   | then if ( diedin(J, I), haschild(A, J) )
%   | | then return 0.30323068355971416;  // std dev = 0,643, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( wasbornin(K, I), haschild(K, A) )
%   | | | then return 0.5080193346218546;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.06828639047422676;  // std dev = 9,389, 514,000 (wgt'ed) examples reached here.  /* #neg=401 #pos=113 */
%   | else return 0.2860177763304353;  // std dev = 59,592, 14.279,000 (wgt'ed) examples reached here.  /* #neg=7.521 #pos=6.758 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.5553664367462899;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(B, D), diedin(D, E) )
%   | then if ( wasbornin(F, E), haschild(F, A) )
%   | | then if ( influences(F, G), haschild(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.4623211441480529;  // std dev = 0,905, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( diedin(H, E), haschild(A, H) )
%   | | | then return -0.1947865732581686;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.05929512669080838;  // std dev = 9,389, 514,000 (wgt'ed) examples reached here.  /* #neg=401 #pos=113 */
%   | else if ( haschild(A, I), diedin(I, J) )
%   | | then return 0.04946316993149731;  // std dev = 10,381, 582,000 (wgt'ed) examples reached here.  /* #neg=439 #pos=143 */
%   | | else return 0.246617813521233;  // std dev = 58,483, 13.697,000 (wgt'ed) examples reached here.  /* #neg=7.082 #pos=6.615 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.4175135841583132;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(A, D), diedin(D, E) )
%   | then if ( diedin(F, E), haschild(B, F) )
%   | | then return 0.21347237568316252;  // std dev = 0,537, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( wasbornin(G, E), haschild(G, B) )
%   | | | then return 0.7951691135008245;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.041848467505967546;  // std dev = 10,611, 610,000 (wgt'ed) examples reached here.  /* #neg=461 #pos=149 */
%   | else return 0.1941421550686833;  // std dev = 59,279, 14.185,000 (wgt'ed) examples reached here.  /* #neg=7.462 #pos=6.723 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.32071184716015116;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(B, D), diedin(D, E) )
%   | then if ( diedin(F, E), haschild(A, F) )
%   | | then return 0.17144147434696122;  // std dev = 0,522, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( wasbornin(G, E), haschild(G, A) )
%   | | | then return 0.24434234924510712;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.023486241508527815;  // std dev = 9,393, 514,000 (wgt'ed) examples reached here.  /* #neg=401 #pos=113 */
%   | else return 0.15316549165744525;  // std dev = 59,466, 14.279,000 (wgt'ed) examples reached here.  /* #neg=7.521 #pos=6.758 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.2551722425694925;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(B, D), diedin(D, E) )
%   | then if ( diedin(F, E), haschild(A, F) )
%   | | then return 0.1357515534288808;  // std dev = 0,512, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.021019933332812078;  // std dev = 9,439, 518,000 (wgt'ed) examples reached here.  /* #neg=402 #pos=116 */
%   | else return 0.11903927659197587;  // std dev = 59,457, 14.279,000 (wgt'ed) examples reached here.  /* #neg=7.521 #pos=6.758 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then if ( haschild(B, D), diedin(D, E) )
%   | then if ( haschild(A, D) )
%   | | then if ( wasbornin(F, E), haschild(F, A) )
%   | | | then return 0.20975771563253348;  // std dev = 1,49e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20975771563253412;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else if ( wasbornin(G, E), haschild(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.20975771563253404;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0.20975771563253157;  // std dev = 8,84e-07, 747,000 (wgt'ed) examples reached here.  /* #pos=747 */
%   else if ( haschild(A, H), diedin(H, I) )
%   | then if ( diedin(J, I), haschild(B, J) )
%   | | then return 0.10648908077593452;  // std dev = 0,506, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( wasbornin(K, I), haschild(K, B) )
%   | | | then return 0.5717503773632306;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.011765709245852898;  // std dev = 10,620, 610,000 (wgt'ed) examples reached here.  /* #neg=461 #pos=149 */
%   | else return 0.09310857963302518;  // std dev = 59,216, 14.185,000 (wgt'ed) examples reached here.  /* #neg=7.462 #pos=6.723 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.17709649774527966;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(A, D), diedin(D, E) )
%   | then if ( wasbornin(F, E), haschild(F, B) )
%   | | then if ( influences(F, G), haschild(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.429778691563117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( wasbornin(H, E), haschild(H, A) )
%   | | | then return -0.04654560750349621;  // std dev = 1,693, 20,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return -0.007971532213034593;  // std dev = 10,495, 592,000 (wgt'ed) examples reached here.  /* #neg=446 #pos=146 */
%   | else if ( haschild(B, I), diedin(I, J) )
%   | | then if ( wasbornin(K, J), haschild(K, A) )
%   | | | then return 0.15586103161864676;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.003499388661224217;  // std dev = 9,068, 484,000 (wgt'ed) examples reached here.  /* #neg=379 #pos=105 */
%   | | else return 0.07363980475482407;  // std dev = 58,483, 13.697,000 (wgt'ed) examples reached here.  /* #neg=7.082 #pos=6.615 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then if ( haschild(B, D), diedin(D, E) )
%   | then if ( diedin(C, F) )
%   | | then return 0.1527438580936692;  // std dev = 1,40e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else if ( wasbornin(G, E), haschild(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809366958;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0.15274385809367094;  // std dev = 0,000, 747,000 (wgt'ed) examples reached here.  /* #pos=747 */
%   else if ( haschild(A, H), diedin(H, I) )
%   | then if ( diedin(J, I), haschild(B, J) )
%   | | then return 0.08956789076020213;  // std dev = 0,508, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return -0.006720062507245779;  // std dev = 10,629, 612,000 (wgt'ed) examples reached here.  /* #neg=461 #pos=151 */
%   | else if ( haschild(B, K), diedin(K, L) )
%   | | then if ( wasbornin(M, L), haschild(M, A) )
%   | | | then return 0.11889424051425643;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.0028986173248832423;  // std dev = 9,068, 484,000 (wgt'ed) examples reached here.  /* #neg=379 #pos=105 */
%   | | else return 0.05572393123234128;  // std dev = 58,483, 13.697,000 (wgt'ed) examples reached here.  /* #neg=7.082 #pos=6.615 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.1340070300080079;  // std dev = 7,20e-07, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(B, D), diedin(D, E) )
%   | then if ( diedin(F, E), haschild(A, F) )
%   | | then return 0.06953985135533405;  // std dev = 0,506, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( wasbornin(G, E), haschild(G, A) )
%   | | | then return 0.09167073398075543;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.002966829615661261;  // std dev = 9,399, 514,000 (wgt'ed) examples reached here.  /* #neg=401 #pos=113 */
%   | else if ( haschild(A, H), diedin(H, I) )
%   | | then return -0.010355452807465549;  // std dev = 10,335, 582,000 (wgt'ed) examples reached here.  /* #neg=439 #pos=143 */
%   | | else return 0.04203608079420492;  // std dev = 58,483, 13.697,000 (wgt'ed) examples reached here.  /* #neg=7.082 #pos=6.615 */


Results
   AUC ROC   = 0.59764
   AUC PR    = 0.642233
   CLL	      = -0.644813
   Precision = 0.999537 at threshold = 0.5
   Recall    = 0.136312
   F1        = 0.239907


Total learning time: 439.421 seconds
Total inference time: 107.148 seconds
AUC ROC: 0.59764


Structure after Parameter Learning
[['ismarriedto(A, B)', {'': 'haschild(A, C), haschild(B, C)', 'false,true': 'wasbornin(J, I), haschild(J, A)', 'true,true': 'diedin(C, F)', 'false': 'haschild(B, H), diedin(H, I)', 'false,false,true': 'wasbornin(M, L), haschild(M, A)', 'true': 'haschild(A, D), diedin(D, E)', 'true,true,false': 'wasbornin(G, E), haschild(G, B)', 'false,false': 'haschild(A, K), diedin(K, L)'}, {'true,true,false,true': [0.0, 0, 1], 'false,false,false': [58.483, 7082, 6615], 'true,false': [3.47e-06, 0, 739], 'false,true,false': [9.392, 402, 113], 'true,true,false,false': [2.6e-07, 0, 40], 'false,false,true,true': [1.333, 16, 2], 'true,true,true': [1.07e-06, 0, 269], 'false,true,true': [0.894, 1, 4], 'false,false,true,false': [10.283, 423, 141]}], ['ismarriedto(A, B)', {'': 'haschild(A, C), haschild(B, C)', 'false,true': 'diedin(J, I), haschild(A, J)', 'true,true': 'diedin(C, F)', 'false': 'haschild(B, H), diedin(H, I)', 'false,true,false': 'wasbornin(K, I), haschild(K, A)', 'true': 'haschild(B, D), diedin(D, E)', 'true,true,false': 'wasbornin(G, E), haschild(G, A)'}, {'true,true,false,true': [0.0, 0, 0], 'false,true,false,true': [0.866, 1, 3], 'true,false': [0.0, 0, 747], 'true,true,true': [0.0, 0, 269], 'true,true,false,false': [0.0, 0, 33], 'false,true,true': [0.643, 1, 1], 'false,false': [59.592, 7521, 6758], 'false,true,false,false': [9.389, 401, 113]}], ['ismarriedto(A, B)', {'': 'haschild(A, C), haschild(B, C)', 'false,true,true': 'influences(F, G), haschild(G, B)', 'false,true': 'wasbornin(F, E), haschild(F, A)', 'false': 'haschild(B, D), diedin(D, E)', 'false,true,false': 'diedin(H, E), haschild(A, H)', 'false,false': 'haschild(A, I), diedin(I, J)'}, {'false,false,true': [10.381, 439, 143], 'false,false,false': [58.483, 7082, 6615], 'false,true,false,true': [0.0, 1, 0], 'false,true,false,false': [9.389, 401, 113], 'false,true,true,false': [0.905, 1, 4], 'true': [0.0, 0, 1049], 'false,true,true,true': [0.0, 0, 0]}], ['ismarriedto(A, B)', {'': 'haschild(A, C), haschild(B, C)', 'false,true,false': 'wasbornin(G, E), haschild(G, B)', 'false,true': 'diedin(F, E), haschild(B, F)', 'false': 'haschild(A, D), diedin(D, E)'}, {'false,true,true': [0.537, 1, 1], 'true': [0.0, 0, 1049], 'false,true,false,true': [0.0, 0, 2], 'false,false': [59.279, 7462, 6723], 'false,true,false,false': [10.611, 461, 149]}], ['ismarriedto(A, B)', {'': 'haschild(A, C), haschild(B, C)', 'false,true,false': 'wasbornin(G, E), haschild(G, A)', 'false,true': 'diedin(F, E), haschild(A, F)', 'false': 'haschild(B, D), diedin(D, E)'}, {'false,true,true': [0.522, 1, 1], 'true': [0.0, 0, 1049], 'false,true,false,true': [0.866, 1, 3], 'false,false': [59.466, 7521, 6758], 'false,true,false,false': [9.393, 401, 113]}], ['ismarriedto(A, B)', {'': 'haschild(A, C), haschild(B, C)', 'false,true': 'diedin(F, E), haschild(A, F)', 'false': 'haschild(B, D), diedin(D, E)'}, {'false,true,false': [9.439, 402, 116], 'false,true,true': [0.512, 1, 1], 'true': [0.0, 0, 1049], 'false,false': [59.457, 7521, 6758]}], ['ismarriedto(A, B)', {'': 'haschild(A, C), haschild(B, C)', 'false,true': 'diedin(J, I), haschild(B, J)', 'true,true': 'haschild(A, D)', 'false': 'haschild(A, H), diedin(H, I)', 'false,true,false': 'wasbornin(K, I), haschild(K, B)', 'true,true,false': 'wasbornin(G, E), haschild(G, B)', 'true': 'haschild(B, D), diedin(D, E)', 'true,true,true': 'wasbornin(F, E), haschild(F, A)'}, {'false,true,true': [0.506, 1, 1], 'false,true,false,true': [0.0, 0, 2], 'true,false': [8.84e-07, 0, 747], 'true,true,true,true': [1.49e-08, 0, 10], 'false,true,false,false': [10.62, 461, 149], 'true,true,false,false': [0.0, 0, 33], 'true,true,false,true': [0.0, 0, 0], 'false,false': [59.216, 7462, 6723], 'true,true,true,false': [0.0, 0, 259]}], ['ismarriedto(A, B)', {'': 'haschild(A, C), haschild(B, C)', 'false,true,true': 'influences(F, G), haschild(G, A)', 'false,true': 'wasbornin(F, E), haschild(F, B)', 'false': 'haschild(A, D), diedin(D, E)', 'false,true,false': 'wasbornin(H, E), haschild(H, A)', 'false,false,true': 'wasbornin(K, J), haschild(K, A)', 'false,false': 'haschild(B, I), diedin(I, J)'}, {'false,false,false': [58.483, 7082, 6615], 'false,true,false,false': [10.495, 446, 146], 'false,true,false,true': [1.693, 16, 4], 'false,false,true,true': [0.866, 1, 3], 'false,true,true,false': [0.0, 0, 2], 'true': [0.0, 0, 1049], 'false,false,true,false': [9.068, 379, 105], 'false,true,true,true': [0.0, 0, 0]}], ['ismarriedto(A, B)', {'': 'haschild(A, C), haschild(B, C)', 'false,true': 'diedin(J, I), haschild(B, J)', 'true,true': 'diedin(C, F)', 'false': 'haschild(A, H), diedin(H, I)', 'false,false,true': 'wasbornin(M, L), haschild(M, A)', 'true': 'haschild(B, D), diedin(D, E)', 'true,true,false': 'wasbornin(G, E), haschild(G, A)', 'false,false': 'haschild(B, K), diedin(K, L)'}, {'true,true,false,true': [0.0, 0, 0], 'false,false,false': [58.483, 7082, 6615], 'true,false': [0.0, 0, 747], 'false,true,false': [10.629, 461, 151], 'true,true,false,false': [0.0, 0, 33], 'false,false,true,true': [0.866, 1, 3], 'true,true,true': [1.4e-07, 0, 269], 'false,true,true': [0.508, 1, 1], 'false,false,true,false': [9.068, 379, 105]}], ['ismarriedto(A, B)', {'': 'haschild(A, C), haschild(B, C)', 'false,true,false': 'wasbornin(G, E), haschild(G, A)', 'false,true': 'diedin(F, E), haschild(A, F)', 'false,false': 'haschild(A, H), diedin(H, I)', 'false': 'haschild(B, D), diedin(D, E)'}, {'false,true,true': [0.506, 1, 1], 'false,false,true': [10.335, 439, 143], 'false,false,false': [58.483, 7082, 6615], 'false,true,false,true': [0.866, 1, 3], 'true': [7.2e-07, 0, 1049], 'false,true,false,false': [9.399, 401, 113]}]]
[{'': [1.983288017450499e-14, 0.24874389413102824], 'false,true': [0.15999999999999986, 0.1712734470732409], 'true,true': [4.226276495227362e-15, 1.4730764034050857e-15], 'false': [0.17437500000000147, 0.24928617213418705], 'false,false,true': [0.09876543209876548, 0.18750000000000186], 'true,true,false': [0.0, 1.6875389974302379e-15], 'true': [3.4839514785656523e-15, 1.63069077110843e-14], 'false,false': [0.1853337820762648, 0.24970938176643093]}, {'': [-6.394207269375926e-15, 0.2476013476115893], 'false,true': [0.20683271713492132, 0.17311790565888371], 'true,true': [-4.5432472323694135e-15, -2.153159805333637e-16], 'false': [0.17345299561354321, 0.24870079222329547], 'false,true,false': [0.1875, 0.17151281624248957], 'true,true,false': [nan, -2.153159805333637e-16], 'true': [-4.799692652154319e-15, -6.163744213822556e-15]}, {'': [-8.344982368507563e-15, 0.24698367872844257], 'false,true,true': [nan, 0.16390670995565687], 'false,true': [0.16390670995565687, 0.17130489263008872], 'false': [0.17278435469314132, 0.24859861867235783], 'false,true,false': [0.0, 0.17151281624248138], 'false,false': [0.1851718684416435, 0.2497093817667228]}, {'': [-2.763598057103154e-15, 0.24603876143129985], 'false,true,false': [0.0, 0.18457958733804214], 'false,true': [0.14402619992997645, 0.18582487446006363], 'false': [0.18578162990737945, 0.2477224218001406]}, {'': [-6.63805415676738e-16, 0.24554766810103004], 'false,true,false': [0.1875, 0.17166800402211693], 'false,true': [0.1362905809173496, 0.17216400986525238], 'false': [0.17210798411103334, 0.24765171995516208]}, {'': [-2.3571865781173962e-15, 0.2452398483360228], 'false,true': [0.13111264902498793, 0.1719987921894636], 'false': [0.17189197131729722, 0.24757640541713175]}, {'': [2.4384688739145477e-15, 0.245049595863625], 'false,true': [0.12779333102632098, 0.18538418544935187], 'true,true': [-1.1226046940447679e-16, -8.7472117091679e-17], 'false': [0.18524054336343485, 0.24720179133197487], 'false,true,false': [0.0, 0.18487928668830347], 'true,true,false': [nan, -8.7472117091679e-17], 'true,true,true': [2.2204460492503132e-17, -1.0973632984711972e-16], 'true': [-9.999359691988165e-17, 1.0463146041982734e-15]}, {'': [-1.0973109932615465e-15, 0.2448229715565229], 'false,true,true': [nan, 0.0], 'false,true': [0.0, 0.18470992454063812], 'false': [0.1847340052704534, 0.24716609050597418], 'false,true,false': [0.14327658279786873, 0.1860610734791067], 'false,false,true': [0.1875, 0.16987825285158462], 'false,false': [0.17022914898984645, 0.24970938176674115]}, {'': [5.45268734305892e-16, 0.24462810830808687], 'false,true': [0.12926299686289558, 0.18460981492456854], 'true,true': [7.263912726172028e-17, -1.0092936587501423e-17], 'false': [0.18445963366066195, 0.24708241152115792], 'false,false,true': [0.1875, 0.16987825285157954], 'true,true,false': [nan, -1.0092936587501423e-17], 'true': [-5.881976289404803e-18, -2.806025529440824e-16], 'false,false': [0.17014328286224786, 0.24970938176680343]}, {'': [4.944672994326722e-16, 0.2445200835031614], 'false,true,false': [0.1875, 0.17185785105180593], 'false,true': [0.12781697395218442, 0.17203893037139084], 'false': [0.17188547876212332, 0.24711969968518616], 'false,false': [0.18354018416514012, 0.24970938176672347]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true', '0;true,true;diedin(C, F).;true;true', '0;true;haschild(A, D), diedin(D, E).;true;true', '0;true,true,false;wasbornin(G, E), haschild(G, B).;true;true', '1;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true', '1;true,true;diedin(C, F).;true;true', '1;true;haschild(B, D), diedin(D, E).;true;true', '2;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true', '2;false,true,false;diedin(H, E), haschild(A, H).;true;true', '2;false,true;wasbornin(F, E), haschild(F, A).;true;true', '2;false;haschild(B, D), diedin(D, E).;true;true', '3;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true', '3;false,true,false;wasbornin(G, E), haschild(G, B).;true;true', '3;false,true;diedin(F, E), haschild(B, F).;true;true', '3;false;haschild(A, D), diedin(D, E).;true;true', '4;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true', '5;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true', '6;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true', '6;false,true;diedin(J, I), haschild(B, J).;true;true', '6;false;haschild(A, H), diedin(H, I).;true;true', '6;true,true;haschild(A, D).;true;true', '6;false,true,false;wasbornin(K, I), haschild(K, B).;true;true', '6;true,true,true;wasbornin(F, E), haschild(F, A).;true;true', '6;true;haschild(B, D), diedin(D, E).;true;true', '7;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true', '7;false,true;wasbornin(F, E), haschild(F, B).;true;true', '7;false;haschild(A, D), diedin(D, E).;true;true', '8;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true', '8;true,true;diedin(C, F).;true;true', '8;true;haschild(B, D), diedin(D, E).;true;true', '9;;ismarriedto(A, B) :- haschild(A, C), haschild(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.8581489350995075;  // std dev = 1,41e-07, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(A, D) )
%   | then if ( actedin(B, E), haschild(D, F) )
%   | | then if ( diedin(B, G), isleaderof(H, G) )
%   | | | then return 0.024815601766178884;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return -0.14185106490048804;  // std dev = 0,000, 154,000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else if ( haschild(I, B), haschild(J, A) )
%   | | | then return 0.3196873966379702;  // std dev = 8,237, 273,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=126 */
%   | | | else return 0.1223721298478669;  // std dev = 18,852, 1.828,000 (wgt'ed) examples reached here.  /* #neg=1.345 #pos=483 */
%   | else if ( actedin(B, K), actedin(A, L) )
%   | | then if ( directed(M, K), directed(M, L) )
%   | | | then return 0.8413422124104333;  // std dev = 1,983, 238,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=234 */
%   | | | else return 0.5070593467217841;  // std dev = 13,718, 826,000 (wgt'ed) examples reached here.  /* #neg=290 #pos=536 */
%   | | else if ( haschild(B, N) )
%   | | | then return 0.14151273765892233;  // std dev = 18,255, 1.641,000 (wgt'ed) examples reached here.  /* #neg=1.176 #pos=465 */
%   | | | else return 0.3701130935355948;  // std dev = 49,536, 9.821,000 (wgt'ed) examples reached here.  /* #neg=4.793 #pos=5.028 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.7194734122109588;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(A, D) )
%   | then if ( haschild(D, E), actedin(B, F) )
%   | | then if ( diedin(B, G), diedin(A, H) )
%   | | | then return 0.08380815439658448;  // std dev = 1,237, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.12074187611949824;  // std dev = 0,981, 163,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=1 */
%   | | else if ( haschild(I, B), haschild(D, J) )
%   | | | then return 0.28861232511999346;  // std dev = 7,751, 242,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=113 */
%   | | | else return 0.10801605437950637;  // std dev = 19,052, 1.859,000 (wgt'ed) examples reached here.  /* #neg=1.363 #pos=496 */
%   | else if ( haschild(B, K) )
%   | | then if ( haschild(L, A) )
%   | | | then return 0.37803596587080845;  // std dev = 8,360, 283,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=153 */
%   | | | else return 0.08491880738943094;  // std dev = 16,221, 1.428,000 (wgt'ed) examples reached here.  /* #neg=1.074 #pos=354 */
%   | | else if ( actedin(B, M), directed(A, M) )
%   | | | then return 0.7863852285103914;  // std dev = 0,283, 68,000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.33296127866714353;  // std dev = 51,568, 10.747,000 (wgt'ed) examples reached here.  /* #neg=5.059 #pos=5.688 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.5553664367462899;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(B, D), diedin(D, E) )
%   | then if ( wasbornin(F, E), haschild(F, A) )
%   | | then return 0.5855714582624805;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( diedin(G, E), haschild(A, G) )
%   | | | then return -0.17227173750605804;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.03781817636063694;  // std dev = 9,254, 514,000 (wgt'ed) examples reached here.  /* #neg=401 #pos=113 */
%   | else if ( haschild(A, H) )
%   | | then if ( haschild(I, B) )
%   | | | then return 0.2149327580069078;  // std dev = 10,077, 425,000 (wgt'ed) examples reached here.  /* #neg=247 #pos=178 */
%   | | | else return 0.07237920791347767;  // std dev = 17,768, 1.754,000 (wgt'ed) examples reached here.  /* #neg=1.334 #pos=420 */
%   | | else if ( haschild(J, B), wasbornin(A, K) )
%   | | | then return 0.1054555242077144;  // std dev = 9,104, 394,000 (wgt'ed) examples reached here.  /* #neg=263 #pos=131 */
%   | | | else return 0.26717809746095167;  // std dev = 53,539, 11.706,000 (wgt'ed) examples reached here.  /* #neg=5.677 #pos=6.029 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.4175135841583132;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(A, D), diedin(D, E) )
%   | then if ( diedin(F, E), haschild(B, F) )
%   | | then return 0.2690269328028776;  // std dev = 0,591, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( wasbornin(G, E), haschild(G, B) )
%   | | | then return 0.7793878748931934;  // std dev = 0,022, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.050741413891122515;  // std dev = 10,346, 610,000 (wgt'ed) examples reached here.  /* #neg=461 #pos=149 */
%   | else if ( haschild(B, H) )
%   | | then if ( haschild(I, A), haschild(J, B) )
%   | | | then return 0.2921866625897763;  // std dev = 7,430, 223,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=121 */
%   | | | else return 0.03939848527227732;  // std dev = 17,873, 1.773,000 (wgt'ed) examples reached here.  /* #neg=1.335 #pos=438 */
%   | | else if ( haschild(K, A), actedin(B, L) )
%   | | | then return -0.04028188232873677;  // std dev = 6,366, 272,000 (wgt'ed) examples reached here.  /* #neg=214 #pos=58 */
%   | | | else return 0.21731100451245555;  // std dev = 53,841, 11.917,000 (wgt'ed) examples reached here.  /* #neg=5.811 #pos=6.106 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.32071184716015133;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(A, D) )
%   | then if ( haschild(B, E) )
%   | | then if ( livesin(E, F), livesin(D, F) )
%   | | | then return 0.5858540892695311;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.039888019577914706;  // std dev = 7,426, 390,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=70 */
%   | | else if ( diedin(B, G), diedin(A, G) )
%   | | | then return 0.7815526636016127;  // std dev = 0,112, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.06906051202507386;  // std dev = 19,043, 1.866,000 (wgt'ed) examples reached here.  /* #neg=1.340 #pos=526 */
%   | else if ( isaffiliatedto(B, H), isaffiliatedto(A, I) )
%   | | then if ( isaffiliatedto(A, H) )
%   | | | then return 0.6314206866826272;  // std dev = 1,733, 156,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=153 */
%   | | | else return 0.1395534213136743;  // std dev = 4,851, 96,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=46 */
%   | | else if ( actedin(B, J), actedin(A, K) )
%   | | | then return 0.32934283637384043;  // std dev = 14,192, 1.064,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=770 */
%   | | | else return 0.14047256762035296;  // std dev = 52,096, 11.210,000 (wgt'ed) examples reached here.  /* #neg=5.916 #pos=5.294 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.2551722425694925;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(B, D) )
%   | then if ( haschild(E, A), haschild(F, B) )
%   | | then if ( haschild(A, G) )
%   | | | then return 0.030680268484758973;  // std dev = 4,697, 104,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=33 */
%   | | | else return 0.2870929278761092;  // std dev = 6,084, 158,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=99 */
%   | | else if ( haschild(D, H), actedin(A, I) )
%   | | | then return -0.1913423401039958;  // std dev = 2,050, 154,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=6 */
%   | | | else return 0.02650990358298027;  // std dev = 17,723, 1.690,000 (wgt'ed) examples reached here.  /* #neg=1.247 #pos=443 */
%   | else if ( wasbornin(A, J), wasbornin(B, J) )
%   | | then if ( actedin(B, K), haswonprize(A, L) )
%   | | | then return 0.2938455404313186;  // std dev = 0,800, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5680321408414213;  // std dev = 1,466, 77,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else if ( directed(B, M), actedin(A, N) )
%   | | | then return 0.32066442126862604;  // std dev = 7,607, 296,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=218 */
%   | | | else return 0.11954454212527373;  // std dev = 53,997, 12.316,000 (wgt'ed) examples reached here.  /* #neg=6.318 #pos=5.998 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then if ( haschild(B, D), diedin(D, E) )
%   | then return 0.20975771563253395;  // std dev = 0,000, 302,000 (wgt'ed) examples reached here.  /* #pos=302 */
%   | else return 0.20975771563253157;  // std dev = 8,88e-07, 747,000 (wgt'ed) examples reached here.  /* #pos=747 */
%   else if ( haschild(A, F), diedin(F, G) )
%   | then if ( diedin(H, G), haschild(B, H) )
%   | | then return 0.23741447012067982;  // std dev = 0,553, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( wasbornin(I, G), haschild(I, B) )
%   | | | then return 0.5734127872426068;  // std dev = 0,031, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.016016764907835823;  // std dev = 10,249, 610,000 (wgt'ed) examples reached here.  /* #neg=461 #pos=149 */
%   | else if ( haswonprize(B, J), haswonprize(A, J) )
%   | | then if ( actedin(A, K), actedin(B, L) )
%   | | | then return 0.44899414573109975;  // std dev = 0,267, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.5921993221183018;  // std dev = 0,479, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( haschild(B, M) )
%   | | | then return 0.024730629299231203;  // std dev = 19,225, 1.993,000 (wgt'ed) examples reached here.  /* #neg=1.437 #pos=556 */
%   | | | else return 0.09781204247116179;  // std dev = 53,688, 12.115,000 (wgt'ed) examples reached here.  /* #neg=6.025 #pos=6.090 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.17709649774527966;  // std dev = 0,000, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(A, D), diedin(D, E) )
%   | then if ( wasbornin(F, E), haschild(F, B) )
%   | | then return 0.43132077762323356;  // std dev = 0,031, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( haschild(G, B) )
%   | | | then return 0.1309230416464646;  // std dev = 6,051, 160,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=67 */
%   | | | else return -0.027650638018496446;  // std dev = 8,109, 452,000 (wgt'ed) examples reached here.  /* #neg=369 #pos=83 */
%   | else if ( actedin(A, H), haschild(I, B) )
%   | | then if ( haschild(J, I) )
%   | | | then return -0.25957929508555905;  // std dev = 2,556, 187,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=7 */
%   | | | else return -0.024196419046479314;  // std dev = 5,352, 155,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=59 */
%   | | else if ( iscitizenof(B, K), iscitizenof(A, K) )
%   | | | then return 0.5054707137915623;  // std dev = 1,461, 102,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | | | else return 0.07097525181504429;  // std dev = 56,454, 13.741,000 (wgt'ed) examples reached here.  /* #neg=7.184 #pos=6.557 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.1527438580936683;  // std dev = 2,33e-08, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( diedin(B, D), diedin(A, D) )
%   | then if ( actedin(A, E), wrotemusicfor(F, E) )
%   | | then if ( diedin(F, G), hasmusicalrole(F, H) )
%   | | | then return 0.2221749955384377;  // std dev = 0,519, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4511334176125659;  // std dev = 0,336, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( haschild(B, I) )
%   | | | then return 0.7245486836151805;  // std dev = 0,095, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5287826826862073;  // std dev = 0,440, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( haschild(J, A), haschild(K, B) )
%   | | then if ( haschild(L, J), haschild(M, K) )
%   | | | then return 0.29229902275330344;  // std dev = 7,894, 312,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=215 */
%   | | | else return 0.08922247042410227;  // std dev = 8,726, 329,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=160 */
%   | | else if ( isaffiliatedto(B, N), isaffiliatedto(A, N) )
%   | | | then return 0.3871284128070783;  // std dev = 2,203, 161,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | | | else return 0.03681828683307436;  // std dev = 56,082, 13.890,000 (wgt'ed) examples reached here.  /* #neg=7.652 #pos=6.238 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.13400703000800793;  // std dev = 7,23e-07, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( actedin(A, D), actedin(B, E) )
%   | then if ( actedin(A, E) )
%   | | then if ( directed(F, E), actedin(F, G) )
%   | | | then return 0.33971499362406116;  // std dev = 1,076, 49,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.41626791311364225;  // std dev = 1,234, 156,000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( directed(H, D), directed(H, E) )
%   | | | then return 0.38374474776733275;  // std dev = 2,190, 84,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=81 */
%   | | | else return 0.10252017095757428;  // std dev = 13,863, 845,000 (wgt'ed) examples reached here.  /* #neg=315 #pos=530 */
%   | else if ( actedin(B, I), haschild(J, A) )
%   | | then if ( directed(J, K), actedin(L, K) )
%   | | | then return 0.5997459604225872;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.2225809054122056;  // std dev = 3,887, 300,000 (wgt'ed) examples reached here.  /* #neg=284 #pos=16 */
%   | | else if ( actedin(A, M) )
%   | | | then return -0.050818122119444635;  // std dev = 21,323, 2.153,000 (wgt'ed) examples reached here.  /* #neg=1.358 #pos=795 */
%   | | | else return 0.0488543097300033;  // std dev = 50,745, 11.208,000 (wgt'ed) examples reached here.  /* #neg=5.963 #pos=5.245 */


Results
   AUC ROC   = 0.724376
   AUC PR    = 0.75416
   CLL	      = -0.603956
   Precision = 0.869035 at threshold = 0.5
   Recall    = 0.310299
   F1        = 0.45731


Total learning time: 530.133 seconds
Total inference time: 70.208 seconds
AUC ROC: 0.724376


Refined model AUC ROC: 0.724376


Dataset: 15_cora_yago2s, Fold: 2, Type: transfer, Time: 08:52:19
{'Learning time': 969.5540000000001, 'Inference time': 70.208, 'AUC PR': 0.75416, 'F1': 0.45731, 'Recall': 0.310299, 'Parameter Learning results': {'Learning time': 439.421, 'Inference time': 107.148, 'AUC PR': 0.642233, 'F1': 0.239907, 'Recall': 0.136312, 'AUC ROC': 0.59764, 'CLL': -0.644813, 'Precision': [0.999537, 0.5]}, 'AUC ROC': 0.724376, 'Mapping results': {'Knowledge compiling time': 24.369903087615967, 'Generating mappings time': 106.4520263671875, 'Possible mappings': 441488, 'Finding best mapping': 180.66451048851013, 'Total time': 314.35610365867615, 'Generating paths time': 2.8696560859680176}, 'CLL': -0.603956, 'Precision': [0.869035, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), actedin(A, D) )
%   then if ( directed(E, C), directed(E, D) )
%   | then return 0.844064428057255;  // std dev = 0,118, 284,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=280 */
%   | else if ( wrotemusicfor(F, C), wrotemusicfor(F, D) )
%   | | then return 0.7438632208137985;  // std dev = 0,318, 70,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=62 */
%   | | else if ( created(G, D), wrotemusicfor(H, C) )
%   | | | then return 0.445625914841681;  // std dev = 11,471, 543,000 (wgt'ed) examples reached here.  /* #neg=224 #pos=319 */
%   | | | else return 0.5617203636709387;  // std dev = 7,642, 280,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=197 */
%   else if ( haschild(B, I), haschild(A, I) )
%   | then return 0.8581489350995075;  // std dev = 4,42e-06, 1.006,000 (wgt'ed) examples reached here.  /* #pos=1.006 */
%   | else if ( haschild(A, J) )
%   | | then if ( haschild(K, B), haschild(L, A) )
%   | | | then return 0.3081489350995086;  // std dev = 8,325, 280,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=126 */
%   | | | else return 0.08747810826643466;  // std dev = 18,435, 1.923,000 (wgt'ed) examples reached here.  /* #neg=1.482 #pos=441 */
%   | | else if ( haschild(B, M) )
%   | | | then return 0.14151273765892233;  // std dev = 18,255, 1.641,000 (wgt'ed) examples reached here.  /* #neg=1.176 #pos=465 */
%   | | | else return 0.3701130935355948;  // std dev = 49,536, 9.821,000 (wgt'ed) examples reached here.  /* #neg=4.793 #pos=5.028 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, D) )
%   then if ( haschild(A, C) )
%   | then return 0.72062153751154;  // std dev = 0,267, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   | else if ( wasbornin(D, E) )
%   | | then return -0.047006257031514655;  // std dev = 0,315, 129,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=15 */
%   | | else return 0.06073150897621946;  // std dev = 0,413, 266,000 (wgt'ed) examples reached here.  /* #neg=207 #pos=59 */
%   else if ( actedin(B, F), actedin(A, G) )
%   | then if ( directed(H, F), directed(H, G) )
%   | | then return 0.7069226860073798;  // std dev = 0,123, 260,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=256 */
%   | | else if ( created(I, G), created(I, F) )
%   | | | then return 0.717995999154029;  // std dev = 1,387, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.4124532920529557;  // std dev = 13,878, 831,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=521 */
%   | else if ( actedin(B, J), haschild(K, A) )
%   | | then return -0.10137510071291117;  // std dev = 0,251, 289,000 (wgt'ed) examples reached here.  /* #neg=269 #pos=20 */
%   | | else if ( haschild(B, L) )
%   | | | then return 0.12417445182416154;  // std dev = 18,225, 1.633,000 (wgt'ed) examples reached here.  /* #neg=1.169 #pos=464 */
%   | | | else return 0.2970454472118365;  // std dev = 53,026, 11.352,000 (wgt'ed) examples reached here.  /* #neg=5.849 #pos=5.503 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, D) )
%   then return 0.410326994135216;  // std dev = 0,313, 1.444,000 (wgt'ed) examples reached here.  /* #neg=321 #pos=1.123 */
%   else if ( haschild(A, E) )
%   | then if ( haschild(F, B) )
%   | | then if ( actedin(B, G) )
%   | | | then return -0.05049900018069954;  // std dev = 1,325, 19,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return 0.3112566920021139;  // std dev = 8,247, 274,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=145 */
%   | | else if ( wasbornin(B, H), haschild(I, A) )
%   | | | then return -0.08131194510830043;  // std dev = 4,289, 219,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=22 */
%   | | | else return 0.07106621518485468;  // std dev = 16,108, 1.366,000 (wgt'ed) examples reached here.  /* #neg=998 #pos=368 */
%   | else if ( haschild(J, B), actedin(A, K) )
%   | | then if ( actedin(B, L) )
%   | | | then return 0.2977563514947695;  // std dev = 3,632, 63,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=40 */
%   | | | else return -0.12064466405163084;  // std dev = 4,351, 250,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=22 */
%   | | else if ( haschild(B, M) )
%   | | | then return 0.1369759038733514;  // std dev = 18,301, 1.568,000 (wgt'ed) examples reached here.  /* #neg=1.066 #pos=502 */
%   | | | else return 0.28515503795385;  // std dev = 51,015, 10.645,000 (wgt'ed) examples reached here.  /* #neg=4.946 #pos=5.699 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), actedin(B, D) )
%   then if ( actedin(A, D) )
%   | then return 0.5012523822876997;  // std dev = 0,077, 227,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=226 */
%   | else if ( isaffiliatedto(B, E), wrotemusicfor(F, C) )
%   | | then return -0.19488568518604166;  // std dev = 0,917, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( directed(G, C), directed(G, D) )
%   | | | then return 0.46595473597964626;  // std dev = 1,741, 88,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | | else return 0.2832166142468774;  // std dev = 13,873, 856,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=546 */
%   else if ( haschild(H, B), haschild(I, A) )
%   | then if ( haschild(J, H), haschild(K, I) )
%   | | then return 0.4392174751039531;  // std dev = 0,345, 552,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=455 */
%   | | else return 0.2893901769660774;  // std dev = 0,436, 445,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=279 */
%   | else if ( haschild(B, L), haschild(A, L) )
%   | | then return 0.4528660005620023;  // std dev = 9,68e-07, 650,000 (wgt'ed) examples reached here.  /* #pos=650 */
%   | | else if ( haschild(A, M) )
%   | | | then return 0.025599418070194557;  // std dev = 18,273, 1.923,000 (wgt'ed) examples reached here.  /* #neg=1.482 #pos=441 */
%   | | | else return 0.18779096687527438;  // std dev = 51,944, 11.101,000 (wgt'ed) examples reached here.  /* #neg=5.860 #pos=5.241 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( isaffiliatedto(B, C), isaffiliatedto(A, D) )
%   then if ( iscitizenof(A, E), iscitizenof(B, E) )
%   | then return 0.6417683437103539;  // std dev = 0,072, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( haschild(B, F) )
%   | | then return 0.2584927696959449;  // std dev = 0,308, 41,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else if ( isaffiliatedto(A, C) )
%   | | | then return 0.6274234422612078;  // std dev = 2,111, 132,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=127 */
%   | | | else return 0.13399237278684348;  // std dev = 4,667, 88,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=41 */
%   else if ( haschild(B, G), haschild(A, G) )
%   | then return 0.35185695907098374;  // std dev = 0,616, 1.021,000 (wgt'ed) examples reached here.  /* #pos=1.021 */
%   | else if ( actedin(A, H), actedin(B, I) )
%   | | then if ( actedin(A, I) )
%   | | | then return 0.3829851314663371;  // std dev = 1,143, 205,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=204 */
%   | | | else return 0.22174798222243375;  // std dev = 14,049, 929,000 (wgt'ed) examples reached here.  /* #neg=318 #pos=611 */
%   | | else if ( haschild(B, J) )
%   | | | then return 0.030446813048319785;  // std dev = 19,609, 2.017,000 (wgt'ed) examples reached here.  /* #neg=1.484 #pos=533 */
%   | | | else return 0.14676207957387297;  // std dev = 52,286, 11.379,000 (wgt'ed) examples reached here.  /* #neg=6.059 #pos=5.320 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.2767030554426204;  // std dev = 0,569, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( haschild(A, D) )
%   | then if ( haschild(B, E) )
%   | | then if ( livesin(E, F), ispoliticianof(G, F) )
%   | | | then return 0.39682949333353207;  // std dev = 1,561, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.08674249440861541;  // std dev = 7,239, 384,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=67 */
%   | | else if ( actedin(B, H) )
%   | | | then return -0.0899973344635163;  // std dev = 5,794, 382,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=62 */
%   | | | else return 0.06129795010845949;  // std dev = 17,639, 1.496,000 (wgt'ed) examples reached here.  /* #neg=1.020 #pos=476 */
%   | else if ( haschild(I, B), haschild(J, A) )
%   | | then if ( haschild(K, J), haschild(L, I) )
%   | | | then return 0.45848095974342484;  // std dev = 4,748, 172,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=142 */
%   | | | else return 0.2447783138920047;  // std dev = 6,860, 195,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=113 */
%   | | else if ( isaffiliatedto(B, M), isaffiliatedto(A, M) )
%   | | | then return 0.4907305094675261;  // std dev = 1,745, 154,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=151 */
%   | | | else return 0.1189668362929536;  // std dev = 53,252, 12.005,000 (wgt'ed) examples reached here.  /* #neg=6.148 #pos=5.857 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( actedin(A, C), haschild(D, B) )
%   then if ( actedin(D, E), directed(F, C) )
%   | then if ( wasbornin(B, G), wrotemusicfor(H, C) )
%   | | then return 0.37354712651696864;  // std dev = 0,212, 23,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( haswonprize(D, I), created(D, J) )
%   | | | then return -0.4792430373407387;  // std dev = 0,210, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.20762612098588576;  // std dev = 1,825, 18,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | else return -0.17234728334192126;  // std dev = 0,278, 305,000 (wgt'ed) examples reached here.  /* #neg=267 #pos=38 */
%   else if ( haschild(A, K), haschild(B, K) )
%   | then return 0.2246057585350083;  // std dev = 0,471, 1.043,000 (wgt'ed) examples reached here.  /* #pos=1.043 */
%   | else if ( haschild(B, L), wasbornin(A, M) )
%   | | then if ( haschild(N, A) )
%   | | | then return 0.10312465959771742;  // std dev = 4,893, 107,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=43 */
%   | | | else return -0.11958847058547073;  // std dev = 6,642, 380,000 (wgt'ed) examples reached here.  /* #neg=322 #pos=58 */
%   | | else if ( created(A, P), created(B, P) )
%   | | | then return 0.5965099537110002;  // std dev = 0,420, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | | else return 0.09415152019909938;  // std dev = 56,543, 13.889,000 (wgt'ed) examples reached here.  /* #neg=7.259 #pos=6.630 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), directed(A, D) )
%   then if ( actedin(B, D) )
%   | then return 0.4774550131562792;  // std dev = 0,144, 79,000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( wrotemusicfor(E, C), created(A, F) )
%   | | then if ( diedin(E, G), wasbornin(B, H) )
%   | | | then return 0.32644809611268544;  // std dev = 1,620, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.06516377910846262;  // std dev = 4,240, 85,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=47 */
%   | | else return 0.2554085618818252;  // std dev = 0,425, 140,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=106 */
%   else if ( actedin(B, I), haschild(J, A) )
%   | then return -0.1287674963081648;  // std dev = 0,295, 357,000 (wgt'ed) examples reached here.  /* #neg=298 #pos=59 */
%   | else if ( actedin(A, K), directed(B, L) )
%   | | then if ( actedin(B, M), created(N, K) )
%   | | | then return 0.10103703572363514;  // std dev = 4,212, 103,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=71 */
%   | | | else return 0.32106132842332363;  // std dev = 6,179, 212,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=160 */
%   | | else if ( actedin(A, P) )
%   | | | then return 0.01577758543269113;  // std dev = 23,980, 2.840,000 (wgt'ed) examples reached here.  /* #neg=1.547 #pos=1.293 */
%   | | | else return 0.08426529845064895;  // std dev = 50,756, 12.014,000 (wgt'ed) examples reached here.  /* #neg=5.920 #pos=6.094 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.17586887976897064;  // std dev = 0,517, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( actedin(A, D), isaffiliatedto(B, E) )
%   | then if ( wrotemusicfor(F, D), haswonprize(F, G) )
%   | | then if ( created(H, D) )
%   | | | then return -0.35912059518529005;  // std dev = 1,618, 74,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=3 */
%   | | | else return -0.16059381318506272;  // std dev = 1,202, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( ispoliticianof(B, I), wasbornin(B, J) )
%   | | | then return 0.3582275941686091;  // std dev = 0,736, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.15700479971383224;  // std dev = 4,181, 97,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */
%   | else if ( haschild(A, K) )
%   | | then if ( haschild(K, L), wasbornin(B, M) )
%   | | | then return -0.13846673402381596;  // std dev = 5,089, 282,000 (wgt'ed) examples reached here.  /* #neg=245 #pos=37 */
%   | | | else return -0.002972776627580639;  // std dev = 19,263, 1.976,000 (wgt'ed) examples reached here.  /* #neg=1.403 #pos=573 */
%   | | else if ( actedin(A, N), haschild(P, B) )
%   | | | then return -0.10602646888138371;  // std dev = 5,534, 307,000 (wgt'ed) examples reached here.  /* #neg=245 #pos=62 */
%   | | | else return 0.06970727194341697;  // std dev = 52,999, 12.051,000 (wgt'ed) examples reached here.  /* #neg=5.880 #pos=6.171 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.15185004236319116;  // std dev = 0,466, 1.049,000 (wgt'ed) examples reached here.  /* #pos=1.049 */
%   else if ( actedin(A, D), actedin(B, E) )
%   | then if ( directed(F, D), directed(F, E) )
%   | | then if ( actedin(F, G), wasbornin(A, H) )
%   | | | then return 0.18657518862505282;  // std dev = 1,351, 40,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.23882784744255642;  // std dev = 1,481, 221,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=219 */
%   | | else if ( created(I, D), created(I, E) )
%   | | | then return 0.30371482927682575;  // std dev = 1,155, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.08007749277429996;  // std dev = 13,682, 834,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=521 */
%   | else if ( actedin(A, J), haschild(B, K) )
%   | | then if ( actedin(K, L) )
%   | | | then return 0.11327535827887457;  // std dev = 2,189, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return -0.17063289944367852;  // std dev = 3,733, 299,000 (wgt'ed) examples reached here.  /* #neg=283 #pos=16 */
%   | | else if ( iscitizenof(B, M), iscitizenof(A, N) )
%   | | | then return 0.36611374806356417;  // std dev = 3,628, 132,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=116 */
%   | | | else return 0.030560984851943633;  // std dev = 54,948, 13.213,000 (wgt'ed) examples reached here.  /* #neg=7.293 #pos=5.920 */


Results
   AUC ROC   = 0.722551
   AUC PR    = 0.750208
   CLL	      = -0.601183
   Precision = 0.85136 at threshold = 0.5
   Recall    = 0.319891
   F1        = 0.465046


Total learning time: 671.12 seconds
Total inference time: 78.971 seconds
AUC ROC: 0.722551


Dataset: 15_cora_yago2s, Fold: 2, Type: scratch, Time: 09:04:53
{'Learning time': 671.12, 'Inference time': 78.971, 'AUC PR': 0.750208, 'F1': 0.465046, 'Recall': 0.319891, 'AUC ROC': 0.722551, 'CLL': -0.601183, 'Precision': [0.85136, 0.5]}


Starting fold 3

Mapping Results
   Knowledge compiling time   = 25.05101704597473
   Generating paths time   = 2.8594417572021484
   Generating mappings time   = 106.43333625793457
   Possible mappings   = 441488
   Finding best mapping   = 180.08966970443726
   Total time   = 314.4334738254547


Best mapping found: ['samevenue(A,B) -> ismarriedto(A,B)', 'samebib(A,B) -> influences(A,B)', 'author(A,B) -> created(A,B)', 'haswordauthor(A,B) -> actedin(B,A)', 'venue(A,B) -> haschild(B,A)', 'haswordvenue(A,B) -> haschild(B,A)'] 

Transferred target predicate: ismarriedto 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true
0;false,true;created(J, I), haschild(A, J).;false;false
0;false;haschild(H, B), actedin(H, I).;true;true
0;true,true;actedin(C, F).;false;true
0;false,false,true;created(M, L), haschild(A, M).;false;false
0;true,true,false;created(G, E), haschild(B, G).;false;false
0;true;haschild(D, A), actedin(D, E).;true;false
0;false,false;haschild(K, A), actedin(K, L).;true;false
1;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true
1;false,true;actedin(J, I), haschild(J, A).;false;true
1;false;haschild(H, B), actedin(H, I).;true;false
1;true,true;actedin(C, F).;false;true
1;false,true,false;created(K, I), haschild(A, K).;false;false
1;true,true,false;created(G, E), haschild(A, G).;false;false
1;true;haschild(D, B), actedin(D, E).;true;false
2;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;false;true
2;false,true,true;influences(F, G), haschild(B, G).;false;false
2;false,true;created(F, E), haschild(A, F).;true;true
2;false;haschild(D, B), actedin(D, E).;true;true
2;false,true,false;actedin(H, E), haschild(H, A).;false;false
2;false,false;haschild(I, A), actedin(I, J).;false;false
3;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;false;true
3;false,true,false;created(G, E), haschild(B, G).;false;false
3;false,true;actedin(F, E), haschild(F, B).;false;true
3;false;haschild(D, A), actedin(D, E).;true;false
4;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;false;true
4;false,true,false;created(G, E), haschild(A, G).;false;false
4;false,true;actedin(F, E), haschild(F, A).;false;true
4;false;haschild(D, B), actedin(D, E).;true;false
5;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;false;true
5;false,true;actedin(F, E), haschild(F, A).;false;false
5;false;haschild(D, B), actedin(D, E).;true;false
6;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true
6;false,true;actedin(J, I), haschild(J, B).;false;true
6;false;haschild(H, A), actedin(H, I).;true;false
6;true,true;haschild(D, A).;true;true
6;true,true,true;created(F, E), haschild(A, F).;false;false
6;false,true,false;created(K, I), haschild(B, K).;false;false
6;true,true,false;created(G, E), haschild(B, G).;false;false
6;true;haschild(D, B), actedin(D, E).;true;false
7;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;false;true
7;false,true,true;influences(F, G), haschild(A, G).;false;false
7;false,true;created(F, E), haschild(B, F).;true;true
7;false;haschild(D, A), actedin(D, E).;true;true
7;false,true,false;created(H, E), haschild(A, H).;false;false
7;false,false,true;created(K, J), haschild(A, K).;false;false
7;false,false;haschild(I, B), actedin(I, J).;true;false
8;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true
8;false,true;actedin(J, I), haschild(J, B).;false;false
8;false;haschild(H, A), actedin(H, I).;true;true
8;true,true;actedin(C, F).;false;true
8;false,false,true;created(M, L), haschild(A, M).;false;false
8;true,true,false;created(G, E), haschild(A, G).;false;false
8;true;haschild(D, B), actedin(D, E).;true;false
8;false,false;haschild(K, B), actedin(K, L).;true;false
9;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;false;true
9;false,true,false;created(G, E), haschild(A, G).;false;false
9;false,true;actedin(F, E), haschild(F, A).;false;true
9;false;haschild(D, B), actedin(D, E).;true;true
9;false,false;haschild(H, A), actedin(H, I).;false;false


WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then if ( haschild(D, A), actedin(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(F, B), actedin(F, G) )
%   | then if ( created(H, G), haschild(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.305910129129364;  // std dev = 5,756, 134,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=60 */
%   | else if ( haschild(I, A), actedin(I, J) )
%   | | then if ( created(K, J), haschild(A, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.3540167036945545;  // std dev = 5,500, 121,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=60 */
%   | | else return 0.3578598249166366;  // std dev = 62,380, 15.565,000 (wgt'ed) examples reached here.  /* #neg=7.787 #pos=7.778 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then if ( haschild(D, B), actedin(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.7194734122109544;  // std dev = 4,21e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(F, B), actedin(F, G) )
%   | then if ( actedin(H, G), haschild(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(I, G), haschild(A, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2644525404514771;  // std dev = 5,756, 134,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=60 */
%   | else return 0.3084716747231488;  // std dev = 62,622, 15.686,000 (wgt'ed) examples reached here.  /* #neg=7.848 #pos=7.838 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(D, B), actedin(D, E) )
%   | then if ( created(F, E), haschild(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( actedin(G, E), haschild(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.22151628633697776;  // std dev = 5,756, 134,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=60 */
%   | else if ( haschild(H, A), actedin(H, I) )
%   | | then return 0.25309024542761493;  // std dev = 5,500, 121,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=60 */
%   | | else return 0.2562261620930076;  // std dev = 62,380, 15.565,000 (wgt'ed) examples reached here.  /* #neg=7.787 #pos=7.778 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(D, A), actedin(D, E) )
%   | then if ( actedin(F, E), haschild(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(G, E), haschild(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.20794181894484495;  // std dev = 5,525, 122,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=61 */
%   | else return 0.20575083774457917;  // std dev = 62,643, 15.698,000 (wgt'ed) examples reached here.  /* #neg=7.861 #pos=7.837 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.32071184716014955;  // std dev = 2,98e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(D, B), actedin(D, E) )
%   | then if ( actedin(F, E), haschild(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(G, E), haschild(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13823896098736715;  // std dev = 5,756, 134,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=60 */
%   | else return 0.16157131467493172;  // std dev = 62,622, 15.686,000 (wgt'ed) examples reached here.  /* #neg=7.848 #pos=7.838 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.2551722425694895;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(D, B), actedin(D, E) )
%   | then if ( actedin(F, E), haschild(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.10794532855793239;  // std dev = 5,756, 134,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=60 */
%   | else return 0.12452454570093877;  // std dev = 62,622, 15.686,000 (wgt'ed) examples reached here.  /* #neg=7.848 #pos=7.838 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then if ( haschild(D, B), actedin(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.20975771563253576;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(F, A), actedin(F, G) )
%   | then if ( actedin(H, G), haschild(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(I, G), haschild(B, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.09669216870683596;  // std dev = 5,526, 122,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=61 */
%   | else return 0.09479940420668932;  // std dev = 62,643, 15.698,000 (wgt'ed) examples reached here.  /* #neg=7.861 #pos=7.837 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.17709649774527747;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(D, A), actedin(D, E) )
%   | then if ( created(F, E), haschild(B, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(G, E), haschild(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.07322320032347397;  // std dev = 5,526, 122,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=61 */
%   | else if ( haschild(H, B), actedin(H, I) )
%   | | then if ( created(J, I), haschild(A, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.056952066435720074;  // std dev = 5,729, 133,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=59 */
%   | | else return 0.07190194330539275;  // std dev = 62,380, 15.565,000 (wgt'ed) examples reached here.  /* #neg=7.787 #pos=7.778 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then if ( haschild(D, B), actedin(D, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.1527438580936709;  // std dev = 2,79e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(F, A), actedin(F, G) )
%   | then if ( actedin(H, G), haschild(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.05522246414044173;  // std dev = 5,526, 122,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=61 */
%   | else if ( haschild(I, B), actedin(I, J) )
%   | | then if ( created(K, J), haschild(A, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.04336163821134096;  // std dev = 5,729, 133,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=59 */
%   | | else return 0.05421699953500057;  // std dev = 62,380, 15.565,000 (wgt'ed) examples reached here.  /* #neg=7.787 #pos=7.778 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(D, B), actedin(D, E) )
%   | then if ( actedin(F, E), haschild(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( created(G, E), haschild(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.03700295026047526;  // std dev = 5,755, 134,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=60 */
%   | else if ( haschild(H, A), actedin(H, I) )
%   | | then return 0.037085485581606265;  // std dev = 5,500, 121,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=60 */
%   | | else return 0.040787426802510705;  // std dev = 62,380, 15.565,000 (wgt'ed) examples reached here.  /* #neg=7.787 #pos=7.778 */


Results
   AUC ROC   = 0.500822
   AUC PR    = 0.505554
   CLL	      = -0.69425
   Precision = 0.964286 at threshold = 0.5
   Recall    = 0.003407
   F1        = 0.006791


Total learning time: 410.044 seconds
Total inference time: 99.989 seconds
AUC ROC: 0.500822


Structure after Parameter Learning
[['ismarriedto(A, B)', {'': 'haschild(C, A), haschild(C, B)', 'false,true': 'created(H, G), haschild(A, H)', 'false': 'haschild(F, B), actedin(F, G)', 'false,false,true': 'created(K, J), haschild(A, K)', 'true': 'haschild(D, A), actedin(D, E)', 'false,false': 'haschild(I, A), actedin(I, J)'}, {'false,true,true': [0.0, 0, 0], 'false,false,false': [62.38, 7787, 7778], 'true,true': [0.0, 0, 0], 'true,false': [1.03e-07, 0, 24], 'false,true,false': [5.756, 74, 60], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.5, 61, 60]}], ['ismarriedto(A, B)', {'': 'haschild(C, A), haschild(C, B)', 'false,true,false': 'created(I, G), haschild(A, I)', 'false,true': 'actedin(H, G), haschild(H, A)', 'true': 'haschild(D, B), actedin(D, E)', 'false': 'haschild(F, B), actedin(F, G)'}, {'false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false': [4.21e-08, 0, 24], 'false,true,false,true': [0.0, 0, 0], 'false,false': [62.622, 7848, 7838], 'false,true,false,false': [5.756, 74, 60]}], ['ismarriedto(A, B)', {'': 'haschild(C, A), haschild(C, B)', 'false,true,false': 'actedin(G, E), haschild(G, A)', 'false,true': 'created(F, E), haschild(A, F)', 'false,false': 'haschild(H, A), actedin(H, I)', 'false': 'haschild(D, B), actedin(D, E)'}, {'false,true,true': [0.0, 0, 0], 'false,false,true': [5.5, 61, 60], 'false,false,false': [62.38, 7787, 7778], 'false,true,false,true': [0.0, 0, 0], 'true': [0.0, 0, 24], 'false,true,false,false': [5.756, 74, 60]}], ['ismarriedto(A, B)', {'': 'haschild(C, A), haschild(C, B)', 'false,true,false': 'created(G, E), haschild(B, G)', 'false,true': 'actedin(F, E), haschild(F, B)', 'false': 'haschild(D, A), actedin(D, E)'}, {'false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 24], 'false,true,false,true': [0.0, 0, 0], 'false,false': [62.643, 7861, 7837], 'false,true,false,false': [5.525, 61, 61]}], ['ismarriedto(A, B)', {'': 'haschild(C, A), haschild(C, B)', 'false,true,false': 'created(G, E), haschild(A, G)', 'false,true': 'actedin(F, E), haschild(F, A)', 'false': 'haschild(D, B), actedin(D, E)'}, {'false,true,true': [0.0, 0, 0], 'true': [2.98e-08, 0, 24], 'false,true,false,true': [0.0, 0, 0], 'false,false': [62.622, 7848, 7838], 'false,true,false,false': [5.756, 74, 60]}], ['ismarriedto(A, B)', {'': 'haschild(C, A), haschild(C, B)', 'false,true': 'actedin(F, E), haschild(F, A)', 'false': 'haschild(D, B), actedin(D, E)'}, {'false,true,false': [5.756, 74, 60], 'false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 24], 'false,false': [62.622, 7848, 7838]}], ['ismarriedto(A, B)', {'': 'haschild(C, A), haschild(C, B)', 'false,true,false': 'created(I, G), haschild(B, I)', 'false,true': 'actedin(H, G), haschild(H, B)', 'true': 'haschild(D, B), actedin(D, E)', 'false': 'haschild(F, A), actedin(F, G)'}, {'false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 24], 'false,true,false,true': [0.0, 0, 0], 'false,false': [62.643, 7861, 7837], 'false,true,false,false': [5.526, 61, 61]}], ['ismarriedto(A, B)', {'': 'haschild(C, A), haschild(C, B)', 'false,true': 'created(F, E), haschild(B, F)', 'false': 'haschild(D, A), actedin(D, E)', 'false,true,false': 'created(G, E), haschild(A, G)', 'false,false,true': 'created(J, I), haschild(A, J)', 'false,false': 'haschild(H, B), actedin(H, I)'}, {'false,true,true': [0.0, 0, 0], 'false,false,false': [62.38, 7787, 7778], 'false,true,false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 24], 'false,false,true,false': [5.729, 74, 59], 'false,true,false,false': [5.526, 61, 61]}], ['ismarriedto(A, B)', {'': 'haschild(C, A), haschild(C, B)', 'false,true': 'actedin(H, G), haschild(H, B)', 'false': 'haschild(F, A), actedin(F, G)', 'false,false,true': 'created(K, J), haschild(A, K)', 'true': 'haschild(D, B), actedin(D, E)', 'false,false': 'haschild(I, B), actedin(I, J)'}, {'false,true,true': [0.0, 0, 0], 'false,false,false': [62.38, 7787, 7778], 'true,true': [0.0, 0, 0], 'true,false': [2.79e-08, 0, 24], 'false,true,false': [5.526, 61, 61], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.729, 74, 59]}], ['ismarriedto(A, B)', {'': 'haschild(C, A), haschild(C, B)', 'false,true,false': 'created(G, E), haschild(A, G)', 'false,true': 'actedin(F, E), haschild(F, A)', 'false,false': 'haschild(H, A), actedin(H, I)', 'false': 'haschild(D, B), actedin(D, E)'}, {'false,true,true': [0.0, 0, 0], 'false,false,true': [5.5, 61, 60], 'false,false,false': [62.38, 7787, 7778], 'false,true,false,true': [0.0, 0, 0], 'true': [0.0, 0, 24], 'false,true,false,false': [5.755, 74, 60]}]]
[{'': [4.440892098500626e-16, 0.24999942462662922], 'false,true': [nan, 0.24727110715081313], 'false': [0.247271107150813, 0.24999989839457679], 'false,false,true': [nan, 0.24998292466361577], 'true': [nan, 4.440892098500626e-16], 'false,false': [0.24998292466361566, 0.24999991641500513]}, {'': [7.401486830834377e-17, 0.24999302651186972], 'false,true,false': [nan, 0.24727110715081235], 'false,true': [nan, 0.24727110715081213], 'false': [0.24727110715081213, 0.24999986616648742], 'true': [nan, 7.401486830834377e-17]}, {'': [-3.3306690738754696e-16, 0.24998685154305056], 'false,true,false': [nan, 0.24727110715081196], 'false,true': [nan, 0.24727110715081208], 'false': [0.24727110715081196, 0.24999986061588478], 'false,false': [0.24998292466361444, 0.24999991641532646]}, {'': [0.0, 0.24998220781493932], 'false,true,false': [nan, 0.2502092649686234], 'false,true': [nan, 0.2502092649686224], 'false': [0.2502092649686224, 0.24998040617746928]}, {'': [3.700743415417188e-17, 0.24998127044685578], 'false,true,false': [nan, 0.24726724767909322], 'false,true': [nan, 0.24726724767909322], 'false': [0.24726724767909322, 0.24999984417655982]}, {'': [0.0, 0.24997900305230783], 'false,true': [nan, 0.24726705619445388], 'false': [0.24726705619445388, 0.24999984203120587]}, {'': [0.0, 0.24997781935819968], 'false,true,false': [nan, 0.2503292728950408], 'false,true': [nan, 0.2503292728950408], 'false': [0.2503292728950408, 0.2499750603422163], 'true': [nan, 0.0]}, {'': [-2.7755575615628914e-17, 0.24997765574683103], 'false,true': [nan, 0.2503362290674336], 'false': [0.2503362290674336, 0.2499748528584496], 'false,true,false': [nan, 0.2503362290674336], 'false,false,true': [nan, 0.24682005766295526], 'false,false': [0.24682005766295526, 0.24999991641538363]}, {'': [3.23815048849004e-17, 0.24997680138229367], 'false,true': [nan, 0.25034053779031723], 'false': [0.25034053779031723, 0.24997396524767632], 'false,false,true': [nan, 0.24682005766295412], 'true': [nan, 3.23815048849004e-17], 'false,false': [0.2468200576629544, 0.24999991641527433]}, {'': [0.0, 0.24997635309401545], 'false,true,false': [nan, 0.24720711420206148], 'false,true': [nan, 0.24720711420206143], 'false': [0.24720711420206143, 0.2499998902413898], 'false,false': [0.2499829246636151, 0.2499999164153456]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true', '1;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true', '2;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true', '3;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true', '4;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true', '5;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true', '6;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true', '7;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true', '8;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true', '9;;ismarriedto(A, B) :- haschild(C, A), haschild(C, B).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( created(B, D), created(A, E) )
%   | then if ( created(A, D) )
%   | | then return 0.8581489350995116;  // std dev = 2,38e-07, 93,000 (wgt'ed) examples reached here.  /* #pos=93 */
%   | | else if ( diedin(B, F), directed(A, G) )
%   | | | then return -0.04185106490048778;  // std dev = 0,949, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.41444032582798584;  // std dev = 8,634, 302,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=168 */
%   | else if ( haschild(B, H), haschild(A, I) )
%   | | then if ( haschild(A, H) )
%   | | | then return 0.8581489350995075;  // std dev = 4,62e-06, 1.071,000 (wgt'ed) examples reached here.  /* #pos=1.071 */
%   | | | else return 0.018454278610963003;  // std dev = 7,273, 393,000 (wgt'ed) examples reached here.  /* #neg=330 #pos=63 */
%   | | else if ( actedin(A, J), actedin(B, K) )
%   | | | then return 0.5788774693579637;  // std dev = 15,234, 1.153,000 (wgt'ed) examples reached here.  /* #neg=322 #pos=831 */
%   | | | else return 0.3012650469920484;  // std dev = 56,197, 12.798,000 (wgt'ed) examples reached here.  /* #neg=7.127 #pos=5.671 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.7194734122109544;  // std dev = 4,21e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(B, D), haschild(A, D) )
%   | then return 0.7202848793042161;  // std dev = 0,265, 1.090,000 (wgt'ed) examples reached here.  /* #pos=1.090 */
%   | else if ( haschild(A, E) )
%   | | then if ( actedin(B, F) )
%   | | | then return -0.03761408773220379;  // std dev = 7,321, 444,000 (wgt'ed) examples reached here.  /* #neg=377 #pos=67 */
%   | | | else return 0.10841894890826621;  // std dev = 19,239, 1.840,000 (wgt'ed) examples reached here.  /* #neg=1.318 #pos=522 */
%   | | else if ( haschild(B, G) )
%   | | | then return 0.12522474481460383;  // std dev = 18,769, 1.657,000 (wgt'ed) examples reached here.  /* #neg=1.144 #pos=513 */
%   | | | else return 0.3408979868815425;  // std dev = 51,619, 10.789,000 (wgt'ed) examples reached here.  /* #neg=5.083 #pos=5.706 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(A, D), haschild(B, D) )
%   | then return 0.5562284895632623;  // std dev = 0,347, 1.090,000 (wgt'ed) examples reached here.  /* #pos=1.090 */
%   | else if ( haschild(A, E) )
%   | | then if ( actedin(B, F), haschild(G, A) )
%   | | | then return -0.14133229100898734;  // std dev = 2,497, 190,000 (wgt'ed) examples reached here.  /* #neg=183 #pos=7 */
%   | | | else return 0.08708871513848616;  // std dev = 20,341, 2.094,000 (wgt'ed) examples reached here.  /* #neg=1.512 #pos=582 */
%   | | else if ( haschild(B, H) )
%   | | | then return 0.10565583853110473;  // std dev = 18,766, 1.657,000 (wgt'ed) examples reached here.  /* #neg=1.144 #pos=513 */
%   | | | else return 0.2834017422409439;  // std dev = 51,581, 10.789,000 (wgt'ed) examples reached here.  /* #neg=5.083 #pos=5.706 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(B, D), haschild(A, D) )
%   | then return 0.41821803004744695;  // std dev = 0,363, 1.090,000 (wgt'ed) examples reached here.  /* #pos=1.090 */
%   | else if ( haschild(E, B), actedin(A, F) )
%   | | then if ( actedin(B, G) )
%   | | | then return 0.4135358572037205;  // std dev = 3,579, 65,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=48 */
%   | | | else return -0.2085272316035535;  // std dev = 3,465, 292,000 (wgt'ed) examples reached here.  /* #neg=279 #pos=13 */
%   | | else if ( haschild(A, H) )
%   | | | then return 0.05770905502426878;  // std dev = 20,524, 2.251,000 (wgt'ed) examples reached here.  /* #neg=1.669 #pos=582 */
%   | | | else return 0.21722445617234853;  // std dev = 54,450, 12.122,000 (wgt'ed) examples reached here.  /* #neg=5.957 #pos=6.165 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.32071184716014955;  // std dev = 2,98e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( actedin(A, D), actedin(B, E) )
%   | then if ( directed(F, E), directed(F, D) )
%   | | then if ( haschild(A, G), wrotemusicfor(H, E) )
%   | | | then return 0.47743252682356374;  // std dev = 1,289, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.5796569020848066;  // std dev = 2,296, 276,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=271 */
%   | | else if ( haschild(A, I), diedin(A, J) )
%   | | | then return 0.5340192820221213;  // std dev = 1,504, 14,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.24282290442532514;  // std dev = 14,354, 913,000 (wgt'ed) examples reached here.  /* #neg=326 #pos=587 */
%   | else if ( actedin(B, K) )
%   | | then if ( directed(A, L) )
%   | | | then return 0.3616222860319594;  // std dev = 6,208, 189,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=133 */
%   | | | else return 0.016435207246890148;  // std dev = 19,785, 1.932,000 (wgt'ed) examples reached here.  /* #neg=1.296 #pos=636 */
%   | | else if ( haswonprize(B, M), haswonprize(A, M) )
%   | | | then return 0.5188907005876642;  // std dev = 1,730, 52,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | | else return 0.15865379004187558;  // std dev = 52,309, 12.418,000 (wgt'ed) examples reached here.  /* #neg=6.232 #pos=6.186 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.2551722425694895;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( actedin(B, D), actedin(A, E) )
%   | then if ( directed(F, D), directed(F, E) )
%   | | then if ( influences(B, G), isaffiliatedto(G, H) )
%   | | | then return 0.05851349298721339;  // std dev = 0,703, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.43666143666164786;  // std dev = 2,463, 299,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=294 */
%   | | else if ( wasbornin(A, I), wasbornin(B, I) )
%   | | | then return 0.5341406529020986;  // std dev = 4,71e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.18349844259451634;  // std dev = 14,412, 916,000 (wgt'ed) examples reached here.  /* #neg=329 #pos=587 */
%   | else if ( actedin(B, J) )
%   | | then if ( haschild(K, A) )
%   | | | then return -0.18065844335376058;  // std dev = 4,199, 325,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=21 */
%   | | | else return 0.07584305752304575;  // std dev = 20,152, 1.796,000 (wgt'ed) examples reached here.  /* #neg=1.048 #pos=748 */
%   | | else if ( actedin(A, L) )
%   | | | then return 0.010665366843290903;  // std dev = 20,726, 2.033,000 (wgt'ed) examples reached here.  /* #neg=1.296 #pos=737 */
%   | | | else return 0.14787831706401805;  // std dev = 47,711, 10.437,000 (wgt'ed) examples reached here.  /* #neg=4.939 #pos=5.498 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.20975771563253576;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( graduatedfrom(A, D), diedin(B, E) )
%   | then if ( diedin(A, F) )
%   | | then if ( haschild(B, G), wasbornin(H, E) )
%   | | | then return 0.024349697208328372;  // std dev = 1,152, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0.3334571080049483;  // std dev = 1,912, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else if ( happenedin(I, E), owns(D, J) )
%   | | | then return -0.25465419229707953;  // std dev = 1,199, 23,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return 0.009611360888165884;  // std dev = 3,533, 59,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=24 */
%   | else if ( diedin(B, K), diedin(A, K) )
%   | | then if ( haschild(A, L), haschild(B, L) )
%   | | | then return 0.2563216628516326;  // std dev = 0,062, 57,000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.5805440541945368;  // std dev = 0,786, 101,000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | else if ( actedin(B, M), haschild(N, A) )
%   | | | then return -0.09423548836002416;  // std dev = 5,853, 382,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=65 */
%   | | | else return 0.09655150205949754;  // std dev = 57,489, 15.161,000 (wgt'ed) examples reached here.  /* #neg=7.537 #pos=7.624 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.17709649774527747;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(A, D), haschild(B, D) )
%   | then return 0.23849976561035677;  // std dev = 0,652, 1.090,000 (wgt'ed) examples reached here.  /* #pos=1.090 */
%   | else if ( haschild(A, E) )
%   | | then if ( haschild(F, B) )
%   | | | then return 0.08993051359580785;  // std dev = 9,969, 467,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=168 */
%   | | | else return -0.04357075303522369;  // std dev = 17,421, 1.817,000 (wgt'ed) examples reached here.  /* #neg=1.396 #pos=421 */
%   | | else if ( haschild(B, G) )
%   | | | then return -0.025824437635282478;  // std dev = 18,395, 1.657,000 (wgt'ed) examples reached here.  /* #neg=1.144 #pos=513 */
%   | | | else return 0.09041928796358209;  // std dev = 50,672, 10.789,000 (wgt'ed) examples reached here.  /* #neg=5.083 #pos=5.706 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.1527438580936709;  // std dev = 2,79e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(B, D), haschild(A, D) )
%   | then return 0.19798411227931892;  // std dev = 0,570, 1.090,000 (wgt'ed) examples reached here.  /* #pos=1.090 */
%   | else if ( isaffiliatedto(B, E), isaffiliatedto(A, E) )
%   | | then if ( graduatedfrom(B, F), wasbornin(B, G) )
%   | | | then return 0.3265110774614044;  // std dev = 1,895, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return 0.5536968529584609;  // std dev = 0,626, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actedin(A, H), isaffiliatedto(B, I) )
%   | | | then return -0.26178066198193073;  // std dev = 4,488, 176,000 (wgt'ed) examples reached here.  /* #neg=152 #pos=24 */
%   | | | else return 0.044535013205034404;  // std dev = 57,076, 14.403,000 (wgt'ed) examples reached here.  /* #neg=7.765 #pos=6.638 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(C, A), haschild(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( haschild(A, D), haschild(B, D) )
%   | then return 0.16846071066280033;  // std dev = 0,503, 1.090,000 (wgt'ed) examples reached here.  /* #pos=1.090 */
%   | else if ( haschild(B, E) )
%   | | then if ( wasbornin(A, F), haschild(G, B) )
%   | | | then return -0.15636509749804003;  // std dev = 5,273, 246,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=36 */
%   | | | else return -0.02647089346160241;  // std dev = 18,922, 1.808,000 (wgt'ed) examples reached here.  /* #neg=1.268 #pos=540 */
%   | | else if ( diedin(A, H), diedin(B, H) )
%   | | | then return 0.39474636014757036;  // std dev = 0,689, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | | else return 0.04478275706517451;  // std dev = 53,801, 12.581,000 (wgt'ed) examples reached here.  /* #neg=6.444 #pos=6.137 */


Results
   AUC ROC   = 0.71912
   AUC PR    = 0.745193
   CLL	      = -0.61056
   Precision = 0.856644 at threshold = 0.5
   Recall    = 0.294107
   F1        = 0.437879


Total learning time: 630.334 seconds
Total inference time: 72.23 seconds
AUC ROC: 0.71912


Refined model AUC ROC: 0.71912


Dataset: 15_cora_yago2s, Fold: 3, Type: transfer, Time: 09:30:45
{'Learning time': 1040.378, 'Inference time': 72.23, 'AUC PR': 0.745193, 'F1': 0.437879, 'Recall': 0.294107, 'Parameter Learning results': {'Learning time': 410.044, 'Inference time': 99.989, 'AUC PR': 0.505554, 'F1': 0.006791, 'Recall': 0.003407, 'AUC ROC': 0.500822, 'CLL': -0.69425, 'Precision': [0.964286, 0.5]}, 'AUC ROC': 0.71912, 'Mapping results': {'Knowledge compiling time': 25.05101704597473, 'Generating mappings time': 106.43333625793457, 'Possible mappings': 441488, 'Finding best mapping': 180.08966970443726, 'Total time': 314.4334738254547, 'Generating paths time': 2.8594417572021484}, 'CLL': -0.61056, 'Precision': [0.856644, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR ismarriedto(A, B):
%   if ( haschild(B, C), haschild(A, C) )
%   then return 0.8581489350995075;  // std dev = 4,72e-06, 1.103,000 (wgt'ed) examples reached here.  /* #pos=1.103 */
%   else if ( haschild(B, D) )
%   | then if ( wasbornin(A, E), wasbornin(D, E) )
%   | | then if ( haschild(D, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( actedin(A, G), haschild(D, H) )
%   | | | then return -0.11286555765411084;  // std dev = 1,971, 138,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=4 */
%   | | | else return 0.15205009177668985;  // std dev = 19,867, 1.902,000 (wgt'ed) examples reached here.  /* #neg=1.343 #pos=559 */
%   | else if ( haschild(A, I) )
%   | | then if ( actedin(B, J), haschild(I, K) )
%   | | | then return -0.10207833762776052;  // std dev = 2,593, 176,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=7 */
%   | | | else return 0.16269969355925143;  // std dev = 19,053, 1.714,000 (wgt'ed) examples reached here.  /* #neg=1.192 #pos=522 */
%   | | else if ( actedin(A, L), actedin(B, M) )
%   | | | then return 0.5867068992842389;  // std dev = 14,485, 1.061,000 (wgt'ed) examples reached here.  /* #neg=288 #pos=773 */
%   | | | else return 0.36549507709067125;  // std dev = 49,323, 9.733,000 (wgt'ed) examples reached here.  /* #neg=4.795 #pos=4.938 */
WILL Produced-Tree #2
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.7194734122109588;  // std dev = 0,000, 1.103,000 (wgt'ed) examples reached here.  /* #pos=1.103 */
%   else if ( haschild(A, D) )
%   | then if ( actedin(A, E), actedin(B, F) )
%   | | then if ( edited(G, F), edited(H, E) )
%   | | | then return 0.6978931290479892;  // std dev = 1,860, 28,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=24 */
%   | | | else return 0.35139925065614513;  // std dev = 3,422, 47,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=24 */
%   | | else if ( actedin(B, I) )
%   | | | then return -0.09616863923194657;  // std dev = 4,205, 369,000 (wgt'ed) examples reached here.  /* #neg=350 #pos=19 */
%   | | | else return 0.12244096688669587;  // std dev = 19,359, 1.843,000 (wgt'ed) examples reached here.  /* #neg=1.318 #pos=525 */
%   | else if ( haschild(B, J) )
%   | | then if ( haschild(K, A) )
%   | | | then return 0.3212781024410932;  // std dev = 8,440, 289,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=140 */
%   | | | else return 0.11500677105143216;  // std dev = 16,438, 1.371,000 (wgt'ed) examples reached here.  /* #neg=995 #pos=376 */
%   | | else if ( isaffiliatedto(B, L), actedin(A, M) )
%   | | | then return -0.04323747900763322;  // std dev = 4,311, 147,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=22 */
%   | | | else return 0.33827872689119637;  // std dev = 51,336, 10.647,000 (wgt'ed) examples reached here.  /* #neg=4.958 #pos=5.689 */
WILL Produced-Tree #3
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.5553664367462924;  // std dev = 0,000, 1.103,000 (wgt'ed) examples reached here.  /* #pos=1.103 */
%   else if ( actedin(A, D), actedin(B, E) )
%   | then if ( directed(F, E), directed(F, D) )
%   | | then if ( actedin(A, E) )
%   | | | then return 0.7083255816099313;  // std dev = 0,965, 194,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=193 */
%   | | | else return 0.6633765493882179;  // std dev = 2,102, 89,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=84 */
%   | | else if ( created(G, E), directed(B, E) )
%   | | | then return 0.07946570660368721;  // std dev = 2,035, 17,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.36076805470481343;  // std dev = 14,298, 897,000 (wgt'ed) examples reached here.  /* #neg=318 #pos=579 */
%   | else if ( haschild(A, H) )
%   | | then if ( actedin(B, I) )
%   | | | then return -0.08449383050228197;  // std dev = 4,207, 369,000 (wgt'ed) examples reached here.  /* #neg=350 #pos=19 */
%   | | | else return 0.10509181980051664;  // std dev = 19,357, 1.843,000 (wgt'ed) examples reached here.  /* #neg=1.318 #pos=525 */
%   | | else if ( actedin(A, J), haschild(K, B) )
%   | | | then return -0.15514369907397652;  // std dev = 3,452, 267,000 (wgt'ed) examples reached here.  /* #neg=254 #pos=13 */
%   | | | else return 0.24723452938045454;  // std dev = 52,217, 11.065,000 (wgt'ed) examples reached here.  /* #neg=5.665 #pos=5.400 */
WILL Produced-Tree #4
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.4175135841583132;  // std dev = 0,000, 1.103,000 (wgt'ed) examples reached here.  /* #pos=1.103 */
%   else if ( haschild(B, D) )
%   | then if ( actedin(A, E), actedin(B, F) )
%   | | then if ( haswonprize(A, G) )
%   | | | then return 0.6765608425452914;  // std dev = 0,958, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.3271066064158303;  // std dev = 3,423, 51,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=30 */
%   | | else if ( actedin(A, H) )
%   | | | then return -0.11132957352425929;  // std dev = 3,857, 280,000 (wgt'ed) examples reached here.  /* #neg=263 #pos=17 */
%   | | | else return 0.08476449871110876;  // std dev = 18,794, 1.712,000 (wgt'ed) examples reached here.  /* #neg=1.193 #pos=519 */
%   | else if ( haschild(A, I) )
%   | | then if ( haschild(J, B) )
%   | | | then return 0.3111324391059228;  // std dev = 8,005, 265,000 (wgt'ed) examples reached here.  /* #neg=131 #pos=134 */
%   | | | else return 0.0560129953054617;  // std dev = 16,888, 1.625,000 (wgt'ed) examples reached here.  /* #neg=1.230 #pos=395 */
%   | | else if ( isaffiliatedto(A, K), actedin(B, L) )
%   | | | then return -0.13639181688258573;  // std dev = 4,326, 139,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=23 */
%   | | | else return 0.2270498962409436;  // std dev = 50,950, 10.655,000 (wgt'ed) examples reached here.  /* #neg=4.967 #pos=5.688 */
WILL Produced-Tree #5
% FOR ismarriedto(A, B):
%   if ( iscitizenof(B, C), iscitizenof(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.32071184716014717;  // std dev = 2,11e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( created(B, E), livesin(F, C) )
%   | | then if ( haswonprize(A, G) )
%   | | | then return -0.016006621650461;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.6506600450162057;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.634784665188102;  // std dev = 0,163, 78,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   else if ( haschild(A, H), haschild(B, H) )
%   | then return 0.32071184716014944;  // std dev = 7,63e-07, 1.094,000 (wgt'ed) examples reached here.  /* #pos=1.094 */
%   | else if ( haschild(A, I) )
%   | | then if ( wasbornin(B, J) )
%   | | | then return -0.026545628446103007;  // std dev = 8,971, 628,000 (wgt'ed) examples reached here.  /* #neg=521 #pos=107 */
%   | | | else return 0.08524995293928277;  // std dev = 18,077, 1.655,000 (wgt'ed) examples reached here.  /* #neg=1.174 #pos=481 */
%   | | else if ( actedin(A, K), actedin(B, L) )
%   | | | then return 0.28478765604242606;  // std dev = 14,579, 1.122,000 (wgt'ed) examples reached here.  /* #neg=308 #pos=814 */
%   | | | else return 0.14518500664300568;  // std dev = 52,144, 11.249,000 (wgt'ed) examples reached here.  /* #neg=5.915 #pos=5.334 */
WILL Produced-Tree #6
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), directed(A, C) )
%   then return 0.5618540149081509;  // std dev = 0,109, 76,000 (wgt'ed) examples reached here.  /* #pos=76 */
%   else if ( actedin(B, D), haschild(E, A) )
%   | then if ( actedin(E, F), directed(G, D) )
%   | | then if ( haswonprize(G, H), actedin(G, I) )
%   | | | then return 0.07147108820778793;  // std dev = 1,486, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.4546577071471793;  // std dev = 1,323, 29,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | else if ( haschild(A, J) )
%   | | | then return -0.1163049809951396;  // std dev = 1,559, 187,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=5 */
%   | | | else return -0.22459741675498396;  // std dev = 4,419, 157,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=27 */
%   | else if ( haschild(K, A), haschild(L, B) )
%   | | then if ( haschild(B, M) )
%   | | | then return 0.20509408777236426;  // std dev = 7,820, 664,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=504 */
%   | | | else return 0.391652279617556;  // std dev = 7,959, 338,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=246 */
%   | | else if ( haschild(B, N), haschild(A, N) )
%   | | | then return 0.2551722425694903;  // std dev = 0,000, 694,000 (wgt'ed) examples reached here.  /* #pos=694 */
%   | | | else return 0.10878349716602469;  // std dev = 56,155, 13.687,000 (wgt'ed) examples reached here.  /* #neg=7.351 #pos=6.336 */
WILL Produced-Tree #7
% FOR ismarriedto(A, B):
%   if ( diedin(B, C), diedin(A, C) )
%   then if ( haschild(B, D), haschild(A, D) )
%   | then return 0.21301767885002856;  // std dev = 0,032, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( actedin(B, E), directed(F, E) )
%   | | then if ( actedin(A, G) )
%   | | | then return 0.46552588244507065;  // std dev = 0,254, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.6154431785584675;  // std dev = 0,206, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6015094254406372;  // std dev = 0,066, 80,000 (wgt'ed) examples reached here.  /* #pos=80 */
%   else if ( haschild(A, H), haschild(B, H) )
%   | then return 0.2128892450024646;  // std dev = 0,182, 1.041,000 (wgt'ed) examples reached here.  /* #pos=1.041 */
%   | else if ( haschild(B, I) )
%   | | then if ( haschild(J, B), wasbornin(A, K) )
%   | | | then return -0.11645086609637184;  // std dev = 4,888, 243,000 (wgt'ed) examples reached here.  /* #neg=210 #pos=33 */
%   | | | else return 0.020776421927200625;  // std dev = 18,782, 1.804,000 (wgt'ed) examples reached here.  /* #neg=1.268 #pos=536 */
%   | | else if ( livesin(B, L), livesin(A, L) )
%   | | | then return 0.5808456606984312;  // std dev = 0,432, 61,000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.09329029193090249;  // std dev = 53,891, 12.528,000 (wgt'ed) examples reached here.  /* #neg=6.444 #pos=6.084 */
WILL Produced-Tree #8
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.179400685958289;  // std dev = 0,163, 1.103,000 (wgt'ed) examples reached here.  /* #pos=1.103 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, D) )
%   | then if ( diedin(A, E), wasbornin(B, F) )
%   | | then if ( graduatedfrom(B, G), livesin(H, F) )
%   | | | then return -0.032962280055870374;  // std dev = 0,749, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5335964203775062;  // std dev = 0,145, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( wasbornin(B, I), graduatedfrom(B, J) )
%   | | | then return 0.40567095919167845;  // std dev = 1,550, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.5665879800364524;  // std dev = 0,844, 124,000 (wgt'ed) examples reached here.  /* #pos=124 */
%   | else if ( actedin(A, K), actedin(B, K) )
%   | | then if ( directed(L, K) )
%   | | | then return 0.36737029370040897;  // std dev = 1,168, 194,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=193 */
%   | | | else return 0.4565818704129771;  // std dev = 0,160, 32,000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( isaffiliatedto(A, M), actedin(B, N) )
%   | | | then return -0.18548884758678602;  // std dev = 4,256, 171,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=22 */
%   | | | else return 0.05922133989796519;  // std dev = 56,757, 14.192,000 (wgt'ed) examples reached here.  /* #neg=7.767 #pos=6.425 */
WILL Produced-Tree #9
% FOR ismarriedto(A, B):
%   if ( actedin(B, C), actedin(A, D) )
%   then return 0.13992240946899975;  // std dev = 0,423, 1.229,000 (wgt'ed) examples reached here.  /* #neg=335 #pos=894 */
%   else if ( actedin(A, E) )
%   | then if ( created(B, F), directed(G, F) )
%   | | then if ( directed(G, E) )
%   | | | then return 0.5320909377589519;  // std dev = 1,032, 49,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.18879795506574842;  // std dev = 5,258, 124,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=77 */
%   | | else if ( haschild(H, B) )
%   | | | then return -0.22224300426688964;  // std dev = 3,135, 289,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=11 */
%   | | | else return -0.03328360595926345;  // std dev = 18,576, 1.571,000 (wgt'ed) examples reached here.  /* #neg=970 #pos=601 */
%   | else if ( actedin(B, I) )
%   | | then if ( created(A, J), directed(K, J) )
%   | | | then return 0.2096275463994947;  // std dev = 6,086, 186,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=124 */
%   | | | else return -0.04392266799041977;  // std dev = 19,252, 1.935,000 (wgt'ed) examples reached here.  /* #neg=1.290 #pos=645 */
%   | | else if ( created(B, L), haschild(M, A) )
%   | | | then return -0.1782482132497189;  // std dev = 4,171, 175,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=37 */
%   | | | else return 0.08673094385164465;  // std dev = 46,532, 10.286,000 (wgt'ed) examples reached here.  /* #neg=4.801 #pos=5.485 */
WILL Produced-Tree #10
% FOR ismarriedto(A, B):
%   if ( haschild(A, C), haschild(B, C) )
%   then return 0.14455282411891573;  // std dev = 0,265, 1.103,000 (wgt'ed) examples reached here.  /* #pos=1.103 */
%   else if ( haschild(D, A), created(B, E) )
%   | then if ( actedin(D, F), wrotemusicfor(G, F) )
%   | | then if ( diedin(D, H) )
%   | | | then return 0.6782720363042983;  // std dev = 0,207, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.02663920832993083;  // std dev = 1,775, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else if ( haschild(I, D) )
%   | | | then return -0.21991372134298734;  // std dev = 2,211, 139,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=5 */
%   | | | else return -0.0924671874817711;  // std dev = 3,605, 81,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=19 */
%   | else if ( haschild(J, A), haschild(K, B) )
%   | | then if ( haschild(A, L), haschild(B, M) )
%   | | | then return -0.060646169700163496;  // std dev = 4,166, 104,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=23 */
%   | | | else return 0.20053357511096423;  // std dev = 10,016, 496,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=320 */
%   | | else if ( actedin(A, N), actedin(B, N) )
%   | | | then return 0.26816424583103393;  // std dev = 1,155, 225,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=224 */
%   | | | else return 0.031368930106989094;  // std dev = 55,359, 13.678,000 (wgt'ed) examples reached here.  /* #neg=7.461 #pos=6.217 */


Results
   AUC ROC   = 0.727711
   AUC PR    = 0.750354
   CLL	      = -0.600169
   Precision = 0.853022 at threshold = 0.5
   Recall    = 0.315308
   F1        = 0.460426


Total learning time: 823.671 seconds
Total inference time: 103.61699999999999 seconds
AUC ROC: 0.727711


Dataset: 15_cora_yago2s, Fold: 3, Type: scratch, Time: 09:46:16
{'Learning time': 823.671, 'Inference time': 103.61699999999999, 'AUC PR': 0.750354, 'F1': 0.460426, 'Recall': 0.315308, 'AUC ROC': 0.727711, 'CLL': -0.600169, 'Precision': [0.853022, 0.5]}


