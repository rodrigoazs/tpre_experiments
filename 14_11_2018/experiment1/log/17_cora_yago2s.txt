Starting experiment #1 for 17_cora_yago2s

Start learning from source dataset

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4077628347134068;  // std dev = 0,498, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.22178529873587596;  // std dev = 1,595, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.15226658215833588;  // std dev = 3,254, 51,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=15 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.19148226843284558;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.12229987849573878;  // std dev = 3,210, 53,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=14 */
%   | | else return 0.15792522145297558;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.350563053296779;  // std dev = 0,498, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else return 0.13309266421605084;  // std dev = 0,456, 577,000 (wgt'ed) examples reached here.  /* #neg=407 #pos=170 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5791728979345447;  // std dev = 0,367, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.3127023096992505;  // std dev = 4,078, 68,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=39 */
%   | | | else return 0.1482638070254537;  // std dev = 3,994, 66,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=27 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.3391728979345446;  // std dev = 3,950, 65,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=39 */
%   | | | else return 0.18917289793454461;  // std dev = 3,854, 60,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=27 */
%   | | else return 0.2894179959738125;  // std dev = 0,497, 4.896,000 (wgt'ed) examples reached here.  /* #neg=2.202 #pos=2.694 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.04490580783929794;  // std dev = 0,409, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.10949111710414061;  // std dev = 0,451, 59,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
%   | else return 0.11602536112984234;  // std dev = 0,457, 509,000 (wgt'ed) examples reached here.  /* #neg=358 #pos=151 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.453607365649269;  // std dev = 0,367, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.26027014077558286;  // std dev = 3,988, 66,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=39 */
%   | | | else return 0.1432798942941166;  // std dev = 3,882, 61,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=27 */
%   | else return 0.22891511539871093;  // std dev = 0,498, 5.028,000 (wgt'ed) examples reached here.  /* #neg=2.268 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordvenue(A, J) )
%   | | then return -0.15181015287678404;  // std dev = 0,010, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.10187863450214;  // std dev = 0,457, 64,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return -0.027515502330902095;  // std dev = 0,909, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.09804838772082138;  // std dev = 3,355, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | else return 0.10084013881067178;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17752861961118438;  // std dev = 0,497, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4465633945438578;  // std dev = 1,157, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.20427002550655363;  // std dev = 0,077, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordauthor(E, H), haswordvenue(A, H) )
%   | | | then return -0.13278626901257334;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.06798483040389013;  // std dev = 3,290, 54,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.08770482211399308;  // std dev = 1,446, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.06823313950503114;  // std dev = 3,170, 50,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   | | else return 0.08428151900439651;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13522254466464442;  // std dev = 0,497, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.27314479098053335;  // std dev = 0,850, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18787255111702092;  // std dev = 0,082, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordauthor(E, H), haswordvenue(A, H) )
%   | | | then return -0.11755838022583844;  // std dev = 0,007, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.066996987565939;  // std dev = 3,444, 58,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return -0.03608770393707007;  // std dev = 0,908, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.06989896589145744;  // std dev = 3,355, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | else return 0.06969195633808395;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10209140764389918;  // std dev = 0,497, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return -0.11165930785768052;  // std dev = 0,036, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.11926931004753438;  // std dev = 1,398, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.046303317939759656;  // std dev = 3,284, 54,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.04865072789246996;  // std dev = 0,449, 60,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | | else return 0.05711484034865037;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.2398839379178679;  // std dev = 0,367, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.10040742163769721;  // std dev = 4,057, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.005306122063391062;  // std dev = 3,802, 56,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=25 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.10794988058778211;  // std dev = 4,103, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return -0.03609923628706136;  // std dev = 3,885, 61,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
%   | | else return 0.0773431274662321;  // std dev = 0,497, 4.896,000 (wgt'ed) examples reached here.  /* #neg=2.202 #pos=2.694 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return 0.0342284870799333;  // std dev = 0,429, 70,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=19 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.039809667525304196;  // std dev = 0,449, 60,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | | else return 0.04646481634466037;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.057606243569007724;  // std dev = 0,497, 5.180,000 (wgt'ed) examples reached here.  /* #neg=2.333 #pos=2.847 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4080547965949582;  // std dev = 1,176, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.21431531755890995;  // std dev = 0,143, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.02695908607051885;  // std dev = 0,432, 56,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=15 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.051337267679027285;  // std dev = 0,725, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.02623436472424088;  // std dev = 3,367, 57,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else return 0.03757595139684047;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.17105021980568247;  // std dev = 0,367, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.0601493646483959;  // std dev = 4,024, 68,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=39 */
%   | | | else return -0.043424571123079285;  // std dev = 4,032, 66,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=27 */
%   | else return 0.043491433336362344;  // std dev = 0,497, 5.021,000 (wgt'ed) examples reached here.  /* #neg=2.261 #pos=2.760 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.06664697502003218;  // std dev = 0,424, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.015392459580035808;  // std dev = 0,426, 59,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return -0.04191670785643031;  // std dev = 0,821, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.03141598768476655;  // std dev = 3,332, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | else return 0.03024216551698528;  // std dev = 0,458, 447,000 (wgt'ed) examples reached here.  /* #neg=313 #pos=134 */


Predicates from source: ['samevenue(venue,venue).', 'author(class,author).', 'venue(class,venue).', 'samebib(class,class).', 'haswordvenue(venue,word).', 'haswordauthor(author,word).']

Starting fold 1

Mapping Results
   Knowledge compiling time   = 23.85363459587097
   Generating paths time   = 2.8666675090789795
   Generating mappings time   = 107.97751951217651
   Possible mappings   = 441488
   Finding best mapping   = 180.48164463043213
   Total time   = 315.179475069046


Best mapping found: ['samevenue(A,B) -> haschild(A,B)', 'samebib(A,B) -> influences(A,B)', 'author(A,B) -> created(A,B)', 'haswordauthor(A,B) -> actedin(B,A)', 'venue(A,B) -> ismarriedto(A,B)', 'haswordvenue(A,B) -> ismarriedto(A,B)'] 

Transferred target predicate: haschild 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
0;false,true;actedin(F, E), ismarriedto(B, F).;false;true
0;false;ismarriedto(A, D), actedin(D, E).;true;true
0;false,true,false;created(G, E), ismarriedto(G, B).;false;false
0;false,false,true;created(J, I), ismarriedto(J, A).;false;false
0;false,false;ismarriedto(B, H), actedin(H, I).;true;false
1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;false
2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
2;true,false,true;created(J, I), ismarriedto(J, B).;false;false
2;false,true;created(M, L), ismarriedto(M, A).;false;false
2;false;ismarriedto(A, K), actedin(K, L).;true;false
2;true,true;actedin(C, F).;false;true
2;true,false;ismarriedto(A, H), actedin(H, I).;true;false
2;true,true,false;created(G, E), ismarriedto(G, A).;false;false
2;true;ismarriedto(B, D), actedin(D, E).;true;true
3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
3;false,true;actedin(J, I), ismarriedto(A, J).;false;false
3;false;ismarriedto(B, H), actedin(H, I).;true;true
3;true,true;actedin(C, F).;false;true
3;false,false,true;created(M, L), ismarriedto(M, A).;false;false
3;true,true,false;created(G, E), ismarriedto(G, B).;false;false
3;true;ismarriedto(A, D), actedin(D, E).;true;false
3;false,false;ismarriedto(A, K), actedin(K, L).;true;false
4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
4;false,true,true;influences(F, G), ismarriedto(G, B).;false;false
4;false,true;created(F, E), ismarriedto(F, A).;true;true
4;false;ismarriedto(B, D), actedin(D, E).;true;true
4;false,true,false;actedin(H, E), ismarriedto(A, H).;false;false
4;false,false,true;created(K, J), ismarriedto(K, B).;false;false
4;false,false;ismarriedto(A, I), actedin(I, J).;true;false
5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
5;false,true,true;created(G, E), ismarriedto(G, A).;false;false
5;false,true;created(F, E), ismarriedto(F, B).;true;true
5;false;ismarriedto(B, D), actedin(D, E).;true;true
5;false,true,false;actedin(H, E), ismarriedto(A, H).;false;false
5;false,false,true;created(K, J), ismarriedto(K, A).;false;false
5;false,false;ismarriedto(A, I), actedin(I, J).;true;false
6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
6;false,true,false;created(G, E), ismarriedto(G, A).;false;false
6;false,true;actedin(F, E), ismarriedto(A, F).;false;true
6;false;ismarriedto(B, D), actedin(D, E).;true;true
6;false,false;ismarriedto(A, H), actedin(H, I).;false;false
7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
7;true,false,true;created(I, H), ismarriedto(I, B).;false;false
7;false;ismarriedto(B, J), actedin(J, K).;false;true
7;true,true;ismarriedto(B, D).;false;true
7;true,false;ismarriedto(B, G), actedin(G, H).;true;false
7;true,true,false;created(F, E), ismarriedto(F, A).;false;false
7;true;ismarriedto(A, D), actedin(D, E).;true;true
7;false,false;ismarriedto(A, L), actedin(L, M).;false;false
8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;false;true
8;false,true,true;influences(F, G), ismarriedto(G, A).;false;false
8;false,true;created(F, E), ismarriedto(F, B).;true;false
8;false;ismarriedto(A, D), actedin(D, E).;true;true
8;false,false,true;created(J, I), ismarriedto(J, B).;false;false
8;false,false;ismarriedto(B, H), actedin(H, I).;true;false
9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true
9;false,true;created(I, H), ismarriedto(I, A).;false;false
9;false;ismarriedto(B, G), actedin(G, H).;true;true
9;true,true;ismarriedto(A, D).;false;true
9;false,false,true;created(L, K), ismarriedto(L, A).;false;false
9;true,true,false;created(F, E), ismarriedto(F, A).;false;false
9;true;ismarriedto(B, D), actedin(D, E).;true;false
9;false,false;ismarriedto(A, J), actedin(J, K).;true;false


WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(B, F) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( created(G, E), ismarriedto(G, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.35525876168910425;  // std dev = 9,300, 346,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=172 */
%   | else if ( ismarriedto(B, H), actedin(H, I) )
%   | | then if ( created(J, I), ismarriedto(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.29293154379516545;  // std dev = 5,823, 138,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=60 */
%   | | else return 0.3583594614152966;  // std dev = 48,734, 9.500,000 (wgt'ed) examples reached here.  /* #neg=4.748 #pos=4.752 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return 0.30810218277915247;  // std dev = 49,960, 9.985,000 (wgt'ed) examples reached here.  /* #neg=5.000 #pos=4.985 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( actedin(C, F) )
%   | | then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(A, G), actedin(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(A, I), actedin(I, J) )
%   | then if ( created(K, J), ismarriedto(K, A) )
%   | | then return 0.2570620312580188;  // std dev = 2,000, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else return 0.25523809467769837;  // std dev = 9,092, 331,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=165 */
%   | else return 0.25593467263399056;  // std dev = 49,085, 9.638,000 (wgt'ed) examples reached here.  /* #neg=4.826 #pos=4.812 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( actedin(C, F) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, G), actedin(G, H) )
%   | then if ( actedin(I, H), ismarriedto(A, I) )
%   | | then return 0.5935138728206572;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.23738950005173465;  // std dev = 6,549, 173,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=90 */
%   | else if ( ismarriedto(A, J), actedin(J, K) )
%   | | then if ( created(L, K), ismarriedto(L, A) )
%   | | | then return 0.20673456246391275;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.16165790500661248;  // std dev = 8,581, 297,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=135 */
%   | | else return 0.20653592569483234;  // std dev = 48,734, 9.500,000 (wgt'ed) examples reached here.  /* #neg=4.748 #pos=4.752 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( created(F, E), ismarriedto(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( actedin(G, E), ismarriedto(A, G) )
%   | | | then return 0.446455334350373;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.18687654176287297;  // std dev = 6,547, 173,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=90 */
%   | else if ( ismarriedto(A, H), actedin(H, I) )
%   | | then if ( created(J, I), ismarriedto(J, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.1286734070446689;  // std dev = 8,784, 311,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=142 */
%   | | else return 0.16195273303530805;  // std dev = 48,734, 9.500,000 (wgt'ed) examples reached here.  /* #neg=4.748 #pos=4.752 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( created(F, E), ismarriedto(F, B) )
%   | | then if ( created(G, E), ismarriedto(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.22250163109208665;  // std dev = 1,538, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( actedin(H, E), ismarriedto(A, H) )
%   | | | then return 0.34041207392180306;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.13933968508705216;  // std dev = 6,357, 163,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=84 */
%   | else if ( ismarriedto(A, I), actedin(I, J) )
%   | | then if ( created(K, J), ismarriedto(K, A) )
%   | | | then return 0.13278171206586906;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.0981559896903974;  // std dev = 8,581, 297,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=135 */
%   | | else return 0.1248095189515358;  // std dev = 48,734, 9.500,000 (wgt'ed) examples reached here.  /* #neg=4.748 #pos=4.752 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(A, F) )
%   | | then return 0.26857381898009147;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( created(G, E), ismarriedto(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.10976531665445506;  // std dev = 6,543, 173,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=90 */
%   | else if ( ismarriedto(A, H), actedin(H, I) )
%   | | then return 0.07651215999252634;  // std dev = 8,783, 311,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=142 */
%   | | else return 0.09512164368250851;  // std dev = 48,734, 9.500,000 (wgt'ed) examples reached here.  /* #neg=4.748 #pos=4.752 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( ismarriedto(B, D) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( ismarriedto(B, F), actedin(F, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1770964977452774;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, H), actedin(H, I) )
%   | then return 0.08375721463855829;  // std dev = 6,544, 174,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=91 */
%   | else if ( ismarriedto(A, J), actedin(J, K) )
%   | | then return 0.05832771097401001;  // std dev = 8,783, 311,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=142 */
%   | | else return 0.07200684337522004;  // std dev = 48,734, 9.500,000 (wgt'ed) examples reached here.  /* #neg=4.748 #pos=4.752 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( created(F, E), ismarriedto(F, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.07924006471881134;  // std dev = 9,226, 347,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=173 */
%   | else if ( ismarriedto(B, G), actedin(G, H) )
%   | | then if ( created(I, H), ismarriedto(I, B) )
%   | | | then return -0.045765792561912835;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.018543050168749152;  // std dev = 5,674, 131,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=57 */
%   | | else return 0.05429237975370475;  // std dev = 48,734, 9.500,000 (wgt'ed) examples reached here.  /* #neg=4.748 #pos=4.752 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( ismarriedto(A, D) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.13400703000801117;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, F), actedin(F, G) )
%   | then if ( created(H, G), ismarriedto(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.06296013500391583;  // std dev = 6,501, 174,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=91 */
%   | else if ( ismarriedto(A, I), actedin(I, J) )
%   | | then if ( created(K, J), ismarriedto(K, A) )
%   | | | then return 0.04916744688805086;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.02380572708367866;  // std dev = 8,581, 297,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=135 */
%   | | else return 0.040841891747897166;  // std dev = 48,734, 9.500,000 (wgt'ed) examples reached here.  /* #neg=4.748 #pos=4.752 */


Results
   AUC ROC   = 0.507922
   AUC PR    = 0.513878
   CLL	      = -0.693907
   Precision = 0.963415 at threshold = 0.5
   Recall    = 0.0079
   F1        = 0.015671


Total learning time: 1254.324 seconds
Total inference time: 65.869 seconds
AUC ROC: 0.507922


Structure after Parameter Learning
[['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false,true': 'actedin(F, E), ismarriedto(B, F)', 'false': 'ismarriedto(A, D), actedin(D, E)', 'false,true,false': 'created(G, E), ismarriedto(G, B)', 'false,false,true': 'created(J, I), ismarriedto(J, A)', 'false,false': 'ismarriedto(B, H), actedin(H, I)'}, {'false,true,true': [0.0, 0, 1], 'false,false,false': [48.734, 4748, 4752], 'false,true,false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 15], 'false,false,true,false': [5.823, 78, 60], 'false,true,false,false': [9.3, 174, 172]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)'}, {'false': [49.96, 5000, 4985], 'true': [5.16e-08, 0, 15]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false,true': 'created(K, J), ismarriedto(K, A)', 'true,true': 'actedin(C, F)', 'true,false': 'ismarriedto(A, G), actedin(G, H)', 'false': 'ismarriedto(A, I), actedin(I, J)', 'true': 'ismarriedto(B, D), actedin(D, E)'}, {'true,false,true': [0.0, 0, 0], 'false,true,true': [2.0, 8, 8], 'true,false,false': [0.0, 0, 14], 'false,true,false': [9.092, 166, 165], 'true,true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 1], 'false,false': [49.085, 4826, 4812]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false,true': 'actedin(I, H), ismarriedto(A, I)', 'true,true': 'actedin(C, F)', 'false': 'ismarriedto(B, G), actedin(G, H)', 'false,false,true': 'created(L, K), ismarriedto(L, A)', 'true': 'ismarriedto(A, D), actedin(D, E)', 'false,false': 'ismarriedto(A, J), actedin(J, K)'}, {'false,true,true': [0.0, 0, 1], 'false,false,false': [48.734, 4748, 4752], 'true,false': [4.21e-08, 0, 14], 'false,true,false': [6.549, 83, 90], 'true,true,false': [0.0, 0, 0], 'false,false,true,true': [1.871, 7, 7], 'true,true,true': [0.0, 0, 1], 'false,false,true,false': [8.581, 162, 135]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false,true': 'created(F, E), ismarriedto(F, A)', 'false': 'ismarriedto(B, D), actedin(D, E)', 'false,true,false': 'actedin(G, E), ismarriedto(A, G)', 'false,false,true': 'created(J, I), ismarriedto(J, B)', 'false,false': 'ismarriedto(A, H), actedin(H, I)'}, {'false,true,true': [0.0, 0, 0], 'false,false,false': [48.734, 4748, 4752], 'false,true,false,true': [0.0, 0, 1], 'false,false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 15], 'false,false,true,false': [8.784, 169, 142], 'false,true,false,false': [6.547, 83, 90]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false,true,true': 'created(G, E), ismarriedto(G, A)', 'false,true': 'created(F, E), ismarriedto(F, B)', 'false': 'ismarriedto(B, D), actedin(D, E)', 'false,true,false': 'actedin(H, E), ismarriedto(A, H)', 'false,false,true': 'created(K, J), ismarriedto(K, A)', 'false,false': 'ismarriedto(A, I), actedin(I, J)'}, {'false,false,false': [48.734, 4748, 4752], 'false,true,false,false': [6.357, 79, 84], 'false,true,false,true': [0.0, 0, 1], 'false,false,true,true': [1.871, 7, 7], 'false,true,true,false': [1.538, 4, 6], 'true': [2.36e-08, 0, 15], 'false,false,true,false': [8.581, 162, 135], 'false,true,true,true': [0.0, 0, 0]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false,true,false': 'created(G, E), ismarriedto(G, A)', 'false,true': 'actedin(F, E), ismarriedto(A, F)', 'false,false': 'ismarriedto(A, H), actedin(H, I)', 'false': 'ismarriedto(B, D), actedin(D, E)'}, {'false,true,true': [0.0, 0, 1], 'false,false,true': [8.783, 169, 142], 'false,false,false': [48.734, 4748, 4752], 'false,true,false,true': [0.0, 0, 0], 'true': [0.0, 0, 15], 'false,true,false,false': [6.543, 83, 90]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false': 'ismarriedto(B, H), actedin(H, I)', 'true,true': 'ismarriedto(B, D)', 'true,false': 'ismarriedto(B, F), actedin(F, G)', 'true': 'ismarriedto(A, D), actedin(D, E)', 'false,false': 'ismarriedto(A, J), actedin(J, K)'}, {'true,false,true': [0.0, 0, 0], 'false,true': [6.544, 83, 91], 'false,false,true': [8.783, 169, 142], 'false,false,false': [48.734, 4748, 4752], 'true,true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 14]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false,true': 'created(F, E), ismarriedto(F, B)', 'false,false,true': 'created(I, H), ismarriedto(I, B)', 'false,false': 'ismarriedto(B, G), actedin(G, H)', 'false': 'ismarriedto(A, D), actedin(D, E)'}, {'false,true,true': [0.0, 0, 0], 'false,false,false': [48.734, 4748, 4752], 'false,true,false': [9.226, 174, 173], 'false,false,true,true': [1.309, 4, 3], 'true': [0.0, 0, 15], 'false,false,true,false': [5.674, 74, 57]}], ['haschild(A, B)', {'': 'ismarriedto(A, C), ismarriedto(B, C)', 'false,true': 'created(H, G), ismarriedto(H, A)', 'true,true': 'ismarriedto(A, D)', 'false': 'ismarriedto(B, F), actedin(F, G)', 'false,false,true': 'created(K, J), ismarriedto(K, A)', 'true': 'ismarriedto(B, D), actedin(D, E)', 'false,false': 'ismarriedto(A, I), actedin(I, J)'}, {'false,true,true': [0.0, 0, 0], 'false,false,false': [48.734, 4748, 4752], 'true,false': [0.0, 0, 14], 'false,true,false': [6.501, 83, 91], 'true,true,false': [0.0, 0, 0], 'false,false,true,true': [1.871, 7, 7], 'true,true,true': [0.0, 0, 1], 'false,false,true,false': [8.581, 162, 135]}]]
[{'': [-2.3684757858670006e-16, 0.24999943580863992], 'false,true': [0.0, 0.2499916468976622], 'false': [0.24999792374324625, 0.24999947250022228], 'false,true,false': [nan, 0.2499916468976614], 'false,false,true': [nan, 0.24574669187145567], 'false,false': [0.2457466918714555, 0.24999995567870245]}, {'': [1.7763568394002506e-16, 0.24997488545539662]}, {'': [-2.3684757858670006e-16, 0.2499708772801948], 'false,true': [0.25000000000000017, 0.24971581360073145], 'true,true': [0.0, nan], 'true,false': [nan, -2.5376526277146434e-16], 'false': [0.24972906361799233, 0.24997957033839796], 'true': [0.0, -2.5376526277146434e-16]}, {'': [1.4802973661668753e-16, 0.2499678813800754], 'false,true': [0.0, 0.2478990299231094], 'true,true': [0.0, nan], 'false': [0.24719901073991563, 0.24999653569957278], 'false,false,true': [0.24999999999999983, 0.24793388429751934], 'true': [0.0, 1.2688263138573217e-16], 'false,false': [0.24811424356754372, 0.24999995567871405]}, {'': [-1.4802973661668754e-17, 0.24992904358748738], 'false,true,false': [0.0, 0.2477434039645919], 'false,true': [nan, 0.2467046137209746], 'false': [0.24670461372097474, 0.24997307915834405], 'false,false,true': [nan, 0.24807968586197876], 'false,false': [0.24807968586197668, 0.2499999556786484]}, {'': [3.700743415417188e-17, 0.24990483537632469], 'false,true,false': [0.0, 0.24792540734842536], 'false,true,true': [nan, 0.2365583545093172], 'false,true': [0.2365583545093172, 0.2466586888921422], 'false': [0.24644186841365157, 0.2499583748833541], 'false,false,true': [0.24999999999999994, 0.24793388429752014], 'false,false': [0.24807843473632207, 0.24999995567868585]}, {'': [-2.960594732333751e-17, 0.2498871928896678], 'false,true,false': [nan, 0.2474257049835114], 'false,true': [0.0, 0.2474257049835114], 'false': [0.24614782850127984, 0.24994896821722826], 'false,false': [0.2480561383419049, 0.24999995567867853]}, {'': [-7.401486830834377e-18, 0.24987921718757317], 'false': [0.24607716991861306, 0.24994406033540328], 'true,true': [0.0, nan], 'true,false': [nan, 0.0], 'true': [0.0, 0.0], 'false,false': [0.24805545914548038, 0.24999995567866196]}, {'': [-1.4802973661668754e-17, 0.2498753681342272], 'false,true': [nan, 0.2452808638253716], 'false': [0.24528086382537284, 0.25001727441996147], 'false,false,true': [0.2448979591836735, 0.24578987238505862], 'false,false': [0.24578031452439292, 0.24999995567865566]}, {'': [0.0, 0.24983228241036917], 'false,true': [nan, 0.2429150838503967], 'true,true': [0.0, nan], 'false': [0.24291508385039626, 0.24994604229878709], 'false,false,true': [0.24999999999999994, 0.24793388429752014], 'true': [0.0, 0.0], 'false,false': [0.24805454437499766, 0.24999995567868513]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '0;false,true;actedin(F, E), ismarriedto(B, F).;true;true', '0;false;ismarriedto(A, D), actedin(D, E).;true;true', '1;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '2;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '2;true;ismarriedto(B, D), actedin(D, E).;true;true', '3;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '3;false,true;actedin(I, H), ismarriedto(A, I).;true;true', '3;false;ismarriedto(B, G), actedin(G, H).;true;true', '3;true;ismarriedto(A, D), actedin(D, E).;true;true', '4;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '4;false,true;actedin(G, E), ismarriedto(A, G).;true;true', '4;false;ismarriedto(B, D), actedin(D, E).;true;true', '5;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '5;false,true,false;actedin(H, E), ismarriedto(A, H).;true;true', '5;false,true;created(F, E), ismarriedto(F, B).;true;true', '5;false;ismarriedto(B, D), actedin(D, E).;true;true', '6;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '6;false,true;actedin(F, E), ismarriedto(A, F).;true;true', '6;false;ismarriedto(B, D), actedin(D, E).;true;true', '7;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '7;true;ismarriedto(A, D), actedin(D, E).;true;true', '8;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '9;;haschild(A, B) :- ismarriedto(A, C), ismarriedto(B, C).;true;true', '9;true;ismarriedto(B, D), actedin(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(B, F) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( actedin(B, G) )
%   | | | then return 0.7765162820382869;  // std dev = 2,711, 98,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=90 */
%   | | | else return 0.18879409638983485;  // std dev = 7,409, 248,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=82 */
%   | else if ( ismarriedto(A, H), ismarriedto(B, I) )
%   | | then if ( diedin(H, J), wasbornin(B, K) )
%   | | | then return 0.6169724645112743;  // std dev = 5,578, 170,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=129 */
%   | | | else return 0.43561372383190194;  // std dev = 21,223, 1.846,000 (wgt'ed) examples reached here.  /* #neg=780 #pos=1.066 */
%   | | else if ( isaffiliatedto(A, L), isaffiliatedto(B, L) )
%   | | | then return 0.8476226193100379;  // std dev = 0,995, 95,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | | else return 0.3261972943395763;  // std dev = 43,290, 7.527,000 (wgt'ed) examples reached here.  /* #neg=4.004 #pos=3.523 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(A, D), ismarriedto(B, E) )
%   | then if ( diedin(D, F), wasbornin(B, F) )
%   | | then if ( wasbornin(D, F), diedin(A, F) )
%   | | | then return 0.5988250593184676;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7649859446936492;  // std dev = 0,030, 59,000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( wasbornin(B, G), isleaderof(H, G) )
%   | | | then return 0.2480326880351559;  // std dev = 6,480, 173,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=80 */
%   | | | else return 0.38409468627933757;  // std dev = 21,248, 1.876,000 (wgt'ed) examples reached here.  /* #neg=771 #pos=1.105 */
%   | else if ( isaffiliatedto(A, I), graduatedfrom(B, J) )
%   | | then if ( worksat(K, J), owns(J, L) )
%   | | | then return 0.7443073942397043;  // std dev = 0,991, 46,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.49817636245651203;  // std dev = 2,804, 43,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=31 */
%   | | else if ( ismarriedto(B, M) )
%   | | | then return 0.20921562276332673;  // std dev = 17,146, 1.232,000 (wgt'ed) examples reached here.  /* #neg=744 #pos=488 */
%   | | | else return 0.297271589794696;  // std dev = 40,348, 6.550,000 (wgt'ed) examples reached here.  /* #neg=3.378 #pos=3.172 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( diedin(A, D), wasbornin(B, E) )
%   | then if ( wasbornin(A, E) )
%   | | then if ( ismarriedto(A, F), ismarriedto(B, G) )
%   | | | then return 0.6837905862492505;  // std dev = 0,271, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.7558653614299649;  // std dev = 0,215, 53,000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else if ( wasbornin(H, D), diedin(H, E) )
%   | | | then return 0.6389063766858146;  // std dev = 3,670, 157,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=142 */
%   | | | else return 0.18972477590836287;  // std dev = 9,172, 355,000 (wgt'ed) examples reached here.  /* #neg=198 #pos=157 */
%   | else if ( ismarriedto(A, I), ismarriedto(B, J) )
%   | | then if ( wasbornin(B, K), wasbornin(A, L) )
%   | | | then return 0.44158699282844216;  // std dev = 4,686, 119,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=87 */
%   | | | else return 0.29505001685962273;  // std dev = 21,048, 1.826,000 (wgt'ed) examples reached here.  /* #neg=788 #pos=1.038 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.1931140418213367;  // std dev = 27,050, 3.024,000 (wgt'ed) examples reached here.  /* #neg=1.722 #pos=1.302 */
%   | | | else return 0.25938917336988804;  // std dev = 33,111, 4.427,000 (wgt'ed) examples reached here.  /* #neg=2.245 #pos=2.182 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then if ( ismarriedto(A, D), actedin(D, E) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( ismarriedto(B, F), actedin(F, G) )
%   | then if ( actedin(H, G), ismarriedto(A, H) )
%   | | then return 0.5290097291373616;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( actedin(A, I), directed(J, I) )
%   | | | then return 0.5499770214038794;  // std dev = 1,874, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.06997366608664471;  // std dev = 5,489, 128,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=49 */
%   | else if ( wasbornin(A, K), wasbornin(B, K) )
%   | | then if ( diedin(A, L) )
%   | | | then return 0.5712426038024961;  // std dev = 0,489, 76,000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | | else return 0.6869976946724297;  // std dev = 0,581, 90,000 (wgt'ed) examples reached here.  /* #pos=90 */
%   | | else if ( ismarriedto(A, M), ismarriedto(B, N) )
%   | | | then return 0.24725929019268733;  // std dev = 21,531, 1.958,000 (wgt'ed) examples reached here.  /* #neg=807 #pos=1.151 */
%   | | | else return 0.18496533018964756;  // std dev = 43,374, 7.687,000 (wgt'ed) examples reached here.  /* #neg=4.110 #pos=3.577 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(A, F) )
%   | | then return 0.39823125605094056;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( actedin(A, G), created(H, G) )
%   | | | then return 0.42248213312175553;  // std dev = 1,890, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.054044610639874;  // std dev = 5,478, 128,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=49 */
%   | else if ( ismarriedto(B, I), isaffiliatedto(A, J) )
%   | | then if ( isaffiliatedto(B, J) )
%   | | | then return 0.5229379644053873;  // std dev = 1,014, 27,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.1152149877920962;  // std dev = 5,289, 160,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=37 */
%   | | else if ( actedin(A, K), actedin(B, L) )
%   | | | then return 0.5239992079635293;  // std dev = 2,996, 98,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=89 */
%   | | | else return 0.16060499911706203;  // std dev = 47,935, 9.526,000 (wgt'ed) examples reached here.  /* #neg=4.784 #pos=4.742 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( created(F, E), ismarriedto(F, B) )
%   | | then if ( ismarriedto(A, G) )
%   | | | then return 0.3101246642403021;  // std dev = 0,765, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.03582425100841839;  // std dev = 0,874, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( actedin(H, E), ismarriedto(A, H) )
%   | | | then return 0.30766219138424833;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.11121496637641785;  // std dev = 5,874, 163,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=84 */
%   | else if ( wasbornin(B, I), diedin(A, I) )
%   | | then if ( ismarriedto(A, J), ismarriedto(B, K) )
%   | | | then return 0.38430620115414516;  // std dev = 1,197, 49,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.5168240630231234;  // std dev = 0,860, 114,000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( diedin(A, L), diedin(B, L) )
%   | | | then return 0.5664836245892221;  // std dev = 1,140, 52,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | | else return 0.11581328393156594;  // std dev = 48,119, 9.596,000 (wgt'ed) examples reached here.  /* #neg=4.915 #pos=4.681 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( ismarriedto(B, D), actedin(D, E) )
%   | then if ( actedin(F, E), ismarriedto(A, F) )
%   | | then return 0.24624622788722828;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( wasbornin(A, G), isleaderof(H, G) )
%   | | | then return 0.33992717445903203;  // std dev = 1,817, 31,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=26 */
%   | | | else return 0.03372763111404549;  // std dev = 5,510, 142,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=64 */
%   | else if ( wasbornin(B, I), wasbornin(A, I) )
%   | | then if ( diedin(A, I) )
%   | | | then return 0.2810937384974181;  // std dev = 0,277, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.4267827718524441;  // std dev = 0,905, 121,000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( wasbornin(B, J), diedin(K, J) )
%   | | | then return 0.04844193588020462;  // std dev = 21,292, 2.004,000 (wgt'ed) examples reached here.  /* #neg=1.076 #pos=928 */
%   | | | else return 0.10091900903701558;  // std dev = 43,156, 7.641,000 (wgt'ed) examples reached here.  /* #neg=3.841 #pos=3.800 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( actedin(A, D), actedin(B, E) )
%   | then if ( ismarriedto(B, F), wasbornin(A, G) )
%   | | then if ( wrotemusicfor(H, D) )
%   | | | then return 0.25544412107617526;  // std dev = 1,260, 28,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return -0.5367922271512798;  // std dev = 0,279, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( edited(I, D) )
%   | | | then return 0.4117039245167946;  // std dev = 1,179, 52,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | | else return 0.3175697929556434;  // std dev = 2,351, 54,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=48 */
%   | else if ( isaffiliatedto(B, J), isaffiliatedto(A, K) )
%   | | then if ( wasbornin(A, L), diedin(A, M) )
%   | | | then return 0.18467907098627265;  // std dev = 1,805, 28,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   | | | else return 0.3460271002500396;  // std dev = 3,411, 142,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=126 */
%   | | else if ( isaffiliatedto(B, N) )
%   | | | then return -0.13060098916354404;  // std dev = 8,200, 351,000 (wgt'ed) examples reached here.  /* #neg=252 #pos=99 */
%   | | | else return 0.0718041496098889;  // std dev = 47,279, 9.327,000 (wgt'ed) examples reached here.  /* #neg=4.714 #pos=4.613 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( isaffiliatedto(B, D), isaffiliatedto(A, D) )
%   | then if ( wasbornin(B, E), created(A, F) )
%   | | then if ( happenedin(G, E) )
%   | | | then return 0.3015423565878944;  // std dev = 0,000227, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.02158178234729785;  // std dev = 0,665, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( created(B, H), diedin(A, I) )
%   | | | then return 0.03821995951853722;  // std dev = 0,812, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3253189581345868;  // std dev = 0,732, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( wasbornin(A, J), wasbornin(B, J) )
%   | | then if ( diedin(A, K) )
%   | | | then return 0.23715574973799672;  // std dev = 0,430, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.3513514232732846;  // std dev = 0,684, 87,000 (wgt'ed) examples reached here.  /* #pos=87 */
%   | | else if ( wasbornin(A, L) )
%   | | | then return 0.011853415595703565;  // std dev = 22,581, 2.202,000 (wgt'ed) examples reached here.  /* #neg=1.203 #pos=999 */
%   | | | else return 0.058601574276025366;  // std dev = 42,582, 7.510,000 (wgt'ed) examples reached here.  /* #neg=3.795 #pos=3.715 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( wasbornin(B, D), diedin(A, D) )
%   | then if ( wasbornin(A, D) )
%   | | then if ( ismarriedto(A, E), diedin(E, D) )
%   | | | then return 0.14720304738055148;  // std dev = 0,100, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.19216492482260614;  // std dev = 0,269, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( ismarriedto(B, F), hascapital(G, D) )
%   | | | then return 0.2711027579417918;  // std dev = 1,117, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.37863638332559674;  // std dev = 0,677, 94,000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | else if ( isaffiliatedto(A, H), ismarriedto(B, I) )
%   | | then if ( isaffiliatedto(B, H) )
%   | | | then return 0.2164713839026853;  // std dev = 0,919, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.16299443165401142;  // std dev = 5,397, 168,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=39 */
%   | | else if ( diedin(A, J), wasbornin(K, J) )
%   | | | then return -0.005249589807653111;  // std dev = 19,466, 1.651,000 (wgt'ed) examples reached here.  /* #neg=900 #pos=751 */
%   | | | else return 0.049845267145645133;  // std dev = 43,628, 7.972,000 (wgt'ed) examples reached here.  /* #neg=3.969 #pos=4.003 */


Results
   AUC ROC   = 0.649615
   AUC PR    = 0.67803
   CLL	      = -0.660882
   Precision = 0.702324 at threshold = 0.5
   Recall    = 0.3204
   F1        = 0.440049


Total learning time: 463.431 seconds
Total inference time: 101.194 seconds
AUC ROC: 0.649615


Refined model AUC ROC: 0.649615


Dataset: 17_cora_yago2s, Fold: 1, Type: transfer, Time: 12:17:09
{'Learning time': 1717.755, 'Inference time': 101.194, 'AUC PR': 0.67803, 'F1': 0.440049, 'Recall': 0.3204, 'Parameter Learning results': {'Learning time': 1254.324, 'Inference time': 65.869, 'AUC PR': 0.513878, 'F1': 0.015671, 'Recall': 0.0079, 'AUC ROC': 0.507922, 'CLL': -0.693907, 'Precision': [0.963415, 0.5]}, 'AUC ROC': 0.649615, 'Mapping results': {'Knowledge compiling time': 23.85363459587097, 'Generating mappings time': 107.97751951217651, 'Possible mappings': 441488, 'Finding best mapping': 180.48164463043213, 'Total time': 315.179475069046, 'Generating paths time': 2.8666675090789795}, 'CLL': -0.660882, 'Precision': [0.702324, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( diedin(C, E), wasbornin(B, E) )
%   | then return 0.8427643197148973;  // std dev = 0,123, 65,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( graduatedfrom(A, F) )
%   | | then return 0.1990580260086019;  // std dev = 0,474, 88,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=30 */
%   | | else if ( actedin(A, G), actedin(B, H) )
%   | | | then return 0.7581489350995114;  // std dev = 1,897, 40,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=36 */
%   | | | else return 0.4438927367524;  // std dev = 21,674, 1.936,000 (wgt'ed) examples reached here.  /* #neg=802 #pos=1.134 */
%   else if ( ismarriedto(B, I) )
%   | then if ( isaffiliatedto(A, J) )
%   | | then return 0.13537665787178846;  // std dev = 0,448, 101,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=28 */
%   | | else return 0.2655238253541168;  // std dev = 0,491, 1.139,000 (wgt'ed) examples reached here.  /* #neg=675 #pos=464 */
%   | else if ( isaffiliatedto(A, K), isaffiliatedto(B, L) )
%   | | then return 0.7331489350995102;  // std dev = 0,331, 136,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=119 */
%   | | else if ( ismarriedto(A, M) )
%   | | | then return 0.2896018188057789;  // std dev = 27,899, 3.173,000 (wgt'ed) examples reached here.  /* #neg=1.804 #pos=1.369 */
%   | | | else return 0.38674616568349274;  // std dev = 28,771, 3.322,000 (wgt'ed) examples reached here.  /* #neg=1.566 #pos=1.756 */
WILL Produced-Tree #2
% FOR haschild(A, B):
%   if ( ismarriedto(B, C), ismarriedto(A, D) )
%   then if ( diedin(C, E), diedin(A, E) )
%   | then return 0.7470494235828049;  // std dev = 0,196, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else if ( haswonprize(B, F), wasbornin(A, G) )
%   | | then return 0.6397569011882589;  // std dev = 0,344, 63,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=54 */
%   | | else if ( wasbornin(B, H), wasbornin(D, H) )
%   | | | then return 0.7444258016778792;  // std dev = 1,055, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.36730933167002006;  // std dev = 22,011, 2.000,000 (wgt'ed) examples reached here.  /* #neg=854 #pos=1.146 */
%   else if ( isaffiliatedto(A, I), isaffiliatedto(B, I) )
%   | then return 0.7416279336323951;  // std dev = 0,106, 95,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | else if ( ismarriedto(B, J) )
%   | | then if ( actedin(J, K) )
%   | | | then return 0.414912445217948;  // std dev = 3,831, 61,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=36 */
%   | | | else return 0.20657572262128904;  // std dev = 16,616, 1.171,000 (wgt'ed) examples reached here.  /* #neg=723 #pos=448 */
%   | | else if ( iscitizenof(A, L), iscitizenof(B, L) )
%   | | | then return 0.789330037502021;  // std dev = 0,996, 61,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.2889385865754901;  // std dev = 40,156, 6.483,000 (wgt'ed) examples reached here.  /* #neg=3.385 #pos=3.098 */
WILL Produced-Tree #3
% FOR haschild(A, B):
%   if ( iscitizenof(B, C), iscitizenof(A, C) )
%   then if ( diedin(A, D), hascurrency(C, E) )
%   | then if ( diedin(B, F) )
%   | | then return 0.6292981636822341;  // std dev = 0,092, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1466893613990536;  // std dev = 1,072, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.6580909988610826;  // std dev = 0,326, 68,000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( isaffiliatedto(A, G), isaffiliatedto(B, G) )
%   | then if ( ismarriedto(B, H) )
%   | | then return 0.6868592695080024;  // std dev = 0,180, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.5805966391944246;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( iscitizenof(B, I) )
%   | | then if ( created(A, J), dealswith(K, I) )
%   | | | then return 0.416320419742822;  // std dev = 3,024, 41,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.09621224963320156;  // std dev = 9,255, 384,000 (wgt'ed) examples reached here.  /* #neg=255 #pos=129 */
%   | | else if ( wasbornin(A, L), wasbornin(B, L) )
%   | | | then return 0.7378972147778048;  // std dev = 0,675, 153,000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | | | else return 0.24599687379166252;  // std dev = 47,667, 9.237,000 (wgt'ed) examples reached here.  /* #neg=4.728 #pos=4.509 */
WILL Produced-Tree #4
% FOR haschild(A, B):
%   if ( wasbornin(A, C), wasbornin(B, D) )
%   then if ( diedin(A, D) )
%   | then return 0.6130230834078556;  // std dev = 0,100, 97,000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else if ( participatedin(D, E), participatedin(C, F) )
%   | | then return 0.5760444363133496;  // std dev = 0,180, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( participatedin(C, G), isleaderof(H, D) )
%   | | | then return -0.1801771527667486;  // std dev = 1,650, 29,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | | | else return 0.24982461928217486;  // std dev = 11,776, 639,000 (wgt'ed) examples reached here.  /* #neg=273 #pos=366 */
%   else if ( diedin(A, I), diedin(B, I) )
%   | then return 0.657741891523382;  // std dev = 0,146, 62,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else if ( ismarriedto(A, J), ismarriedto(B, K) )
%   | | then if ( isaffiliatedto(A, L) )
%   | | | then return 0.05535404521958757;  // std dev = 4,126, 82,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=30 */
%   | | | else return 0.25761195494573164;  // std dev = 20,901, 1.828,000 (wgt'ed) examples reached here.  /* #neg=760 #pos=1.068 */
%   | | else if ( ismarriedto(A, M), diedin(M, N) )
%   | | | then return 0.08798884398181225;  // std dev = 12,457, 676,000 (wgt'ed) examples reached here.  /* #neg=431 #pos=245 */
%   | | | else return 0.18956906002852528;  // std dev = 39,983, 6.557,000 (wgt'ed) examples reached here.  /* #neg=3.456 #pos=3.101 */
WILL Produced-Tree #5
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), ismarriedto(B, D) )
%   then if ( actedin(C, E), actedin(B, F) )
%   | then return 0.4483892275382244;  // std dev = 0,302, 51,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=46 */
%   | else return 0.19624510204791515;  // std dev = 0,482, 2.078,000 (wgt'ed) examples reached here.  /* #neg=860 #pos=1.218 */
%   else if ( ismarriedto(A, G) )
%   | then if ( graduatedfrom(A, H), graduatedfrom(B, I) )
%   | | then return 0.45779907099802225;  // std dev = 0,339, 34,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=29 */
%   | | else if ( haswonprize(G, J), wasbornin(B, K) )
%   | | | then return 0.304183592419314;  // std dev = 4,325, 86,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=55 */
%   | | | else return 0.11403355001637587;  // std dev = 27,173, 3.101,000 (wgt'ed) examples reached here.  /* #neg=1.774 #pos=1.327 */
%   | else if ( ismarriedto(B, L) )
%   | | then if ( actedin(L, M), actedin(A, N) )
%   | | | then return 0.5225430548502276;  // std dev = 1,264, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.09695723770303256;  // std dev = 16,897, 1.226,000 (wgt'ed) examples reached here.  /* #neg=746 #pos=480 */
%   | | else if ( iscitizenof(A, P), iscitizenof(B, P) )
%   | | | then return 0.40819868157691463;  // std dev = 0,902, 57,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.18835698291873965;  // std dev = 28,554, 3.353,000 (wgt'ed) examples reached here.  /* #neg=1.576 #pos=1.777 */
WILL Produced-Tree #6
% FOR haschild(A, B):
%   if ( wasbornin(A, C), haswonprize(B, D) )
%   then if ( hascapital(E, C) )
%   | then if ( livesin(F, C) )
%   | | then if ( isleaderof(G, C), wasbornin(B, H) )
%   | | | then return -0.17657771697305924;  // std dev = 1,183, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.27040626822709335;  // std dev = 2,986, 52,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=38 */
%   | | else return -0.35250357027969975;  // std dev = 0,054, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.32979016075416273;  // std dev = 0,377, 88,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=70 */
%   else if ( isaffiliatedto(B, I), ismarriedto(A, J) )
%   | then return -0.04574143818387207;  // std dev = 0,409, 238,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=88 */
%   | else if ( ismarriedto(B, K), ismarriedto(A, L) )
%   | | then if ( diedin(L, M), wasbornin(B, M) )
%   | | | then return 0.3903083636927551;  // std dev = 1,179, 56,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.14551650012313078;  // std dev = 21,469, 1.948,000 (wgt'ed) examples reached here.  /* #neg=823 #pos=1.125 */
%   | | else if ( wasbornin(B, N), diedin(A, N) )
%   | | | then return 0.5293147850694643;  // std dev = 1,165, 106,000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | | else return 0.11333504492322667;  // std dev = 42,478, 7.497,000 (wgt'ed) examples reached here.  /* #neg=3.982 #pos=3.515 */
WILL Produced-Tree #7
% FOR haschild(A, B):
%   if ( iscitizenof(B, C), iscitizenof(A, C) )
%   then if ( dealswith(C, D), ismarriedto(A, E) )
%   | then return 0.4358644576981894;  // std dev = 0,069, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( diedin(A, F), created(A, G) )
%   | | then return -0.18307254530768394;  // std dev = 0,712, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.33065738535175254;  // std dev = 0,074, 66,000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( wasbornin(A, H), wasbornin(B, H) )
%   | then if ( diedin(A, H) )
%   | | then return 0.27877201844664723;  // std dev = 0,059, 45,000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.4288218258716391;  // std dev = 0,079, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else if ( wasbornin(A, I) )
%   | | then if ( actedin(B, J), isleaderof(K, I) )
%   | | | then return 0.33664207617699543;  // std dev = 3,298, 73,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=58 */
%   | | | else return 0.04073292239469794;  // std dev = 22,140, 2.144,000 (wgt'ed) examples reached here.  /* #neg=1.189 #pos=955 */
%   | | else if ( wasbornin(B, L), diedin(M, L) )
%   | | | then return 0.028953458434827488;  // std dev = 18,361, 1.474,000 (wgt'ed) examples reached here.  /* #neg=833 #pos=641 */
%   | | | else return 0.11630554547604487;  // std dev = 38,357, 6.063,000 (wgt'ed) examples reached here.  /* #neg=2.961 #pos=3.102 */
WILL Produced-Tree #8
% FOR haschild(A, B):
%   if ( diedin(A, C), wasbornin(B, C) )
%   then if ( wasbornin(A, C) )
%   | then return 0.22434032226385378;  // std dev = 0,053, 46,000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.41036770549445456;  // std dev = 0,145, 123,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=122 */
%   else if ( wasbornin(B, D), diedin(E, D) )
%   | then if ( wasbornin(A, D) )
%   | | then return 0.3291723153366409;  // std dev = 0,072, 117,000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( created(A, F), hasmusicalrole(E, G) )
%   | | | then return 0.2191776615500236;  // std dev = 4,793, 102,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=65 */
%   | | | else return 0.0026823818346355444;  // std dev = 20,378, 1.858,000 (wgt'ed) examples reached here.  /* #neg=1.077 #pos=781 */
%   | else if ( diedin(A, H), wasbornin(I, H) )
%   | | then if ( diedin(B, J), wasbornin(K, J) )
%   | | | then return 0.15131130823337105;  // std dev = 6,333, 195,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=120 */
%   | | | else return -0.0018026156588214176;  // std dev = 16,405, 1.152,000 (wgt'ed) examples reached here.  /* #neg=677 #pos=475 */
%   | | else if ( ismarriedto(A, L), wasbornin(L, M) )
%   | | | then return 0.023349552376742386;  // std dev = 13,095, 730,000 (wgt'ed) examples reached here.  /* #neg=406 #pos=324 */
%   | | | else return 0.09755627619617167;  // std dev = 36,947, 5.677,000 (wgt'ed) examples reached here.  /* #neg=2.727 #pos=2.950 */
WILL Produced-Tree #9
% FOR haschild(A, B):
%   if ( isaffiliatedto(B, C) )
%   then if ( isaffiliatedto(A, D) )
%   | then return 0.24324416976267746;  // std dev = 0,291, 171,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=149 */
%   | else if ( ismarriedto(A, E), isaffiliatedto(E, F) )
%   | | then if ( isaffiliatedto(B, F) )
%   | | | then return 0.5024004023455393;  // std dev = 0,405, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.053425322222292716;  // std dev = 1,071, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( ismarriedto(A, G) )
%   | | | then return -0.24103471750309155;  // std dev = 4,076, 164,000 (wgt'ed) examples reached here.  /* #neg=142 #pos=22 */
%   | | | else return -0.05998314783071757;  // std dev = 6,060, 170,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=63 */
%   else if ( diedin(A, H), wasbornin(B, H) )
%   | then return 0.2835754193736041;  // std dev = 0,133, 154,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=153 */
%   | else if ( wasbornin(A, I), wasbornin(B, I) )
%   | | then return 0.2672315970018205;  // std dev = 0,059, 107,000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( haswonprize(B, J), haswonprize(A, K) )
%   | | | then return 0.3327720818066274;  // std dev = 2,768, 58,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=48 */
%   | | | else return 0.050599621623429444;  // std dev = 46,825, 9.159,000 (wgt'ed) examples reached here.  /* #neg=4.715 #pos=4.444 */
WILL Produced-Tree #10
% FOR haschild(A, B):
%   if ( ismarriedto(A, C), iscitizenof(B, D) )
%   then if ( iscitizenof(A, D) )
%   | then return 0.2655453642209585;  // std dev = 0,199, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( created(B, E), wasbornin(C, F) )
%   | | then return 0.49790500807098037;  // std dev = 0,101, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( graduatedfrom(C, G), livesin(B, H) )
%   | | | then return 0.614302355006185;  // std dev = 0,072, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.15369506095908217;  // std dev = 5,649, 191,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=45 */
%   else if ( diedin(A, I), diedin(B, J) )
%   | then if ( wasbornin(K, I), diedin(K, J) )
%   | | then return 0.2512863473701371;  // std dev = 0,253, 145,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=132 */
%   | | else return 0.043084379941433826;  // std dev = 0,468, 258,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=135 */
%   | else if ( iscitizenof(A, L), ismarriedto(B, M) )
%   | | then return -0.23118219435173032;  // std dev = 0,379, 78,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=14 */
%   | | else if ( diedin(A, N) )
%   | | | then return 0.004683078032659094;  // std dev = 17,990, 1.486,000 (wgt'ed) examples reached here.  /* #neg=803 #pos=683 */
%   | | | else return 0.05157119744948018;  // std dev = 42,871, 7.806,000 (wgt'ed) examples reached here.  /* #neg=3.850 #pos=3.956 */


Results
   AUC ROC   = 0.656476
   AUC PR    = 0.683525
   CLL	      = -0.653753
   Precision = 0.727853 at threshold = 0.5
   Recall    = 0.3081
   F1        = 0.432938


Total learning time: 1045.623 seconds
Total inference time: 105.765 seconds
AUC ROC: 0.656476


Dataset: 17_cora_yago2s, Fold: 1, Type: scratch, Time: 12:36:25
{'Learning time': 1045.623, 'Inference time': 105.765, 'AUC PR': 0.683525, 'F1': 0.432938, 'Recall': 0.3081, 'AUC ROC': 0.656476, 'CLL': -0.653753, 'Precision': [0.727853, 0.5]}


Starting fold 2

