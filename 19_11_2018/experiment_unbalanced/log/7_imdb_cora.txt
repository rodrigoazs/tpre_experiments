Starting experiment #1 for 7_imdb_cora

Start learning from source dataset

Source train facts examples: 696
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 6,32e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.14185106490048907;  // std dev = 0,000, 702,000 (wgt'ed) examples reached here.  /* #neg=702 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839235;  // std dev = 0,000, 698,000 (wgt'ed) examples reached here.  /* #neg=698 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 4,08e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.11231637819360643;  // std dev = 0,000, 684,000 (wgt'ed) examples reached here.  /* #neg=684 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783626;  // std dev = 3,16e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.10159632948783517;  // std dev = 4,31e-07, 690,000 (wgt'ed) examples reached here.  /* #neg=690 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.09269127618926187;  // std dev = 0,000, 733,000 (wgt'ed) examples reached here.  /* #neg=733 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0851847513883968;  // std dev = 1,97e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.08518475138839675;  // std dev = 1,30e-07, 705,000 (wgt'ed) examples reached here.  /* #neg=705 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0787767547310917;  // std dev = 2,98e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.07877675473109273;  // std dev = 0,000, 691,000 (wgt'ed) examples reached here.  /* #neg=691 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07324622576333646;  // std dev = 2,60e-07, 729,000 (wgt'ed) examples reached here.  /* #neg=729 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 2,79e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.06842697784420257;  // std dev = 1,84e-07, 709,000 (wgt'ed) examples reached here.  /* #neg=709 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.06419184008202532;  // std dev = 2,51e-07, 655,000 (wgt'ed) examples reached here.  /* #neg=655 */


Predicates from source: ['workedunder(person,person).', 'actor(person).', 'director(person).', 'movie(movie,person).']

Starting fold 1

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.06556582450866699
   Generating paths time   = 2.480449676513672
   Generating mappings time   = 0.0012774467468261719
   Possible mappings   = 6
   Finding best mapping   = 0.00047397613525390625
   Total time   = 2.5477747917175293


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24691298004332782;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2141231912543579;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.008190095289148226;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1810835367504864;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0072026760825635435;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1497113844521273;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.006339104698323429;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12142569356682817;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.005582779576928398;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0969816742486842;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004919559835558926;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07654417117959073;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.004337349869942665;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05987573542383707;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0038257646239601988;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04652714140939147;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0033758577331428233;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03597784751370811;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.002979899106663815;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */


Results
   AUC ROC   = 0.544977
   AUC PR    = 0.4025
   CLL	      = -0.657894
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 45.178 seconds
Total inference time: 1.659 seconds
AUC ROC: 0.544977


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}]]
[{'': [0.23762656230272572, 0.11496588764697444]}, {'': [0.2376265623027377, 0.11496588764697231]}, {'': [0.23762656230274476, 0.11496588764697424]}, {'': [0.23762656230274665, 0.11496588764697245]}, {'': [0.23762656230274673, 0.11496588764697466]}, {'': [0.23762656230274165, 0.11496588764697395]}, {'': [0.23762656230274046, 0.11496588764697332]}, {'': [0.2376265623027418, 0.11496588764697288]}, {'': [0.23762656230273527, 0.1149658876469723]}, {'': [0.23762656230273488, 0.11496588764697391]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.23971252903182966;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.41814893509951234;  // std dev = 2,482, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004815601766179008;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.20776215815791557;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.42639459932330653;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.46006839642807035;  // std dev = 0,809, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.357875390032125;  // std dev = 2,483, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2,789, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876183;  // std dev = 0,023, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0,016, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.004228390109386251;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.17588415373321178;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.3746696717621964;  // std dev = 0,808, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3565927027447454;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2940460642733747;  // std dev = 2,483, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.14976876060774358;  // std dev = 2,783, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14148503077066796;  // std dev = 0,043, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.13359848245519318;  // std dev = 0,038, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.004507924439813034;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.14544483670359806;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.3227229401921131;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.23919225013055126;  // std dev = 0,494, 28,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.13079504795460486;  // std dev = 2,782, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1251600609356522;  // std dev = 0,038, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11890105580746362;  // std dev = 0,035, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003958717519531415;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.11822014658968431;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.25368702818571987;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.2342998998075406;  // std dev = 0,806, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17824607288798724;  // std dev = 2,483, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.11256194261995345;  // std dev = 2,781, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.11208985954126982;  // std dev = 0,035, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10701563227211243;  // std dev = 0,032, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.0034749675716535754;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.09447606276515595;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.2257041716953359;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.19809660898112713;  // std dev = 0,793, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1327655324996101;  // std dev = 2,486, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.1137974259880508;  // std dev = 0,113, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 7.737667228845139E-4;  // std dev = 0,335, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003049209214166414;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.07476601768000693;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.17153754181405292;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.14877809582718673;  // std dev = 0,793, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1000434630412559;  // std dev = 2,486, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.049356880131916483;  // std dev = 0,324, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.10292103166502371;  // std dev = 0,103, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0026747502538140423;  // std dev = 2,996, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, P), haswordtitle(Q, P) )
%   | | | then return 0.006653519728894723;  // std dev = 2,746, 67,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05850790733645974;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.15289055662919684;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.11191257232056717;  // std dev = 0,794, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07514017974747213;  // std dev = 2,486, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.09872609342993752;  // std dev = 2,768, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.10113361611405061;  // std dev = 0,053, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08256522592251317;  // std dev = 0,034, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.0023456102534392727;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04559031394928308;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.1148621487224896;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.08761028719844388;  // std dev = 0,792, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.056012237892438484;  // std dev = 2,487, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.052068630359437984;  // std dev = 0,323, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return -0.0019283791410734156;  // std dev = 2,999, 80,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11687884799436137;  // std dev = 0,097, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, P), haswordtitle(Q, P) )
%   | | | then return 0.004283388674825821;  // std dev = 2,708, 67,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.03525156129215135;  // std dev = 0,485, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.10312278087292173;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.06859687719270387;  // std dev = 0,792, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04178075306820506;  // std dev = 2,487, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.08529911409777013;  // std dev = 2,759, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.09214869965344656;  // std dev = 0,058, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.07647696962256915;  // std dev = 0,032, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.00245980856130673;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.55736
   AUC PR    = 0.432268
   CLL	      = -0.650345
   Precision = 0.679389 at threshold = 0.5
   Recall    = 0.033598
   F1        = 0.064029


Total learning time: 110.92 seconds
Total inference time: 9.148 seconds
AUC ROC: 0.55736


Refined model AUC ROC: 0.55736


Dataset: 7_imdb_cora, Fold: 1, Type: transfer, Time: 00:16:46
{'Inference time': 9.148, 'Parameter Learning results': {'Inference time': 1.659, 'F1': nan, 'Precision': [nan, 0.5], 'AUC PR': 0.4025, 'CLL': -0.657894, 'Recall': 0.0, 'Learning time': 45.178, 'AUC ROC': 0.544977}, 'F1': 0.064029, 'Precision': [0.679389, 0.5], 'AUC PR': 0.432268, 'Mapping results': {'Possible mappings': 6, 'Total time': 2.5477747917175293, 'Finding best mapping': 0.00047397613525390625, 'Generating paths time': 2.480449676513672, 'Knowledge compiling time': 0.06556582450866699, 'Generating mappings time': 0.0012774467468261719}, 'CLL': -0.650345, 'Recall': 0.033598, 'Learning time': 156.098, 'AUC ROC': 0.55736}


Start learning from scratch in target domain

Target train facts examples: 7095
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 32446
Target test pos examples: 2649
Target test neg examples: 4334

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2,714, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3639794304549287;  // std dev = 2,714, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2,789, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876183;  // std dev = 0,023, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0,016, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.30278162210551013;  // std dev = 0,495, 35,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | then return -0.12205676751791568;  // std dev = 0,051, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.004507924439813034;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3180641845345655;  // std dev = 0,795, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.23613701195920173;  // std dev = 0,495, 35,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.15058071527896152;  // std dev = 2,779, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14136704096958908;  // std dev = 0,059, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12222326163509455;  // std dev = 0,041, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.003958717519531415;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else return 0.18653358853579813;  // std dev = 0,493, 38,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | then if ( title(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.13160418625804426;  // std dev = 2,777, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1250714584428941;  // std dev = 0,053, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10972932149175826;  // std dev = 0,037, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then return 0.0034749675716535754;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.197181558366467;  // std dev = 0,793, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16277191074276534;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13218868118483687;  // std dev = 2,718, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.03967422289111213;  // std dev = 0,326, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0027700523472619287;  // std dev = 3,003, 80,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11466288281299339;  // std dev = 0,060, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0071061632846846625;  // std dev = 2,791, 67,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.12239687758315512;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1480950642930633;  // std dev = 0,793, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09950360098189222;  // std dev = 2,718, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.03432211036965294;  // std dev = 0,326, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0024376059620380584;  // std dev = 3,003, 80,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1035784264379961;  // std dev = 0,055, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.00624545226447014;  // std dev = 2,791, 67,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.10495569112452521;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.11140987025581965;  // std dev = 0,793, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07250680778896071;  // std dev = 2,717, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09423926178894637;  // std dev = 0,056, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0017210508275258844;  // std dev = 0,339, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003980148572095287;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08418052316708517;  // std dev = 0,794, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07872977541409303;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05440208959744606;  // std dev = 2,717, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029089516335003132;  // std dev = 0,328, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.08651913302092346;  // std dev = 0,052, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0015095436290033899;  // std dev = 2,940, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.007384458298479573;  // std dev = 2,847, 67,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06721808986731918;  // std dev = 0,792, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.06017000369726655;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.040333093985486665;  // std dev = 2,718, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.11720557538453884;  // std dev = 2,759, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.11204452416443941;  // std dev = 0,085, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08684601698205194;  // std dev = 0,042, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003090515973824667;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557679
   AUC PR    = 0.428525
   CLL	      = -0.651875
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 130.007 seconds
Total inference time: 8.919 seconds
AUC ROC: 0.557679


Dataset: 7_imdb_cora, Fold: 1, Type: scratch, Time: 00:19:05
{'Inference time': 8.919, 'F1': 0.077305, 'Precision': [0.637427, 0.5], 'AUC PR': 0.428525, 'CLL': -0.651875, 'Recall': 0.041148, 'Learning time': 130.007, 'AUC ROC': 0.557679}


Starting fold 2

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.0593717098236084
   Generating paths time   = 2.3720293045043945
   Generating mappings time   = 0.0011985301971435547
   Possible mappings   = 6
   Finding best mapping   = 0.00047659873962402344
   Total time   = 2.4330811500549316


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.445862
   AUC PR    = 0.288412
   CLL	      = -0.749493
   Precision = 0.334027 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50078


Total learning time: 49.051 seconds
Total inference time: 2.218 seconds
AUC ROC: 0.445862


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37870858001379937;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5210951618969751;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.2432906201056202;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.03803853219756506;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.30883500037673695;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24447796057507154;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18783891145272807;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1422358465132325;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10698565255858997;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08029542675693055;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0602664729368309;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04527840275048811;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.524891
   AUC PR    = 0.331781
   CLL	      = -0.757218
   Precision = 0.353705 at threshold = 0.5
   Recall    = 0.958593
   F1        = 0.516741


Total learning time: 90.78999999999999 seconds
Total inference time: 7.224 seconds
AUC ROC: 0.524891


Refined model AUC ROC: 0.524891


Dataset: 7_imdb_cora, Fold: 2, Type: transfer, Time: 00:21:37
{'Inference time': 7.224, 'Parameter Learning results': {'Inference time': 2.218, 'F1': 0.50078, 'Precision': [0.334027, 0.5], 'AUC PR': 0.288412, 'CLL': -0.749493, 'Recall': 1.0, 'Learning time': 49.051, 'AUC ROC': 0.445862}, 'F1': 0.516741, 'Precision': [0.353705, 0.5], 'AUC PR': 0.331781, 'Mapping results': {'Possible mappings': 6, 'Total time': 2.4330811500549316, 'Finding best mapping': 0.00047659873962402344, 'Generating paths time': 2.3720293045043945, 'Knowledge compiling time': 0.0593717098236084, 'Generating mappings time': 0.0011985301971435547}, 'CLL': -0.757218, 'Recall': 0.958593, 'Learning time': 139.841, 'AUC ROC': 0.524891}


Start learning from scratch in target domain

Target train facts examples: 8245
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 31296
Target test pos examples: 2246
Target test neg examples: 4478

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5145754588862081;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.16457545888620817;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.06605466959315473;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13542454111379182;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.2399523433083081;  // std dev = 0,494, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3261448737160187;  // std dev = 1,915, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3103700402108464;  // std dev = 1,898, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.3332419990230316;  // std dev = 0,330, 33,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1861346662330817;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23233438181079047;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2166010869669191;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.344487667745488;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.33934134460665244;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10772948932183567;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14103842422531224;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1911614910571029;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14402452645856362;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.27133764558638873;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2678472860901805;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08386661726494864;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.37569645107374977;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.047853794842377284;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.18936821850955593;  // std dev = 0,836, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2708765083400113;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.30268794309310576;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.13559623752975208;  // std dev = 1,222, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.10238827315099981;  // std dev = 16,896, 1.167,000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.13902127271828763;  // std dev = 2,691, 41,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.14460947128480123;  // std dev = 0,380, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07966330523149731;  // std dev = 0,492, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1112494765476496;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07599089768730162;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1981010401604517;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.19497077821903627;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.0557096611473153;  // std dev = 0,491, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.030720443189324452;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.21726590692767536;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.0161158565064088;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.11683252985944922;  // std dev = 0,849, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.16634345264488554;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.25822235358817214;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.1811480059192885;  // std dev = 1,221, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.05691421360765554;  // std dev = 16,896, 1.167,000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.08444649389542902;  // std dev = 2,691, 41,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.09716145388773423;  // std dev = 0,379, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04502846983317403;  // std dev = 0,491, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.0681300968750308;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03778364545116984;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.15699579237993633;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.1531428192962987;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.01938691102371598;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0031057077695972957;  // std dev = 0,487, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537233
   AUC PR    = 0.345606
   CLL	      = -0.756061
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 141.108 seconds
Total inference time: 7.219 seconds
AUC ROC: 0.537233


Dataset: 7_imdb_cora, Fold: 2, Type: scratch, Time: 00:24:06
{'Inference time': 7.219, 'F1': 0.516595, 'Precision': [0.353871, 0.5], 'AUC PR': 0.345606, 'CLL': -0.756061, 'Recall': 0.956367, 'Learning time': 141.108, 'AUC ROC': 0.537233}


Starting fold 3

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.12429189682006836
   Generating paths time   = 2.4718639850616455
   Generating mappings time   = 0.0014848709106445312
   Possible mappings   = 6
   Finding best mapping   = 0.00046825408935546875
   Total time   = 2.5981149673461914


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22245374793373196;  // std dev = 18,613, 1.496,000 (wgt'ed) examples reached here.  /* #neg=951 #pos=545 */
%   else return 0.02178529873587505;  // std dev = 5,487, 220,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19098297251584684;  // std dev = 18,645, 1.505,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=545 */
%   else return 0.014066586036047463;  // std dev = 5,504, 227,000 (wgt'ed) examples reached here.  /* #neg=191 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15555509131849837;  // std dev = 18,742, 1.533,000 (wgt'ed) examples reached here.  /* #neg=988 #pos=545 */
%   else return 0.013020456917369793;  // std dev = 5,501, 226,000 (wgt'ed) examples reached here.  /* #neg=190 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13854347705902484;  // std dev = 18,610, 1.495,000 (wgt'ed) examples reached here.  /* #neg=950 #pos=545 */
%   else return 0.007939132039942384;  // std dev = 5,513, 231,000 (wgt'ed) examples reached here.  /* #neg=195 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10905705893140168;  // std dev = 18,673, 1.513,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=545 */
%   else return 0.015475176499210432;  // std dev = 5,485, 219,000 (wgt'ed) examples reached here.  /* #neg=183 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08352797082979405;  // std dev = 18,738, 1.532,000 (wgt'ed) examples reached here.  /* #neg=987 #pos=545 */
%   else return 0.022196621951717645;  // std dev = 5,456, 208,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0704234572293601;  // std dev = 18,684, 1.516,000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   else return 0.018502682431192526;  // std dev = 5,459, 209,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.050826796526172065;  // std dev = 18,755, 1.537,000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   else return 0.022048895844028686;  // std dev = 5,439, 202,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04206004174264619;  // std dev = 18,725, 1.528,000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   else return -0.003924196329734075;  // std dev = 5,515, 232,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.041526721680533604;  // std dev = 18,599, 1.492,000 (wgt'ed) examples reached here.  /* #neg=947 #pos=545 */
%   else return 0.011239006700794018;  // std dev = 5,467, 212,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=36 */


Results
   AUC ROC   = 0.547853
   AUC PR    = 0.49112
   CLL	      = -0.728366
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 11.64 seconds
Total inference time: 1.558 seconds
AUC ROC: 0.547853


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.487, 184, 36], 'true': [18.613, 951, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.504, 191, 36], 'true': [18.645, 960, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.501, 190, 36], 'true': [18.742, 988, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.513, 195, 36], 'true': [18.61, 950, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.485, 183, 36], 'true': [18.673, 968, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.456, 172, 36], 'true': [18.738, 987, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.459, 173, 36], 'true': [18.684, 971, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.439, 166, 36], 'true': [18.755, 992, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.515, 196, 36], 'true': [18.725, 983, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.467, 176, 36], 'true': [18.599, 947, 545]}]]
[{'': [0.23158681618003177, 0.1368595041322325]}, {'': [0.23099082791579045, 0.13343942246113918]}, {'': [0.2291232374603894, 0.13391808285691906]}, {'': [0.23165288978870754, 0.13155675493337873]}, {'': [0.23045917536014812, 0.1373616063051238]}, {'': [0.2291902426221426, 0.14312130177514762]}, {'': [0.23025937928587695, 0.14257915340765986]}, {'': [0.22885501799253763, 0.14645622978139478]}, {'': [0.22945805693374202, 0.13109393579072426]}, {'': [0.23185092611893274, 0.14097543609825636]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.18467954734441033;  // std dev = 0,469, 49,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | else return 0.23120958390063573;  // std dev = 0,484, 1.418,000 (wgt'ed) examples reached here.  /* #neg=889 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return -0.024204006076958388;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.049929757017320595;  // std dev = 3,364, 73,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
%   | | | else return -0.03658790700575096;  // std dev = 1,338, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.029577506528083813;  // std dev = 3,862, 105,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.12463380570749395;  // std dev = 0,457, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.18379391469990183;  // std dev = 0,479, 1.486,000 (wgt'ed) examples reached here.  /* #neg=957 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.02829247966652119;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.03874953401439604;  // std dev = 3,611, 86,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.04654624386492607;  // std dev = 1,348, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return 0.016461359620971682;  // std dev = 0,368, 99,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1718029493078098;  // std dev = 0,482, 44,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | else return 0.16819875101477264;  // std dev = 0,482, 1.437,000 (wgt'ed) examples reached here.  /* #neg=908 #pos=529 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6954318337309898;  // std dev = 1,588, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.1470733608884067;  // std dev = 0,013, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( title(J, G), venue(J, A) )
%   | | | then return -0.1475482794989398;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.034269902319242034;  // std dev = 1,279, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.022539144812804144;  // std dev = 3,634, 92,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.01438223427859735;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return -0.1295366520377328;  // std dev = 0,012, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1611234501862367;  // std dev = 0,486, 42,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07064981803027275;  // std dev = 0,453, 45,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | else return 0.12884024229031818;  // std dev = 0,479, 1.444,000 (wgt'ed) examples reached here.  /* #neg=928 #pos=516 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5409565371917249;  // std dev = 2,206, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.15457068071628535;  // std dev = 0,028, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.03948073795339425;  // std dev = 0,287, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.01763639990386337;  // std dev = 3,222, 89,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.05635620673905967;  // std dev = 1,340, 23,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.11514832093848477;  // std dev = 0,013, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10446187267094632;  // std dev = 0,479, 1.532,000 (wgt'ed) examples reached here.  /* #neg=987 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.026687927137852806;  // std dev = 0,293, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.033607976723101986;  // std dev = 0,268, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.009968117241454456;  // std dev = 3,354, 97,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.004396775684561302;  // std dev = 3,294, 98,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0816417082124452;  // std dev = 0,478, 1.543,000 (wgt'ed) examples reached here.  /* #neg=998 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4546580839432298;  // std dev = 2,212, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.13430856951232947;  // std dev = 0,046, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.09514243317358008;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.12066794306968409;  // std dev = 0,011, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.003285639261420371;  // std dev = 3,488, 112,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | | else return -0.1028752440363833;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.10044958339784989;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.008965309321413302;  // std dev = 0,456, 44,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else return 0.06827102795929965;  // std dev = 0,479, 1.485,000 (wgt'ed) examples reached here.  /* #neg=956 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.3622118206344466;  // std dev = 2,214, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.11975910075335987;  // std dev = 0,044, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return 0.028652984632155553;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.007938426634934936;  // std dev = 3,224, 95,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return 0.18758756123427175;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.09576403053123743;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05463680841338355;  // std dev = 0,479, 1.529,000 (wgt'ed) examples reached here.  /* #neg=984 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.43370654508938383;  // std dev = 2,206, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.13063870275757042;  // std dev = 0,052, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return 0.05153681961083047;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.021234586458324115;  // std dev = 2,747, 103,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
%   | | | else return 0.04036028378690845;  // std dev = 1,279, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.08593447459753942;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04339987014548095;  // std dev = 0,479, 1.527,000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.03552356005886893;  // std dev = 0,238, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.03544219289431741;  // std dev = 0,252, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.004957395554691578;  // std dev = 2,791, 91,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.003126231650659355;  // std dev = 2,976, 98,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03503490679353135;  // std dev = 0,479, 1.523,000 (wgt'ed) examples reached here.  /* #neg=978 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5362085458660384;  // std dev = 1,338, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.11592730672933305;  // std dev = 0,049, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return 0.10806663796476602;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.006223007573604776;  // std dev = 2,694, 82,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.04214676492223555;  // std dev = 1,327, 24,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.07830819931438583;  // std dev = 0,008, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.55874
   AUC PR    = 0.499931
   CLL	      = -0.709095
   Precision = 0.2 at threshold = 0.5
   Recall    = 0.000821
   F1        = 0.001635


Total learning time: 60.024 seconds
Total inference time: 5.673 seconds
AUC ROC: 0.55874


Refined model AUC ROC: 0.55874


Dataset: 7_imdb_cora, Fold: 3, Type: transfer, Time: 00:25:28
{'Inference time': 5.673, 'Parameter Learning results': {'Inference time': 1.558, 'F1': nan, 'Precision': [nan, 0.5], 'AUC PR': 0.49112, 'CLL': -0.728366, 'Recall': 0.0, 'Learning time': 11.64, 'AUC ROC': 0.547853}, 'F1': 0.001635, 'Precision': [0.2, 0.5], 'AUC PR': 0.499931, 'Mapping results': {'Possible mappings': 6, 'Total time': 2.5981149673461914, 'Finding best mapping': 0.00046825408935546875, 'Generating paths time': 2.4718639850616455, 'Knowledge compiling time': 0.12429189682006836, 'Generating mappings time': 0.0014848709106445312}, 'CLL': -0.709095, 'Recall': 0.000821, 'Learning time': 71.664, 'AUC ROC': 0.55874}


Start learning from scratch in target domain

Target train facts examples: 8725
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 30816
Target test pos examples: 2436
Target test neg examples: 2800

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.14703782398840126;  // std dev = 0,453, 45,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | else return 0.21630736434798403;  // std dev = 0,479, 1.477,000 (wgt'ed) examples reached here.  /* #neg=948 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.6200536970042743;  // std dev = 1,952, 21,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.0418510649004878;  // std dev = 0,300, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.02481560176617905;  // std dev = 3,873, 108,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18765356151075985;  // std dev = 0,479, 1.523,000 (wgt'ed) examples reached here.  /* #neg=978 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.030545314038838232;  // std dev = 0,313, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.05283232017210162;  // std dev = 3,350, 71,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=14 */
%   | | | else return -0.027251723650731523;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.020803020992849607;  // std dev = 3,537, 104,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16231935898483138;  // std dev = 0,480, 1.511,000 (wgt'ed) examples reached here.  /* #neg=966 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5230817717712287;  // std dev = 1,952, 21,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.12735763680624657;  // std dev = 0,011, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.1393081635215215;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.08291405870070075;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.02235825923059439;  // std dev = 3,637, 93,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.050645685138445584;  // std dev = 1,348, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.11427944754608388;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13734043056110412;  // std dev = 0,481, 1.502,000 (wgt'ed) examples reached here.  /* #neg=957 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.03972339784954009;  // std dev = 0,231, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.04220398792077743;  // std dev = 3,588, 82,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.05551146344483637;  // std dev = 1,356, 25,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return 0.012358548297590172;  // std dev = 0,312, 91,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2691930727843078;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.05190665944216679;  // std dev = 0,459, 43,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.10452407026590692;  // std dev = 0,478, 1.492,000 (wgt'ed) examples reached here.  /* #neg=963 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.602883396099975;  // std dev = 1,955, 21,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.15476903259844424;  // std dev = 0,087, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.09308324883827036;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.007857310669695182;  // std dev = 2,874, 92,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return 0.09887125431301635;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return -0.10436293152200624;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.20714919456474737;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.06790542870625502;  // std dev = 0,468, 40,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.08690156692340813;  // std dev = 0,479, 1.481,000 (wgt'ed) examples reached here.  /* #neg=952 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5440632302840446;  // std dev = 1,786, 20,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.13873382517858074;  // std dev = 0,036, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.04038939124632165;  // std dev = 0,285, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.019107623868236806;  // std dev = 2,889, 79,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.05579014407375992;  // std dev = 1,325, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.09414117252176002;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07370960921585366;  // std dev = 0,474, 44,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | else return 0.07463862918439858;  // std dev = 0,481, 1.460,000 (wgt'ed) examples reached here.  /* #neg=931 #pos=529 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.34210551198946804;  // std dev = 2,206, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.11708158763831238;  // std dev = 0,018, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( title(J, G), venue(J, A) )
%   | | | then return -0.1196308567629207;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.009927641508825913;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.019943958791146205;  // std dev = 2,910, 98,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.031484941558495384;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return -0.08641532118327178;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0542384576523086;  // std dev = 0,479, 1.523,000 (wgt'ed) examples reached here.  /* #neg=978 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.40676551740932604;  // std dev = 1,592, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.10597252819702895;  // std dev = 0,015, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.09194434360490811;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.005211927327492019;  // std dev = 2,848, 84,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.02181920911448215;  // std dev = 1,322, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.07820831754779572;  // std dev = 0,003, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043019585480643434;  // std dev = 0,479, 1.523,000 (wgt'ed) examples reached here.  /* #neg=978 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.43037565454234744;  // std dev = 1,793, 20,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.11951201067675317;  // std dev = 0,047, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.10475108668461267;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.030350953842529515;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.043987969844076116;  // std dev = 2,506, 104,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
%   | | | else return -0.016832896085648228;  // std dev = 1,301, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return -0.07292677276367161;  // std dev = 0,003, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.051767218107920294;  // std dev = 0,472, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | else return -0.23569695481422054;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.036664521944432774;  // std dev = 0,480, 1.466,000 (wgt'ed) examples reached here.  /* #neg=937 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.20203522068730703;  // std dev = 2,088, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.0924935761530029;  // std dev = 0,014, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return 0.031690417081340606;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.04427291544743709;  // std dev = 0,268, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.08833543565480789;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.025227186928815246;  // std dev = 2,787, 96,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */


Results
   AUC ROC   = 0.564204
   AUC PR    = 0.506617
   CLL	      = -0.705525
   Precision = 0.546053 at threshold = 0.5
   Recall    = 0.034072
   F1        = 0.064142


Total learning time: 77.93299999999999 seconds
Total inference time: 6.698 seconds
AUC ROC: 0.564204


Dataset: 7_imdb_cora, Fold: 3, Type: scratch, Time: 00:26:53
{'Inference time': 6.698, 'F1': 0.064142, 'Precision': [0.546053, 0.5], 'AUC PR': 0.506617, 'CLL': -0.705525, 'Recall': 0.034072, 'Learning time': 77.93299999999999, 'AUC ROC': 0.564204}


Starting fold 4

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.12088203430175781
   Generating paths time   = 2.46893572807312
   Generating mappings time   = 0.0012040138244628906
   Possible mappings   = 6
   Finding best mapping   = 0.00046443939208984375
   Total time   = 2.5914909839630127


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.07689893509951148;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.06727784200614993;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05842652332659526;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.05040422343880392;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13576748260041072;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.043228927397659093;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10701435766529009;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.03688512538049936;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08332366081943154;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.031332458031635715;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06431191275251151;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.026513970893597166;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04933278618298449;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.022363218847183668;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03767912701518076;  // std dev = 20,312, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else return 0.01880989958447521;  // std dev = 4,677, 128,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */


Results
   AUC ROC   = 0.554206
   AUC PR    = 0.39269
   CLL	      = -0.643296
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 77.352 seconds
Total inference time: 2.178 seconds
AUC ROC: 0.554206


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.677, 100, 28], 'true': [20.312, 968, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.677, 100, 28], 'true': [20.312, 968, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.677, 100, 28], 'true': [20.312, 968, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.677, 100, 28], 'true': [20.312, 968, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.677, 100, 28], 'true': [20.312, 968, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.677, 100, 28], 'true': [20.312, 968, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.677, 100, 28], 'true': [20.312, 968, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.677, 100, 28], 'true': [20.312, 968, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.677, 100, 28], 'true': [20.312, 968, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.677, 100, 28], 'true': [20.312, 968, 719]}]]
[{'': [0.24455361249545102, 0.17089843750000108]}, {'': [0.24455361249540533, 0.1708984374999993]}, {'': [0.24455361249542806, 0.17089843750000103]}, {'': [0.24455361249541768, 0.17089843750000122]}, {'': [0.24455361249543592, 0.1708984375000014]}, {'': [0.24455361249542776, 0.1708984375000012]}, {'': [0.24455361249542015, 0.1708984374999999]}, {'': [0.2445536124954369, 0.17089843750000108]}, {'': [0.24455361249543087, 0.17089843750000014]}, {'': [0.24455361249541427, 0.17089843749999933]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2843492907604439;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.1914822684328457;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24609748798177272;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.16653882456488167;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20686661282704152;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.1420942428155646;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1694039804813516;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.11914890490746433;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13576748260041072;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.0984134027840187;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10701435766529009;  // std dev = 0,495, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.08026654944252247;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6571233051584842;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.34287669484151584;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.45712330515848415;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.08123848212310164;  // std dev = 0,494, 1.667,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=707 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return 0.06479591611329234;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06423855168384487;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.05187916934404051;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04928535463590415;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.04126932998424623;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03765017057739757;  // std dev = 0,493, 1.687,000 (wgt'ed) examples reached here.  /* #neg=968 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.03266374873483021;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.560167
   AUC PR    = 0.41171
   CLL	      = -0.644266
   Precision = 0.947368 at threshold = 0.5
   Recall    = 0.015859
   F1        = 0.031196


Total learning time: 93.917 seconds
Total inference time: 6.225 seconds
AUC ROC: 0.560167


Refined model AUC ROC: 0.560167


Dataset: 7_imdb_cora, Fold: 4, Type: transfer, Time: 00:29:56
{'Inference time': 6.225, 'Parameter Learning results': {'Inference time': 2.178, 'F1': nan, 'Precision': [nan, 0.5], 'AUC PR': 0.39269, 'CLL': -0.643296, 'Recall': 0.0, 'Learning time': 77.352, 'AUC ROC': 0.554206}, 'F1': 0.031196, 'Precision': [0.947368, 0.5], 'AUC PR': 0.41171, 'Mapping results': {'Possible mappings': 6, 'Total time': 2.5914909839630127, 'Finding best mapping': 0.00046443939208984375, 'Generating paths time': 2.46893572807312, 'Knowledge compiling time': 0.12088203430175781, 'Generating mappings time': 0.0012040138244628906}, 'CLL': -0.644266, 'Recall': 0.015859, 'Learning time': 171.269, 'AUC ROC': 0.560167}


Start learning from scratch in target domain

Target train facts examples: 7382
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 32159
Target test pos examples: 2270
Target test neg examples: 3954

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.11914890490746433;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.643264127386356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.33453802739834604;  // std dev = 0,059, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.44326412738635596;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.06140014753749459;  // std dev = 0,493, 1.588,000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07181637161845017;  // std dev = 3,490, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08499200024019614;  // std dev = 2,598, 29,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.05187916934404051;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02455059281244379;  // std dev = 2,960, 54,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.4865771336643951;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.26549520503591784;  // std dev = 0,139, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3365088161683395;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.04718978831024387;  // std dev = 0,493, 1.588,000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.053086186474172695;  // std dev = 3,490, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06659430327010746;  // std dev = 2,598, 29,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.04126932998424623;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.020911769387996954;  // std dev = 2,960, 54,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037264833939179544;  // std dev = 0,492, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03519786650443076;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04654687354225808;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.046629342462623645;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.062294811756438015;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.03266374873483021;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015499394605358234;  // std dev = 0,399, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.569424
   AUC PR    = 0.427559
   CLL	      = -0.64152
   Precision = 0.546125 at threshold = 0.5
   Recall    = 0.065198
   F1        = 0.11649


Total learning time: 169.64 seconds
Total inference time: 7.894 seconds
AUC ROC: 0.569424


Dataset: 7_imdb_cora, Fold: 4, Type: scratch, Time: 00:32:54
{'Inference time': 7.894, 'F1': 0.11649, 'Precision': [0.546125, 0.5], 'AUC PR': 0.427559, 'CLL': -0.64152, 'Recall': 0.065198, 'Learning time': 169.64, 'AUC ROC': 0.569424}


Starting fold 5

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.059017181396484375
   Generating paths time   = 2.376826524734497
   Generating mappings time   = 0.001191854476928711
   Possible mappings   = 6
   Finding best mapping   = 0.0004775524139404297
   Total time   = 2.437519073486328


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.543975
   AUC PR    = 0.374863
   CLL	      = -0.702177
   Precision = 0.37542 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.538514


Total learning time: 37.534 seconds
Total inference time: 1.788 seconds
AUC ROC: 0.543975


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.44587899644920087;  // std dev = 0,492, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.762910839861417;  // std dev = 0,294, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.04458961306561406;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), title(G, E) )
%   | | | then return 0.544802545244709;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return 0.1281358785780425;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.38156481117013774;  // std dev = 0,492, 783,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.6699615757960478;  // std dev = 0,285, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6397480032138977;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15715819152444083;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10855824646068733;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.1414291185239391;  // std dev = 0,452, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.044790460982400505;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.31240515372396205;  // std dev = 0,491, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.5307179033413495;  // std dev = 0,283, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5324239800210261;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14100906190233595;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.17674265859899532;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11359736962336611;  // std dev = 2,889, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.1732999421310688;  // std dev = 1,238, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.11033055574172265;  // std dev = 2,792, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.03904700118037825;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.454883730051783;  // std dev = 0,375, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1885024430726151;  // std dev = 2,391, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.10958120631781544;  // std dev = 1,935, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | else return 0.25945564631529133;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5016895241171826;  // std dev = 0,905, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15772927938203068;  // std dev = 0,017, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.19474504459546238;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09556246598842184;  // std dev = 2,859, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.0529529213640208;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.40114527587679294;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3871603187838471;  // std dev = 2,008, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.22541746468366994;  // std dev = 1,717, 21,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.3314684967805429;  // std dev = 0,888, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.20148095119253123;  // std dev = 0,485, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.13509436583392515;  // std dev = 0,389, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.16134817195291892;  // std dev = 0,001, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08656349423098926;  // std dev = 2,862, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.04297455082054499;  // std dev = 0,409, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1406293049893291;  // std dev = 0,485, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.26611567299178435;  // std dev = 0,401, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.34139744349191975;  // std dev = 0,133, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.06743546534876484;  // std dev = 0,426, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.01594405836696109;  // std dev = 0,686, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08727103498057211;  // std dev = 2,904, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.013421042506497767;  // std dev = 2,990, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.028375894983472708;  // std dev = 2,967, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10561802337844547;  // std dev = 0,485, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2438009325040833;  // std dev = 0,277, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.09794043929597782;  // std dev = 0,380, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return -0.14904087559842463;  // std dev = 0,001, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.060408565830658685;  // std dev = 2,860, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.06860327759490842;  // std dev = 4,083, 88,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.18030764022929738;  // std dev = 0,029, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.04363200009891243;  // std dev = 3,002, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.20362700193093553;  // std dev = 0,095, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.4364100746691557;  // std dev = 0,090, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.016130530965217542;  // std dev = 2,325, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return -0.12467232889393784;  // std dev = 0,397, 29,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else return 0.08993029174822895;  // std dev = 0,484, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.09351979239768393;  // std dev = 0,383, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.037115529984473976;  // std dev = 0,429, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return -0.00457127890588786;  // std dev = 0,377, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.07641841203130338;  // std dev = 4,044, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1912124449784298;  // std dev = 0,151, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D), haswordauthor(F, D) )
%   | | then return 0.3341453609138327;  // std dev = 0,079, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.05669445474062354;  // std dev = 0,485, 810,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=474 */
%   | else return 0.19135127700345464;  // std dev = 0,277, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.07552298532400006;  // std dev = 0,379, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return -0.19943584795068878;  // std dev = 7,16e-05, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04726930892767273;  // std dev = 2,811, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return -0.0038860209457261853;  // std dev = 0,377, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.06360468547814982;  // std dev = 4,042, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.16370042347015118;  // std dev = 0,134, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( author(F, E), venue(F, A) )
%   | | | then return 0.3909589878551973;  // std dev = 0,254, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24928859547227372;  // std dev = 0,137, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.013334460334473277;  // std dev = 2,532, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.22984286840908896;  // std dev = 1,464, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else return 0.05319316380785732;  // std dev = 0,484, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then return -0.17823090077949724;  // std dev = 0,111, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.06050347324651608;  // std dev = 0,432, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.048327545693998455;  // std dev = 0,433, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.1754918899164252;  // std dev = 0,051, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.559651
   AUC PR    = 0.408029
   CLL	      = -0.702054
   Precision = 0.375346 at threshold = 0.5
   Recall    = 0.934333
   F1        = 0.535548


Total learning time: 77.213 seconds
Total inference time: 22.791 seconds
AUC ROC: 0.559651


Refined model AUC ROC: 0.559651


Dataset: 7_imdb_cora, Fold: 5, Type: transfer, Time: 00:35:16
{'Inference time': 22.791, 'Parameter Learning results': {'Inference time': 1.788, 'F1': 0.538514, 'Precision': [0.37542, 0.5], 'AUC PR': 0.374863, 'CLL': -0.702177, 'Recall': 0.952169, 'Learning time': 37.534, 'AUC ROC': 0.543975}, 'F1': 0.535548, 'Precision': [0.375346, 0.5], 'AUC PR': 0.408029, 'Mapping results': {'Possible mappings': 6, 'Total time': 2.437519073486328, 'Finding best mapping': 0.0004775524139404297, 'Generating paths time': 2.376826524734497, 'Knowledge compiling time': 0.059017181396484375, 'Generating mappings time': 0.001191854476928711}, 'CLL': -0.702054, 'Recall': 0.934333, 'Learning time': 114.74699999999999, 'AUC ROC': 0.559651}


Start learning from scratch in target domain

Target train facts examples: 8094
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 31447
Target test pos examples: 2467
Target test neg examples: 4522

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.23314893509951226;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.14762261931003867;  // std dev = 2,796, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.629623109416637;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17037689058336297;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11167103821357358;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0512481561016578;  // std dev = 0,790, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1516877554730703;  // std dev = 2,947, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6805851247859591;  // std dev = 0,056, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2449182844345499;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214675;  // std dev = 1,980, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.3226813064206765;  // std dev = 13,464, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.47549952672721435;  // std dev = 1,610, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5218082953475985;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14762999744343452;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09603135109023452;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06247198167345856;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5216077804329589;  // std dev = 0,063, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.17925806496668442;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12537094389750977;  // std dev = 1,924, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2565951072431472;  // std dev = 0,489, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.3876766473547288;  // std dev = 0,342, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5208579187753876;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14574921992334994;  // std dev = 0,013, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08124538179562885;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05084111748435273;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.18792890768588472;  // std dev = 0,487, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.3298461947714931;  // std dev = 0,289, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.022970526123283475;  // std dev = 0,332, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.09898481041293156;  // std dev = 0,924, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0913092569195207;  // std dev = 2,863, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.00605803313999107;  // std dev = 0,710, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10388090620010931;  // std dev = 2,904, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.016498218761865496;  // std dev = 2,990, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03143331403260067;  // std dev = 2,967, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.343237010660602;  // std dev = 0,068, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.09290906298183349;  // std dev = 2,580, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.14133586098949044;  // std dev = 1,911, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.15118214530046883;  // std dev = 0,489, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.22228988261935392;  // std dev = 0,340, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.11644715489036062;  // std dev = 0,387, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.057197196840515094;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.07634964588241049;  // std dev = 0,441, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.02034509564617371;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10597562435029721;  // std dev = 0,486, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.23836683578869983;  // std dev = 0,288, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.0030951696181891197;  // std dev = 0,324, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.056170556586181544;  // std dev = 0,911, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0665481613898921;  // std dev = 2,860, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.06851579086317289;  // std dev = 4,083, 88,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.18597456833128825;  // std dev = 0,052, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.04447357762052797;  // std dev = 3,001, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.20430197499538758;  // std dev = 0,097, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.4925424543999451;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.2090266567607393;  // std dev = 0,385, 31,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.2548380175864933;  // std dev = 0,313, 24,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(H, D), venue(H, B) )
%   | | | then return 0.06694095535123265;  // std dev = 0,916, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.08355210145934285;  // std dev = 2,972, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.03125114200082082;  // std dev = 2,735, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.19876795009060882;  // std dev = 1,552, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.09944705536554646;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else return 0.0254597382190203;  // std dev = 0,406, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.052207877718969405;  // std dev = 0,403, 39,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.19801321226903432;  // std dev = 0,311, 24,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.15568774951964767;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.060865884082365075;  // std dev = 3,104, 49,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.06620160699694445;  // std dev = 0,486, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1534013691924205;  // std dev = 0,347, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return -0.0035918462842514554;  // std dev = 0,378, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0675982437844434;  // std dev = 4,042, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1768876997235348;  // std dev = 0,087, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.24524480818450237;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.04103253508811913;  // std dev = 2,469, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.043259679650975096;  // std dev = 0,482, 783,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.22678445961101518;  // std dev = 0,319, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.1305524433018833;  // std dev = 0,267, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.1887670322891565;  // std dev = 0,160, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.06014569798974802;  // std dev = 0,434, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.05079578097481635;  // std dev = 0,432, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.1960187754857744;  // std dev = 0,057, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.550172
   AUC PR    = 0.399068
   CLL	      = -0.70664
   Precision = 0.375715 at threshold = 0.5
   Recall    = 0.931901
   F1        = 0.535523


Total learning time: 81.154 seconds
Total inference time: 13.279 seconds
AUC ROC: 0.550172


Dataset: 7_imdb_cora, Fold: 5, Type: scratch, Time: 00:36:51
{'Inference time': 13.279, 'F1': 0.535523, 'Precision': [0.375715, 0.5], 'AUC PR': 0.399068, 'CLL': -0.70664, 'Recall': 0.931901, 'Learning time': 81.154, 'AUC ROC': 0.550172}


