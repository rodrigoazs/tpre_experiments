Starting experiment #1 for 13_uwcse_cora

Start learning from source dataset

Source train facts examples: 2274
Source train pos examples: 113
Source train neg examples: 4079

WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(D, A) )
%   | | then if ( publication(D, E), professor(E) )
%   | | | then return 0.15226658215833588;  // std dev = 2,657, 34,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0.6359267128772901;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return 0.6981489350995119;  // std dev = 1,833, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | | else return 0.5664822684328451;  // std dev = 3,149, 48,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=34 */
%   else return -0.14185106490048796;  // std dev = 0,000, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( publication(C, F) )
%   | | | then return 0.3861400788776212;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109545;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7194734122109545;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(G, B), ta(H, A, I) )
%   | | then if ( ta(J, K, I), publication(G, K) )
%   | | | then return 0.78440260834132;  // std dev = 0,091, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4698207525230563;  // std dev = 2,696, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | | else if ( publication(L, B), publication(M, A) )
%   | | | then return 0.2232819968740965;  // std dev = 1,492, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.4363070773391247;  // std dev = 3,451, 53,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=35 */
%   else return -0.1254446385283915;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B) )
%   | then if ( publication(C, D), tempadvisedby(E, D) )
%   | | then if ( ta(F, E, G) )
%   | | | then return 0.46852305383891646;  // std dev = 3,755, 109,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=91 */
%   | | | else return 0.1684173239835777;  // std dev = 1,630, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else return 0.09950147627507222;  // std dev = 1,039, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( projectmember(H, B), publication(I, A) )
%   | | then return 0.770551226259129;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(J, A) )
%   | | | then return 0.13352168440372802;  // std dev = 1,328, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.29809915155911465;  // std dev = 1,752, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   else return -0.11231637819360653;  // std dev = 0,000, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(E, D) )
%   | | then if ( publication(E, B) )
%   | | | then return 0.49873979170049326;  // std dev = 0,131, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21655025130581262;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( tempadvisedby(F, B) )
%   | | | then return 0.394005561562355;  // std dev = 0,986, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.4464314716735964;  // std dev = 0,088, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( publication(G, A) )
%   | | then if ( tempadvisedby(H, B), publication(I, H) )
%   | | | then return -0.3427817142875222;  // std dev = 0,122, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.12207414029135424;  // std dev = 2,829, 38,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=17 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.2538068751214507;  // std dev = 3,149, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
%   | | | else return 0.40070085136484684;  // std dev = 1,960, 28,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=23 */
%   else return -0.10159632948783646;  // std dev = 0,000, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( hasposition(D, C), projectmember(E, D) )
%   | then if ( publication(F, A), sameperson(B, D) )
%   | | then return 0.5790320125522684;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(G, A), publication(G, B) )
%   | | | then return 0.3076227001211036;  // std dev = 1,428, 40,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.22294246511442606;  // std dev = 4,052, 89,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=61 */
%   | else if ( publication(H, A), publication(I, B) )
%   | | then return 0.43656818309122514;  // std dev = 0,330, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( publication(J, B) )
%   | | | then return -0.1368534521264621;  // std dev = 1,340, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06612762774475651;  // std dev = 1,224, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( ta(K, A, L) )
%   | then if ( ta(M, B, N) )
%   | | then return -0.09269127618926089;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.11820633602048966;  // std dev = 0,095, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.0882821754568924;  // std dev = 0,052, 140,000 (wgt'ed) examples reached here.  /* #neg=139 #pos=1 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, A), publication(D, B) )
%   | then return 0.28885858772320605;  // std dev = 0,198, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( publication(E, A), publication(F, B) )
%   | | then if ( publication(E, G), tempadvisedby(H, G) )
%   | | | then return -0.19823356722847676;  // std dev = 1,736, 23,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.07440672908141567;  // std dev = 1,644, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else if ( publication(I, B), tempadvisedby(J, B) )
%   | | | then return 0.0509297652848599;  // std dev = 3,219, 45,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | | | else return 0.26195645833633713;  // std dev = 2,535, 42,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=33 */
%   else if ( ta(K, A, L) )
%   | then if ( ta(K, M, N), tempadvisedby(M, P) )
%   | | then if ( ta(Q, M, L) )
%   | | | then return -0.15122921977497486;  // std dev = 0,352, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.0842904715933863;  // std dev = 0,003, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.0839117177978524;  // std dev = 0,005, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.08128691317086721;  // std dev = 0,052, 149,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=1 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(D, B) )
%   | then if ( publication(C, B) )
%   | | then if ( tempadvisedby(E, B) )
%   | | | then return 0.1741679430085731;  // std dev = 1,386, 31,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.07657660108110753;  // std dev = 1,316, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return -0.380572691382977;  // std dev = 0,164, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.05246813473648592;  // std dev = 2,232, 23,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else if ( ta(I, A, J) )
%   | | then if ( ta(I, K, J), publication(L, K) )
%   | | | then return -0.012733807724839919;  // std dev = 1,225, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3007985358310379;  // std dev = 1,671, 29,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | else if ( publication(M, B) )
%   | | | then return 0.07258684492539833;  // std dev = 2,599, 32,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=21 */
%   | | | else return 0.21874515256374355;  // std dev = 1,569, 15,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   else return -0.07896111917335356;  // std dev = 0,015, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, B), publication(G, A) )
%   | | then if ( publication(F, A) )
%   | | | then return 0.20124032992279503;  // std dev = 0,070, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.25513629508390295;  // std dev = 0,044, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( ta(H, A, E) )
%   | | | then return 0.05630230387683399;  // std dev = 0,906, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2996344308179119;  // std dev = 1,235, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( publication(I, B), publication(I, A) )
%   | | then if ( ta(J, A, K), tempadvisedby(L, B) )
%   | | | then return 0.023144809733279592;  // std dev = 0,928, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2107955334425231;  // std dev = 0,097, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( publication(M, B), publication(N, A) )
%   | | | then return 0.04587150924095274;  // std dev = 2,140, 25,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   | | | else return 0.12430305760413497;  // std dev = 3,074, 52,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=39 */
%   else return -0.07340902902896607;  // std dev = 0,013, 164,000 (wgt'ed) examples reached here.  /* #neg=164 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), tempadvisedby(D, B) )
%   | then if ( publication(C, B) )
%   | | then if ( publication(E, D), publication(E, B) )
%   | | | then return -0.005419457580658249;  // std dev = 0,950, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.17764988730612116;  // std dev = 0,085, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( projectmember(F, B) )
%   | | | then return 0.31305081075809144;  // std dev = 0,041, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14184379069162678;  // std dev = 1,686, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( publication(G, B) )
%   | | then if ( publication(G, H), student(H) )
%   | | | then return 0.16174422408405933;  // std dev = 2,924, 69,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=58 */
%   | | | else return 0.3511311490589253;  // std dev = 0,181, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( ta(I, A, J) )
%   | | | then return -0.3461487307024839;  // std dev = 0,830, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.21606306781806198;  // std dev = 1,236, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.06848668400348576;  // std dev = 0,014, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( ta(C, A, D) )
%   | then if ( ta(C, E, D), tempadvisedby(E, F) )
%   | | then return 0.28077697574176513;  // std dev = 0,062, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(G, B), ta(H, G, D) )
%   | | | then return -0.02575447644608854;  // std dev = 1,174, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.13263758223720387;  // std dev = 2,377, 50,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=40 */
%   | else if ( publication(I, A), publication(I, B) )
%   | | then if ( publication(I, J), ta(K, J, L) )
%   | | | then return -0.047940126547493044;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.11409845326655538;  // std dev = 0,985, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( tempadvisedby(M, B), publication(N, A) )
%   | | | then return -0.1100661947856865;  // std dev = 1,116, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.02630432962743599;  // std dev = 3,145, 49,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=33 */
%   else return -0.06429443162429638;  // std dev = 0,011, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */


Predicates from source: ['advisedby(person,person).', 'ta(course,person,quarter).', 'projectmember(project,person).', 'professor(person).', 'student(person).', 'hasposition(person,faculty).', 'sameperson(person,person).', 'tempadvisedby(person,person).', 'publication(title,person).']

Starting fold 1

Target predicate: sameauthor 

Mapping Results
   Knowledge compiling time   = 0.10933685302734375
   Generating paths time   = 2.3243820667266846
   Generating mappings time   = 0.012478351593017578
   Possible mappings   = 54
   Finding best mapping   = 0.020697593688964844
   Total time   = 2.466900587081909


Best mapping found: ['publication(A,B) -> haswordauthor(B,A)', 'projectmember(A,B) -> haswordauthor(B,A)', 'advisedby(A,B) -> sameauthor(A,B)', 'hasposition(A,B) -> author(B,A)'] 

Transferred target predicate: sameauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;false;false
1;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;false
1;true,false;haswordauthor(B, G).;true;true
1;true,false,true;haswordauthor(K, G).;false;false
1;true;haswordauthor(F, C).;false;true
1;true,false,false;haswordauthor(B, L), haswordauthor(A, M).;false;false
2;;sameauthor(A, B) :- haswordauthor(B, C).;true;false
2;true,false;haswordauthor(B, H), haswordauthor(A, I).;false;true
2;true,false,false;haswordauthor(A, J).;false;false
2;true;haswordauthor(D, C).;false;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;false
3;true,false;haswordauthor(A, G).;true;false
3;true,false,true;haswordauthor(H, I).;false;false
3;true;haswordauthor(D, E).;true;true
3;true,true;haswordauthor(B, E).;false;false
4;;sameauthor(A, B) :- author(C, B).;true;false
4;true,false;haswordauthor(A, H), haswordauthor(B, I).;false;true
4;true;author(C, D), haswordauthor(D, E).;true;true
4;true,true,false;haswordauthor(A, G), haswordauthor(B, G).;false;false
4;true,false,false;haswordauthor(B, J).;false;false
4;true,true;haswordauthor(A, F).;false;true
5;;sameauthor(A, B) :- author(C, B).;true;false
5;true,false;haswordauthor(A, E), haswordauthor(B, F).;true;true
5;true,false,true;haswordauthor(G, E).;false;false
5;true;haswordauthor(A, D), haswordauthor(B, D).;false;true
5;true,false,false;haswordauthor(B, I).;false;false
6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, D).;true;false
6;true,false;haswordauthor(K, L).;false;true
6;true,false,false;haswordauthor(B, M).;false;false
6;true;haswordauthor(B, C).;false;true
7;;sameauthor(A, B) :- haswordauthor(B, F), haswordauthor(A, G).;true;false
7;true,false;haswordauthor(B, I), haswordauthor(A, I).;false;true
7;true,false,false;haswordauthor(B, M), haswordauthor(A, N).;false;false
7;true;haswordauthor(A, F).;false;true
8;;sameauthor(A, B) :- haswordauthor(A, C).;true;false
8;true,false;haswordauthor(B, F).;false;true
8;true;haswordauthor(B, C).;true;true
8;true,false,false,true;haswordauthor(H, G).;false;false
8;true,false,false;haswordauthor(B, G).;true;false
8;true,true;haswordauthor(D, E), haswordauthor(B, E).;false;false
9;;sameauthor(A, B) :- haswordauthor(A, I), haswordauthor(B, I).;true;false
9;true,false;haswordauthor(A, N).;false;false
9;true;haswordauthor(J, I).;false;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.7870378239883978;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.662488340457355;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5156213669758928;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, E) )
%   | then if ( haswordauthor(B, E) )
%   | | then return 0.3876955880049945;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(C, D), haswordauthor(D, E) )
%   | then if ( haswordauthor(A, F) )
%   | | then return 0.2940939243456708;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then return 0.22896466584551245;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, D) )
%   then if ( haswordauthor(B, C) )
%   | then return 0.18317125213999816;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, D) )
%   then if ( haswordauthor(A, C) )
%   | then return 0.15002240685857746;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(D, E), haswordauthor(B, E) )
%   | | then return 0.12526566858187835;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.10624539867445687;  // std dev = 3,855, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.724138
   AUC PR    = 0.949606
   CLL	      = -0.262073
   Precision = 0.949606 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.974152


Total learning time: 4.509 seconds
Total inference time: 1.434 seconds
AUC ROC: 0.724138


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)'}, {'false': [0.0, 0, 0], 'true': [3.855, 16, 209]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.855, 16, 209]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.855, 16, 209]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'true': 'haswordauthor(D, E)', 'true,true': 'haswordauthor(B, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.855, 16, 209]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(C, D), haswordauthor(D, E)', 'true,true': 'haswordauthor(A, F)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.855, 16, 209]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.855, 16, 209]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, D)', 'true': 'haswordauthor(B, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.855, 16, 209]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, D)', 'true': 'haswordauthor(A, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.855, 16, 209]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C)', 'true': 'haswordauthor(B, C)', 'true,true': 'haswordauthor(D, E), haswordauthor(B, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.855, 16, 209]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.855, 16, 209]}]]
[{'': [0.06605432098765972, nan]}, {'': [0.06605432098765264, nan], 'true': [0.06605432098765264, nan]}, {'': [0.06605432098765675, nan], 'true': [0.06605432098765675, nan]}, {'': [0.06605432098765261, nan], 'true': [0.06605432098765261, nan], 'true,true': [0.06605432098765261, nan]}, {'': [0.06605432098765453, nan], 'true': [0.06605432098765453, nan], 'true,true': [0.06605432098765453, nan]}, {'': [0.06605432098765375, nan], 'true': [0.06605432098765375, nan]}, {'': [0.06605432098765465, nan], 'true': [0.06605432098765465, nan]}, {'': [0.06605432098765432, nan], 'true': [0.06605432098765432, nan]}, {'': [0.066054320987654, nan], 'true': [0.066054320987654, nan], 'true,true': [0.066054320987654, nan]}, {'': [0.06605432098765424, nan], 'true': [0.06605432098765424, nan]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '1;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '1;true;haswordauthor(D, C).;true;true', '2;;sameauthor(A, B) :- haswordauthor(B, C).;true;true', '2;true;haswordauthor(D, C).;true;true', '3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '3;true;haswordauthor(D, E).;true;true', '3;true,true;haswordauthor(B, E).;true;true', '4;;sameauthor(A, B) :- author(C, B).;true;true', '4;true;author(C, D), haswordauthor(D, E).;true;true', '4;true,true;haswordauthor(A, F).;true;true', '5;;sameauthor(A, B) :- author(C, B).;true;true', '5;true;haswordauthor(A, D), haswordauthor(B, D).;true;true', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, D).;true;true', '6;true;haswordauthor(B, C).;true;true', '7;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, D).;true;true', '7;true;haswordauthor(A, C).;true;true', '8;;sameauthor(A, B) :- haswordauthor(A, C).;true;true', '8;true;haswordauthor(B, C).;true;true', '8;true,true;haswordauthor(D, E), haswordauthor(B, E).;true;true', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '9;true;haswordauthor(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6359267128772905;  // std dev = 3,528, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(B, E) )
%   | | | then return 0.5536670397769976;  // std dev = 3,553, 78,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=62 */
%   | | | else return 0.7194734122109542;  // std dev = 7,30e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then if ( author(G, A), title(G, F) )
%   | | | then return 0.6118197086940029;  // std dev = 0,110, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4469945522882728;  // std dev = 3,548, 88,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=72 */
%   | | else return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, E) )
%   | then if ( haswordauthor(B, E) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.3466137436442091;  // std dev = 3,558, 96,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=80 */
%   | | | else return 0.41936123593426666;  // std dev = 0,084, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(C, D), haswordauthor(D, E) )
%   | then if ( haswordauthor(A, F) )
%   | | then if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.2611875613966462;  // std dev = 3,560, 96,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=80 */
%   | | | else return 0.321984311177666;  // std dev = 0,076, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(B, E) )
%   | | | then return 0.17871736495724308;  // std dev = 3,539, 78,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=62 */
%   | | | else return 0.28131642072576474;  // std dev = 0,077, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.2570132779867966;  // std dev = 0,086, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, D) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(B, E) )
%   | | | then return 0.13747583515280715;  // std dev = 3,541, 78,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=62 */
%   | | | else return 0.22814288549017286;  // std dev = 0,067, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.21106953511155271;  // std dev = 0,076, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, D) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then if ( author(G, B), title(G, F) )
%   | | | then return 0.2618644407345861;  // std dev = 0,036, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.11360047595304644;  // std dev = 3,539, 90,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=74 */
%   | | else return 0.17806581641128114;  // std dev = 0,067, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(D, E), haswordauthor(B, E) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.09870773065661657;  // std dev = 3,554, 96,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=80 */
%   | | | else return 0.15348394880659957;  // std dev = 0,059, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(A, E) )
%   | | | then return 0.061716751075017826;  // std dev = 3,538, 78,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=62 */
%   | | | else return 0.15766701807219163;  // std dev = 0,050, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.13490425154818808;  // std dev = 0,070, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.786584
   AUC PR    = 0.97123
   CLL	      = -0.290355
   Precision = 0.949606 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.974152


Total learning time: 9.848 seconds
Total inference time: 27.742 seconds
AUC ROC: 0.786584


Refined model AUC ROC: 0.786584


Dataset: 13_uwcse_cora, Fold: 1, Type: transfer, Time: 03:47:49
{'Inference time': 27.742, 'Parameter Learning results': {'Inference time': 1.434, 'F1': 0.974152, 'Precision': [0.949606, 0.5], 'AUC PR': 0.949606, 'CLL': -0.262073, 'Recall': 1.0, 'Learning time': 4.509, 'AUC ROC': 0.724138}, 'F1': 0.974152, 'Precision': [0.949606, 0.5], 'AUC PR': 0.97123, 'Mapping results': {'Possible mappings': 54, 'Total time': 2.466900587081909, 'Finding best mapping': 0.020697593688964844, 'Generating paths time': 2.3243820667266846, 'Knowledge compiling time': 0.10933685302734375, 'Generating mappings time': 0.012478351593017578}, 'CLL': -0.290355, 'Recall': 1.0, 'Learning time': 14.357000000000001, 'AUC ROC': 0.786584}


Start learning from scratch in target domain

Target train facts examples: 7254
Target train pos examples: 209
Target train neg examples: 16

Target test facts examples: 34492
Target test pos examples: 603
Target test neg examples: 58

WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( author(E, B), title(E, D) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6359267128772905;  // std dev = 0,416, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then return 0.5536670397769976;  // std dev = 0,402, 78,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=62 */
%   | else return 0.7194734122109542;  // std dev = 7,30e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then return 0.4388908001216271;  // std dev = 0,402, 78,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=62 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then return 0.33338061580106654;  // std dev = 0,402, 78,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=62 */
%   | else return 0.4175135841583098;  // std dev = 5,58e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( author(E, A), title(E, D) )
%   | | then return 0.44146170220223874;  // std dev = 0,063, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.23437291940153993;  // std dev = 0,414, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( author(E, A), title(E, D) )
%   | then return 0.31673127758380326;  // std dev = 0,115, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( author(F, B), title(F, D) )
%   | | then return 0.35013171077513816;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordauthor(B, C) )
%   | | | then return 0.16692239664049105;  // std dev = 3,498, 68,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=52 */
%   | | | else return 0.2551722425694894;  // std dev = 2,11e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then return 0.14609942299957587;  // std dev = 0,399, 78,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=62 */
%   | else return 0.20864418609117125;  // std dev = 0,013, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( author(E, A), title(E, D) )
%   | then return 0.22421373916091203;  // std dev = 0,102, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordauthor(B, C) )
%   | | then if ( author(F, B), title(F, D) )
%   | | | then return 0.24699729331948228;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09446827652484414;  // std dev = 3,498, 68,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=52 */
%   | | else return 0.17725883446486163;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( author(E, A), title(E, D) )
%   | then return 0.18786804635275606;  // std dev = 0,089, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordauthor(B, C) )
%   | | then return 0.08115844425748496;  // std dev = 0,413, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | | else return 0.15286699563780998;  // std dev = 1,29e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then return 0.07286286077015088;  // std dev = 0,398, 78,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=62 */
%   | else return 0.13234674554856682;  // std dev = 0,021, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */


Results
   AUC ROC   = 0.473638
   AUC PR    = 0.912787
   CLL	      = -0.367902
   Precision = 0.912254 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.954114


Total learning time: 8.625 seconds
Total inference time: 2.72 seconds
AUC ROC: 0.473638


Dataset: 13_uwcse_cora, Fold: 1, Type: scratch, Time: 03:48:01
{'Inference time': 2.72, 'F1': 0.954114, 'Precision': [0.912254, 0.5], 'AUC PR': 0.912787, 'CLL': -0.367902, 'Recall': 1.0, 'Learning time': 8.625, 'AUC ROC': 0.473638}


Starting fold 2

Target predicate: sameauthor 

Mapping Results
   Knowledge compiling time   = 0.13657784461975098
   Generating paths time   = 2.0920238494873047
   Generating mappings time   = 0.012501955032348633
   Possible mappings   = 54
   Finding best mapping   = 0.0205843448638916
   Total time   = 2.26169490814209


Best mapping found: ['publication(A,B) -> haswordauthor(B,A)', 'projectmember(A,B) -> haswordauthor(B,A)', 'advisedby(A,B) -> sameauthor(A,B)', 'hasposition(A,B) -> author(B,A)'] 

Transferred target predicate: sameauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;false;false
1;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;false
1;true,false;haswordauthor(B, G).;true;true
1;true,false,true;haswordauthor(K, G).;false;false
1;true;haswordauthor(F, C).;false;true
1;true,false,false;haswordauthor(B, L), haswordauthor(A, M).;false;false
2;;sameauthor(A, B) :- haswordauthor(B, C).;true;false
2;true,false;haswordauthor(B, H), haswordauthor(A, I).;false;true
2;true,false,false;haswordauthor(A, J).;false;false
2;true;haswordauthor(D, C).;false;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;false
3;true,false;haswordauthor(A, G).;true;false
3;true,false,true;haswordauthor(H, I).;false;false
3;true;haswordauthor(D, E).;true;true
3;true,true;haswordauthor(B, E).;false;false
4;;sameauthor(A, B) :- author(C, B).;true;false
4;true,false;haswordauthor(A, H), haswordauthor(B, I).;false;true
4;true;author(C, D), haswordauthor(D, E).;true;true
4;true,true,false;haswordauthor(A, G), haswordauthor(B, G).;false;false
4;true,false,false;haswordauthor(B, J).;false;false
4;true,true;haswordauthor(A, F).;false;true
5;;sameauthor(A, B) :- author(C, B).;true;false
5;true,false;haswordauthor(A, E), haswordauthor(B, F).;true;true
5;true,false,true;haswordauthor(G, E).;false;false
5;true;haswordauthor(A, D), haswordauthor(B, D).;false;true
5;true,false,false;haswordauthor(B, I).;false;false
6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, D).;true;false
6;true,false;haswordauthor(K, L).;false;true
6;true,false,false;haswordauthor(B, M).;false;false
6;true;haswordauthor(B, C).;false;true
7;;sameauthor(A, B) :- haswordauthor(B, F), haswordauthor(A, G).;true;false
7;true,false;haswordauthor(B, I), haswordauthor(A, I).;false;true
7;true,false,false;haswordauthor(B, M), haswordauthor(A, N).;false;false
7;true;haswordauthor(A, F).;false;true
8;;sameauthor(A, B) :- haswordauthor(A, C).;true;false
8;true,false;haswordauthor(B, F).;false;true
8;true;haswordauthor(B, C).;true;true
8;true,false,false,true;haswordauthor(H, G).;false;false
8;true,false,false;haswordauthor(B, G).;true;false
8;true,true;haswordauthor(D, E), haswordauthor(B, E).;false;false
9;;sameauthor(A, B) :- haswordauthor(A, I), haswordauthor(B, I).;true;false
9;true,false;haswordauthor(A, N).;false;false
9;true;haswordauthor(J, I).;false;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.7966104735610489;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6701860162815748;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4674804652769428;  // std dev = 3,452, 142,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, E) )
%   | then if ( haswordauthor(B, E) )
%   | | then return 0.40494264752730585;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1680074394666848;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(C, D), haswordauthor(D, E) )
%   | then if ( haswordauthor(A, F) )
%   | | then return 0.26857907500576306;  // std dev = 3,124, 142,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then return 0.24682132087781794;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else if ( haswordauthor(A, E), haswordauthor(B, F) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return -0.1825383648934639;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, D) )
%   then if ( haswordauthor(B, C) )
%   | then return 0.19680046009613134;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.1568596511738349;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, D) )
%   then if ( haswordauthor(A, C) )
%   | then return 0.16091588595566791;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else if ( haswordauthor(B, E), haswordauthor(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( haswordauthor(B, F), haswordauthor(A, G) )
%   | | | then return -0.13721202515777597;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(D, E), haswordauthor(B, E) )
%   | | then return 0.13432735346328048;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(B, F) )
%   | | then return -0.12176153632033325;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.1140301947424888;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10932882923187348;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.62963
   AUC PR    = 0.945205
   CLL	      = -0.261935
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 5.32 seconds
Total inference time: 1.808 seconds
AUC ROC: 0.62963


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)'}, {'false': [0.0, 12, 0], 'true': [2.74, 8, 122]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [2.74, 8, 122]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.452, 20, 122]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'true': 'haswordauthor(D, E)', 'true,true': 'haswordauthor(B, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 12, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [2.74, 8, 122]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(C, D), haswordauthor(D, E)', 'true,true': 'haswordauthor(A, F)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.124, 20, 122]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,false': 'haswordauthor(A, E), haswordauthor(B, F)', 'true,false,true': 'haswordauthor(G, E)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 12, 0], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [2.74, 8, 122]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, D)', 'true,false': 'haswordauthor(E, F)', 'true': 'haswordauthor(B, C)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 12, 0], 'true,true': [2.74, 8, 122], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, D)', 'true,false': 'haswordauthor(B, E), haswordauthor(A, E)', 'true': 'haswordauthor(A, C)', 'true,false,false': 'haswordauthor(B, F), haswordauthor(A, G)'}, {'true,false,false,true': [0.0, 12, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 0], 'true,true': [2.74, 8, 122], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C)', 'true,false': 'haswordauthor(B, F)', 'true': 'haswordauthor(B, C)', 'true,true': 'haswordauthor(D, E), haswordauthor(B, E)'}, {'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 12, 0], 'true,true,true': [2.74, 8, 122]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 12, 0], 'true,true': [2.74, 8, 122]}]]
[{'': [0.05775147928994478, -1.1564823173178714e-17]}, {'': [0.05775147928993674, 2.3129646346357427e-18], 'true': [0.05775147928993674, nan]}, {'': [0.08390163071539002, nan], 'true': [0.08390163071539002, nan]}, {'': [0.057751479289940406, 0.0], 'true': [0.057751479289940406, nan], 'true,true': [0.057751479289940406, nan]}, {'': [0.0687222462629639, nan], 'true': [0.0687222462629639, nan], 'true,true': [0.0687222462629639, nan]}, {'': [0.0671334011965218, nan], 'true,false': [-4.625929269271485e-18, nan], 'true,false,true': [-4.625929269271485e-18, nan], 'true': [0.05775147928994087, -4.625929269271485e-18]}, {'': [0.06254761196219734, nan], 'true,false': [-4.625929269271485e-18, nan], 'true': [0.057751479289940934, -4.625929269271485e-18]}, {'': [0.05974734674929081, nan], 'true,false': [nan, -2.3129646346357427e-18], 'true,false,false': [-2.3129646346357427e-18, nan], 'true': [0.05775147928994091, -2.3129646346357427e-18]}, {'': [0.05794482632743743, nan], 'true,false': [0.0, nan], 'true': [0.057751479289940774, 0.0], 'true,true': [0.057751479289940774, nan]}, {'': [0.05775147928994084, 0.0], 'true': [0.05775147928994084, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '1;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '5;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true', '6;;sameauthor(A, B) :- haswordauthor(B, C).;true;true', '7;;sameauthor(A, B) :- haswordauthor(A, C).;true;true', '8;;sameauthor(A, B) :- haswordauthor(B, C).;true;true', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.8581489350995122;  // std dev = 1,46e-07, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7405018762759833;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.7194734122109547;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.7194734122109544;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.6249475655895573;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.5553664367462838;  // std dev = 1,03e-07, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.5553664367462844;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4893127157293235;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.4175135841583098;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3686658221249624;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.3207118471601495;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2780496975590654;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.21383763039487122;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.20975771563253567;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return 0.20975771563253562;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1682663346557149;  // std dev = 2,657, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   | else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.17709649774527744;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return 0.17709649774527736;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1351817638661356;  // std dev = 2,657, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   | else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.15274385809367086;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return 0.15274385809367094;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.11050708250003509;  // std dev = 2,657, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.134007030008011;  // std dev = 3,16e-08, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.09163300171566717;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.569243
   AUC PR    = 0.934792
   CLL	      = -0.25356
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 4.886 seconds
Total inference time: 2.393 seconds
AUC ROC: 0.569243


Refined model AUC ROC: 0.569243


Dataset: 13_uwcse_cora, Fold: 2, Type: transfer, Time: 03:48:18
{'Inference time': 2.393, 'Parameter Learning results': {'Inference time': 1.808, 'F1': 0.971831, 'Precision': [0.945205, 0.5], 'AUC PR': 0.945205, 'CLL': -0.261935, 'Recall': 1.0, 'Learning time': 5.32, 'AUC ROC': 0.62963}, 'F1': 0.971831, 'Precision': [0.945205, 0.5], 'AUC PR': 0.934792, 'Mapping results': {'Possible mappings': 54, 'Total time': 2.26169490814209, 'Finding best mapping': 0.0205843448638916, 'Generating paths time': 2.0920238494873047, 'Knowledge compiling time': 0.13657784461975098, 'Generating mappings time': 0.012501955032348633}, 'CLL': -0.25356, 'Recall': 1.0, 'Learning time': 10.206, 'AUC ROC': 0.569243}


Start learning from scratch in target domain

Target train facts examples: 8894
Target train pos examples: 122
Target train neg examples: 20

Target test facts examples: 32852
Target test pos examples: 690
Target test neg examples: 54

WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.8581489350995122;  // std dev = 1,46e-07, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0.758148935099513;  // std dev = 0,300, 80,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=72 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.7242094762470882;  // std dev = 0,060, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.7194734122109544;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.6215599535379817;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.5600892937443024;  // std dev = 0,074, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4859058493344546;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.42108739528248806;  // std dev = 0,074, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0.3736889060919074;  // std dev = 0,298, 80,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=72 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.32317525765478194;  // std dev = 0,067, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.33033336437757654;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2742598506130656;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.2568760264477807;  // std dev = 0,058, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.26172712455069996;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2111648579796926;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.2109748439178615;  // std dev = 0,051, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.2143774559452494;  // std dev = 1,83e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.16634838144174277;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.17799776985476623;  // std dev = 0,045, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.18047751512881324;  // std dev = 7,45e-09, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.13376851774835427;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.153433242143627;  // std dev = 0,040, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.15530389016424487;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.1094378416181736;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.13454915111716367;  // std dev = 0,036, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.13600244912540127;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.09080471503708847;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.569243
   AUC PR    = 0.934792
   CLL	      = -0.253573
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 5.937 seconds
Total inference time: 1.413 seconds
AUC ROC: 0.569243


Dataset: 13_uwcse_cora, Fold: 2, Type: scratch, Time: 03:48:25
{'Inference time': 1.413, 'F1': 0.971831, 'Precision': [0.945205, 0.5], 'AUC PR': 0.934792, 'CLL': -0.253573, 'Recall': 1.0, 'Learning time': 5.937, 'AUC ROC': 0.569243}


Starting fold 3

Target predicate: sameauthor 

Mapping Results
   Knowledge compiling time   = 0.06910991668701172
   Generating paths time   = 2.3799703121185303
   Generating mappings time   = 0.01577305793762207
   Possible mappings   = 54
   Finding best mapping   = 0.02693462371826172
   Total time   = 2.491793155670166


Best mapping found: ['publication(A,B) -> haswordauthor(B,A)', 'projectmember(A,B) -> haswordauthor(B,A)', 'advisedby(A,B) -> sameauthor(A,B)', 'hasposition(A,B) -> author(B,A)'] 

Transferred target predicate: sameauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;false;false
1;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;false
1;true,false;haswordauthor(B, G).;true;true
1;true,false,true;haswordauthor(K, G).;false;false
1;true;haswordauthor(F, C).;false;true
1;true,false,false;haswordauthor(B, L), haswordauthor(A, M).;false;false
2;;sameauthor(A, B) :- haswordauthor(B, C).;true;false
2;true,false;haswordauthor(B, H), haswordauthor(A, I).;false;true
2;true,false,false;haswordauthor(A, J).;false;false
2;true;haswordauthor(D, C).;false;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;false
3;true,false;haswordauthor(A, G).;true;false
3;true,false,true;haswordauthor(H, I).;false;false
3;true;haswordauthor(D, E).;true;true
3;true,true;haswordauthor(B, E).;false;false
4;;sameauthor(A, B) :- author(C, B).;true;false
4;true,false;haswordauthor(A, H), haswordauthor(B, I).;false;true
4;true;author(C, D), haswordauthor(D, E).;true;true
4;true,true,false;haswordauthor(A, G), haswordauthor(B, G).;false;false
4;true,false,false;haswordauthor(B, J).;false;false
4;true,true;haswordauthor(A, F).;false;true
5;;sameauthor(A, B) :- author(C, B).;true;false
5;true,false;haswordauthor(A, E), haswordauthor(B, F).;true;true
5;true,false,true;haswordauthor(G, E).;false;false
5;true;haswordauthor(A, D), haswordauthor(B, D).;false;true
5;true,false,false;haswordauthor(B, I).;false;false
6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, D).;true;false
6;true,false;haswordauthor(K, L).;false;true
6;true,false,false;haswordauthor(B, M).;false;false
6;true;haswordauthor(B, C).;false;true
7;;sameauthor(A, B) :- haswordauthor(B, F), haswordauthor(A, G).;true;false
7;true,false;haswordauthor(B, I), haswordauthor(A, I).;false;true
7;true,false,false;haswordauthor(B, M), haswordauthor(A, N).;false;false
7;true;haswordauthor(A, F).;false;true
8;;sameauthor(A, B) :- haswordauthor(A, C).;true;false
8;true,false;haswordauthor(B, F).;false;true
8;true;haswordauthor(B, C).;true;true
8;true,false,false,true;haswordauthor(H, G).;false;false
8;true,false,false;haswordauthor(B, G).;true;false
8;true,true;haswordauthor(D, E), haswordauthor(B, E).;false;false
9;;sameauthor(A, B) :- haswordauthor(A, I), haswordauthor(B, I).;true;false
9;true,false;haswordauthor(A, N).;false;false
9;true;haswordauthor(J, I).;false;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.8323424834866066;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.698845893395818;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5409946853316354;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, E) )
%   | then if ( haswordauthor(B, E) )
%   | | then return 0.40656478352990505;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(C, D), haswordauthor(D, E) )
%   | then if ( haswordauthor(A, F) )
%   | | then return 0.31073437611251203;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then return 0.2452079090461179;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, D) )
%   then if ( haswordauthor(B, C) )
%   | then return 0.19955514587821926;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, D) )
%   then if ( haswordauthor(A, C) )
%   | then return 0.1666316310048982;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(D, E), haswordauthor(B, E) )
%   | | then return 0.14205263897659914;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.1231347582007454;  // std dev = 1,974, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.685714
   AUC PR    = 0.937589
   CLL	      = -0.262718
   Precision = 0.937589 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967789


Total learning time: 3.772 seconds
Total inference time: 1.763 seconds
AUC ROC: 0.685714


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)'}, {'false': [0.0, 0, 0], 'true': [1.974, 4, 151]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.974, 4, 151]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.974, 4, 151]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'true': 'haswordauthor(D, E)', 'true,true': 'haswordauthor(B, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [1.974, 4, 151]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(C, D), haswordauthor(D, E)', 'true,true': 'haswordauthor(A, F)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [1.974, 4, 151]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.974, 4, 151]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, D)', 'true': 'haswordauthor(B, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.974, 4, 151]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, D)', 'true': 'haswordauthor(A, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.974, 4, 151]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C)', 'true': 'haswordauthor(B, C)', 'true,true': 'haswordauthor(D, E), haswordauthor(B, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [1.974, 4, 151]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.974, 4, 151]}]]
[{'': [0.02514047866805994, nan]}, {'': [0.025140478668053523, nan], 'true': [0.025140478668053523, nan]}, {'': [0.02514047866805412, nan], 'true': [0.02514047866805412, nan]}, {'': [0.025140478668053523, nan], 'true': [0.025140478668053523, nan], 'true,true': [0.025140478668053523, nan]}, {'': [0.025140478668054807, nan], 'true': [0.025140478668054807, nan], 'true,true': [0.025140478668054807, nan]}, {'': [0.025140478668053867, nan], 'true': [0.025140478668053867, nan]}, {'': [0.025140478668053995, nan], 'true': [0.025140478668053995, nan]}, {'': [0.025140478668053936, nan], 'true': [0.025140478668053936, nan]}, {'': [0.025140478668054293, nan], 'true': [0.025140478668054293, nan], 'true,true': [0.025140478668054293, nan]}, {'': [0.025140478668054102, nan], 'true': [0.025140478668054102, nan]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '1;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '1;true;haswordauthor(D, C).;true;true', '2;;sameauthor(A, B) :- haswordauthor(B, C).;true;true', '2;true;haswordauthor(D, C).;true;true', '3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '3;true;haswordauthor(D, E).;true;true', '3;true,true;haswordauthor(B, E).;true;true', '4;;sameauthor(A, B) :- author(C, B).;true;true', '4;true;author(C, D), haswordauthor(D, E).;true;true', '4;true,true;haswordauthor(A, F).;true;true', '5;;sameauthor(A, B) :- author(C, B).;true;true', '5;true;haswordauthor(A, D), haswordauthor(B, D).;true;true', '6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, D).;true;true', '6;true;haswordauthor(B, C).;true;true', '7;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, D).;true;true', '7;true;haswordauthor(A, C).;true;true', '8;;sameauthor(A, B) :- haswordauthor(A, C).;true;true', '8;true;haswordauthor(B, C).;true;true', '8;true,true;haswordauthor(D, E), haswordauthor(B, E).;true;true', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '9;true;haswordauthor(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7672398441904213;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.7781489350995119;  // std dev = 1,356, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995117;  // std dev = 2,38e-07, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.6283482482020415;  // std dev = 0,946, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.6783577682342773;  // std dev = 1,370, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | | then return 0.6549653625650375;  // std dev = 0,935, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.7214274608374258;  // std dev = 0,054, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(B, E) )
%   | | | then return 0.47483973081666486;  // std dev = 1,311, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.5646793619809484;  // std dev = 0,030, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.5267409866031876;  // std dev = 1,369, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.5573718555703983;  // std dev = 0,056, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, E) )
%   | then if ( haswordauthor(B, E) )
%   | | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | | then return 0.3769828173212384;  // std dev = 1,319, 24,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.4121512810622631;  // std dev = 1,375, 131,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(C, D), haswordauthor(D, E) )
%   | then if ( haswordauthor(A, F) )
%   | | then if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.2931368129619632;  // std dev = 1,656, 48,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | | else return 0.3190711022104687;  // std dev = 0,945, 107,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=106 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(A, E) )
%   | | | then return 0.19550552470561589;  // std dev = 1,312, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.27103439797554196;  // std dev = 0,047, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.23193764707351297;  // std dev = 1,367, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.2587193468498396;  // std dev = 0,062, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, D) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(B, E) )
%   | | | then return 0.19189810812278332;  // std dev = 1,385, 33,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.1631526746249184;  // std dev = 0,902, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.1634554244210282;  // std dev = 0,918, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.21506854975003706;  // std dev = 0,145, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, D) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(B, E) )
%   | | | then return 0.15748181580953635;  // std dev = 1,383, 33,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.13559139230257872;  // std dev = 0,907, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.13580117327188598;  // std dev = 0,922, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.18102288222946614;  // std dev = 0,128, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(D, E), haswordauthor(B, E) )
%   | | then if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | | then return 0.11019800077059705;  // std dev = 1,310, 24,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.1486711443620877;  // std dev = 1,381, 131,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.08354071803565416;  // std dev = 0,924, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11104496346586178;  // std dev = 1,373, 39,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else if ( haswordauthor(B, I), haswordtitle(J, I) )
%   | | | then return 0.09414967056691217;  // std dev = 0,923, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.13798361771990042;  // std dev = 0,119, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.696801
   AUC PR    = 0.956592
   CLL	      = -0.279606
   Precision = 0.937589 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967789


Total learning time: 8.513 seconds
Total inference time: 15.115 seconds
AUC ROC: 0.696801


Refined model AUC ROC: 0.696801


Dataset: 13_uwcse_cora, Fold: 3, Type: transfer, Time: 03:48:58
{'Inference time': 15.115, 'Parameter Learning results': {'Inference time': 1.763, 'F1': 0.967789, 'Precision': [0.937589, 0.5], 'AUC PR': 0.937589, 'CLL': -0.262718, 'Recall': 1.0, 'Learning time': 3.772, 'AUC ROC': 0.685714}, 'F1': 0.967789, 'Precision': [0.937589, 0.5], 'AUC PR': 0.956592, 'Mapping results': {'Possible mappings': 54, 'Total time': 2.491793155670166, 'Finding best mapping': 0.02693462371826172, 'Generating paths time': 2.3799703121185303, 'Knowledge compiling time': 0.06910991668701172, 'Generating mappings time': 0.01577305793762207}, 'CLL': -0.279606, 'Recall': 1.0, 'Learning time': 12.285, 'AUC ROC': 0.696801}


Start learning from scratch in target domain

Target train facts examples: 9155
Target train pos examples: 151
Target train neg examples: 4

Target test facts examples: 32591
Target test pos examples: 661
Target test neg examples: 70

WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordvenue(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(B, G) )
%   | | then if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7672398441904211;  // std dev = 1,348, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.8581489350995117;  // std dev = 2,38e-07, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | then if ( haswordauthor(B, E), haswordauthor(A, C) )
%   | | then return 0.7518526675222027;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4739677240518402;  // std dev = 0,850, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordauthor(A, C) )
%   | | then return 0.6552933898908724;  // std dev = 0,271, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.7194734122109543;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return 0.7121103442571843;  // std dev = 0,093, 107,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=106 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.5982265566734745;  // std dev = 0,036, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return 0.5711531867014099;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5023528817658739;  // std dev = 1,348, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.4932265707205679;  // std dev = 0,239, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( haswordauthor(B, I), haswordtitle(J, I) )
%   | then return 0.49408688004839607;  // std dev = 0,229, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.5596076579513148;  // std dev = 0,067, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordvenue(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then return 0.27922033353460524;  // std dev = 0,880, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.3565093306353331;  // std dev = 0,266, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.4230106371600488;  // std dev = 0,014, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(A, G) )
%   | | then if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.4674602521120832;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.37790989593011926;  // std dev = 1,348, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.4324875304263897;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.4207433915070787;  // std dev = 0,056, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordvenue(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then return 0.21173827420821642;  // std dev = 0,881, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2710342259586333;  // std dev = 0,267, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.324451784198937;  // std dev = 0,013, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(A, G) )
%   | | then if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.3548463863226073;  // std dev = 7,45e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.28597473007315427;  // std dev = 1,348, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.3308824102750045;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.32291458746586416;  // std dev = 0,050, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordvenue(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then return 0.16339244286642976;  // std dev = 0,883, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.21115628531485592;  // std dev = 0,268, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.2577289928425654;  // std dev = 0,011, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(A, G) )
%   | | then return 0.2283430220645714;  // std dev = 0,270, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.2621005871108099;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.2566820384175277;  // std dev = 0,044, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordvenue(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then return 0.1275119447852889;  // std dev = 0,889, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.16909651808221132;  // std dev = 0,268, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.21156602513598294;  // std dev = 0,010, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(A, G) )
%   | | then return 0.181904033791011;  // std dev = 0,270, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.21464004215857477;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.21082809134751396;  // std dev = 0,039, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordvenue(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then return 0.10111799809562168;  // std dev = 0,894, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.13830601209734078;  // std dev = 0,269, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.17842412279614547;  // std dev = 0,009, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(A, G) )
%   | | then if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.20376988186799072;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1407409000015214;  // std dev = 1,348, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.18066925586058158;  // std dev = 1,05e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.17788398686079618;  // std dev = 0,034, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordvenue(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then return 0.08117242998835895;  // std dev = 0,898, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.11515755591684003;  // std dev = 0,269, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1537518685665528;  // std dev = 0,008, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(A, G) )
%   | | then if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.1726920861790452;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11664065252496596;  // std dev = 1,348, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.15544878580278493;  // std dev = 1,29e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.15334285312622153;  // std dev = 0,030, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then return 0.2000604734700372;  // std dev = 0,111, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return 0.1378184121701158;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.09810956213795526;  // std dev = 1,348, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.0767627656233123;  // std dev = 0,222, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | then if ( haswordauthor(A, I) )
%   | | then return 0.09698965645278858;  // std dev = 0,270, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.1325267265198905;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.13447577247543654;  // std dev = 0,027, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */


Results
   AUC ROC   = 0.486049
   AUC PR    = 0.92601
   CLL	      = -0.336582
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 8.527 seconds
Total inference time: 1.651 seconds
AUC ROC: 0.486049


Dataset: 13_uwcse_cora, Fold: 3, Type: scratch, Time: 03:49:08
{'Inference time': 1.651, 'F1': 0.949713, 'Precision': [0.904241, 0.5], 'AUC PR': 0.92601, 'CLL': -0.336582, 'Recall': 1.0, 'Learning time': 8.527, 'AUC ROC': 0.486049}


Starting fold 4

Target predicate: sameauthor 

Mapping Results
   Knowledge compiling time   = 0.08026885986328125
   Generating paths time   = 2.6094489097595215
   Generating mappings time   = 0.015953779220581055
   Possible mappings   = 54
   Finding best mapping   = 0.02692580223083496
   Total time   = 2.7326316833496094


Best mapping found: ['publication(A,B) -> haswordauthor(B,A)', 'projectmember(A,B) -> haswordauthor(B,A)', 'advisedby(A,B) -> sameauthor(B,A)', 'hasposition(A,B) -> author(B,A)'] 

Transferred target predicate: sameauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sameauthor(B, A) :- haswordauthor(B, C), haswordauthor(A, C).;false;false
1;;sameauthor(B, A) :- haswordauthor(B, C), haswordauthor(A, C).;true;false
1;true,false;haswordauthor(B, G).;true;true
1;true,false,true;haswordauthor(K, G).;false;false
1;true;haswordauthor(F, C).;false;true
1;true,false,false;haswordauthor(B, L), haswordauthor(A, M).;false;false
2;;sameauthor(B, A) :- haswordauthor(B, C).;true;false
2;true,false;haswordauthor(B, H), haswordauthor(A, I).;false;true
2;true,false,false;haswordauthor(A, J).;false;false
2;true;haswordauthor(D, C).;false;true
3;;sameauthor(B, A) :- haswordauthor(B, C), haswordauthor(A, C).;true;false
3;true,false;haswordauthor(A, G).;true;false
3;true,false,true;haswordauthor(H, I).;false;false
3;true;haswordauthor(D, E).;true;true
3;true,true;haswordauthor(B, E).;false;false
4;;sameauthor(B, A) :- author(C, B).;true;false
4;true,false;haswordauthor(A, H), haswordauthor(B, I).;false;true
4;true;author(C, D), haswordauthor(D, E).;true;true
4;true,true,false;haswordauthor(A, G), haswordauthor(B, G).;false;false
4;true,false,false;haswordauthor(B, J).;false;false
4;true,true;haswordauthor(A, F).;false;true
5;;sameauthor(B, A) :- author(C, B).;true;false
5;true,false;haswordauthor(A, E), haswordauthor(B, F).;true;true
5;true,false,true;haswordauthor(G, E).;false;false
5;true;haswordauthor(A, D), haswordauthor(B, D).;false;true
5;true,false,false;haswordauthor(B, I).;false;false
6;;sameauthor(B, A) :- haswordauthor(A, C), haswordauthor(B, D).;true;false
6;true,false;haswordauthor(K, L).;false;true
6;true,false,false;haswordauthor(B, M).;false;false
6;true;haswordauthor(B, C).;false;true
7;;sameauthor(B, A) :- haswordauthor(B, F), haswordauthor(A, G).;true;false
7;true,false;haswordauthor(B, I), haswordauthor(A, I).;false;true
7;true,false,false;haswordauthor(B, M), haswordauthor(A, N).;false;false
7;true;haswordauthor(A, F).;false;true
8;;sameauthor(B, A) :- haswordauthor(A, C).;true;false
8;true,false;haswordauthor(B, F).;false;true
8;true;haswordauthor(B, C).;true;true
8;true,false,false,true;haswordauthor(H, G).;false;false
8;true,false,false;haswordauthor(B, G).;true;false
8;true,true;haswordauthor(D, E), haswordauthor(B, E).;false;false
9;;sameauthor(B, A) :- haswordauthor(A, I), haswordauthor(B, I).;true;false
9;true,false;haswordauthor(A, N).;false;false
9;true;haswordauthor(J, I).;false;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.8099561640151723;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6809038096058014;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.49902054593484374;  // std dev = 3,278, 174,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=158 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(D, E) )
%   | then if ( haswordauthor(A, E) )
%   | | then return 0.40447921308703544;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1724624207076295;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A) )
%   then if ( author(C, D), haswordauthor(D, E) )
%   | then if ( haswordauthor(B, F) )
%   | | then return 0.28644644627732285;  // std dev = 3,034, 174,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=158 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then return 0.24481797560221827;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else if ( haswordauthor(B, E), haswordauthor(A, F) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return -0.18934203499511937;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, D) )
%   then if ( haswordauthor(A, C) )
%   | then return 0.19677678038291893;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.1619713030055349;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, D) )
%   then if ( haswordauthor(B, C) )
%   | then return 0.16222634673404798;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else if ( haswordauthor(A, E), haswordauthor(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( haswordauthor(A, F), haswordauthor(B, G) )
%   | | | then return -0.14117020490198914;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(D, E), haswordauthor(A, E) )
%   | | then return 0.1365367417864502;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(A, F) )
%   | | then return -0.12490547314494924;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.11685162860524008;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11187998536302415;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.655172
   AUC PR    = 0.942363
   CLL	      = -0.258251
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 4.468 seconds
Total inference time: 1.823 seconds
AUC ROC: 0.655172


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)'}, {'false': [0.0, 8, 0], 'true': [2.759, 8, 158]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [2.759, 8, 158]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.278, 16, 158]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'true': 'haswordauthor(D, E)', 'true,true': 'haswordauthor(A, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 8, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [2.759, 8, 158]}], ['sameauthor(A, B)', {'': 'author(C, A)', 'true': 'author(C, D), haswordauthor(D, E)', 'true,true': 'haswordauthor(B, F)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.034, 16, 158]}], ['sameauthor(A, B)', {'': 'author(C, A)', 'true,false': 'haswordauthor(B, E), haswordauthor(A, F)', 'true,false,true': 'haswordauthor(G, E)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 8, 0], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [2.759, 8, 158]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, D)', 'true,false': 'haswordauthor(E, F)', 'true': 'haswordauthor(A, C)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 8, 0], 'true,true': [2.759, 8, 158], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, D)', 'true,false': 'haswordauthor(A, E), haswordauthor(B, E)', 'true': 'haswordauthor(B, C)', 'true,false,false': 'haswordauthor(A, F), haswordauthor(B, G)'}, {'true,false,false,true': [0.0, 8, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 0], 'true,true': [2.759, 8, 158], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true,false': 'haswordauthor(A, F)', 'true': 'haswordauthor(A, C)', 'true,true': 'haswordauthor(D, E), haswordauthor(A, E)'}, {'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 8, 0], 'true,true,true': [2.759, 8, 158]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 8, 0], 'true,true': [2.759, 8, 158]}]]
[{'': [0.045870227899556054, -6.938893903907228e-18]}, {'': [0.045870227899547665, 0.0], 'true': [0.045870227899547665, nan]}, {'': [0.061772472858521894, nan], 'true': [0.061772472858521894, nan]}, {'': [0.04587022789954955, 6.938893903907228e-18], 'true': [0.04587022789954955, nan], 'true,true': [0.04587022789954955, nan]}, {'': [0.05290846244036185, nan], 'true': [0.05290846244036185, nan], 'true,true': [0.05290846244036185, nan]}, {'': [0.05202922808519979, nan], 'true,false': [0.0, nan], 'true,false,true': [0.0, nan], 'true': [0.04587022789955031, 0.0]}, {'': [0.04940644442566148, nan], 'true,false': [-3.469446951953614e-18, nan], 'true': [0.0458702278995497, -3.469446951953614e-18]}, {'': [0.04779882928887184, nan], 'true,false': [nan, -6.938893903907228e-18], 'true,false,false': [-6.938893903907228e-18, nan], 'true': [0.04587022789955002, -6.938893903907228e-18]}, {'': [0.046759385678829875, nan], 'true,false': [-6.938893903907228e-18, nan], 'true': [0.045870227899549754, -6.938893903907228e-18], 'true,true': [0.045870227899549754, nan]}, {'': [0.04587022789955005, 6.938893903907228e-18], 'true': [0.04587022789955005, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '3;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '5;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true', '6;;sameauthor(A, B) :- haswordauthor(A, C).;true;true', '7;;sameauthor(A, B) :- haswordauthor(B, C).;true;true', '8;;sameauthor(A, B) :- haswordauthor(A, C).;true;true', '9;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,53e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.6914822684328453;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995125;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.7194734122109548;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.5851860008555358;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.7194734122109542;  // std dev = 5,96e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.7194734122109538;  // std dev = 2,23e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.5553664367462843;  // std dev = 1,03e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.4612598391067553;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.5553664367462836;  // std dev = 3,32e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.4175135841583102;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.3488463256948424;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.4175135841583098;  // std dev = 5,16e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.41751358415831047;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.3207118471601495;  // std dev = 2,11e-08, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.26212705508354195;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.21248070121827137;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.32071184716014967;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21248070121827137;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.32071184716015005;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.25517224256948956;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.19945264276423416;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.15948988228171151;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.2551722425694894;  // std dev = 2,11e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.15948988228171151;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2551722425694895;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return 0.20975771563253542;  // std dev = 5,37e-08, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.14756175290018075;  // std dev = 2,162, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | | then return 0.1852116021095462;  // std dev = 1,170, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.20975771563253573;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return 0.1770964977452775;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.1152803272742534;  // std dev = 2,162, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | | then return 0.15170619372059554;  // std dev = 1,176, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.17709649774527716;  // std dev = 3,65e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return 0.1527438580936709;  // std dev = 3,65e-08, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.09121930640158983;  // std dev = 2,162, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | | then return 0.1263201021913564;  // std dev = 1,182, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.15274385809367055;  // std dev = 8,16e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.13805669876466004;  // std dev = 0,027, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.08262090597726152;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.009332477307795886;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.13400703000801117;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.034328584217991266;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.13400703000801092;  // std dev = 5,37e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.631736
   AUC PR    = 0.928719
   CLL	      = -0.26032
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 10.36 seconds
Total inference time: 4.835 seconds
AUC ROC: 0.631736


Refined model AUC ROC: 0.631736


Dataset: 13_uwcse_cora, Fold: 4, Type: transfer, Time: 03:49:33
{'Inference time': 4.835, 'Parameter Learning results': {'Inference time': 1.823, 'F1': 0.970326, 'Precision': [0.942363, 0.5], 'AUC PR': 0.942363, 'CLL': -0.258251, 'Recall': 1.0, 'Learning time': 4.468, 'AUC ROC': 0.655172}, 'F1': 0.970326, 'Precision': [0.942363, 0.5], 'AUC PR': 0.928719, 'Mapping results': {'Possible mappings': 54, 'Total time': 2.7326316833496094, 'Finding best mapping': 0.02692580223083496, 'Generating paths time': 2.6094489097595215, 'Knowledge compiling time': 0.08026885986328125, 'Generating mappings time': 0.015953779220581055}, 'CLL': -0.26032, 'Recall': 1.0, 'Learning time': 14.828, 'AUC ROC': 0.631736}


Start learning from scratch in target domain

Target train facts examples: 7971
Target train pos examples: 158
Target train neg examples: 16

Target test facts examples: 33775
Target test pos examples: 654
Target test neg examples: 58

WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,53e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.6914822684328453;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995125;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.7194734122109548;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.5851860008555358;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.7032027438528147;  // std dev = 0,132, 100,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=98 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.557150474814818;  // std dev = 0,012, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.4612598391067553;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.30588697237045953;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.5593805224004856;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.41884024412089677;  // std dev = 0,012, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.3488463256948424;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.23280057170178373;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.4175135841583098;  // std dev = 5,16e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.42049731514227506;  // std dev = 9,42e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.3216127727910749;  // std dev = 0,011, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.26212705508354195;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.17498942544475748;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.32071184716014967;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21248070121827137;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.3227353408869965;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.2557877132693625;  // std dev = 0,009, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.19945264276423416;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.13130198780441774;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then return 0.255763779181518;  // std dev = 0,002, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | | then return 0.22327812247356352;  // std dev = 1,170, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.2565524946642231;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.2101928763494454;  // std dev = 0,008, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.15451336627983223;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.09883807669447912;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.21373497493542354;  // std dev = 0,009, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.10400110091384886;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.210737279086073;  // std dev = 0,000223, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.1774159147358239;  // std dev = 0,007, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.12179491558002786;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.07476427036476535;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.18000915390430033;  // std dev = 0,008, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.0785976898552198;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.1778146283791111;  // std dev = 0,000196, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.15298633194755534;  // std dev = 0,006, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.09745354768081692;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.05683619988559777;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.15495047028864278;  // std dev = 0,007, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.0596984317836167;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.1532884142883853;  // std dev = 0,000174, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.13419644002554262;  // std dev = 0,006, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.07895233872555119;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.043400238368815604;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.13572779109805994;  // std dev = 0,007, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.04555144704226192;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.13443201322631312;  // std dev = 0,000156, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.630457
   AUC PR    = 0.928594
   CLL	      = -0.261852
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 9.873 seconds
Total inference time: 2.865 seconds
AUC ROC: 0.630457


Dataset: 13_uwcse_cora, Fold: 4, Type: scratch, Time: 03:49:46
{'Inference time': 2.865, 'F1': 0.970326, 'Precision': [0.942363, 0.5], 'AUC PR': 0.928594, 'CLL': -0.261852, 'Recall': 1.0, 'Learning time': 9.873, 'AUC ROC': 0.630457}


Starting fold 5

Target predicate: sameauthor 

Mapping Results
   Knowledge compiling time   = 0.13690996170043945
   Generating paths time   = 2.4132113456726074
   Generating mappings time   = 0.01258993148803711
   Possible mappings   = 54
   Finding best mapping   = 0.020833492279052734
   Total time   = 2.5835514068603516


Best mapping found: ['publication(A,B) -> haswordauthor(B,A)', 'projectmember(A,B) -> author(A,B)', 'advisedby(A,B) -> sameauthor(A,B)', 'hasposition(A,B) -> haswordauthor(A,B)'] 

Transferred target predicate: sameauthor 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;false;false
1;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;false
1;true,false;haswordauthor(B, G).;true;true
1;true,false,true;haswordauthor(K, G).;false;false
1;true;haswordauthor(F, C).;false;true
1;true,false,false;haswordauthor(B, L), haswordauthor(A, M).;false;false
2;;sameauthor(A, B) :- haswordauthor(B, C).;true;false
2;true,false;author(H, B), haswordauthor(A, I).;false;true
2;true,false,false;haswordauthor(A, J).;false;false
2;true;haswordauthor(D, C).;false;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;false
3;true,false;haswordauthor(A, G).;true;false
3;true,false,true;haswordauthor(H, I).;false;false
3;true;haswordauthor(D, E).;true;true
3;true,true;haswordauthor(B, E).;false;false
4;;sameauthor(A, B) :- haswordauthor(B, C).;true;false
4;true,false;haswordauthor(A, H), haswordauthor(B, I).;false;true
4;true;haswordauthor(D, C), author(E, D).;true;true
4;true,true,false;haswordauthor(A, G), haswordauthor(B, G).;false;false
4;true,false,false;haswordauthor(B, J).;false;false
4;true,true;haswordauthor(A, F).;false;true
5;;sameauthor(A, B) :- haswordauthor(B, C).;true;false
5;true,false;haswordauthor(A, E), haswordauthor(B, F).;true;true
5;true,false,true;haswordauthor(G, E).;false;false
5;true;haswordauthor(A, D), haswordauthor(B, D).;false;true
5;true,false,false;haswordauthor(B, I).;false;false
6;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, D).;true;false
6;true,false;haswordauthor(K, L).;false;true
6;true,false,false;haswordauthor(B, M).;false;false
6;true;haswordauthor(B, C).;false;true
7;;sameauthor(A, B) :- haswordauthor(B, F), haswordauthor(A, G).;true;false
7;true,false;haswordauthor(B, I), haswordauthor(A, I).;false;true
7;true,false,false;haswordauthor(B, M), haswordauthor(A, N).;false;false
7;true;haswordauthor(A, F).;false;true
8;;sameauthor(A, B) :- haswordauthor(A, C).;true;false
8;true,false;author(F, B).;false;true
8;true;haswordauthor(B, C).;true;true
8;true,false,false,true;haswordauthor(H, G).;false;false
8;true,false,false;haswordauthor(B, G).;true;false
8;true,true;haswordauthor(D, E), haswordauthor(B, E).;false;false
9;;sameauthor(A, B) :- haswordauthor(A, I), haswordauthor(B, I).;true;false
9;true,false;haswordauthor(A, N).;false;false
9;true;haswordauthor(J, I).;false;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.7929315437951615;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6672286583325434;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4989999868007996;  // std dev = 3,679, 190,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=172 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, E) )
%   | then if ( haswordauthor(B, E) )
%   | | then return 0.39507634590357293;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.17245948654557822;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(D, C), author(E, D) )
%   | then if ( haswordauthor(A, F) )
%   | | then return 0.28548945722556324;  // std dev = 3,520, 190,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=172 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then return 0.23637510507086634;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else if ( haswordauthor(A, E), haswordauthor(B, F) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return -0.1891924851924549;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, D) )
%   then if ( haswordauthor(B, C) )
%   | then return 0.18902716537251366;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.1618593428249047;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, D) )
%   then if ( haswordauthor(A, C) )
%   | then return 0.154874962426927;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else if ( haswordauthor(B, E), haswordauthor(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( haswordauthor(B, F), haswordauthor(A, G) )
%   | | | then return -0.1410837694490044;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(D, E), haswordauthor(B, E) )
%   | | then return 0.12944368672076645;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( author(F, B) )
%   | | then return -0.12483699180101478;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.10994877435636123;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11182453429986682;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.678571
   AUC PR    = 0.946746
   CLL	      = -0.258058
   Precision = 0.946746 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.972644


Total learning time: 5.686 seconds
Total inference time: 1.467 seconds
AUC ROC: 0.678571


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)'}, {'false': [0.0, 6, 0], 'true': [3.349, 12, 172]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 6, 0], 'true,true': [3.349, 12, 172]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [3.679, 18, 172]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'true': 'haswordauthor(D, E)', 'true,true': 'haswordauthor(B, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 6, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.349, 12, 172]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'haswordauthor(D, C), author(E, D)', 'true,true': 'haswordauthor(A, F)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.52, 18, 172]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true,false': 'haswordauthor(A, E), haswordauthor(B, F)', 'true,false,true': 'haswordauthor(G, E)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 6, 0], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [3.349, 12, 172]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, D)', 'true,false': 'haswordauthor(E, F)', 'true': 'haswordauthor(B, C)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 6, 0], 'true,true': [3.349, 12, 172], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, D)', 'true,false': 'haswordauthor(B, E), haswordauthor(A, E)', 'true': 'haswordauthor(A, C)', 'true,false,false': 'haswordauthor(B, F), haswordauthor(A, G)'}, {'true,false,false,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 0], 'true,true': [3.349, 12, 172], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C)', 'true,false': 'author(F, B)', 'true': 'haswordauthor(B, C)', 'true,true': 'haswordauthor(D, E), haswordauthor(B, E)'}, {'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 6, 0], 'true,true,true': [3.349, 12, 172]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'true': 'haswordauthor(D, C)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 6, 0], 'true,true': [3.349, 12, 172]}]]
[{'': [0.060964083175810056, -6.938893903907228e-18]}, {'': [0.06096408317580048, -2.3129646346357427e-18], 'true': [0.06096408317580048, nan]}, {'': [0.07122502219237517, nan], 'true': [0.07122502219237517, nan]}, {'': [0.06096408317580376, 4.625929269271485e-18], 'true': [0.06096408317580376, nan], 'true,true': [0.06096408317580376, nan]}, {'': [0.06520095816055181, nan], 'true': [0.06520095816055181, nan], 'true,true': [0.06520095816055181, nan]}, {'': [0.0645774883709807, nan], 'true,false': [0.0, nan], 'true,false,true': [0.0, nan], 'true': [0.060964083175803443, 0.0]}, {'': [0.06280416368396396, nan], 'true,false': [0.0, nan], 'true': [0.060964083175803374, 0.0]}, {'': [0.061717602276480765, nan], 'true,false': [nan, -2.3129646346357427e-18], 'true,false,false': [-2.3129646346357427e-18, nan], 'true': [0.06096408317580355, -2.3129646346357427e-18]}, {'': [0.061016274578848166, nan], 'true,false': [0.0, nan], 'true': [0.06096408317580359, 0.0], 'true,true': [0.06096408317580359, nan]}, {'': [0.0609640831758034, 0.0], 'true': [0.0609640831758034, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '1;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '5;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true', '6;;sameauthor(A, B) :- haswordauthor(B, C).;true;true', '7;;sameauthor(A, B) :- haswordauthor(A, C).;true;true', '8;;sameauthor(A, B) :- haswordauthor(B, C).;true;true', '9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,92e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.8581489350995116;  // std dev = 2,23e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5854216623722396;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.524815601766179;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.719473412210954;  // std dev = 2,06e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.7194734122109547;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.498380757744019;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.448295606241962;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.7194734122109544;  // std dev = 4,21e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.3043033203440437;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3328054984329875;  // std dev = 0,771, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(H, C) )
%   | | | then return 0.5553664367462845;  // std dev = 5,96e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.48553028072793347;  // std dev = 2,263, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.4175135841583104;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, B), venue(F, E) )
%   | | | then return 0.4175135841583105;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.30771266350255827;  // std dev = 1,737, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | | then return 0.3573813339712324;  // std dev = 0,892, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.26548201280116385;  // std dev = 1,570, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else return 0.44027586991242934;  // std dev = 0,319, 54,000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3259962514425902;  // std dev = 0,102, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.3207118471601494;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.01646040868655405;  // std dev = 0,946, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.2829880796834722;  // std dev = 2,210, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.25470307378965695;  // std dev = 0,004, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, A), venue(F, E) )
%   | | | then return 0.41095147010881183;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15391748277947775;  // std dev = 1,618, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( author(I, B), venue(I, H) )
%   | | | then return 0.44840639949390404;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15051755814216414;  // std dev = 1,656, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else return 0.27776820296348476;  // std dev = 0,339, 54,000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.21964088927584163;  // std dev = 0,170, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return 0.20983549536570048;  // std dev = 2,98e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.1307144182460383;  // std dev = 2,389, 56,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=44 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1843669004502263;  // std dev = 0,149, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.058102605178446246;  // std dev = 0,902, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.15268263472064658;  // std dev = 2,163, 80,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=73 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.15827308939294163;  // std dev = 0,132, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return -0.050186926104763066;  // std dev = 0,899, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.12746032638454968;  // std dev = 2,174, 80,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=73 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.13833358907443652;  // std dev = 0,118, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.2681388281929447;  // std dev = 0,104, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07437039766480172;  // std dev = 0,749, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(A, G) )
%   | | | then return 0.13992708011332983;  // std dev = 1,83e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.011319788883910423;  // std dev = 1,485, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return -0.00666011698838184;  // std dev = 1,442, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.17482515997967937;  // std dev = 0,187, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.510658
   AUC PR    = 0.896635
   CLL	      = -0.414421
   Precision = 0.942238 at threshold = 0.5
   Recall    = 0.815625
   F1        = 0.874372


Total learning time: 9.508 seconds
Total inference time: 2.943 seconds
AUC ROC: 0.510658


Refined model AUC ROC: 0.510658


Dataset: 13_uwcse_cora, Fold: 5, Type: transfer, Time: 03:50:09
{'Inference time': 2.943, 'Parameter Learning results': {'Inference time': 1.467, 'F1': 0.972644, 'Precision': [0.946746, 0.5], 'AUC PR': 0.946746, 'CLL': -0.258058, 'Recall': 1.0, 'Learning time': 5.686, 'AUC ROC': 0.678571}, 'F1': 0.874372, 'Precision': [0.942238, 0.5], 'AUC PR': 0.896635, 'Mapping results': {'Possible mappings': 54, 'Total time': 2.5835514068603516, 'Finding best mapping': 0.020833492279052734, 'Generating paths time': 2.4132113456726074, 'Knowledge compiling time': 0.13690996170043945, 'Generating mappings time': 0.01258993148803711}, 'CLL': -0.414421, 'Recall': 0.815625, 'Learning time': 15.193999999999999, 'AUC ROC': 0.510658}


Start learning from scratch in target domain

Target train facts examples: 8472
Target train pos examples: 172
Target train neg examples: 18

Target test facts examples: 33274
Target test pos examples: 640
Target test neg examples: 56

WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.8581489350995115;  // std dev = 2,92e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(H, C) )
%   | | | then return 0.8581489350995116;  // std dev = 2,23e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.7092127648867461;  // std dev = 2,441, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.719473412210954;  // std dev = 2,06e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(A, G), haswordtitle(F, G) )
%   | | | then return -0.17190784947654805;  // std dev = 0,093, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5485299341235942;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(H, C) )
%   | | | then return 0.7194734122109547;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.6050920926162505;  // std dev = 2,409, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.5553664367462845;  // std dev = 5,96e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | | then return 0.21867486857822405;  // std dev = 1,743, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.49865984442198463;  // std dev = 2,035, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4175135841583099;  // std dev = 2,15e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.41751358415831014;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.09323408702011747;  // std dev = 1,140, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.3723101526316521;  // std dev = 2,357, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3207118471601504;  // std dev = 4,21e-08, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.30969260856406944;  // std dev = 0,163, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.2653332412589759;  // std dev = 0,770, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return 0.25891746276261846;  // std dev = 1,703, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.34593203095777586;  // std dev = 1,589, 35,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2551722425694897;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.26709340612139676;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | | then return -0.007451040236794203;  // std dev = 1,593, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.24244378780579143;  // std dev = 1,852, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2097577156325357;  // std dev = 1,23e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.21814433226042154;  // std dev = 1,49e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | | then return -0.01591652641004757;  // std dev = 1,583, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.1930377768189891;  // std dev = 1,843, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1770964977452772;  // std dev = 8,16e-08, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.1832236806519907;  // std dev = 3,33e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | | then return -0.04746543854570168;  // std dev = 1,592, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.1654146097900447;  // std dev = 1,788, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1527438580936713;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.32514390366329776;  // std dev = 0,193, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07438487827747772;  // std dev = 0,577, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return 0.1119984545386084;  // std dev = 1,630, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.1648992599296386;  // std dev = 1,564, 35,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13400703000801115;  // std dev = 3,65e-08, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.1430874726866795;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | | then return -0.07007207803440259;  // std dev = 1,582, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.1159598046385952;  // std dev = 1,728, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.551563
   AUC PR    = 0.917948
   CLL	      = -0.390077
   Precision = 0.94306 at threshold = 0.5
   Recall    = 0.828125
   F1        = 0.881864


Total learning time: 6.993 seconds
Total inference time: 1.48 seconds
AUC ROC: 0.551563


Dataset: 13_uwcse_cora, Fold: 5, Type: scratch, Time: 03:50:18
{'Inference time': 1.48, 'F1': 0.881864, 'Precision': [0.94306, 0.5], 'AUC PR': 0.917948, 'CLL': -0.390077, 'Recall': 0.828125, 'Learning time': 6.993, 'AUC ROC': 0.551563}


