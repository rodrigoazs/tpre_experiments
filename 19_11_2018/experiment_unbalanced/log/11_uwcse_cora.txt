Starting experiment #1 for 11_uwcse_cora

Start learning from source dataset

Source train facts examples: 2274
Source train pos examples: 113
Source train neg examples: 4079

WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(G, D, F) )
%   | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(H, A) )
%   | | then if ( publication(H, I), professor(I) )
%   | | | then return 0.15226658215833588;  // std dev = 2,657, 34,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0.5581489350995124;  // std dev = 1,449, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( tempadvisedby(J, B), ta(K, J, L) )
%   | | | then return 0.8126943896449667;  // std dev = 0,977, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6308762078267847;  // std dev = 2,780, 44,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=34 */
%   else return -0.1418510649004881;  // std dev = 0,000, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then return 0.7229562329445475;  // std dev = 0,079, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( ta(D, A, E) )
%   | | then if ( publication(F, B), tempadvisedby(G, B) )
%   | | | then return 0.47570205708972;  // std dev = 2,202, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.6357575731944936;  // std dev = 1,638, 21,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else if ( publication(H, B), publication(I, A) )
%   | | | then return 0.11086338884603622;  // std dev = 1,650, 14,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.4270370352584297;  // std dev = 3,256, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else return -0.12544463852839138;  // std dev = 2,98e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B) )
%   | | then return 0.5607768534623546;  // std dev = 0,099, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( ta(E, A, F) )
%   | | | then return 0.2211729096127785;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.554506242946112;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( publication(G, B), ta(H, A, I) )
%   | | then if ( ta(J, K, I), publication(G, K) )
%   | | | then return 0.5600455090248819;  // std dev = 0,888, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3462923771784132;  // std dev = 2,703, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | | else if ( publication(L, B), publication(M, A) )
%   | | | then return 0.06463574208398792;  // std dev = 1,675, 16,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.32066248554210197;  // std dev = 3,550, 54,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=35 */
%   else return -0.11231637819360639;  // std dev = 5,96e-08, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E) )
%   | | then if ( tempadvisedby(F, B), ta(G, F, H) )
%   | | | then return 0.441792351483488;  // std dev = 0,081, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1968816703745826;  // std dev = 1,213, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.41589650053430455;  // std dev = 0,004, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( tempadvisedby(I, B), publication(J, A) )
%   | | then if ( publication(J, K), professor(K) )
%   | | | then return -0.08937926252067037;  // std dev = 1,933, 27,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | | | else return 0.25963037968036795;  // std dev = 1,081, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( ta(L, A, M), publication(N, B) )
%   | | | then return 0.3470771894590362;  // std dev = 2,408, 38,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=30 */
%   | | | else return 0.21644628645734196;  // std dev = 3,641, 57,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=34 */
%   else return -0.1015963294878365;  // std dev = 0,000, 208,000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( publication(D, B), publication(D, A) )
%   | then return 0.33382902211251647;  // std dev = 0,208, 41,000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tempadvisedby(E, B), publication(F, A) )
%   | | then if ( publication(G, B), ta(H, E, I) )
%   | | | then return -0.24746459267826784;  // std dev = 0,174, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.22563316982757295;  // std dev = 1,826, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else if ( tempadvisedby(J, B), ta(K, J, L) )
%   | | | then return 0.31704730381138546;  // std dev = 1,861, 25,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | | else return 0.2129379978302921;  // std dev = 3,603, 63,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=42 */
%   else if ( ta(M, A, N) )
%   | then if ( publication(P, B) )
%   | | then return -0.09269127618926089;  // std dev = 1,18e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( ta(Q, B, R) )
%   | | | then return -0.0926912761892609;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.17035994356754744;  // std dev = 0,444, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.08851103528574966;  // std dev = 0,052, 154,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=1 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( tempadvisedby(D, B), publication(E, D) )
%   | then if ( publication(F, A), publication(F, B) )
%   | | then if ( publication(E, B), ta(G, A, H) )
%   | | | then return -0.03861823464629007;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2562555072020104;  // std dev = 0,042, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( publication(E, B) )
%   | | | then return 0.006616464189245011;  // std dev = 1,084, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.21804733387586855;  // std dev = 0,851, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( projectmember(I, B), publication(J, B) )
%   | | then return -0.10987220937013303;  // std dev = 1,025, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( projectmember(K, B) )
%   | | | then return 0.5586285243058492;  // std dev = 0,273, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.24432686709252638;  // std dev = 3,566, 110,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=89 */
%   else if ( ta(L, A, M) )
%   | then return -0.09385377947394467;  // std dev = 0,059, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.08100175283928752;  // std dev = 0,054, 146,000 (wgt'ed) examples reached here.  /* #neg=145 #pos=1 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( ta(C, A, D), publication(E, B) )
%   | then if ( tempadvisedby(F, B) )
%   | | then if ( ta(G, F, H) )
%   | | | then return 0.23291264229512093;  // std dev = 0,970, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.3203152073802938;  // std dev = 0,803, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( ta(C, I, J), publication(K, I) )
%   | | | then return 0.16107136804442143;  // std dev = 1,528, 16,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return 0.35040300850373696;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( projectmember(L, B), ta(M, A, N) )
%   | | then return -0.35734488756349303;  // std dev = 1,005, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( publication(P, A), publication(P, B) )
%   | | | then return 0.20798942329967457;  // std dev = 0,006, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.07490219650767803;  // std dev = 3,729, 66,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=38 */
%   else return -0.07881965009273079;  // std dev = 0,018, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), tempadvisedby(D, B) )
%   | then if ( ta(E, D, F) )
%   | | then if ( publication(G, A) )
%   | | | then return 0.11183755624082727;  // std dev = 0,672, 22,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   | | | else return 0.2261466569570881;  // std dev = 1,378, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( publication(H, A), ta(I, A, J) )
%   | | | then return 0.2032256319034646;  // std dev = 0,705, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.02573694150357649;  // std dev = 2,197, 27,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | else if ( projectmember(K, B) )
%   | | then if ( publication(L, A) )
%   | | | then return 0.3100246321754453;  // std dev = 0,835, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3039357414686662;  // std dev = 0,050, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(M, B), publication(M, A) )
%   | | | then return 0.19426828414570718;  // std dev = 0,135, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.13892673072463557;  // std dev = 2,993, 49,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=35 */
%   else return -0.07322695940036926;  // std dev = 0,020, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( tempadvisedby(D, B), publication(E, B) )
%   | then if ( publication(E, A) )
%   | | then return 0.1697301278290629;  // std dev = 0,080, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( publication(E, D) )
%   | | | then return 0.0761184664499724;  // std dev = 0,849, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.08394438295657308;  // std dev = 3,297, 52,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=28 */
%   | else if ( tempadvisedby(F, B) )
%   | | then if ( projectmember(G, B) )
%   | | | then return 0.3588307137035329;  // std dev = 0,289, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.00961799576550546;  // std dev = 1,134, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( publication(H, A), ta(I, A, J) )
%   | | | then return 0.2895204221245348;  // std dev = 0,140, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.10033640487523376;  // std dev = 2,790, 48,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=37 */
%   else if ( ta(K, A, L) )
%   | then return -0.08361205989101271;  // std dev = 0,078, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.06497984895926616;  // std dev = 0,049, 153,000 (wgt'ed) examples reached here.  /* #neg=152 #pos=1 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( publication(C, B), tempadvisedby(D, B) )
%   then if ( student(A), publication(C, A) )
%   | then return 0.11412672713489581;  // std dev = 0,178, 30,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( publication(E, A) )
%   | | then if ( inphase(A, F), inphase(D, F) )
%   | | | then return -0.31359776780540866;  // std dev = 0,120, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08092475832506771;  // std dev = 1,412, 23,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | else if ( publication(C, D), ta(G, A, H) )
%   | | | then return -0.34192961201304195;  // std dev = 0,738, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.12279138520195829;  // std dev = 2,266, 34,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   else if ( publication(I, B) )
%   | then if ( professor(B), student(A) )
%   | | then if ( publication(I, J), student(J) )
%   | | | then return -0.07277148954072907;  // std dev = 3,281, 52,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=33 */
%   | | | else return 0.19528708056104258;  // std dev = 1,029, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.0644813093205357;  // std dev = 0,009, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return -0.07629014667009786;  // std dev = 0,241, 115,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */


Predicates from source: ['advisedby(person,person).', 'ta(course,person,quarter).', 'projectmember(project,person).', 'inphase(person,prequals).', 'professor(person).', 'student(person).', 'hasposition(person,faculty).', 'tempadvisedby(person,person).', 'publication(title,person).']

Starting fold 1

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.10936522483825684
   Generating paths time   = 2.58170485496521
   Generating mappings time   = 0.03905034065246582
   Possible mappings   = 162
   Finding best mapping   = 0.05105137825012207
   Total time   = 2.781177282333374


Best mapping found: ['publication(A,B) -> haswordvenue(B,A)', 'projectmember(A,B) -> haswordvenue(B,A)', 'advisedby(A,B) -> samevenue(A,B)', 'inphase(A,B) -> venue(B,A)', 'hasposition(A,B) -> venue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
1;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
2;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
4;;samevenue(A, B) :- venue(C, B).;true;true
4;true,false;haswordvenue(A, F).;true;false
4;true,false,true;haswordvenue(B, G).;false;false
4;true;haswordvenue(B, D), haswordvenue(A, D).;false;true
4;false;haswordvenue(B, P).;false;false
5;;samevenue(A, B) :- venue(C, B).;true;false
5;true,false;haswordvenue(B, I), haswordvenue(B, J).;false;true
5;true;haswordvenue(D, E).;true;true
5;true,true,false;haswordvenue(B, E).;false;false
5;true,false,false;haswordvenue(B, K).;false;false
5;true,true;haswordvenue(A, F), haswordvenue(B, F).;true;true
5;true,true,true;haswordvenue(B, E).;false;false
6;;samevenue(A, B) :- haswordvenue(B, E).;true;false
6;true,false;haswordvenue(B, L).;false;true
6;true,false,false;haswordvenue(A, P), haswordvenue(B, P).;false;false
6;true;haswordvenue(I, K).;false;true
7;;samevenue(A, B) :- haswordvenue(B, C).;true;false
7;true,false;haswordvenue(A, H).;false;true
7;true,false,false,false;haswordvenue(B, M), haswordvenue(A, M).;false;false
7;true;haswordvenue(A, G).;false;true
7;true,false,false,true;haswordvenue(A, L).;false;false
7;true,false,false;haswordvenue(B, K).;true;true
8;;samevenue(A, B) :- venue(C, B).;true;false
8;true,false;haswordvenue(B, G).;false;true
8;true;haswordvenue(B, E).;true;true
8;true,true,false;haswordvenue(D, E).;false;false
8;true,false,false;haswordvenue(A, H).;false;false
8;true,true;haswordvenue(A, E).;false;true
9;;samevenue(A, B) :- haswordvenue(B, C).;true;true
9;true,false;haswordvenue(A, E).;true;true
9;true,false,true;venue(F, A), venue(F, D).;false;false
9;true;haswordvenue(A, C).;false;true
9;true,false,false;haswordvenue(D, C).;false;false
9;false,true;haswordvenue(J, I).;false;false
9;false;haswordvenue(B, I).;true;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.24691298004332782;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.009320944418560179;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.2141231912543579;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.008190095289148226;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.1810835367504864;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.0072026760825635435;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.1497113844521273;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   else return -0.006339104698323429;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then return 0.12142569356682817;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   | else if ( haswordvenue(A, E) )
%   | | then if ( haswordvenue(B, F) )
%   | | | then return -0.005582779576928398;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(D, E) )
%   | then if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.0969816742486842;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( haswordvenue(B, E) )
%   | | | then return -0.004919559835558926;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(D, E) )
%   | then return 0.06382984116612347;  // std dev = 15,215, 1.056,000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, D) )
%   | then return 0.05092858672159233;  // std dev = 15,210, 1.056,000 (wgt'ed) examples reached here.  /* #neg=688 #pos=368 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.05138657776853224;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   | | else if ( haswordvenue(E, D) )
%   | | | then return -0.01846765111030124;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.03980467021372733;  // std dev = 14,543, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   | else if ( haswordvenue(A, D) )
%   | | then if ( venue(E, A), venue(E, F) )
%   | | | then return -0.016115373306728558;  // std dev = 4,369, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.544977
   AUC PR    = 0.4025
   CLL	      = -0.657879
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 54.593 seconds
Total inference time: 19.691 seconds
AUC ROC: 0.544977


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [4.369, 144, 22], 'true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true,false': 'haswordvenue(A, E)', 'true,false,true': 'haswordvenue(B, F)', 'true': 'haswordvenue(B, D), haswordvenue(A, D)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [4.369, 144, 22], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [14.543, 544, 346]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(D, E)', 'true,true,false': 'haswordvenue(B, E)', 'true,true': 'haswordvenue(A, F), haswordvenue(B, F)', 'true,true,true': 'haswordvenue(B, E)'}, {'true,true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true,true': [14.543, 544, 346], 'true,true,false,true': [4.369, 144, 22], 'true,true,false,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'haswordvenue(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [15.215, 688, 368]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'haswordvenue(A, D)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [15.21, 688, 368]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(B, D)', 'true,true,false': 'haswordvenue(E, D)', 'true,true': 'haswordvenue(A, D)'}, {'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [14.543, 544, 346], 'false': [0.0, 0, 0], 'true,true,false,true': [4.369, 144, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true,false': 'haswordvenue(A, D)', 'true,false,true': 'venue(E, A), venue(E, F)', 'true': 'haswordvenue(A, C)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [4.369, 144, 22], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [14.543, 544, 346]}]]
[{'': [0.23762656230272572, 0.11496588764697444]}, {'': [0.2376265623027377, 0.11496588764697231]}, {'': [0.23762656230274476, 0.11496588764697424]}, {'': [0.23762656230274665, 0.11496588764697245]}, {'': [0.22048182911235695, nan], 'true,false': [0.11496588764697466, nan], 'true,false,true': [0.11496588764697466, nan], 'true': [0.23762656230274673, 0.11496588764697466]}, {'': [0.21972039307739114, nan], 'true': [0.21972039307739114, nan], 'true,true,false': [0.11496588764697395, nan], 'true,true': [0.23762656230274165, 0.11496588764697395], 'true,true,true': [0.23762656230274165, nan]}, {'': [0.21921137610879038, nan], 'true': [0.21921137610879038, nan]}, {'': [0.21908455493594095, nan], 'true': [0.21908455493594095, nan]}, {'': [0.2189911567946565, nan], 'true': [0.2189911567946565, nan], 'true,true,false': [0.1149658876469742, nan], 'true,true': [0.23762656230273904, 0.1149658876469742]}, {'': [0.218758966717791, nan], 'true,false': [0.11496588764697296, nan], 'true,false,true': [0.11496588764697296, nan], 'true': [0.23762656230274204, 0.11496588764697296]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '4;;samevenue(A, B) :- venue(C, B).;true;true', '4;true,false;haswordvenue(A, E).;true;true', '4;true,false,true;haswordvenue(B, F).;true;true', '4;true;haswordvenue(B, D), haswordvenue(A, D).;true;true', '5;;samevenue(A, B) :- venue(C, B).;true;true', '5;true;haswordvenue(D, E).;true;true', '5;true,true,false;haswordvenue(B, E).;true;true', '5;true,true;haswordvenue(A, F), haswordvenue(B, F).;true;true', '5;true,true,true;haswordvenue(B, E).;true;true', '6;;samevenue(A, B) :- haswordvenue(B, C).;true;true', '6;true;haswordvenue(D, E).;true;true', '7;;samevenue(A, B) :- haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D).;true;true', '8;;samevenue(A, B) :- venue(C, B).;true;true', '8;true;haswordvenue(B, D).;true;true', '8;true,true,false;haswordvenue(E, D).;true;true', '8;true,true;haswordvenue(A, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C).;true;true', '9;true,false;haswordvenue(A, D).;true;true', '9;true,false,true;venue(E, A), venue(E, F).;true;true', '9;true;haswordvenue(A, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.23971252903182966;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.424815601766179;  // std dev = 0,496, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.14762261931003867;  // std dev = 2,796, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14185106490048768;  // std dev = 4,47e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.20779379349194974;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.45935396641210174;  // std dev = 0,810, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.42639459932330653;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.35688947661008785;  // std dev = 2,483, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.1488242116562869;  // std dev = 2,789, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876183;  // std dev = 0,023, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.14806844971629635;  // std dev = 0,041, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.005199750239144893;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.17587901950843635;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.3626730314480776;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.37391135762433364;  // std dev = 0,808, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.29304467535361967;  // std dev = 2,483, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.13163182934748544;  // std dev = 0,052, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004537659908616183;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004568660166365305;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.14547417784196645;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.3227239690613019;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.3038465317733959;  // std dev = 0,800, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23044183746922758;  // std dev = 2,485, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.11732682046812498;  // std dev = 0,047, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.00398492534489578;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004012232942941101;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.11821366898971492;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.25909040726061205;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18345619469300437;  // std dev = 2,611, 28,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, I) )
%   | | then if ( haswordvenue(B, J) )
%   | | | then return -0.006704915271808113;  // std dev = 4,257, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(D, E) )
%   | then if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.09663981304031578;  // std dev = 14,498, 890,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=346 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( haswordvenue(B, E) )
%   | | | then return -0.005906242945108165;  // std dev = 4,258, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(D, E) )
%   | then if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordtitle(G, F) )
%   | | | then return 0.07372929507244451;  // std dev = 14,170, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | | else return 0.13487402363892;  // std dev = 3,043, 38,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return -0.0100802668310265;  // std dev = 3,018, 87,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 1.6210910289534162E-4;  // std dev = 3,003, 79,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, D) )
%   | then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then if ( haswordtitle(F, E) )
%   | | | then return 0.05783659222261129;  // std dev = 14,170, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | | | else return 0.10148526099564996;  // std dev = 3,044, 38,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return -0.009947213917983484;  // std dev = 3,018, 87,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 0.001295061484948843;  // std dev = 3,004, 79,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | | then return 0.04549164628922856;  // std dev = 14,213, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | | | else return 0.07006520364360817;  // std dev = 2,838, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | else if ( haswordvenue(G, D) )
%   | | | then return -0.004060597259704105;  // std dev = 4,259, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C) )
%   | then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | | then return 0.03527258532223026;  // std dev = 0,486, 857,000 (wgt'ed) examples reached here.  /* #neg=530 #pos=327 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1284721430956194;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0390823601387276;  // std dev = 2,612, 28,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, H) )
%   | | then if ( venue(I, A), venue(I, J) )
%   | | | then return -0.0035841747350762445;  // std dev = 4,259, 166,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=22 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.557516
   AUC PR    = 0.433886
   CLL	      = -0.653702
   Precision = 0.679389 at threshold = 0.5
   Recall    = 0.033598
   F1        = 0.064029


Total learning time: 104.12100000000001 seconds
Total inference time: 38.183 seconds
AUC ROC: 0.557516


Refined model AUC ROC: 0.557516


Dataset: 11_uwcse_cora, Fold: 1, Type: transfer, Time: 02:00:19
{'Inference time': 38.183, 'Parameter Learning results': {'Inference time': 19.691, 'F1': nan, 'Precision': [nan, 0.5], 'AUC PR': 0.4025, 'CLL': -0.657879, 'Recall': 0.0, 'Learning time': 54.593, 'AUC ROC': 0.544977}, 'F1': 0.064029, 'Precision': [0.679389, 0.5], 'AUC PR': 0.433886, 'Mapping results': {'Possible mappings': 162, 'Total time': 2.781177282333374, 'Finding best mapping': 0.05105137825012207, 'Generating paths time': 2.58170485496521, 'Knowledge compiling time': 0.10936522483825684, 'Generating mappings time': 0.03905034065246582}, 'CLL': -0.653702, 'Recall': 0.033598, 'Learning time': 158.714, 'AUC ROC': 0.557516}


Start learning from scratch in target domain

Target train facts examples: 7095
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 32446
Target test pos examples: 2649
Target test neg examples: 4334

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.424815601766179;  // std dev = 2,714, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3639794304549287;  // std dev = 2,714, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.326685698020276;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2987976094530492;  // std dev = 2,714, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.2572776609517914;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.2807538536965855;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23633243419235064;  // std dev = 2,714, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.20869687227217232;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.21248070121827137;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1802210285685227;  // std dev = 2,713, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1510434719885735;  // std dev = 2,776, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14137697840893293;  // std dev = 0,071, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09999413152221179;  // std dev = 0,047, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0028554031467501392;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.21322684230441594;  // std dev = 0,786, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15802267119842497;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13135342632456115;  // std dev = 2,719, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09128622856016311;  // std dev = 0,037, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0,354, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0029462218848503793;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.16036645304071814;  // std dev = 0,786, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12057183532862928;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09859144720141456;  // std dev = 2,719, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1520184723645619;  // std dev = 2,771, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14129793501758198;  // std dev = 0,092, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09794539624030721;  // std dev = 0,057, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002584217379684848;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.09071617464081456;  // std dev = 0,803, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09413199045216669;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07640659716920893;  // std dev = 2,715, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.13305793003226474;  // std dev = 2,768, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12503085633294375;  // std dev = 0,082, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08966616599027774;  // std dev = 0,053, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.00226607028396594;  // std dev = 0,346, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07137019786787761;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.10075399214922165;  // std dev = 0,785, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.053995754871773535;  // std dev = 2,719, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.04118237481084605;  // std dev = 0,326, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return -0.030405188774498604;  // std dev = 0,328, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.0074906904419711215;  // std dev = 2,805, 79,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=10 */
%   | | | else return 0.0016694292591754086;  // std dev = 2,851, 71,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0,485, 852,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.057204748652498826;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.07633511641880068;  // std dev = 0,786, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03994830985598963;  // std dev = 2,719, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.03558911773035647;  // std dev = 0,326, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.08116630580204041;  // std dev = 0,055, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022242504397080834;  // std dev = 2,995, 75,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.00671438654215436;  // std dev = 2,791, 67,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06853347185795997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557449
   AUC PR    = 0.428532
   CLL	      = -0.653658
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 105.825 seconds
Total inference time: 8.779 seconds
AUC ROC: 0.557449


Dataset: 11_uwcse_cora, Fold: 1, Type: scratch, Time: 02:02:14
{'Inference time': 8.779, 'F1': 0.077305, 'Precision': [0.637427, 0.5], 'AUC PR': 0.428532, 'CLL': -0.653658, 'Recall': 0.041148, 'Learning time': 105.825, 'AUC ROC': 0.557449}


Starting fold 2

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.13403105735778809
   Generating paths time   = 2.450044631958008
   Generating mappings time   = 0.031105518341064453
   Possible mappings   = 162
   Finding best mapping   = 0.03905129432678223
   Total time   = 2.654237985610962


Best mapping found: ['publication(A,B) -> venue(A,B)', 'projectmember(A,B) -> haswordvenue(B,A)', 'advisedby(A,B) -> samevenue(A,B)', 'inphase(A,B) -> haswordvenue(A,B)', 'hasposition(A,B) -> haswordvenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
1;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
2;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
3;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
4;;samevenue(A, B) :- haswordvenue(B, C).;true;true
4;true,false;venue(F, A).;true;false
4;true,false,true;venue(G, B).;false;false
4;true;venue(D, B), venue(D, A).;false;true
4;false;venue(P, B).;false;false
5;;samevenue(A, B) :- haswordvenue(B, C).;true;false
5;true,false;haswordvenue(B, I), venue(J, B).;false;true
5;true;venue(E, D).;true;true
5;true,true,false;venue(E, B).;false;false
5;true,false,false;haswordvenue(B, K).;false;false
5;true,true;venue(F, A), venue(F, B).;true;true
5;true,true,true;venue(E, B).;false;false
6;;samevenue(A, B) :- venue(E, B).;true;false
6;true,false;haswordvenue(B, L).;false;true
6;true,false,false;venue(P, A), venue(P, B).;false;false
6;true;venue(K, I).;false;true
7;;samevenue(A, B) :- venue(C, B).;true;false
7;true,false;venue(H, A).;false;true
7;true,false,false,false;venue(M, B), venue(M, A).;false;false
7;true;venue(G, A).;false;true
7;true,false,false,true;venue(L, A).;false;false
7;true,false,false;haswordvenue(B, K).;true;true
8;;samevenue(A, B) :- haswordvenue(B, C).;true;false
8;true,false;haswordvenue(B, G).;false;true
8;true;venue(E, B).;true;true
8;true,true,false;venue(E, D).;false;false
8;true,false,false;venue(H, A).;false;false
8;true,true;venue(E, A).;false;true
9;;samevenue(A, B) :- venue(C, B).;true;true
9;true,false;venue(E, A).;true;true
9;true,false,true;haswordvenue(A, F), haswordvenue(D, F).;false;false
9;true;venue(C, A).;false;true
9;true,false,false;venue(C, D).;false;false
9;false,true;venue(I, J).;false;false
9;false;venue(I, B).;true;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17,316, 1.212,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.3518584397759264;  // std dev = 17,316, 1.212,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.28978075601916603;  // std dev = 17,316, 1.212,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.2301282512902187;  // std dev = 17,316, 1.212,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( venue(D, B), venue(D, A) )
%   | then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( venue(E, A) )
%   | | then if ( venue(F, B) )
%   | | | then return 0.17805229571102874;  // std dev = 17,316, 1.212,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( venue(D, E) )
%   | then if ( venue(F, A), venue(F, B) )
%   | | then if ( venue(D, B) )
%   | | | then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( venue(D, B) )
%   | | | then return 0.13555846379071965;  // std dev = 17,316, 1.212,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( venue(D, E) )
%   | then return 0.11072143967690382;  // std dev = 17,347, 1.315,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( venue(D, A) )
%   | then return 0.08396704680326997;  // std dev = 17,353, 1.315,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( venue(D, B) )
%   | then if ( venue(D, A) )
%   | | then return 0.1793032829147722;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( venue(D, E) )
%   | | | then return 0.053812404573409155;  // std dev = 17,316, 1.212,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( venue(C, A) )
%   | then return 0.1544158728750079;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( venue(D, A) )
%   | | then if ( haswordvenue(A, E), haswordvenue(F, E) )
%   | | | then return 0.04036100578701231;  // std dev = 17,316, 1.212,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.587266
   AUC PR    = 0.518945
   CLL	      = -0.678336
   Precision = 0.334027 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50078


Total learning time: 127.689 seconds
Total inference time: 154.586 seconds
AUC ROC: 0.587266


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [17.316, 544, 668], 'true': [4.46e-07, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [17.316, 544, 668], 'true': [0.0, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [17.316, 544, 668], 'true': [4.3e-07, 0, 103]}], ['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [17.316, 544, 668], 'true': [2.6e-07, 0, 103]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true,false': 'venue(E, A)', 'true,false,true': 'venue(F, B)', 'true': 'venue(D, B), venue(D, A)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [17.316, 544, 668], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 103]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'venue(D, E)', 'true,true,false': 'venue(D, B)', 'true,true': 'venue(F, A), venue(F, B)', 'true,true,true': 'venue(D, B)'}, {'true,true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 103], 'true,true,false,true': [17.316, 544, 668], 'true,true,false,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'venue(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [17.347, 544, 771]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'venue(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [17.353, 544, 771]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'venue(D, B)', 'true,true,false': 'venue(D, E)', 'true,true': 'venue(D, A)'}, {'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 103], 'false': [0.0, 0, 0], 'true,true,false,true': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true,false': 'venue(D, A)', 'true,false,true': 'haswordvenue(A, E), haswordvenue(F, E)', 'true': 'venue(C, A)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [17.316, 544, 668], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 103]}]]
[{'': [1.9315724855614373e-15, 0.2473831541569956]}, {'': [-3.4492365813597096e-16, 0.24738315415699694]}, {'': [1.793603022307049e-15, 0.24738315415698806]}, {'': [6.553549504583448e-16, 0.2473831541570005]}, {'': [0.22947560566044117, nan], 'true,false': [0.24738315415699036, nan], 'true,false,true': [0.24738315415699036, nan], 'true': [-2.4144656069517967e-16, 0.24738315415699036]}, {'': [0.2290392569033857, nan], 'true': [0.2290392569033857, nan], 'true,true,false': [0.24738315415699547, nan], 'true,true': [-5.1738548720395646e-17, 0.24738315415699547], 'true,true,true': [-5.1738548720395646e-17, nan]}, {'': [0.22883990856693676, nan], 'true': [0.22883990856693676, nan]}, {'': [0.22899810991264824, nan], 'true': [0.22899810991264824, nan]}, {'': [0.22914324962637816, nan], 'true': [0.22914324962637816, nan], 'true,true,false': [0.24738315415699969, nan], 'true,true': [-2.5869274360197823e-17, 0.24738315415699969]}, {'': [0.22894548374246396, nan], 'true,false': [0.2473831541569973, nan], 'true,false,true': [0.2473831541569973, nan], 'true': [-7.329627735389383e-17, 0.2473831541569973]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '1;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '2;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '3;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '4;;samevenue(A, B) :- venue(D, B), venue(D, A).;true;true', '5;;samevenue(A, B) :- venue(F, A), venue(F, B).;true;true', '8;;samevenue(A, B) :- venue(D, A).;true;true', '9;;samevenue(A, B) :- venue(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0,498, 1.128,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3431339147245365;  // std dev = 0,498, 1.128,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5111302802881205;  // std dev = 1,918, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4752970037545024;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2830762494159436;  // std dev = 0,498, 1.128,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4107512329462532;  // std dev = 1,917, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3795539345047662;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2253515761414555;  // std dev = 0,498, 1.128,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3207198455952966;  // std dev = 1,915, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.28495330444629263;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1748018520118576;  // std dev = 0,498, 1.128,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24345913760804228;  // std dev = 1,915, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.21202320704313737;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13337608575262264;  // std dev = 0,498, 1.128,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.18768515842794517;  // std dev = 1,913, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1537100173113337;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.10762034996184425;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10952959191322122;  // std dev = 0,479, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.14437555998584128;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1131810590596636;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.20975771563253587;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.36586658430572916;  // std dev = 0,358, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return -0.13745931795151783;  // std dev = 0,659, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.1913222469080439;  // std dev = 0,840, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.26709720433235457;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.08117013102138097;  // std dev = 0,479, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11408421293495234;  // std dev = 1,912, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10334499062925487;  // std dev = 1,888, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.14575648741360903;  // std dev = 0,315, 33,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.27674370613641364;  // std dev = 1,595, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.1420796544112174;  // std dev = 1,385, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.06155584938777869;  // std dev = 16,570, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.08439891493504569;  // std dev = 2,689, 41,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.15684395404186718;  // std dev = 1,67e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.03573943026158729;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3279655747431517;  // std dev = 1,605, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.1950314523981949;  // std dev = 1,410, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.045598139243953145;  // std dev = 16,527, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | | else return 0.06637083928190458;  // std dev = 2,690, 41,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.13719983240199474;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.027197573598481156;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.605834
   AUC PR    = 0.429579
   CLL	      = -0.711777
   Precision = 0.35461 at threshold = 0.5
   Recall    = 0.957257
   F1        = 0.517511


Total learning time: 125.987 seconds
Total inference time: 11.205 seconds
AUC ROC: 0.605834


Refined model AUC ROC: 0.605834


Dataset: 11_uwcse_cora, Fold: 2, Type: transfer, Time: 02:09:16
{'Inference time': 11.205, 'Parameter Learning results': {'Inference time': 154.586, 'F1': 0.50078, 'Precision': [0.334027, 0.5], 'AUC PR': 0.518945, 'CLL': -0.678336, 'Recall': 1.0, 'Learning time': 127.689, 'AUC ROC': 0.587266}, 'F1': 0.517511, 'Precision': [0.35461, 0.5], 'AUC PR': 0.429579, 'Mapping results': {'Possible mappings': 162, 'Total time': 2.654237985610962, 'Finding best mapping': 0.03905129432678223, 'Generating paths time': 2.450044631958008, 'Knowledge compiling time': 0.13403105735778809, 'Generating mappings time': 0.031105518341064453}, 'CLL': -0.711777, 'Recall': 0.957257, 'Learning time': 253.676, 'AUC ROC': 0.605834}


Start learning from scratch in target domain

Target train facts examples: 8245
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 31296
Target test pos examples: 2246
Target test neg examples: 4478

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4586612187245652;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.10866121872456526;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.11648547966105265;  // std dev = 0,841, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19133878127543472;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.45076648188246;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.14133878127543473;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.18192600021558156;  // std dev = 16,896, 1.167,000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.23985506378478083;  // std dev = 2,691, 41,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.2240903494280749;  // std dev = 0,386, 47,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3457568443635729;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.08249570247950498;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.0900883934293364;  // std dev = 0,842, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1468244987374847;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.13940813799138474;  // std dev = 0,493, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.18581002370323105;  // std dev = 1,915, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17741702951491456;  // std dev = 1,894, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.21380082934116496;  // std dev = 0,322, 33,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.08827195957422182;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.26029890133361666;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06230725960603323;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07523791846776684;  // std dev = 1,219, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.10489105610393933;  // std dev = 0,493, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14040829156420184;  // std dev = 1,915, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.13635900304455745;  // std dev = 1,896, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.23354637172212728;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06818515664401811;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04867818468155706;  // std dev = 0,488, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07967616144885072;  // std dev = 0,492, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10392983207850466;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07798852333603785;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.21347018356793268;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.19435764566738895;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.05232307672559796;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03720921391818514;  // std dev = 0,487, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.059822943928220476;  // std dev = 0,492, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.08852234141266187;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05058225075930995;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17981466549058023;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.16571611444373083;  // std dev = 2,58e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03996641649732365;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.028361018868907465;  // std dev = 0,487, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.044949605298735526;  // std dev = 0,492, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.06861765901943855;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0392480881528326;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.15480274903117697;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.14405466360776625;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.030429560144484134;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.021573125334333847;  // std dev = 0,487, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537
   AUC PR    = 0.34359
   CLL	      = -0.755936
   Precision = 0.353813 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516532


Total learning time: 147.185 seconds
Total inference time: 7.48 seconds
AUC ROC: 0.537


Dataset: 11_uwcse_cora, Fold: 2, Type: scratch, Time: 02:11:51
{'Inference time': 7.48, 'F1': 0.516532, 'Precision': [0.353813, 0.5], 'AUC PR': 0.34359, 'CLL': -0.755936, 'Recall': 0.956367, 'Learning time': 147.185, 'AUC ROC': 0.537}


Starting fold 3

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.06789636611938477
   Generating paths time   = 2.5619211196899414
   Generating mappings time   = 0.03929328918457031
   Possible mappings   = 162
   Finding best mapping   = 0.05037260055541992
   Total time   = 2.719489336013794


Best mapping found: ['publication(A,B) -> haswordvenue(B,A)', 'projectmember(A,B) -> haswordvenue(B,A)', 'advisedby(A,B) -> samevenue(A,B)', 'inphase(A,B) -> venue(B,A)', 'hasposition(A,B) -> venue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
1;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
2;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
4;;samevenue(A, B) :- venue(C, B).;true;true
4;true,false;haswordvenue(A, F).;true;false
4;true,false,true;haswordvenue(B, G).;false;false
4;true;haswordvenue(B, D), haswordvenue(A, D).;false;true
4;false;haswordvenue(B, P).;false;false
5;;samevenue(A, B) :- venue(C, B).;true;false
5;true,false;haswordvenue(B, I), haswordvenue(B, J).;false;true
5;true;haswordvenue(D, E).;true;true
5;true,true,false;haswordvenue(B, E).;false;false
5;true,false,false;haswordvenue(B, K).;false;false
5;true,true;haswordvenue(A, F), haswordvenue(B, F).;true;true
5;true,true,true;haswordvenue(B, E).;false;false
6;;samevenue(A, B) :- haswordvenue(B, E).;true;false
6;true,false;haswordvenue(B, L).;false;true
6;true,false,false;haswordvenue(A, P), haswordvenue(B, P).;false;false
6;true;haswordvenue(I, K).;false;true
7;;samevenue(A, B) :- haswordvenue(B, C).;true;false
7;true,false;haswordvenue(A, H).;false;true
7;true,false,false,false;haswordvenue(B, M), haswordvenue(A, M).;false;false
7;true;haswordvenue(A, G).;false;true
7;true,false,false,true;haswordvenue(A, L).;false;false
7;true,false,false;haswordvenue(B, K).;true;true
8;;samevenue(A, B) :- venue(C, B).;true;false
8;true,false;haswordvenue(B, G).;false;true
8;true;haswordvenue(B, E).;true;true
8;true,true,false;haswordvenue(D, E).;false;false
8;true,false,false;haswordvenue(A, H).;false;false
8;true,true;haswordvenue(A, E).;false;true
9;;samevenue(A, B) :- haswordvenue(B, C).;true;true
9;true,false;haswordvenue(A, E).;true;true
9;true,false,true;venue(F, A), venue(F, D).;false;false
9;true;haswordvenue(A, C).;false;true
9;true,false,false;haswordvenue(D, C).;false;false
9;false,true;haswordvenue(J, I).;false;false
9;false;haswordvenue(B, I).;true;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.2188372210028826;  // std dev = 18,666, 1.511,000 (wgt'ed) examples reached here.  /* #neg=966 #pos=545 */
%   else return 0.018863220813797148;  // std dev = 5,497, 224,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.19077496835033303;  // std dev = 18,656, 1.508,000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   else return 0.007097682558758213;  // std dev = 5,528, 238,000 (wgt'ed) examples reached here.  /* #neg=202 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.16110388314445764;  // std dev = 18,670, 1.512,000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   else return 0.024770574110976516;  // std dev = 5,467, 212,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.1336668001820317;  // std dev = 18,677, 1.514,000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   else return 0.016998132204866314;  // std dev = 5,482, 218,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then return 0.11204610393653942;  // std dev = 18,638, 1.503,000 (wgt'ed) examples reached here.  /* #neg=958 #pos=545 */
%   | else if ( haswordvenue(A, E) )
%   | | then if ( haswordvenue(B, F) )
%   | | | then return 0.021951401564346395;  // std dev = 5,459, 209,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(D, E) )
%   | then if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.08660488725535145;  // std dev = 18,694, 1.519,000 (wgt'ed) examples reached here.  /* #neg=974 #pos=545 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( haswordvenue(B, E) )
%   | | | then return 0.01354432062950868;  // std dev = 5,477, 216,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=36 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(D, E) )
%   | then return 0.06476739824334474;  // std dev = 19,447, 1.724,000 (wgt'ed) examples reached here.  /* #neg=1.143 #pos=581 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, D) )
%   | then return 0.04809926646837134;  // std dev = 19,506, 1.741,000 (wgt'ed) examples reached here.  /* #neg=1.160 #pos=581 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.04772930595015816;  // std dev = 18,659, 1.509,000 (wgt'ed) examples reached here.  /* #neg=964 #pos=545 */
%   | | else if ( haswordvenue(E, D) )
%   | | | then return -0.0020184262195934873;  // std dev = 5,472, 214,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=36 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.03404795783426034;  // std dev = 18,708, 1.523,000 (wgt'ed) examples reached here.  /* #neg=978 #pos=545 */
%   | else if ( haswordvenue(A, D) )
%   | | then if ( venue(E, A), venue(E, F) )
%   | | | then return -0.009957791860895028;  // std dev = 5,499, 225,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=36 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.547853
   AUC PR    = 0.49112
   CLL	      = -0.728903
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 27.662 seconds
Total inference time: 14.046 seconds
AUC ROC: 0.547853


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [5.497, 188, 36], 'true': [18.666, 966, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [5.528, 202, 36], 'true': [18.656, 963, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [5.467, 176, 36], 'true': [18.67, 967, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [5.482, 182, 36], 'true': [18.677, 969, 545]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true,false': 'haswordvenue(A, E)', 'true,false,true': 'haswordvenue(B, F)', 'true': 'haswordvenue(B, D), haswordvenue(A, D)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [5.459, 173, 36], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [18.638, 958, 545]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(D, E)', 'true,true,false': 'haswordvenue(B, E)', 'true,true': 'haswordvenue(A, F), haswordvenue(B, F)', 'true,true,true': 'haswordvenue(B, E)'}, {'true,true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true,true': [18.694, 974, 545], 'true,true,false,true': [5.477, 180, 36], 'true,true,false,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'haswordvenue(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [19.447, 1143, 581]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'haswordvenue(A, D)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [19.506, 1160, 581]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(B, D)', 'true,true,false': 'haswordvenue(E, D)', 'true,true': 'haswordvenue(A, D)'}, {'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [18.659, 964, 545], 'false': [0.0, 0, 0], 'true,true,false,true': [5.472, 178, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true,false': 'haswordvenue(A, D)', 'true,false,true': 'venue(E, A), venue(E, F)', 'true': 'haswordvenue(A, C)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [5.499, 189, 36], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [18.708, 978, 545]}]]
[{'': [0.2305922463154467, 0.13488520408163374]}, {'': [0.23079165757868195, 0.12838076407033489]}, {'': [0.23052572366395813, 0.14097543609825644]}, {'': [0.2303926016797869, 0.137867182897063]}, {'': [0.22118398386478333, nan], 'true,false': [0.1425791534076599, nan], 'true,false,true': [0.1425791534076599, nan], 'true': [0.23112347051297208, 0.1425791534076599]}, {'': [0.21929083896567575, nan], 'true': [0.21929083896567575, nan], 'true,true,false': [0.13888888888889028, nan], 'true,true': [0.23005936218907874, 0.13888888888889028], 'true,true,true': [0.23005936218907874, nan]}, {'': [0.21935716449805837, nan], 'true': [0.21935716449805837, nan]}, {'': [0.21854542031550497, nan], 'true': [0.21854542031550497, nan]}, {'': [0.21971683594414293, nan], 'true': [0.21971683594414293, nan], 'true,true,false': [0.13992488426936936, nan], 'true,true': [0.23072521355191256, 0.13992488426936936]}, {'': [0.21773075826650373, nan], 'true,false': [0.13440000000000032, nan], 'true,false,true': [0.13440000000000032, nan], 'true': [0.22979234146243394, 0.13440000000000032]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '4;;samevenue(A, B) :- venue(C, B).;true;true', '4;true,false;haswordvenue(A, E).;true;true', '4;true,false,true;haswordvenue(B, F).;true;true', '4;true;haswordvenue(B, D), haswordvenue(A, D).;true;true', '5;;samevenue(A, B) :- venue(C, B).;true;true', '5;true;haswordvenue(D, E).;true;true', '5;true,true,false;haswordvenue(B, E).;true;true', '5;true,true;haswordvenue(A, F), haswordvenue(B, F).;true;true', '5;true,true,true;haswordvenue(B, E).;true;true', '6;;samevenue(A, B) :- haswordvenue(B, C).;true;true', '6;true;haswordvenue(D, E).;true;true', '7;;samevenue(A, B) :- haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, D).;true;true', '8;;samevenue(A, B) :- venue(C, B).;true;true', '8;true;haswordvenue(B, D).;true;true', '8;true,true,false;haswordvenue(E, D).;true;true', '8;true,true;haswordvenue(A, D).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C).;true;true', '9;true,false;haswordvenue(A, D).;true;true', '9;true,false,true;venue(E, A), venue(E, F).;true;true', '9;true;haswordvenue(A, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.22990882595898895;  // std dev = 0,483, 1.466,000 (wgt'ed) examples reached here.  /* #neg=921 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.024204006076958388;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.0168510649004878;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.021414241221961363;  // std dev = 3,659, 98,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.01656477668367079;  // std dev = 3,670, 101,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.19703779786997716;  // std dev = 0,483, 1.476,000 (wgt'ed) examples reached here.  /* #neg=931 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.618093438773935;  // std dev = 1,951, 21,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1435094331647749;  // std dev = 0,014, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1444778520895388;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.00936830175661508;  // std dev = 1,301, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.015334488239485229;  // std dev = 3,669, 101,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | | else return -0.05692294995980927;  // std dev = 1,351, 23,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.14237670433144795;  // std dev = 0,005, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.15342858006427187;  // std dev = 0,479, 45,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | else return 0.15506411161201367;  // std dev = 0,479, 1.481,000 (wgt'ed) examples reached here.  /* #neg=952 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.012381159748388253;  // std dev = 0,330, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.061895872376879685;  // std dev = 3,178, 73,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=16 */
%   | | | else return -0.0038506429982045564;  // std dev = 1,304, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.13562791716903322;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04067295472844657;  // std dev = 3,607, 87,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.10507283815209432;  // std dev = 0,471, 48,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | else return 0.13084834994191227;  // std dev = 0,480, 1.473,000 (wgt'ed) examples reached here.  /* #neg=944 #pos=529 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5779421577471581;  // std dev = 2,088, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14836349541511049;  // std dev = 0,044, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( title(J, G), venue(J, A) )
%   | | | then return -0.14188938735911735;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.039928794459064436;  // std dev = 1,279, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.032610647807626736;  // std dev = 3,219, 81,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.05793372496214881;  // std dev = 1,346, 25,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.1317997148298035;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.181548191382966;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.10402377493210277;  // std dev = 2,904, 37,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return 0.10919207133197657;  // std dev = 0,480, 1.464,000 (wgt'ed) examples reached here.  /* #neg=935 #pos=529 */
%   | else if ( haswordvenue(A, G) )
%   | | then if ( haswordvenue(B, H) )
%   | | | then return 0.002454057046871523;  // std dev = 4,998, 230,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=36 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(D, E) )
%   | then if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.09019301939941916;  // std dev = 18,626, 1.500,000 (wgt'ed) examples reached here.  /* #neg=955 #pos=545 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( haswordvenue(B, E) )
%   | | | then return 0.003929545835817749;  // std dev = 4,991, 227,000 (wgt'ed) examples reached here.  /* #neg=191 #pos=36 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(D, E) )
%   | then if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.06274819199272594;  // std dev = 0,478, 1.539,000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.016725723225386263;  // std dev = 3,466, 103,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=18 */
%   | | | else return -0.004760181685609494;  // std dev = 3,573, 123,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, D) )
%   | then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.019879640138292194;  // std dev = 3,293, 50,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | | | else return 0.05738948485586516;  // std dev = 18,370, 1.461,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=529 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.016707372844742333;  // std dev = 3,464, 100,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=18 */
%   | | | else return 0.009836001346663497;  // std dev = 3,542, 111,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | | then return 0.009569062908905503;  // std dev = 3,282, 49,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | | | else return 0.041124717413939964;  // std dev = 18,431, 1.479,000 (wgt'ed) examples reached here.  /* #neg=950 #pos=529 */
%   | | else if ( haswordvenue(G, D) )
%   | | | then return 0.0020890115609477804;  // std dev = 4,983, 224,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=36 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C) )
%   | then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | | then return 0.03662161021661699;  // std dev = 0,479, 45,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | | else return 0.03384431854809544;  // std dev = 0,480, 1.472,000 (wgt'ed) examples reached here.  /* #neg=943 #pos=529 */
%   | else if ( haswordvenue(A, F) )
%   | | then if ( venue(G, A), venue(G, H) )
%   | | | then return 0.005836409190380916;  // std dev = 4,964, 220,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=36 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.548893
   AUC PR    = 0.4907
   CLL	      = -0.717618
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 58.276 seconds
Total inference time: 24.314 seconds
AUC ROC: 0.548893


Refined model AUC ROC: 0.548893


Dataset: 11_uwcse_cora, Fold: 3, Type: transfer, Time: 02:13:59
{'Inference time': 24.314, 'Parameter Learning results': {'Inference time': 14.046, 'F1': nan, 'Precision': [nan, 0.5], 'AUC PR': 0.49112, 'CLL': -0.728903, 'Recall': 0.0, 'Learning time': 27.662, 'AUC ROC': 0.547853}, 'F1': nan, 'Precision': [nan, 0.5], 'AUC PR': 0.4907, 'Mapping results': {'Possible mappings': 162, 'Total time': 2.719489336013794, 'Finding best mapping': 0.05037260055541992, 'Generating paths time': 2.5619211196899414, 'Knowledge compiling time': 0.06789636611938477, 'Generating mappings time': 0.03929328918457031}, 'CLL': -0.717618, 'Recall': 0.0, 'Learning time': 85.938, 'AUC ROC': 0.548893}


Start learning from scratch in target domain

Target train facts examples: 8725
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 30816
Target test pos examples: 2436
Target test neg examples: 2800

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2219673596655955;  // std dev = 0,481, 1.498,000 (wgt'ed) examples reached here.  /* #neg=953 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4981489350995123;  // std dev = 2,400, 25,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 5,77e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.024815601766178853;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else return 0.0021489350995123634;  // std dev = 0,351, 125,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.25749713996268947;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return 0.1953895383013383;  // std dev = 0,482, 1.479,000 (wgt'ed) examples reached here.  /* #neg=937 #pos=542 */
%   else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | then if ( title(G, F), venue(G, B) )
%   | | then if ( title(H, F), venue(H, A) )
%   | | | then return 0.4016597969752809;  // std dev = 2,414, 27,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | | | else return -0.1270233708867852;  // std dev = 0,088, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( title(I, F), venue(I, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.021767884192405756;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.0530090964841657;  // std dev = 3,589, 82,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.06211285473534636;  // std dev = 1,356, 25,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.14211285473534638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15350825677845872;  // std dev = 0,478, 1.539,000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.613205803595994;  // std dev = 1,952, 21,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14869895830876811;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.13470725746758513;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.019138896378568686;  // std dev = 1,301, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -6.55976267199787E-4;  // std dev = 3,104, 108,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=16 */
%   | | | else return 0.13809749199242946;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.12565182037474545;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1286727452945874;  // std dev = 0,479, 1.535,000 (wgt'ed) examples reached here.  /* #neg=990 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.03453514447281105;  // std dev = 0,271, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.014257770139235213;  // std dev = 3,053, 83,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=14 */
%   | | | else return 0.06304625225518694;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.008392435165207837;  // std dev = 3,370, 106,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.11248398203413057;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.16710380922831433;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.06741984992731233;  // std dev = 0,465, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.11145779030671611;  // std dev = 0,480, 36,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | else return 0.11475345885663105;  // std dev = 0,481, 1.416,000 (wgt'ed) examples reached here.  /* #neg=900 #pos=516 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.002585584184687612;  // std dev = 0,314, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.03478617253262299;  // std dev = 3,049, 79,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.025945907634998756;  // std dev = 1,293, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return 0.006931490419110024;  // std dev = 0,332, 100,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3050058737202918;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.031216791404084707;  // std dev = 0,459, 43,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.09202350131931261;  // std dev = 0,481, 1.455,000 (wgt'ed) examples reached here.  /* #neg=926 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.028925122640600112;  // std dev = 0,281, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.04061490187875255;  // std dev = 2,998, 68,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
%   | | | else return -0.034897269904350464;  // std dev = 1,327, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return 0.003132341625074978;  // std dev = 0,320, 109,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0656287784396422;  // std dev = 0,479, 1.532,000 (wgt'ed) examples reached here.  /* #neg=987 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.024041295261584498;  // std dev = 0,288, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.03162749878814342;  // std dev = 0,276, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.024234503352395062;  // std dev = 3,271, 86,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return 0.010098783905879547;  // std dev = 3,152, 91,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.12260409123745841;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.01538980917277694;  // std dev = 0,462, 42,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else return 0.0608522086758089;  // std dev = 0,481, 1.451,000 (wgt'ed) examples reached here.  /* #neg=922 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.027268838544517903;  // std dev = 0,281, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.038453935982052725;  // std dev = 3,191, 76,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=16 */
%   | | | else return -0.039475506115758764;  // std dev = 1,329, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.001722993172282439;  // std dev = 3,167, 96,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.10359185640151268;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.5561371147917082;  // std dev = 0,336, 455,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=396 */
%   | | else return -0.28447367374245064;  // std dev = 0,140, 888,000 (wgt'ed) examples reached here.  /* #neg=872 #pos=16 */
%   | else if ( title(G, D), venue(G, A) )
%   | | then return -0.18805195620650209;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.2137799832598444;  // std dev = 7,779, 243,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=129 */
%   | | | else return 0.04957454961190549;  // std dev = 1,486, 14,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then return 0.012422742496031737;  // std dev = 0,337, 90,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=17 */
%   | | else return 0.09555644442291053;  // std dev = 0,447, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.5991063806005845;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.09527637477229033;  // std dev = 0,003, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.027053125041617557;  // std dev = 0,384, 44,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | else return -0.10161275676790088;  // std dev = 0,671, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.024442139106246645;  // std dev = 0,416, 1.489,000 (wgt'ed) examples reached here.  /* #neg=960 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.34203123474018954;  // std dev = 2,101, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11100925917672888;  // std dev = 0,050, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.046482323623868706;  // std dev = 0,251, 28,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.018578440535925125;  // std dev = 3,063, 82,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.04936713121653751;  // std dev = 1,302, 21,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.08702148418632101;  // std dev = 0,003, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.86194
   AUC PR    = 0.755139
   CLL	      = -0.572976
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.005747
   F1        = 0.011429


Total learning time: 101.28 seconds
Total inference time: 11.466 seconds
AUC ROC: 0.86194


Dataset: 11_uwcse_cora, Fold: 3, Type: scratch, Time: 02:15:52
{'Inference time': 11.466, 'F1': 0.011429, 'Precision': [1.0, 0.5], 'AUC PR': 0.755139, 'CLL': -0.572976, 'Recall': 0.005747, 'Learning time': 101.28, 'AUC ROC': 0.86194}


Starting fold 4

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.12266278266906738
   Generating paths time   = 2.194819688796997
   Generating mappings time   = 0.030067920684814453
   Possible mappings   = 162
   Finding best mapping   = 0.03875303268432617
   Total time   = 2.386308193206787


Best mapping found: ['publication(A,B) -> venue(A,B)', 'projectmember(A,B) -> haswordvenue(B,A)', 'advisedby(A,B) -> samevenue(A,B)', 'inphase(A,B) -> haswordvenue(A,B)', 'hasposition(A,B) -> haswordvenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
1;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
2;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
3;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
4;;samevenue(A, B) :- haswordvenue(B, C).;true;true
4;true,false;venue(F, A).;true;false
4;true,false,true;venue(G, B).;false;false
4;true;venue(D, B), venue(D, A).;false;true
4;false;venue(P, B).;false;false
5;;samevenue(A, B) :- haswordvenue(B, C).;true;false
5;true,false;haswordvenue(B, I), venue(J, B).;false;true
5;true;venue(E, D).;true;true
5;true,true,false;venue(E, B).;false;false
5;true,false,false;haswordvenue(B, K).;false;false
5;true,true;venue(F, A), venue(F, B).;true;true
5;true,true,true;venue(E, B).;false;false
6;;samevenue(A, B) :- venue(E, B).;true;false
6;true,false;haswordvenue(B, L).;false;true
6;true,false,false;venue(P, A), venue(P, B).;false;false
6;true;venue(K, I).;false;true
7;;samevenue(A, B) :- venue(C, B).;true;false
7;true,false;venue(H, A).;false;true
7;true,false,false,false;venue(M, B), venue(M, A).;false;false
7;true;venue(G, A).;false;true
7;true,false,false,true;venue(L, A).;false;false
7;true,false,false;haswordvenue(B, K).;true;true
8;;samevenue(A, B) :- haswordvenue(B, C).;true;false
8;true,false;haswordvenue(B, G).;false;true
8;true;venue(E, B).;true;true
8;true,true,false;venue(E, D).;false;false
8;true,false,false;venue(H, A).;false;false
8;true,true;venue(E, A).;false;true
9;;samevenue(A, B) :- venue(C, B).;true;true
9;true,false;venue(E, A).;true;true
9;true,false,true;haswordvenue(A, F), haswordvenue(D, F).;false;false
9;true;venue(C, A).;false;true
9;true,false,false;venue(C, D).;false;false
9;false,true;venue(I, J).;false;false
9;false;venue(I, B).;true;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.8581489350995107;  // std dev = 6,19e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2299136409818603;  // std dev = 19,926, 1.700,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.7194734122109551;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.1995606249607799;  // std dev = 19,926, 1.700,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=632 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.5553664367462834;  // std dev = 4,62e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.16922978641780778;  // std dev = 19,926, 1.700,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=632 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.4175135841583094;  // std dev = 3,26e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.14051995103028178;  // std dev = 19,926, 1.700,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=632 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( venue(D, B), venue(D, A) )
%   | then return 0.32071184716015005;  // std dev = 1,84e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( venue(E, A) )
%   | | then if ( venue(F, B) )
%   | | | then return 0.11460351721530632;  // std dev = 19,926, 1.700,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=632 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( venue(D, E) )
%   | then if ( venue(F, A), venue(F, B) )
%   | | then if ( venue(D, B) )
%   | | | then return 0.2551722425694897;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( venue(D, B) )
%   | | | then return 0.09210948752888284;  // std dev = 19,926, 1.700,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=632 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( venue(D, E) )
%   | then return 0.0818369238018751;  // std dev = 19,976, 1.815,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=747 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( venue(D, A) )
%   | then return 0.06468483046762376;  // std dev = 19,979, 1.815,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=747 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( venue(D, B) )
%   | then if ( venue(D, A) )
%   | | then return 0.18650098242919935;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( venue(D, E) )
%   | | | then return 0.04162234163085366;  // std dev = 19,926, 1.700,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=632 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( venue(C, A) )
%   | then return 0.15984132147603203;  // std dev = 6,66e-08, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( venue(D, A) )
%   | | then if ( haswordvenue(A, E), haswordvenue(F, E) )
%   | | | then return 0.03235343617556397;  // std dev = 19,926, 1.700,000 (wgt'ed) examples reached here.  /* #neg=1.068 #pos=632 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.5837
   AUC PR    = 0.539088
   CLL	      = -0.601296
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.167401
   F1        = 0.286792


Total learning time: 135.54 seconds
Total inference time: 117.529 seconds
AUC ROC: 0.5837


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [19.926, 1068, 632], 'true': [6.19e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [19.926, 1068, 632], 'true': [0.0, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [19.926, 1068, 632], 'true': [4.62e-07, 0, 115]}], ['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [19.926, 1068, 632], 'true': [3.26e-07, 0, 115]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true,false': 'venue(E, A)', 'true,false,true': 'venue(F, B)', 'true': 'venue(D, B), venue(D, A)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [19.926, 1068, 632], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [1.84e-07, 0, 115]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'venue(D, E)', 'true,true,false': 'venue(D, B)', 'true,true': 'venue(F, A), venue(F, B)', 'true,true,true': 'venue(D, B)'}, {'true,true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 115], 'true,true,false,true': [19.926, 1068, 632], 'true,true,false,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'venue(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [19.976, 1068, 747]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'venue(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [19.979, 1068, 747]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'venue(D, B)', 'true,true,false': 'venue(D, E)', 'true,true': 'venue(D, A)'}, {'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 115], 'false': [0.0, 0, 0], 'true,true,false,true': [19.926, 1068, 632]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true,false': 'venue(D, A)', 'true,false,true': 'haswordvenue(A, E), haswordvenue(F, E)', 'true': 'venue(C, A)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [19.926, 1068, 632], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [6.66e-08, 0, 115]}]]
[{'': [3.3364615418300357e-15, 0.23355570934254818]}, {'': [-1.0503675224279742e-15, 0.23355570934255973]}, {'': [1.853589745461131e-15, 0.23355570934256867]}, {'': [9.267948727305654e-16, 0.23355570934254272]}, {'': [0.22127848189316637, nan], 'true,false': [0.2335557093425736, nan], 'true,false,true': [0.2335557093425736, nan], 'true': [2.934850430313457e-16, 0.2335557093425736]}, {'': [0.2203353993772037, nan], 'true': [0.2203353993772037, nan], 'true,true,false': [0.23355570934255332, nan], 'true,true': [-4.633974363652827e-17, 0.23355570934255332], 'true,true,true': [-4.633974363652827e-17, nan]}, {'': [0.21986437184635632, nan], 'true': [0.21986437184635632, nan]}, {'': [0.21993305481995323, nan], 'true': [0.21993305481995323, nan]}, {'': [0.22000308148225578, nan], 'true': [0.22000308148225578, nan], 'true,true,false': [0.23355570934256592, nan], 'true,true': [-3.8616453030440226e-17, 0.23355570934256592]}, {'': [0.2197219783506409, nan], 'true,false': [0.23355570934257217, nan], 'true,false,true': [0.23355570934257217, nan], 'true': [3.8616453030440226e-17, 0.23355570934257217]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '1;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '2;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '3;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '4;;samevenue(A, B) :- venue(D, B), venue(D, A).;true;true', '5;;samevenue(A, B) :- venue(F, A), venue(F, B).;true;true', '8;;samevenue(A, B) :- venue(D, A).;true;true', '9;;samevenue(A, B) :- venue(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.8581489350995107;  // std dev = 6,19e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23598605125438055;  // std dev = 0,485, 1.498,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3581489350995113;  // std dev = 3,536, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.399815601766179;  // std dev = 2,441, 24,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05814893509951237;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05814893509951237;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.7194734122109551;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2047656903536804;  // std dev = 0,485, 1.498,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3058688212228414;  // std dev = 3,532, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3498638034820755;  // std dev = 2,444, 24,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16653882456488167;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.05092203251355405;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.05092203251355405;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.5553664367462834;  // std dev = 4,62e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.17347460899828468;  // std dev = 0,485, 1.498,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2533396084457328;  // std dev = 3,531, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2901637478104798;  // std dev = 2,445, 24,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1420942428155646;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.04434629760466855;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.04434629760466855;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.4175135841583094;  // std dev = 3,26e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1438214489707535;  // std dev = 0,485, 1.498,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.20010617715713772;  // std dev = 3,527, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.23844760852725302;  // std dev = 2,449, 24,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.11914890490746433;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.03842866223690456;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.03842866223690456;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.32071184716015005;  // std dev = 1,84e-07, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11706362495124976;  // std dev = 0,485, 1.498,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.15611947265725953;  // std dev = 3,526, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1866618425598685;  // std dev = 2,450, 24,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.0984134027840187;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.033154945921885746;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.033154945921885746;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09387425479450907;  // std dev = 0,485, 1.498,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=566 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.1172994461594255;  // std dev = 3,522, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.14871059014553004;  // std dev = 2,453, 24,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.08026654944252247;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.028495105925721097;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.028495105925721097;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.6357179043416293;  // std dev = 0,161, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.28745078134552865;  // std dev = 0,120, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3992070310237071;  // std dev = 0,892, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.0815972833111585;  // std dev = 0,469, 1.588,000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08874723110472865;  // std dev = 3,521, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.13034060053626056;  // std dev = 2,461, 29,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.06479591611329234;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02811193383897562;  // std dev = 2,960, 54,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06594547865271509;  // std dev = 0,468, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.00798592500292725;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.1332434322980696;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14238178191569772;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return -0.0038810133010646697;  // std dev = 0,807, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.021063959664593113;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05170435007988902;  // std dev = 0,468, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.047396197486848146;  // std dev = 3,505, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08037769827659894;  // std dev = 2,456, 29,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.04126932998424623;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017949005990962802;  // std dev = 2,964, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5851638349004267;  // std dev = 0,507, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.32683383469146166;  // std dev = 0,152, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.34964568315184136;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.03833981658599526;  // std dev = 18,649, 1.588,000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | | else return 0.0452256289594338;  // std dev = 4,282, 79,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.022267874348863834;  // std dev = 3,572, 72,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.015261569765828273;  // std dev = 2,964, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.637123
   AUC PR    = 0.579425
   CLL	      = -0.592832
   Precision = 0.900826 at threshold = 0.5
   Recall    = 0.19207
   F1        = 0.31663


Total learning time: 163.988 seconds
Total inference time: 9.612 seconds
AUC ROC: 0.637123


Refined model AUC ROC: 0.637123


Dataset: 11_uwcse_cora, Fold: 4, Type: transfer, Time: 02:23:03
{'Inference time': 9.612, 'Parameter Learning results': {'Inference time': 117.529, 'F1': 0.286792, 'Precision': [1.0, 0.5], 'AUC PR': 0.539088, 'CLL': -0.601296, 'Recall': 0.167401, 'Learning time': 135.54, 'AUC ROC': 0.5837}, 'F1': 0.31663, 'Precision': [0.900826, 0.5], 'AUC PR': 0.579425, 'Mapping results': {'Possible mappings': 162, 'Total time': 2.386308193206787, 'Finding best mapping': 0.03875303268432617, 'Generating paths time': 2.194819688796997, 'Knowledge compiling time': 0.12266278266906738, 'Generating mappings time': 0.030067920684814453}, 'CLL': -0.592832, 'Recall': 0.19207, 'Learning time': 299.528, 'AUC ROC': 0.637123}


Start learning from scratch in target domain

Target train facts examples: 7382
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 32159
Target test pos examples: 2270
Target test neg examples: 3954

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0,494, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.11914890490746433;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7132053827676746;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2867946172323253;  // std dev = 1,49e-08, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5132053827676747;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2132053827676747;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.46320538276767464;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(K, C) )
%   | | | then return 0.12976589232182162;  // std dev = 19,534, 1.570,000 (wgt'ed) examples reached here.  /* #neg=916 #pos=654 */
%   | | | else return 0.17441864931216666;  // std dev = 4,358, 79,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.04924607227145247;  // std dev = 0,420, 73,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=17 */
%   | else return 0.033154945921885746;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1054021144870949;  // std dev = 0,492, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.09933302754148134;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.1476887163069823;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1476887163069823;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.18273785443972881;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08944704410150063;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.026196602283425397;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08224666505014784;  // std dev = 0,492, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.07703640362406161;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.11100168835194162;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11100168835194162;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.13762084291857649;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.07257727641127656;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.022402677793692434;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.5025372109271488;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.25619349821771753;  // std dev = 0,080, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3523447345001796;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.06195323925416435;  // std dev = 0,493, 1.588,000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.06983296290881537;  // std dev = 3,490, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08837133678590925;  // std dev = 2,598, 29,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.05834625450047638;  // std dev = 2,000, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.022810658361591157;  // std dev = 2,960, 54,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3793311115030462;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21988401080143238;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.26451082714906465;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.047624444297039145;  // std dev = 0,493, 1.588,000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.05093864389472072;  // std dev = 3,490, 50,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07011941635446502;  // std dev = 2,598, 29,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.04656244641555586;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.01639917016628909;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037282629968677705;  // std dev = 0,491, 1.608,000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03073558639212123;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.048377031118864065;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.04853647303171141;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06743863426437834;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03694512572716798;  // std dev = 0,471, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.013928744589232607;  // std dev = 0,400, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.56789
   AUC PR    = 0.427107
   CLL	      = -0.642481
   Precision = 0.546125 at threshold = 0.5
   Recall    = 0.065198
   F1        = 0.11649


Total learning time: 169.566 seconds
Total inference time: 8.485 seconds
AUC ROC: 0.56789


Dataset: 11_uwcse_cora, Fold: 4, Type: scratch, Time: 02:26:01
{'Inference time': 8.485, 'F1': 0.11649, 'Precision': [0.546125, 0.5], 'AUC PR': 0.427107, 'CLL': -0.642481, 'Recall': 0.065198, 'Learning time': 169.566, 'AUC ROC': 0.56789}


Starting fold 5

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.1313467025756836
   Generating paths time   = 2.112525463104248
   Generating mappings time   = 0.030396699905395508
   Possible mappings   = 162
   Finding best mapping   = 0.039748430252075195
   Total time   = 2.3140227794647217


Best mapping found: ['publication(A,B) -> venue(A,B)', 'projectmember(A,B) -> haswordvenue(B,A)', 'advisedby(A,B) -> samevenue(A,B)', 'inphase(A,B) -> haswordvenue(A,B)', 'hasposition(A,B) -> haswordvenue(A,B)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
1;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
2;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
3;;samevenue(A, B) :- venue(C, B), venue(C, A).;false;false
4;;samevenue(A, B) :- haswordvenue(B, C).;true;true
4;true,false;venue(F, A).;true;false
4;true,false,true;venue(G, B).;false;false
4;true;venue(D, B), venue(D, A).;false;true
4;false;venue(P, B).;false;false
5;;samevenue(A, B) :- haswordvenue(B, C).;true;false
5;true,false;haswordvenue(B, I), venue(J, B).;false;true
5;true;venue(E, D).;true;true
5;true,true,false;venue(E, B).;false;false
5;true,false,false;haswordvenue(B, K).;false;false
5;true,true;venue(F, A), venue(F, B).;true;true
5;true,true,true;venue(E, B).;false;false
6;;samevenue(A, B) :- venue(E, B).;true;false
6;true,false;haswordvenue(B, L).;false;true
6;true,false,false;venue(P, A), venue(P, B).;false;false
6;true;venue(K, I).;false;true
7;;samevenue(A, B) :- venue(C, B).;true;false
7;true,false;venue(H, A).;false;true
7;true,false,false,false;venue(M, B), venue(M, A).;false;false
7;true;venue(G, A).;false;true
7;true,false,false,true;venue(L, A).;false;false
7;true,false,false;haswordvenue(B, K).;true;true
8;;samevenue(A, B) :- haswordvenue(B, C).;true;false
8;true,false;haswordvenue(B, G).;false;true
8;true;venue(E, B).;true;true
8;true,true,false;venue(E, D).;false;false
8;true,false,false;venue(H, A).;false;false
8;true,true;venue(E, A).;false;true
9;;samevenue(A, B) :- venue(C, B).;true;true
9;true,false;venue(E, A).;true;true
9;true,false,true;haswordvenue(A, F), haswordvenue(D, F).;false;false
9;true;venue(C, A).;false;true
9;true,false,false;venue(C, D).;false;false
9;false,true;venue(I, J).;false;false
9;false;venue(I, B).;true;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.8581489350995123;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.3416200094796728;  // std dev = 15,548, 968,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.7194734122109537;  // std dev = 2,67e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.2947558478824927;  // std dev = 15,548, 968,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.5553664367462835;  // std dev = 3,48e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.24546169100645696;  // std dev = 15,548, 968,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.41751358415831036;  // std dev = 1,03e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else return 0.19813861903273577;  // std dev = 15,548, 968,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( venue(D, B), venue(D, A) )
%   | then return 0.3207118471601502;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( venue(E, A) )
%   | | then if ( venue(F, B) )
%   | | | then return 0.15608333952704592;  // std dev = 15,548, 968,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( venue(D, E) )
%   | then if ( venue(F, A), venue(F, B) )
%   | | then if ( venue(D, B) )
%   | | | then return 0.2551722425694897;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( venue(D, B) )
%   | | | then return 0.12083487756737883;  // std dev = 15,548, 968,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( venue(D, E) )
%   | then return 0.10162948469386483;  // std dev = 15,581, 1.050,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( venue(D, A) )
%   | then return 0.07781231956887025;  // std dev = 15,586, 1.050,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( venue(D, B) )
%   | then if ( venue(D, A) )
%   | | then return 0.18155786758372378;  // std dev = 8,69e-08, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | else if ( venue(D, E) )
%   | | | then return 0.04900779789582948;  // std dev = 15,548, 968,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( venue(C, A) )
%   | then return 0.15611989885676125;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( venue(D, A) )
%   | | then if ( haswordvenue(A, E), haswordvenue(F, E) )
%   | | | then return 0.036929965495144386;  // std dev = 15,548, 968,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=468 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.583705
   AUC PR    = 0.529179
   CLL	      = -0.633199
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16741
   F1        = 0.286806


Total learning time: 61.942 seconds
Total inference time: 173.171 seconds
AUC ROC: 0.583705


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [15.548, 500, 468], 'true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [15.548, 500, 468], 'true': [2.67e-07, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [15.548, 500, 468], 'true': [3.48e-07, 0, 82]}], ['samevenue(A, B)', {'': 'venue(C, B), venue(C, A)'}, {'false': [15.548, 500, 468], 'true': [1.03e-07, 0, 82]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true,false': 'venue(E, A)', 'true,false,true': 'venue(F, B)', 'true': 'venue(D, B), venue(D, A)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [15.548, 500, 468], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 82]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'venue(D, E)', 'true,true,false': 'venue(D, B)', 'true,true': 'venue(F, A), venue(F, B)', 'true,true,true': 'venue(D, B)'}, {'true,true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 82], 'true,true,false,true': [15.548, 500, 468], 'true,true,false,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'venue(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [15.581, 500, 550]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'venue(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [15.586, 500, 550]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'venue(D, B)', 'true,true,false': 'venue(D, E)', 'true,true': 'venue(D, A)'}, {'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [8.69e-08, 0, 82], 'false': [0.0, 0, 0], 'true,true,false,true': [15.548, 500, 468]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true,false': 'venue(D, A)', 'true,false,true': 'haswordvenue(A, E), haswordvenue(F, E)', 'true': 'venue(C, A)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true,true': [15.548, 500, 468], 'false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 82]}]]
[{'': [-6.932124251318051e-16, 0.24972679461784425]}, {'': [8.665155314147563e-16, 0.2497267946178503]}, {'': [1.4730764034050857e-15, 0.24972679461786704]}, {'': [1.2997732971221344e-16, 0.2497267946178606]}, {'': [0.23217560608002094, nan], 'true,false': [0.24972679461785535, nan], 'true,false,true': [0.24972679461785535, nan], 'true': [-3.4660621256590254e-16, 0.24972679461785535]}, {'': [0.2315236056482513, nan], 'true': [0.2315236056482513, nan], 'true,true,false': [0.24972679461785033, nan], 'true,true': [-5.415722071342227e-17, 0.24972679461785033], 'true,true,true': [-5.415722071342227e-17, nan]}, {'': [0.23121473495027586, nan], 'true': [0.23121473495027586, nan]}, {'': [0.23135625692819356, nan], 'true': [0.23135625692819356, nan]}, {'': [0.23148926289926447, nan], 'true': [0.23148926289926447, nan], 'true,true,false': [0.2497267946178528, nan], 'true,true': [9.206727521281785e-17, 0.2497267946178528]}, {'': [0.2312471188869551, nan], 'true,false': [0.2497267946178496, nan], 'true,false,true': [0.2497267946178496, nan], 'true': [-6.228080382043562e-17, 0.2497267946178496]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '1;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '2;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '3;;samevenue(A, B) :- venue(C, B), venue(C, A).;true;true', '4;;samevenue(A, B) :- venue(D, B), venue(D, A).;true;true', '5;;samevenue(A, B) :- venue(F, A), venue(F, B).;true;true', '8;;samevenue(A, B) :- venue(D, A).;true;true', '9;;samevenue(A, B) :- venue(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.8581489350995123;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4018647820940432;  // std dev = 0,498, 732,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1,549, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.2581489350995123;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13087620782678508;  // std dev = 2,954, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16249676118646889;  // std dev = 3,121, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.051131391239862906;  // std dev = 4,214, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.7194734122109537;  // std dev = 2,67e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3456036560405693;  // std dev = 0,498, 732,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.6121235057226325;  // std dev = 0,923, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5544742009060956;  // std dev = 1,549, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11418623766746618;  // std dev = 2,954, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14154274242296505;  // std dev = 3,121, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4,214, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.5553664367462835;  // std dev = 3,48e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2849765791485283;  // std dev = 0,498, 732,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.482811302773096;  // std dev = 0,922, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.43831522268118245;  // std dev = 1,549, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.18886832215749735;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.0983529971467659;  // std dev = 2,954, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.12131905159335965;  // std dev = 3,121, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.039048804834509544;  // std dev = 4,214, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.41751358415831036;  // std dev = 1,03e-07, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.22670759722342995;  // std dev = 0,498, 732,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.37272466605392374;  // std dev = 0,918, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.3287488596379317;  // std dev = 1,550, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.02644133491846655;  // std dev = 1,193, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10934566610598352;  // std dev = 3,114, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.10247683991352247;  // std dev = 3,121, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.03389416118740775;  // std dev = 4,214, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B), venue(C, A) )
%   then return 0.3207118471601502;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.18373365710260187;  // std dev = 2,678, 29,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.11655173687180748;  // std dev = 2,035, 26,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.019573044806453797;  // std dev = 3,351, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.20159704463284842;  // std dev = 12,594, 650,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=372 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.1428698055473435;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06730824794585256;  // std dev = 2,951, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.012287199930136978;  // std dev = 3,141, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.06873695868340947;  // std dev = 4,196, 94,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 82,000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13244500135363743;  // std dev = 0,496, 732,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=398 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.30886845193964513;  // std dev = 0,919, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.21232514400626779;  // std dev = 1,550, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 5.258890547054293E-4;  // std dev = 1,183, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07849983607364949;  // std dev = 3,113, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.05855866946673991;  // std dev = 4,185, 95,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return 0.009200554240250097;  // std dev = 3,154, 65,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1100218790748496;  // std dev = 0,474, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.19215848096041996;  // std dev = 0,325, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5643827249594275;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.23184836739504378;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03356626811832093;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.18320798777262573;  // std dev = 0,074, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.034267445835361024;  // std dev = 3,052, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.09129694380662438;  // std dev = 4,087, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.20035046385664132;  // std dev = 0,093, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.2819093258831022;  // std dev = 0,133, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.04714887782902397;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.2024867874067141;  // std dev = 1,824, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.09266333946463193;  // std dev = 0,474, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.13825576856587674;  // std dev = 0,332, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4485531513611897;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1931508646418373;  // std dev = 0,017, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.027409266029819402;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.02599559927450487;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.4535978772031354;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2257956709061476;  // std dev = 2,200, 31,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.289388106140371;  // std dev = 1,540, 24,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.0668432002493103;  // std dev = 3,148, 52,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.04269107791275112;  // std dev = 3,051, 38,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return -0.02247209927684193;  // std dev = 3,237, 57,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return 0.08114722939377536;  // std dev = 12,623, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | | else return 0.010694347525993568;  // std dev = 4,190, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.34530486342736527;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.1755994805312736;  // std dev = 2,179, 31,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.22348257110652472;  // std dev = 1,526, 24,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | | else return 0.0540279271286741;  // std dev = 3,147, 52,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordtitle(J, I) )
%   | | | then return 0.05320388389525755;  // std dev = 12,947, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.1219989736920465;  // std dev = 1,568, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.01048009204263553;  // std dev = 3,106, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04348651786303025;  // std dev = 4,160, 94,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.616464
   AUC PR    = 0.551821
   CLL	      = -0.661898
   Precision = 0.375449 at threshold = 0.5
   Recall    = 0.93109
   F1        = 0.535119


Total learning time: 70.338 seconds
Total inference time: 6.913 seconds
AUC ROC: 0.616464


Refined model AUC ROC: 0.616464


Dataset: 11_uwcse_cora, Fold: 5, Type: transfer, Time: 02:31:17
{'Inference time': 6.913, 'Parameter Learning results': {'Inference time': 173.171, 'F1': 0.286806, 'Precision': [1.0, 0.5], 'AUC PR': 0.529179, 'CLL': -0.633199, 'Recall': 0.16741, 'Learning time': 61.942, 'AUC ROC': 0.583705}, 'F1': 0.535119, 'Precision': [0.375449, 0.5], 'AUC PR': 0.551821, 'Mapping results': {'Possible mappings': 162, 'Total time': 2.3140227794647217, 'Finding best mapping': 0.039748430252075195, 'Generating paths time': 2.112525463104248, 'Knowledge compiling time': 0.1313467025756836, 'Generating mappings time': 0.030396699905395508}, 'CLL': -0.661898, 'Recall': 0.93109, 'Learning time': 132.28, 'AUC ROC': 0.616464}


Start learning from scratch in target domain

Target train facts examples: 8094
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 31447
Target test pos examples: 2467
Target test neg examples: 4522

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.23314893509951226;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.14762261931003867;  // std dev = 2,796, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.629623109416637;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17037689058336294;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11167103821357358;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1912873480467316;  // std dev = 1,246, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.1301352623823768;  // std dev = 2,789, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.48283090502633463;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5218082953475985;  // std dev = 0,898, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14762999744343452;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.1765882170269276;  // std dev = 0,000381, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11597912436710003;  // std dev = 2,886, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.16162621046817827;  // std dev = 1,232, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.11193144848254306;  // std dev = 2,788, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.03904673565045936;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5934536245591475;  // std dev = 0,082, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.2423465827554072;  // std dev = 0,493, 799,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | else return 0.34493224687631924;  // std dev = 0,355, 27,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.4928543231738708;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16615067448150983;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.1538688321851436;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09455740488349378;  // std dev = 2,864, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.09992614497711719;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.03389234422535294;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.349791568451548;  // std dev = 1,927, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return -0.09130967504999767;  // std dev = 1,492, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return -0.08850084613037464;  // std dev = 0,413, 29,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.14256509106041818;  // std dev = 2,542, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.17767767262730197;  // std dev = 1,878, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.21658937654834154;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.12043336473193218;  // std dev = 0,387, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06502767508958854;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.044625370800197864;  // std dev = 0,409, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.46128298002771545;  // std dev = 0,081, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.06857114992327655;  // std dev = 2,432, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.16569064880688292;  // std dev = 1,891, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.15048719157177054;  // std dev = 0,489, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.24195484199621442;  // std dev = 0,341, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.06599109972144517;  // std dev = 0,426, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.005708075810875885;  // std dev = 0,379, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.09204046715090242;  // std dev = 4,048, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.19366066844268356;  // std dev = 0,083, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10548711705258905;  // std dev = 0,485, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.24742159639936573;  // std dev = 0,289, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.35140265584568553;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1591122855782312;  // std dev = 0,012, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.045019227884461485;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.17846429587362656;  // std dev = 0,067, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.04562986396574696;  // std dev = 2,995, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.07736540384991598;  // std dev = 4,046, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1652973407856087;  // std dev = 0,073, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.32240432123852925;  // std dev = 0,081, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4253242263330339;  // std dev = 1,313, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.39896179788313485;  // std dev = 0,607, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.046074388575426964;  // std dev = 0,425, 64,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.39614135892643587;  // std dev = 1,289, 20,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.3730825105378839;  // std dev = 0,568, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.019148451038781867;  // std dev = 0,435, 57,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.09930816151822876;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.013500903586720835;  // std dev = 0,392, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.06134135695377671;  // std dev = 0,363, 39,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.2501166772708598;  // std dev = 0,292, 24,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordauthor(D, G), haswordvenue(A, G) )
%   | | | then return 0.10413443681851248;  // std dev = 0,264, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.08005684934182841;  // std dev = 3,035, 48,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return -0.02544959210716659;  // std dev = 0,370, 41,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=17 */
%   | | else if ( haswordtitle(K, H) )
%   | | | then return -0.31031433396250174;  // std dev = 0,118, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.08955648955998573;  // std dev = 3,012, 44,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.07468896733235704;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.01150872079025067;  // std dev = 0,392, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.04780889772471538;  // std dev = 0,362, 39,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.19548153716703495;  // std dev = 0,291, 24,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return 0.007537796221634844;  // std dev = 0,863, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.07475793240420665;  // std dev = 2,914, 46,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.04803110304010891;  // std dev = 0,482, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1304084821669064;  // std dev = 0,342, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.15508729156841097;  // std dev = 0,046, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.06717127803594743;  // std dev = 4,029, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.013302344736248094;  // std dev = 0,376, 65,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */


Results
   AUC ROC   = 0.569326
   AUC PR    = 0.4184
   CLL	      = -0.70472
   Precision = 0.378585 at threshold = 0.5
   Recall    = 0.94163
   F1        = 0.540044


Total learning time: 71.984 seconds
Total inference time: 5.357 seconds
AUC ROC: 0.569326


Dataset: 11_uwcse_cora, Fold: 5, Type: scratch, Time: 02:32:34
{'Inference time': 5.357, 'F1': 0.540044, 'Precision': [0.378585, 0.5], 'AUC PR': 0.4184, 'CLL': -0.70472, 'Recall': 0.94163, 'Learning time': 71.984, 'AUC ROC': 0.569326}


