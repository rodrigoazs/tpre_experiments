Starting experiment #1 for 11_uwcse_cora

Start learning from source dataset

Source train facts examples: 2274
Source train pos examples: 113
Source train neg examples: 113

WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(G, D, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | then if ( publication(I, K), ta(L, K, M) )
%   | | | then return 0.7470378239884012;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( publication(N, B) )
%   | | | then return 0.7734031723876481;  // std dev = 2,139, 59,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=54 */
%   | | | else return 0.6273797043302815;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else return -0.14185106490048768;  // std dev = 7,30e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( ta(F, A, G), ta(D, H, G) )
%   | | then if ( samecourse(D, F) )
%   | | | then return 0.5261862825807958;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7317297077910171;  // std dev = 0,026, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.7306147939956185;  // std dev = 0,064, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( publication(I, A), publication(I, B) )
%   | | then if ( tempadvisedby(J, B), ta(K, A, L) )
%   | | | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7194734122109543;  // std dev = 4,21e-08, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( publication(M, A) )
%   | | | then return 0.4612985917510647;  // std dev = 2,042, 23,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return 0.6136633279772824;  // std dev = 2,076, 39,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=34 */
%   else return -0.12544463852839158;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | then if ( ta(G, A, H), ta(G, I, F) )
%   | | then if ( samecourse(E, G) )
%   | | | then return 0.4104895662080564;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5669870071332257;  // std dev = 0,030, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5667787820633019;  // std dev = 0,081, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( publication(J, A), tempadvisedby(K, B) )
%   | | then if ( publication(J, B) )
%   | | | then return 0.5081090089455164;  // std dev = 0,915, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.28404984338305955;  // std dev = 1,482, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else if ( hasposition(L, C), tempadvisedby(M, L) )
%   | | | then return 0.5214230471845527;  // std dev = 1,874, 50,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=46 */
%   | | | else return 0.41795349175338553;  // std dev = 1,267, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( professor(B) )
%   | then return -0.06712955154014004;  // std dev = 0,234, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else return -0.11231637819360621;  // std dev = 7,30e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), tempadvisedby(D, B) )
%   | | then return 0.483294101590991;  // std dev = 0,087, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( ta(E, A, F), tempadvisedby(G, B) )
%   | | | then return 0.3707840892733598;  // std dev = 0,910, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4227136402020778;  // std dev = 0,048, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tempadvisedby(H, B), publication(I, A) )
%   | | then if ( publication(I, J), ta(K, J, L) )
%   | | | then return 0.4499268412043464;  // std dev = 0,935, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.2320979634283502;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( publication(M, B) )
%   | | | then return 0.3848927041422427;  // std dev = 2,090, 59,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=54 */
%   | | | else return 0.31093136315542097;  // std dev = 1,459, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else return -0.10197808306197084;  // std dev = 0,012, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | then if ( publication(G, B) )
%   | | then if ( ta(E, A, H) )
%   | | | then return 0.21647635609605786;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.33032708820224504;  // std dev = 0,075, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.3727821777467993;  // std dev = 0,049, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tempadvisedby(I, B), publication(J, B) )
%   | | then if ( publication(J, A), publication(K, I) )
%   | | | then return 0.3577633586067231;  // std dev = 0,076, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19809990133162447;  // std dev = 1,727, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | else if ( hasposition(L, C), tempadvisedby(M, L) )
%   | | | then return 0.30590339823658247;  // std dev = 1,708, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.22744837567475754;  // std dev = 1,266, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( professor(B) )
%   | then return -0.06477024061281834;  // std dev = 0,224, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else return -0.09265917585675945;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | | then if ( ta(E, A, G) )
%   | | | then return 0.3584529237128519;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24995970502488743;  // std dev = 0,021, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( ta(H, A, I), tempadvisedby(J, B) )
%   | | | then return 0.1544851455573062;  // std dev = 0,869, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.26939182235839754;  // std dev = 0,057, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( ta(K, A, L) )
%   | | then if ( tempadvisedby(M, B), publication(N, M) )
%   | | | then return 0.006950153481506442;  // std dev = 0,725, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24735135680094003;  // std dev = 1,631, 37,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | else if ( publication(P, A), tempadvisedby(Q, B) )
%   | | | then return 0.03878374348633403;  // std dev = 0,824, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.20710170777058473;  // std dev = 1,967, 38,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=33 */
%   else return -0.08569098971899848;  // std dev = 0,017, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( publication(D, B), publication(D, A) )
%   | then if ( publication(D, E), tempadvisedby(E, B) )
%   | | then return 0.25492941122811164;  // std dev = 0,074, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tempadvisedby(F, B), ta(G, A, H) )
%   | | | then return 0.17244864005380606;  // std dev = 0,887, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.2145103110113392;  // std dev = 0,063, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(I, A) )
%   | | then if ( hasposition(J, C), publication(I, J) )
%   | | | then return -0.04637587466614298;  // std dev = 1,489, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.3362788222672954;  // std dev = 0,126, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( hasposition(K, C), tempadvisedby(L, K) )
%   | | | then return 0.20457060034217317;  // std dev = 1,640, 52,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | | else return 0.03505464631483435;  // std dev = 1,191, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( professor(B) )
%   | then return -0.061038285656121356;  // std dev = 0,219, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else return -0.07871466423168207;  // std dev = 4,59e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( ta(D, A, F) )
%   | | then return 0.05887027231223476;  // std dev = 0,875, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.19004915455034233;  // std dev = 0,103, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( tempadvisedby(G, B), publication(H, B) )
%   | | then if ( publication(H, A), publication(I, G) )
%   | | | then return 0.19944122642070258;  // std dev = 0,067, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.08258028188605208;  // std dev = 1,618, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.2409336091114515;  // std dev = 0,542, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.13223610759514817;  // std dev = 2,112, 50,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=44 */
%   else return -0.0737741493683448;  // std dev = 0,018, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( publication(D, B), publication(D, A) )
%   | then if ( ta(E, A, F), tempadvisedby(G, B) )
%   | | then if ( ta(H, G, I) )
%   | | | then return 0.19188571181065697;  // std dev = 0,102, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.053878074445128356;  // std dev = 0,860, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1586035148413749;  // std dev = 0,081, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(J, B), publication(K, A) )
%   | | then if ( hasposition(L, C), publication(K, L) )
%   | | | then return -0.1422062281975005;  // std dev = 1,081, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.2386236513028035;  // std dev = 0,104, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( hasposition(M, C), tempadvisedby(N, M) )
%   | | | then return 0.13316661792670426;  // std dev = 1,902, 59,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=54 */
%   | | | else return 0.035487937190626206;  // std dev = 1,220, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( professor(B) )
%   | then return -0.05621843211068813;  // std dev = 0,217, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else return -0.06834277291054035;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(G, F, H) )
%   | | | then return 0.16411193016262113;  // std dev = 0,091, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.04390119291976478;  // std dev = 0,861, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1385943689318806;  // std dev = 0,072, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(I, A) )
%   | | then if ( publication(I, J), professor(J) )
%   | | | then return -0.013823754867284762;  // std dev = 1,515, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0.20615289067813253;  // std dev = 0,090, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tempadvisedby(K, B), publication(L, K) )
%   | | | then return 0.19703876550921479;  // std dev = 0,071, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09822708931152467;  // std dev = 2,158, 57,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=51 */
%   else return -0.06470455098206022;  // std dev = 0,018, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */


Predicates from source: ['advisedby(person,person).', 'ta(course,person,quarter).', 'hasposition(person,faculty).', 'publication(title,person).', 'professor(person).', 'student(person).', 'samecourse(course,course).', 'tempadvisedby(person,person).']

Starting fold 1

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.11268281936645508
   Generating paths time   = 2.5899689197540283
   Generating mappings time   = 0.08269834518432617
   Possible mappings   = 126
   Finding best mapping   = 0.028074979782104492
   Total time   = 2.813429832458496


Best mapping found: ['advisedby(A,B) -> samevenue(A,B)', 'samecourse(A,B) -> sametitle(A,B)', 'hasposition(A,B) -> venue(B,A)', 'publication(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
1;;samevenue(A, B) :- sametitle(D, F).;false;false
2;;samevenue(A, B) :- venue(C, B).;true;false
2;true,false,true;haswordvenue(B, J).;false;false
2;true,false,false;venue(C, L).;false;false
2;true;sametitle(E, G).;false;true
2;true,false;haswordvenue(A, J).;true;true
3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;false
3;true,false,true;haswordvenue(J, I).;false;false
3;true,false,false;haswordvenue(B, M).;false;false
3;true;haswordvenue(D, C).;false;true
3;true,false;haswordvenue(A, I).;true;true
4;;samevenue(A, B) :- venue(C, B).;true;false
4;true,false,true;haswordvenue(A, J), haswordvenue(I, K).;false;false
4;true,false,false;venue(C, L).;false;false
4;true;haswordvenue(B, G).;false;true
4;true,false;haswordvenue(B, J).;true;true
5;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
6;;samevenue(A, B) :- venue(C, B).;true;false
6;true,true;haswordvenue(E, D).;false;false
6;true,false;haswordvenue(A, I).;true;true
6;true,false,true;venue(C, J), haswordvenue(J, I).;false;false
6;true,false,false;venue(C, K).;false;false
6;true;haswordvenue(B, D), haswordvenue(A, D).;true;true
7;;samevenue(A, B) :- haswordvenue(B, H).;true;false
7;true;haswordvenue(A, H), haswordvenue(G, I).;false;false
8;;samevenue(A, B) :- venue(C, B).;true;false
8;true,false,true;venue(C, L), haswordvenue(L, K).;false;false
8;true,false,false;venue(C, M).;false;false
8;true;haswordvenue(B, D), haswordvenue(A, D).;false;true
8;true,false;haswordvenue(B, J), haswordvenue(A, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.39877393509950776;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.08731560176617863;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(C, D) )
%   then return 0.3082226046095754;  // std dev = 13,485, 736,000 (wgt'ed) examples reached here.  /* #neg=368 #pos=368 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( sametitle(D, E) )
%   | then return 0.25598305542070887;  // std dev = 13,470, 736,000 (wgt'ed) examples reached here.  /* #neg=368 #pos=368 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.23846230798360057;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.011600390750391236;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then return 0.16045949233044335;  // std dev = 13,382, 736,000 (wgt'ed) examples reached here.  /* #neg=368 #pos=368 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.14843087313098513;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return -0.039849545254276766;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(E, D) )
%   | | then return 0.11253978613785276;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.03208576194872804;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C), haswordvenue(D, E) )
%   | then return 0.0847915720192074;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   | else return -0.025940822670633717;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then return 0.0636927060291874;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   | else if ( haswordvenue(B, E), haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.021042739670343504;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.047785427246276505;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return -0.01711580960284323;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */


Results
   AUC ROC   = 0.546475
   AUC PR    = 0.552575
   CLL	      = -0.684375
   Precision = 0.553319 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697726


Total learning time: 166.53199999999998 seconds
Total inference time: 4.978 seconds
AUC ROC: 0.546475


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'sametitle(C, D)'}, {'false': [0.0, 0, 0], 'true': [13.485, 368, 368]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'sametitle(D, E)'}, {'true,true': [13.47, 368, 368], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)', 'true': 'haswordvenue(D, C)'}, {'true,true': [12.607, 294, 346], 'false': [4.118, 74, 22], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(B, D)'}, {'true,true': [13.382, 368, 368], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true,true': 'haswordvenue(E, D)', 'true': 'haswordvenue(B, D), haswordvenue(A, D)', 'true,false,true': 'venue(C, G), haswordvenue(G, F)', 'true,false': 'haswordvenue(A, F)'}, {'true,true,true': [12.607, 294, 346], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'haswordvenue(A, C), haswordvenue(D, E)'}, {'true,true': [12.607, 294, 346], 'false': [0.0, 0, 0], 'true,false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(B, D), haswordvenue(A, D)', 'true,false,true': 'venue(C, G), haswordvenue(G, F)', 'true,false': 'haswordvenue(B, E), haswordvenue(A, F)'}, {'true,true': [12.607, 294, 346], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [4.118, 74, 22], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}]]
[{'': [0.2483496093749918, 0.17664930555555647]}, {'': [0.24706207550963713, nan]}, {'': [0.24651878592802498, nan], 'true': [0.24651878592802498, nan]}, {'': [0.24834960937500025, 0.17664930555555558], 'true': [0.24834960937500025, nan]}, {'': [0.24332962865679322, nan], 'true': [0.24332962865679322, nan]}, {'': [0.2483496093749936, 0.17664930555555539]}, {'': [0.2413697832616134, nan], 'true,true': [0.24834960937499884, nan], 'true': [0.24834960937499884, 0.176649305555556], 'true,false,true': [nan, 0.176649305555556], 'true,false': [0.176649305555556, nan]}, {'': [0.2403881326840466, nan], 'true': [0.24834960937500408, 0.17664930555555514]}, {'': [0.23981177342402077, nan], 'true,false,true': [nan, 0.17664930555555539], 'true': [0.24834960937499972, 0.17664930555555539], 'true,false': [0.17664930555555539, nan]}, {'': [0.24834960937499959, 0.17664930555555558]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '1;;samevenue(A, B) :- sametitle(C, D).;true;true', '2;;samevenue(A, B) :- venue(C, B).;true;true', '2;true;sametitle(D, E).;true;true', '3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '3;true;haswordvenue(D, C).;true;true', '4;;samevenue(A, B) :- venue(C, B).;true;true', '4;true;haswordvenue(B, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '6;;samevenue(A, B) :- venue(C, B).;true;true', '6;true,true;haswordvenue(E, D).;true;true', '6;true;haswordvenue(B, D), haswordvenue(A, D).;true;true', '6;true,false,true;venue(C, G), haswordvenue(G, F).;true;true', '6;true,false;haswordvenue(A, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, C), haswordvenue(D, E).;true;true', '8;;samevenue(A, B) :- venue(C, B).;true;true', '8;true,false,true;venue(C, G), haswordvenue(G, F).;true;true', '8;true;haswordvenue(B, D), haswordvenue(A, D).;true;true', '8;true,false;haswordvenue(B, E), haswordvenue(A, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7024603123450174;  // std dev = 6,626, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.015414283291292909;  // std dev = 5,369, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.524815601766179;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.06968739663797391;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else return 0.10814893509951236;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(C, D) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.32523159479501285;  // std dev = 11,233, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | | else return 0.5082438995261179;  // std dev = 1,463, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.46404509089667006;  // std dev = 2,451, 28,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.011134104502422184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.060990862821579055;  // std dev = 2,945, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | | else return 0.10762533257259782;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( sametitle(D, E) )
%   | then if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordtitle(G, F) )
%   | | | then return 0.2726854881195077;  // std dev = 11,161, 608,000 (wgt'ed) examples reached here.  /* #neg=284 #pos=324 */
%   | | | else return 0.38068439204666177;  // std dev = 2,596, 32,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.009666111816663556;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.06988578960720906;  // std dev = 4,010, 90,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=21 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.21675289996672634;  // std dev = 10,947, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | | else return 0.30004263561738254;  // std dev = 1,543, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.40017812345644965;  // std dev = 0,763, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2726489594356525;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.16806046326669946;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.07638398117774495;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.00838254293106693;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.08286139047250136;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then if ( haswordtitle(F, E) )
%   | | | then return 0.17077439956883075;  // std dev = 10,930, 608,000 (wgt'ed) examples reached here.  /* #neg=284 #pos=324 */
%   | | | else return 0.22606891041332403;  // std dev = 2,593, 32,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03698957700087254;  // std dev = 2,929, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | | else return 0.0616948976327852;  // std dev = 2,867, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.37191602854554273;  // std dev = 6,624, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.17810914315884288;  // std dev = 5,336, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.1872881643613481;  // std dev = 0,369, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.2540701207227183;  // std dev = 0,751, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.14960755189523092;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.149607551895231;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.0011789449693135428;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.031600658311172015;  // std dev = 0,406, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | else return 0.060503092205243685;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(E, D) )
%   | | then if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.09595291475588028;  // std dev = 10,034, 612,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=327 */
%   | | | else return 0.1239514948336097;  // std dev = 2,433, 28,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordvenue(A, H) )
%   | | then if ( venue(C, I), haswordvenue(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.03451424655327819;  // std dev = 4,099, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C), haswordvenue(D, E) )
%   | then if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.0730352135052335;  // std dev = 9,890, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | | else return 0.12037002917621699;  // std dev = 1,518, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1639521471036145;  // std dev = 0,753, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.08203362583755479;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.04185624732478254;  // std dev = 2,852, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
%   | | | else return -0.17102713617867168;  // std dev = 0,053, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | | then return 0.005330184034285234;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0422933929242654;  // std dev = 2,765, 42,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.05651922416595875;  // std dev = 9,876, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | | else return 0.09274585023900847;  // std dev = 1,521, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1261991298556074;  // std dev = 0,756, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.06226116820801209;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordvenue(A, K) )
%   | | then if ( venue(C, L), haswordvenue(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.02405965960910437;  // std dev = 4,091, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.22458665423922994;  // std dev = 6,623, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.18835006248366545;  // std dev = 5,332, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.07930910674556978;  // std dev = 0,356, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.10499956622850357;  // std dev = 0,906, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.047475443809187425;  // std dev = 0,471, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.15235425626522267;  // std dev = 0,036, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.03982383089571811;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.015502137664714902;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.03418389440549372;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */


Results
   AUC ROC   = 0.842693
   AUC PR    = 0.816213
   CLL	      = -0.484222
   Precision = 0.831895 at threshold = 0.5
   Recall    = 0.909777
   F1        = 0.869095


Total learning time: 337.283 seconds
Total inference time: 248.961 seconds
AUC ROC: 0.842693


Refined model AUC ROC: 0.842693


Dataset: 11_uwcse_cora, Fold: 1, Type: transfer, Time: 02:02:26
{'AUC ROC': 0.842693, 'Recall': 0.909777, 'Parameter Learning results': {'AUC ROC': 0.546475, 'Recall': 0.94413, 'CLL': -0.684375, 'AUC PR': 0.552575, 'Precision': [0.553319, 0.5], 'F1': 0.697726, 'Inference time': 4.978, 'Learning time': 166.53199999999998}, 'CLL': -0.484222, 'AUC PR': 0.816213, 'Precision': [0.831895, 0.5], 'F1': 0.869095, 'Inference time': 248.961, 'Mapping results': {'Total time': 2.813429832458496, 'Possible mappings': 126, 'Finding best mapping': 0.028074979782104492, 'Knowledge compiling time': 0.11268281936645508, 'Generating paths time': 2.5899689197540283, 'Generating mappings time': 0.08269834518432617}, 'Learning time': 503.815}


Start learning from scratch in target domain

Target train facts examples: 7095
Target train pos examples: 368
Target train neg examples: 368

Target test facts examples: 32446
Target test pos examples: 2649
Target test neg examples: 2372

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.701522429075412;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.01877414182356519;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.524815601766179;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.06968739663797391;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else return 0.10814893509951236;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.593348233548271;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.016504108168397414;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.5082438995261179;  // std dev = 0,366, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4592998232011236;  // std dev = 2,331, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.011134104502422184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.060990862821579055;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | else return 0.10762533257259782;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4670374791755083;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.014533760159937995;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.40691670528691;  // std dev = 0,346, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.42536487514245547;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3603205471000508;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.009666111816663556;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.05302383214916931;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | else return 0.09296004718136926;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1922779554369467;  // std dev = 0,393, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.31407260659646263;  // std dev = 0,334, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.326198336977669;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3151786576185065;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2789542146851594;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.16571606688184873;  // std dev = 7,45e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.07872837756259538;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.00838254293106693;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.07942606373449619;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15473579283826083;  // std dev = 0,388, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.23922849891709347;  // std dev = 0,328, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.23676009386434207;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24524715055572144;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2110457588890491;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.00726253290548944;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.14405462705393238;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.06755557315951767;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.06721383282569741;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12371494326399256;  // std dev = 0,384, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.18252722482238654;  // std dev = 0,327, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.18431701165367054;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1780694542720751;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.15840233984298668;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.006286984943840418;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.12718636527100433;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.05750395196407236;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.05640751621874305;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.23687035018670352;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.07807934007265806;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.14039382136069792;  // std dev = 0,328, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.13969935655853657;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.13513671764223453;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.11894681906387401;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.11372389786225859;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.04860598004127941;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.04133543187170314;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07314722175856186;  // std dev = 0,370, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.10903489491900797;  // std dev = 0,330, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.103671751136855;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10703063491600476;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.08968168227650893;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.2311070820520023;  // std dev = 2,473, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return -0.19922168968997778;  // std dev = 0,099, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.1027552376803841;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.03444301876254875;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05903697705388798;  // std dev = 0,369, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.08546317786351293;  // std dev = 0,332, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.08285374085629726;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08034833303035915;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.06795739279227052;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.015466616433495783;  // std dev = 0,866, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return -0.005074054852179127;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.019532914235818568;  // std dev = 2,642, 47,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | | else return 0.033888257404681356;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04765317612891747;  // std dev = 0,368, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.0675284818695853;  // std dev = 0,334, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.06282214181758172;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.0522886009161642;  // std dev = 0,818, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05375544723093501;  // std dev = 2,327, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.012881810110518244;  // std dev = 0,866, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.0329985726543175;  // std dev = 2,836, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
%   | | | else return -0.14149097980917386;  // std dev = 0,111, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.025329647413078728;  // std dev = 0,408, 42,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */


Results
   AUC ROC   = 0.849353
   AUC PR    = 0.794396
   CLL	      = -0.456217
   Precision = 0.824864 at threshold = 0.5
   Recall    = 0.919215
   F1        = 0.869488


Total learning time: 264.54200000000003 seconds
Total inference time: 47.166 seconds
AUC ROC: 0.849353


Dataset: 11_uwcse_cora, Fold: 1, Type: scratch, Time: 02:07:38
{'AUC ROC': 0.849353, 'Recall': 0.919215, 'CLL': -0.456217, 'AUC PR': 0.794396, 'Precision': [0.824864, 0.5], 'F1': 0.869488, 'Inference time': 47.166, 'Learning time': 264.54200000000003}


Starting fold 2

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.06624913215637207
   Generating paths time   = 2.2245442867279053
   Generating mappings time   = 0.08323216438293457
   Possible mappings   = 126
   Finding best mapping   = 0.029295921325683594
   Total time   = 2.403327703475952


Best mapping found: ['advisedby(A,B) -> samevenue(A,B)', 'samecourse(A,B) -> sametitle(A,B)', 'hasposition(A,B) -> venue(B,A)', 'publication(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
1;;samevenue(A, B) :- sametitle(D, F).;false;false
2;;samevenue(A, B) :- venue(C, B).;true;false
2;true,false,true;haswordvenue(B, J).;false;false
2;true,false,false;venue(C, L).;false;false
2;true;sametitle(E, G).;false;true
2;true,false;haswordvenue(A, J).;true;true
3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;false
3;true,false,true;haswordvenue(J, I).;false;false
3;true,false,false;haswordvenue(B, M).;false;false
3;true;haswordvenue(D, C).;false;true
3;true,false;haswordvenue(A, I).;true;true
4;;samevenue(A, B) :- venue(C, B).;true;false
4;true,false,true;haswordvenue(A, J), haswordvenue(I, K).;false;false
4;true,false,false;venue(C, L).;false;false
4;true;haswordvenue(B, G).;false;true
4;true,false;haswordvenue(B, J).;true;true
5;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
6;;samevenue(A, B) :- venue(C, B).;true;false
6;true,true;haswordvenue(E, D).;false;false
6;true,false;haswordvenue(A, I).;true;true
6;true,false,true;venue(C, J), haswordvenue(J, I).;false;false
6;true,false,false;venue(C, K).;false;false
6;true;haswordvenue(B, D), haswordvenue(A, D).;true;true
7;;samevenue(A, B) :- haswordvenue(B, H).;true;false
7;true;haswordvenue(A, H), haswordvenue(G, I).;false;false
8;;samevenue(A, B) :- venue(C, B).;true;false
8;true,false,true;venue(C, L), haswordvenue(L, K).;false;false
8;true,false,false;venue(C, M).;false;false
8;true;haswordvenue(B, D), haswordvenue(A, D).;false;true
8;true,false;haswordvenue(B, J), haswordvenue(A, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(C, D) )
%   then return 0.38133377795055956;  // std dev = 17,857, 1.315,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( sametitle(D, E) )
%   | then return 0.3122578692492862;  // std dev = 17,856, 1.315,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.24364840784922973;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30810048258919553;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then return 0.18880770549329867;  // std dev = 17,853, 1.315,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=771 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.14114094998888263;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.18782516411233163;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(E, D) )
%   | | then return 0.1061003681285795;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.14090435058627612;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C), haswordvenue(D, E) )
%   | then return 0.07959123368769502;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   | else return 0.10595644469746783;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then return 0.05971081175969131;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   | else if ( haswordvenue(B, E), haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.08004874911520166;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.044841576138835756;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06078102400182922;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.437142
   AUC PR    = 0.443375
   CLL	      = -0.70901
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 84.312 seconds
Total inference time: 4.997 seconds
AUC ROC: 0.437142


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'sametitle(C, D)'}, {'false': [0.0, 0, 0], 'true': [17.857, 544, 771]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'sametitle(D, E)'}, {'true,true': [17.856, 544, 771], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)', 'true': 'haswordvenue(D, C)'}, {'true,true': [17.549, 528, 739], 'false': [3.266, 16, 32], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(B, D)'}, {'true,true': [17.853, 544, 771], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true,true': 'haswordvenue(E, D)', 'true': 'haswordvenue(B, D), haswordvenue(A, D)', 'true,false,true': 'venue(C, G), haswordvenue(G, F)', 'true,false': 'haswordvenue(A, F)'}, {'true,true,true': [17.549, 528, 739], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'haswordvenue(A, C), haswordvenue(D, E)'}, {'true,true': [17.549, 528, 739], 'false': [0.0, 0, 0], 'true,false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(B, D), haswordvenue(A, D)', 'true,false,true': 'venue(C, G), haswordvenue(G, F)', 'true,false': 'haswordvenue(B, E), haswordvenue(A, F)'}, {'true,true': [17.549, 528, 739], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [3.266, 16, 32], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24247552800052144, nan]}, {'': [0.2424612841419552, nan], 'true': [0.2424612841419552, nan]}, {'': [0.2430665132571206, 0.2222222222222224], 'true': [0.2430665132571206, nan]}, {'': [0.24238515688371612, nan], 'true': [0.24238515688371612, nan]}, {'': [0.2430665132571214, 0.22222222222222232]}, {'': [0.24234825844146776, nan], 'true,true': [0.24306651325711948, nan], 'true': [0.24306651325711948, 0.2222222222222221], 'true,false,true': [nan, 0.2222222222222221], 'true,false': [0.2222222222222221, nan]}, {'': [0.2423301041908844, nan], 'true': [0.24306651325711726, 0.22222222222222202]}, {'': [0.24232020423144598, nan], 'true,false,true': [nan, 0.2222222222222221], 'true': [0.24306651325711112, 0.2222222222222221], 'true,false': [0.2222222222222221, nan]}, {'': [0.24306651325711948, 0.22222222222222213]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '1;;samevenue(A, B) :- sametitle(C, D).;true;true', '2;;samevenue(A, B) :- venue(C, B).;true;true', '2;true;sametitle(D, E).;true;true', '3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '3;true;haswordvenue(D, C).;true;true', '4;;samevenue(A, B) :- venue(C, B).;true;true', '4;true;haswordvenue(B, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '6;;samevenue(A, B) :- venue(C, B).;true;true', '6;true,true;haswordvenue(E, D).;true;true', '6;true;haswordvenue(B, D), haswordvenue(A, D).;true;true', '6;true,false,true;venue(C, G), haswordvenue(G, F).;true;true', '6;true,false;haswordvenue(A, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, C), haswordvenue(D, E).;true;true', '8;;samevenue(A, B) :- venue(C, B).;true;true', '8;true,false,true;venue(C, G), haswordvenue(G, F).;true;true', '8;true;haswordvenue(B, D), haswordvenue(A, D).;true;true', '8;true,false;haswordvenue(B, E), haswordvenue(A, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(C, D) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordtitle(F, E) )
%   | | then return 0.37301714859831614;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.5323714887717642;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.568256656235879;  // std dev = 1,966, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( sametitle(D, E) )
%   | then if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( haswordvenue(A, F) )
%   | | | then return 0.3056990706242831;  // std dev = 17,296, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | | | else return 0.41719901816751465;  // std dev = 2,848, 53,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=40 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3142965931978625;  // std dev = 2,691, 31,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   | | | else return 0.6879015067694256;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.5137090760383558;  // std dev = 1,597, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.002957590628310719;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.24291113202292394;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return 0.45144812857124245;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.1498605065323433;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.1287109736929188;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.39144424467161104;  // std dev = 1,597, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.18410940087875108;  // std dev = 17,397, 1.259,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=731 */
%   | | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | | then return 0.3164138430076526;  // std dev = 1,916, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return 0.11876071269656628;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.1420036072042961;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.30356496079697864;  // std dev = 3,65e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.09281070242911424;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.05925304721472343;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(E, D) )
%   | | then return 0.10683213926546026;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13560091348570874;  // std dev = 2,695, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C), haswordvenue(D, E) )
%   | then return 0.08019666032031945;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordvenue(B, H) )
%   | | | then return 0.21933519005136035;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04012137692736154;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.012831936154227782;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then return 0.06020442054487557;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   | else if ( haswordvenue(B, E), haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.08844675459065032;  // std dev = 2,678, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04524049286645708;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.17117441778957238;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.009177996945921387;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return -0.011959048638370964;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.550249
   AUC PR    = 0.524516
   CLL	      = -0.705353
   Precision = 0.535092 at threshold = 0.5
   Recall    = 0.957257
   F1        = 0.686462


Total learning time: 186.24099999999999 seconds
Total inference time: 174.483 seconds
AUC ROC: 0.550249


Refined model AUC ROC: 0.550249


Dataset: 11_uwcse_cora, Fold: 2, Type: transfer, Time: 02:15:11
{'AUC ROC': 0.550249, 'Recall': 0.957257, 'Parameter Learning results': {'AUC ROC': 0.437142, 'Recall': 1.0, 'CLL': -0.70901, 'AUC PR': 0.443375, 'Precision': [0.505628, 0.5], 'F1': 0.671651, 'Inference time': 4.997, 'Learning time': 84.312}, 'CLL': -0.705353, 'AUC PR': 0.524516, 'Precision': [0.535092, 0.5], 'F1': 0.686462, 'Inference time': 174.483, 'Mapping results': {'Total time': 2.403327703475952, 'Possible mappings': 126, 'Finding best mapping': 0.029295921325683594, 'Knowledge compiling time': 0.06624913215637207, 'Generating paths time': 2.2245442867279053, 'Generating mappings time': 0.08323216438293457}, 'Learning time': 270.553}


Start learning from scratch in target domain

Target train facts examples: 8245
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 31296
Target test pos examples: 2246
Target test neg examples: 2196

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5145754588862081;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.16457545888620817;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.06605466959315473;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13542454111379182;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.2399523433083081;  // std dev = 0,494, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3261448737160187;  // std dev = 1,915, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3103700402108464;  // std dev = 1,898, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.3332419990230316;  // std dev = 0,330, 33,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18613466623308167;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23233438181079047;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2166010869669191;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.344487667745488;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.33934134460665244;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10772948932183568;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1410384242253122;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1911614910571029;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14402452645856362;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.27133764558638873;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2678472860901805;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08386661726494864;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10611072424133283;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1443302724589107;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.10894265605453758;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.22111437036066758;  // std dev = 9,13e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.21867246678660276;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06472566799214798;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3492150587006434;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.021459843138867715;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.24737121055036027;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07749784182377649;  // std dev = 0,493, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11159004910567229;  // std dev = 1,913, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10492476674911312;  // std dev = 1,890, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.18360795517874845;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04965004327313346;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.059750421108062966;  // std dev = 0,492, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.08583514951347566;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.056998626258501064;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17005701045194377;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.15766572149571548;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0379239842560425;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04486671273230731;  // std dev = 0,492, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07217330186026089;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03789464791023473;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.14738243669995865;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.13783782747782874;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.028880971010354906;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.554674
   AUC PR    = 0.527424
   CLL	      = -0.705291
   Precision = 0.5375 at threshold = 0.5
   Recall    = 0.957257
   F1        = 0.688441


Total learning time: 151.567 seconds
Total inference time: 5.917 seconds
AUC ROC: 0.554674


Dataset: 11_uwcse_cora, Fold: 2, Type: scratch, Time: 02:17:49
{'AUC ROC': 0.554674, 'Recall': 0.957257, 'CLL': -0.705291, 'AUC PR': 0.527424, 'Precision': [0.5375, 0.5], 'F1': 0.688441, 'Inference time': 5.917, 'Learning time': 151.567}


Starting fold 3

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.06791543960571289
   Generating paths time   = 2.3709847927093506
   Generating mappings time   = 0.08345627784729004
   Possible mappings   = 126
   Finding best mapping   = 0.030442237854003906
   Total time   = 2.5528042316436768


Best mapping found: ['advisedby(A,B) -> samevenue(A,B)', 'samecourse(A,B) -> sametitle(A,B)', 'hasposition(A,B) -> venue(B,A)', 'publication(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
1;;samevenue(A, B) :- sametitle(D, F).;false;false
2;;samevenue(A, B) :- venue(C, B).;true;false
2;true,false,true;haswordvenue(B, J).;false;false
2;true,false,false;venue(C, L).;false;false
2;true;sametitle(E, G).;false;true
2;true,false;haswordvenue(A, J).;true;true
3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;false
3;true,false,true;haswordvenue(J, I).;false;false
3;true,false,false;haswordvenue(B, M).;false;false
3;true;haswordvenue(D, C).;false;true
3;true,false;haswordvenue(A, I).;true;true
4;;samevenue(A, B) :- venue(C, B).;true;false
4;true,false,true;haswordvenue(A, J), haswordvenue(I, K).;false;false
4;true,false,false;venue(C, L).;false;false
4;true;haswordvenue(B, G).;false;true
4;true,false;haswordvenue(B, J).;true;true
5;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
6;;samevenue(A, B) :- venue(C, B).;true;false
6;true,true;haswordvenue(E, D).;false;false
6;true,false;haswordvenue(A, I).;true;true
6;true,false,true;venue(C, J), haswordvenue(J, I).;false;false
6;true,false,false;venue(C, K).;false;false
6;true;haswordvenue(B, D), haswordvenue(A, D).;true;true
7;;samevenue(A, B) :- haswordvenue(B, H).;true;false
7;true;haswordvenue(A, H), haswordvenue(G, I).;false;false
8;;samevenue(A, B) :- venue(C, B).;true;false
8;true,false,true;venue(C, L), haswordvenue(L, K).;false;false
8;true,false,false;venue(C, M).;false;false
8;true;haswordvenue(B, D), haswordvenue(A, D).;false;true
8;true,false;haswordvenue(B, J), haswordvenue(A, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.39141703686075996;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.11529179224236799;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(C, D) )
%   then return 0.30835976831348705;  // std dev = 16,970, 1.162,000 (wgt'ed) examples reached here.  /* #neg=581 #pos=581 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( sametitle(D, E) )
%   | then return 0.25609734252947297;  // std dev = 16,956, 1.162,000 (wgt'ed) examples reached here.  /* #neg=581 #pos=581 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.2326015577644578;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.011178146520723626;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then return 0.16077853274153614;  // std dev = 16,875, 1.162,000 (wgt'ed) examples reached here.  /* #neg=581 #pos=581 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.1440846326209935;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return -0.022085100545793677;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(E, D) )
%   | | then return 0.10933817388777928;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.01766200550350656;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C), haswordvenue(D, E) )
%   | then return 0.08243939812629372;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   | else return -0.0141562297600652;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then return 0.06195744394003709;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.011366679159534016;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04649654227949624;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return -0.00914000805881495;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */


Results
   AUC ROC   = 0.547299
   AUC PR    = 0.555563
   CLL	      = -0.684918
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 15.225 seconds
Total inference time: 4.896 seconds
AUC ROC: 0.547299


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'sametitle(C, D)'}, {'false': [0.0, 0, 0], 'true': [16.97, 581, 581]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'sametitle(D, E)'}, {'true,true': [16.956, 581, 581], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)', 'true': 'haswordvenue(D, C)'}, {'true,true': [15.949, 477, 545], 'false': [5.171, 104, 36], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(B, D)'}, {'true,true': [16.875, 581, 581], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true,true': 'haswordvenue(E, D)', 'true': 'haswordvenue(B, D), haswordvenue(A, D)', 'true,false,true': 'venue(C, G), haswordvenue(G, F)', 'true,false': 'haswordvenue(A, F)'}, {'true,true,true': [15.949, 477, 545], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'haswordvenue(A, C), haswordvenue(D, E)'}, {'true,true': [15.949, 477, 545], 'false': [0.0, 0, 0], 'true,false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(B, D), haswordvenue(A, D)', 'true,false,true': 'venue(C, G), haswordvenue(G, F)', 'true,false': 'haswordvenue(B, E), haswordvenue(A, F)'}, {'true,true': [15.949, 477, 545], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [5.171, 104, 36], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}]]
[{'': [0.24889323340519648, 0.19102040816326663]}, {'': [0.2478295232997831, nan]}, {'': [0.2474302663207149, nan], 'true': [0.2474302663207149, nan]}, {'': [0.2488932334052006, 0.19102040816326482], 'true': [0.2488932334052006, nan]}, {'': [0.2450721998962636, nan], 'true': [0.2450721998962636, nan]}, {'': [0.24889323340520608, 0.19102040816326488]}, {'': [0.24362973482949735, nan], 'true,true': [0.248893233405202, nan], 'true': [0.248893233405202, 0.191020408163265], 'true,false,true': [nan, 0.191020408163265], 'true,false': [0.191020408163265, nan]}, {'': [0.24290934274440565, nan], 'true': [0.24889323340520952, 0.1910204081632646]}, {'': [0.2424903225008449, nan], 'true,false,true': [nan, 0.19102040816326438], 'true': [0.2488932334052039, 0.19102040816326438], 'true,false': [0.19102040816326438, nan]}, {'': [0.2488932334052018, 0.19102040816326665]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '1;;samevenue(A, B) :- sametitle(C, D).;true;true', '2;;samevenue(A, B) :- venue(C, B).;true;true', '2;true;sametitle(D, E).;true;true', '3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '3;true;haswordvenue(D, C).;true;true', '4;;samevenue(A, B) :- venue(C, B).;true;true', '4;true;haswordvenue(B, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '6;;samevenue(A, B) :- venue(C, B).;true;true', '6;true,true;haswordvenue(E, D).;true;true', '6;true;haswordvenue(B, D), haswordvenue(A, D).;true;true', '6;true,false,true;venue(C, G), haswordvenue(G, F).;true;true', '6;true,false;haswordvenue(A, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, C), haswordvenue(D, E).;true;true', '8;;samevenue(A, B) :- venue(C, B).;true;true', '8;true,false,true;venue(C, G), haswordvenue(G, F).;true;true', '8;true;haswordvenue(B, D), haswordvenue(A, D).;true;true', '8;true,false;haswordvenue(B, E), haswordvenue(A, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.39141703686075996;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.039967116917694;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11211718906776634;  // std dev = 3,455, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.14386322081379807;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(C, D) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( haswordauthor(H, E) )
%   | | | then return 0.40354234351124585;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.26782805779696045;  // std dev = 2,639, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.2228971822209235;  // std dev = 2,747, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | | else return 0.3421644729475773;  // std dev = 15,430, 958,000 (wgt'ed) examples reached here.  /* #neg=442 #pos=516 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return 0.03503196034273708;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.09825273796378713;  // std dev = 3,666, 71,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=18 */
%   | | | else return 0.11596711948588596;  // std dev = 3,402, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( sametitle(D, E) )
%   | then if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.27817510230976134;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.03754017431776151;  // std dev = 1,266, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.09059562618930873;  // std dev = 5,006, 130,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=34 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1836414411555091;  // std dev = 0,499, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.13184533933604345;  // std dev = 2,747, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | | else return 0.22607615694159333;  // std dev = 15,430, 958,000 (wgt'ed) examples reached here.  /* #neg=442 #pos=516 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.01859040869108162;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.0817495012380692;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.01743042319595927;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.0865001130502742;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then return 0.17237743984119827;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.052439650222430176;  // std dev = 3,685, 74,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=18 */
%   | | | else return 0.07424137191683387;  // std dev = 3,614, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.13176058278356026;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5253456241934655;  // std dev = 2,093, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.19889097386428883;  // std dev = 0,060, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.00677108206634805;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.06217840685158507;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(E, D) )
%   | | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.052376190946528484;  // std dev = 2,969, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return 0.10147130524662507;  // std dev = 15,655, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordvenue(A, H) )
%   | | then if ( venue(C, I), haswordvenue(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.04123700203025435;  // std dev = 4,921, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C), haswordvenue(D, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( haswordvenue(A, F) )
%   | | | then return 0.14654233643077288;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.022634942577358746;  // std dev = 2,747, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else return 0.07639016116642025;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.0291787294498505;  // std dev = 3,080, 64,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=16 */
%   | | | else return -8.233588285928128E-4;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.05816926170571212;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.04260859496241073;  // std dev = 3,400, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then return 0.05640664857991088;  // std dev = 0,498, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   | else if ( haswordvenue(B, E), haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.028290363900023947;  // std dev = 4,912, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.016400904755498564;  // std dev = 0,494, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.04327852321392794;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return -0.011145150354596517;  // std dev = 0,380, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.007558762475918768;  // std dev = 0,354, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.020581518604611975;  // std dev = 3,128, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.038684765828161397;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */


Results
   AUC ROC   = 0.555278
   AUC PR    = 0.566989
   CLL	      = -0.680355
   Precision = 0.558682 at threshold = 0.5
   Recall    = 0.904762
   F1        = 0.690801


Total learning time: 115.025 seconds
Total inference time: 309.082 seconds
AUC ROC: 0.555278


Refined model AUC ROC: 0.555278


Dataset: 11_uwcse_cora, Fold: 3, Type: transfer, Time: 02:25:16
{'AUC ROC': 0.555278, 'Recall': 0.904762, 'Parameter Learning results': {'AUC ROC': 0.547299, 'Recall': 0.0, 'CLL': -0.684918, 'AUC PR': 0.555563, 'Precision': [nan, 0.5], 'F1': nan, 'Inference time': 4.896, 'Learning time': 15.225}, 'CLL': -0.680355, 'AUC PR': 0.566989, 'Precision': [0.558682, 0.5], 'F1': 0.690801, 'Inference time': 309.082, 'Mapping results': {'Total time': 2.5528042316436768, 'Possible mappings': 126, 'Finding best mapping': 0.030442237854003906, 'Knowledge compiling time': 0.06791543960571289, 'Generating paths time': 2.3709847927093506, 'Generating mappings time': 0.08345627784729004}, 'Learning time': 130.25}


Start learning from scratch in target domain

Target train facts examples: 8725
Target train pos examples: 581
Target train neg examples: 581

Target test facts examples: 30816
Target test pos examples: 2436
Target test neg examples: 2159

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.039967116917694;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.12044401706672549;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.058148935099512175;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.1340110040650296;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.40354234351124585;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.2228971822209235;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.34005349969786425;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.04248464503493671;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.09340115831662328;  // std dev = 3,238, 56,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | | else return 0.05092203251355425;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.12381199989907032;  // std dev = 0,450, 64,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.20570189956573556;  // std dev = 0,496, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.20860287414723988;  // std dev = 0,499, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | | else return 0.28293928929784296;  // std dev = 0,499, 958,000 (wgt'ed) examples reached here.  /* #neg=442 #pos=516 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.019958102454848307;  // std dev = 0,385, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.09329562115480108;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.0443462976046685;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.10003948673776587;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22181805018376732;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.017232321290399845;  // std dev = 0,385, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.07978649756241002;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.038428662236904595;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.08507035926221523;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.24049671319730442;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.11861148251100564;  // std dev = 0,499, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return 0.17357619673589306;  // std dev = 0,499, 989,000 (wgt'ed) examples reached here.  /* #neg=460 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.01484926758961294;  // std dev = 0,385, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.011354827500394005;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.06280645646369519;  // std dev = 3,451, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.08099690498196806;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13176516411449793;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0127737052214837;  // std dev = 0,385, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.058596810369263834;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.024240767007617948;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.05849250072041514;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09974452724204276;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5132302079946842;  // std dev = 2,093, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.20836786862307138;  // std dev = 0,094, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.07070141192167312;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.05196720865863174;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.481783408959561;  // std dev = 0,248, 428,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=399 */
%   | | else return -0.3956328693063419;  // std dev = 0,197, 451,000 (wgt'ed) examples reached here.  /* #neg=435 #pos=16 */
%   | else if ( title(G, D), venue(G, B) )
%   | | then return -0.32545203062243255;  // std dev = 0,285, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.26025891060302075;  // std dev = 6,003, 179,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=129 */
%   | | | else return 0.11334167845025182;  // std dev = 1,306, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5302347085386964;  // std dev = 1,968, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.2390542838768938;  // std dev = 0,356, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.20666014227466778;  // std dev = 0,451, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0.538485652934804;  // std dev = 0,013, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.36254219641460955;  // std dev = 0,248, 428,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=399 */
%   | | else return -0.3045153589252549;  // std dev = 0,193, 451,000 (wgt'ed) examples reached here.  /* #neg=435 #pos=16 */
%   | else if ( title(G, D), venue(G, B) )
%   | | then return -0.2533220937454175;  // std dev = 0,281, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.19529903167138093;  // std dev = 6,003, 179,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=129 */
%   | | | else return 0.09415416675755844;  // std dev = 1,302, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4221122599922129;  // std dev = 1,973, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.1989356548965348;  // std dev = 0,324, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.16418591117056902;  // std dev = 0,449, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0.4051120877384589;  // std dev = 0,012, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D), haswordtitle(F, C) )
%   | | then return 0.11257089661640789;  // std dev = 0,516, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.006498957635003425;  // std dev = 0,316, 33,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | else return 0.03809956498501489;  // std dev = 0,369, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.028027385947946567;  // std dev = 0,288, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.010656435443447104;  // std dev = 2,404, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.026070064762991754;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.00268117445349325;  // std dev = 0,360, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */


Results
   AUC ROC   = 0.859749
   AUC PR    = 0.816793
   CLL	      = -0.480884
   Precision = 0.813367 at threshold = 0.5
   Recall    = 0.939245
   F1        = 0.871785


Total learning time: 82.837 seconds
Total inference time: 15.119 seconds
AUC ROC: 0.859749


Dataset: 11_uwcse_cora, Fold: 3, Type: scratch, Time: 02:26:54
{'AUC ROC': 0.859749, 'Recall': 0.939245, 'CLL': -0.480884, 'AUC PR': 0.816793, 'Precision': [0.813367, 0.5], 'F1': 0.871785, 'Inference time': 15.119, 'Learning time': 82.837}


Starting fold 4

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.09955644607543945
   Generating paths time   = 2.3539912700653076
   Generating mappings time   = 0.08410000801086426
   Possible mappings   = 126
   Finding best mapping   = 0.027532577514648438
   Total time   = 2.5651865005493164


Best mapping found: ['advisedby(A,B) -> samevenue(A,B)', 'samecourse(A,B) -> sametitle(A,B)', 'hasposition(A,B) -> venue(B,A)', 'publication(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
1;;samevenue(A, B) :- sametitle(D, F).;false;false
2;;samevenue(A, B) :- venue(C, B).;true;false
2;true,false,true;haswordvenue(B, J).;false;false
2;true,false,false;venue(C, L).;false;false
2;true;sametitle(E, G).;false;true
2;true,false;haswordvenue(A, J).;true;true
3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;false
3;true,false,true;haswordvenue(J, I).;false;false
3;true,false,false;haswordvenue(B, M).;false;false
3;true;haswordvenue(D, C).;false;true
3;true,false;haswordvenue(A, I).;true;true
4;;samevenue(A, B) :- venue(C, B).;true;false
4;true,false,true;haswordvenue(A, J), haswordvenue(I, K).;false;false
4;true,false,false;venue(C, L).;false;false
4;true;haswordvenue(B, G).;false;true
4;true,false;haswordvenue(B, J).;true;true
5;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
6;;samevenue(A, B) :- venue(C, B).;true;false
6;true,true;haswordvenue(E, D).;false;false
6;true,false;haswordvenue(A, I).;true;true
6;true,false,true;venue(C, J), haswordvenue(J, I).;false;false
6;true,false,false;venue(C, K).;false;false
6;true;haswordvenue(B, D), haswordvenue(A, D).;true;true
7;;samevenue(A, B) :- haswordvenue(B, H).;true;false
7;true;haswordvenue(A, H), haswordvenue(G, I).;false;false
8;;samevenue(A, B) :- venue(C, B).;true;false
8;true,false,true;venue(C, L), haswordvenue(L, K).;false;false
8;true,false,false;venue(C, M).;false;false
8;true;haswordvenue(B, D), haswordvenue(A, D).;false;true
8;true,false;haswordvenue(B, J), haswordvenue(A, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.3735611214794357;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.14097721792779405;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(C, D) )
%   then return 0.3085830156425822;  // std dev = 19,291, 1.494,000 (wgt'ed) examples reached here.  /* #neg=747 #pos=747 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( sametitle(D, E) )
%   | then return 0.2562818569995991;  // std dev = 19,285, 1.494,000 (wgt'ed) examples reached here.  /* #neg=747 #pos=747 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.21840159072683824;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.03199215699825589;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then return 0.1612773071197464;  // std dev = 19,247, 1.494,000 (wgt'ed) examples reached here.  /* #neg=747 #pos=747 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.13360746334485038;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return -0.006039672985452596;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(E, D) )
%   | | then return 0.10161446209816274;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.004800567506858488;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C), haswordvenue(D, E) )
%   | then return 0.0767696754566712;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   | else return -0.003817942126232227;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then return 0.05778617729350636;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   | else if ( haswordvenue(B, E), haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0030378850444043462;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04341219428453727;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return -0.002418114477772852;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */


Results
   AUC ROC   = 0.558035
   AUC PR    = 0.56414
   CLL	      = -0.68648
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 70.424 seconds
Total inference time: 4.325 seconds
AUC ROC: 0.558035


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'sametitle(C, D)'}, {'false': [0.0, 0, 0], 'true': [19.291, 747, 747]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'sametitle(D, E)'}, {'true,true': [19.285, 747, 747], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)', 'true': 'haswordvenue(D, C)'}, {'true,true': [18.666, 676, 719], 'false': [4.481, 71, 28], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(B, D)'}, {'true,true': [19.247, 747, 747], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true,true': 'haswordvenue(E, D)', 'true': 'haswordvenue(B, D), haswordvenue(A, D)', 'true,false,true': 'venue(C, G), haswordvenue(G, F)', 'true,false': 'haswordvenue(A, F)'}, {'true,true,true': [18.666, 676, 719], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C)', 'true': 'haswordvenue(A, C), haswordvenue(D, E)'}, {'true,true': [18.666, 676, 719], 'false': [0.0, 0, 0], 'true,false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'venue(C, B)', 'true': 'haswordvenue(B, D), haswordvenue(A, D)', 'true,false,true': 'venue(C, G), haswordvenue(G, F)', 'true,false': 'haswordvenue(B, E), haswordvenue(A, F)'}, {'true,true': [18.666, 676, 719], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [4.481, 71, 28], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}]]
[{'': [0.24976246451101256, 0.20283644526068886]}, {'': [0.2490988237799996, nan]}, {'': [0.24893319486748874, nan], 'true': [0.24893319486748874, nan]}, {'': [0.24976246451099254, 0.20283644526068828], 'true': [0.24976246451099254, nan]}, {'': [0.24795291172014344, nan], 'true': [0.24795291172014344, nan]}, {'': [0.24976246451099213, 0.2028364452606874]}, {'': [0.2473535800261353, nan], 'true,true': [0.24976246451098583, nan], 'true': [0.24976246451098583, 0.20283644526068853], 'true,false,true': [nan, 0.20283644526068853], 'true,false': [0.20283644526068853, nan]}, {'': [0.24705474131649682, nan], 'true': [0.24976246451098924, 0.20283644526068714]}, {'': [0.2468818160073176, nan], 'true,false,true': [nan, 0.20283644526068836], 'true': [0.24976246451099907, 0.20283644526068836], 'true,false': [0.20283644526068836, nan]}, {'': [0.24976246451098552, 0.20283644526068775]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '1;;samevenue(A, B) :- sametitle(C, D).;true;true', '2;;samevenue(A, B) :- venue(C, B).;true;true', '2;true;sametitle(D, E).;true;true', '3;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '3;true;haswordvenue(D, C).;true;true', '4;;samevenue(A, B) :- venue(C, B).;true;true', '4;true;haswordvenue(B, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true', '6;;samevenue(A, B) :- venue(C, B).;true;true', '6;true,true;haswordvenue(E, D).;true;true', '6;true;haswordvenue(B, D), haswordvenue(A, D).;true;true', '6;true,false,true;venue(C, G), haswordvenue(G, F).;true;true', '6;true,false;haswordvenue(A, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(B, C).;true;true', '7;true;haswordvenue(A, C), haswordvenue(D, E).;true;true', '8;;samevenue(A, B) :- venue(C, B).;true;true', '8;true,false,true;venue(C, G), haswordvenue(G, F).;true;true', '8;true;haswordvenue(B, D), haswordvenue(A, D).;true;true', '8;true,false;haswordvenue(B, E), haswordvenue(A, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.3735611214794357;  // std dev = 0,500, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.31968739663797385;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.12644161802634163;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(C, D) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordtitle(F, E) )
%   | | then return 0.3157655890831845;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.37452766348204025;  // std dev = 3,286, 44,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.556345845300223;  // std dev = 2,121, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.27615825449321707;  // std dev = 1,797, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.11034235232659871;  // std dev = 2,837, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else return 0.08964016548715838;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( sametitle(D, E) )
%   | then if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordtitle(G, F) )
%   | | | then return 0.2616743558765986;  // std dev = 18,211, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | | | else return 0.36065584891397634;  // std dev = 3,953, 68,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=43 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1277742073841352;  // std dev = 3,385, 54,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   | | | else return 0.07754550154840685;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.2133913226984239;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | then return 0.20734680923248852;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.07604048182896853;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.06648308448032317;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then if ( haswordtitle(F, E) )
%   | | | then return 0.16317962504721706;  // std dev = 18,211, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | | | else return 0.23414886895063214;  // std dev = 3,949, 68,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=43 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.08854141443017494;  // std dev = 3,374, 54,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   | | | else return 0.056548150925513005;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.1278964581739888;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.1473245853449478;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.049182600451729785;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.047766754411616555;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then if ( haswordvenue(E, D) )
%   | | then return 0.09717398309635847;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.05013497573750657;  // std dev = 4,433, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C) )
%   then if ( haswordvenue(A, C), haswordvenue(D, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.13295456746618556;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.36152599603761415;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.22819266270428068;  // std dev = 1,826, 15,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.07000832096562903;  // std dev = 18,411, 1.361,000 (wgt'ed) examples reached here.  /* #neg=664 #pos=697 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.037348442507696034;  // std dev = 3,126, 48,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.14176485270201375;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.031838430536954426;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, B) )
%   then if ( haswordvenue(B, D), haswordvenue(A, D) )
%   | then return 0.055232954084732874;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   | else if ( haswordvenue(B, E), haswordvenue(A, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.033283683691388136;  // std dev = 4,429, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04150222610131815;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.07547760467315498;  // std dev = 0,498, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.020732756800849846;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.018723298158521234;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */


Results
   AUC ROC   = 0.562388
   AUC PR    = 0.577761
   CLL	      = -0.685856
   Precision = 0.584507 at threshold = 0.5
   Recall    = 0.073128
   F1        = 0.129992


Total learning time: 219.844 seconds
Total inference time: 210.85399999999998 seconds
AUC ROC: 0.562388


Refined model AUC ROC: 0.562388


Dataset: 11_uwcse_cora, Fold: 4, Type: transfer, Time: 02:35:23
{'AUC ROC': 0.562388, 'Recall': 0.073128, 'Parameter Learning results': {'AUC ROC': 0.558035, 'Recall': 0.0, 'CLL': -0.68648, 'AUC PR': 0.56414, 'Precision': [nan, 0.5], 'F1': nan, 'Inference time': 4.325, 'Learning time': 70.424}, 'CLL': -0.685856, 'AUC PR': 0.577761, 'Precision': [0.584507, 0.5], 'F1': 0.129992, 'Inference time': 210.85399999999998, 'Mapping results': {'Total time': 2.5651865005493164, 'Possible mappings': 126, 'Finding best mapping': 0.027532577514648438, 'Knowledge compiling time': 0.09955644607543945, 'Generating paths time': 2.3539912700653076, 'Generating mappings time': 0.08410000801086426}, 'Learning time': 290.26800000000003}


Start learning from scratch in target domain

Target train facts examples: 7382
Target train pos examples: 747
Target train neg examples: 747

Target test facts examples: 32159
Target test pos examples: 2270
Target test neg examples: 1993

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3675686788824765;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.40360348055405776;  // std dev = 2,335, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5803711573217345;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.31968739663797385;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.12644161802634163;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31669960489254817;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.35569342009674776;  // std dev = 2,894, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.4016114478971489;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.4942204482591004;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.27615825449321707;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.11034235232659871;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.08964016548715838;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.26261587938835473;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.28037036499843904;  // std dev = 2,333, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.3210324535556523;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.39601909095488674;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.2308014560359859;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.09510703098232902;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.07754550154840685;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.21064009539967504;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.227968711588513;  // std dev = 2,891, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.2713759137133921;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.30383299977459627;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3816060434442348;  // std dev = 2,396, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.19810301917212558;  // std dev = 0,141, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.22578729577145015;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.06648308448032317;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16473263450408898;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.1659200236737463;  // std dev = 2,331, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.20065573836868922;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2286109504287673;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.14901352233934237;  // std dev = 0,476, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.0638274493259572;  // std dev = 0,416, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.056548150925513005;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.617214800901244;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.38278519909875597;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.617214800901244;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.12408502990888359;  // std dev = 0,500, 1.310,000 (wgt'ed) examples reached here.  /* #neg=646 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1390817264558244;  // std dev = 3,280, 44,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.1785873593526062;  // std dev = 2,109, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.05898401395078423;  // std dev = 0,420, 48,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | else return 0.14532497392092325;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.047766754411616555;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.4651884887063363;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.28174649964021176;  // std dev = 0,085, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.46518848870633633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.09437460010173222;  // std dev = 0,500, 1.310,000 (wgt'ed) examples reached here.  /* #neg=646 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.10474910767681872;  // std dev = 3,280, 44,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.1357347007229215;  // std dev = 2,109, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.09376821262217937;  // std dev = 1,707, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.04566589817673776;  // std dev = 2,872, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
%   | | else return 0.04342280120536074;  // std dev = 0,414, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07269978595552631;  // std dev = 0,498, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.06991364212623614;  // std dev = 2,889, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.10832121538621511;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.09568807391103552;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.12999962744457214;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.27457929277440846;  // std dev = 2,390, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.19654008369664036;  // std dev = 0,183, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.08890943983732602;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.033686788282055624;  // std dev = 0,429, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05478092477106254;  // std dev = 0,498, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.07632113965332629;  // std dev = 2,452, 28,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   | | | else return 0.01317183240383612;  // std dev = 1,732, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07387747631072088;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10360924352779739;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.0500312532629767;  // std dev = 0,456, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.028030624613632198;  // std dev = 0,429, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.021156970167261514;  // std dev = 0,392, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.041197824444086685;  // std dev = 0,498, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03367737622141777;  // std dev = 2,327, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.05546108522689433;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.05639191445923096;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.08366720714181149;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.038270154751396446;  // std dev = 0,455, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.023241049882253076;  // std dev = 0,429, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.0173914116748653;  // std dev = 0,391, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */


Results
   AUC ROC   = 0.573596
   AUC PR    = 0.589845
   CLL	      = -0.674934
   Precision = 0.653696 at threshold = 0.5
   Recall    = 0.074009
   F1        = 0.132964


Total learning time: 171.153 seconds
Total inference time: 7.091 seconds
AUC ROC: 0.573596


Dataset: 11_uwcse_cora, Fold: 4, Type: scratch, Time: 02:38:22
{'AUC ROC': 0.573596, 'Recall': 0.074009, 'CLL': -0.674934, 'AUC PR': 0.589845, 'Precision': [0.653696, 0.5], 'F1': 0.132964, 'Inference time': 7.091, 'Learning time': 171.153}


Starting fold 5

Target predicate: samevenue 

Mapping Results
   Knowledge compiling time   = 0.06771492958068848
   Generating paths time   = 2.051567554473877
   Generating mappings time   = 0.06545639038085938
   Possible mappings   = 126
   Finding best mapping   = 0.02218484878540039
   Total time   = 2.2069292068481445


Best mapping found: ['advisedby(A,B) -> samevenue(B,A)', 'samecourse(A,B) -> sametitle(A,B)', 'hasposition(A,B) -> venue(B,A)', 'publication(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(B, A) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
1;;samevenue(B, A) :- sametitle(D, F).;false;false
2;;samevenue(B, A) :- venue(C, B).;true;false
2;true,false,true;haswordvenue(B, J).;false;false
2;true,false,false;venue(C, L).;false;false
2;true;sametitle(E, G).;false;true
2;true,false;haswordvenue(A, J).;true;true
3;;samevenue(B, A) :- haswordvenue(B, C), haswordvenue(A, C).;true;false
3;true,false,true;haswordvenue(J, I).;false;false
3;true,false,false;haswordvenue(B, M).;false;false
3;true;haswordvenue(D, C).;false;true
3;true,false;haswordvenue(A, I).;true;true
4;;samevenue(B, A) :- venue(C, B).;true;false
4;true,false,true;haswordvenue(A, J), haswordvenue(I, K).;false;false
4;true,false,false;venue(C, L).;false;false
4;true;haswordvenue(B, G).;false;true
4;true,false;haswordvenue(B, J).;true;true
5;;samevenue(B, A) :- haswordvenue(B, C), haswordvenue(A, C).;false;false
6;;samevenue(B, A) :- venue(C, B).;true;false
6;true,true;haswordvenue(E, D).;false;false
6;true,false;haswordvenue(A, I).;true;true
6;true,false,true;venue(C, J), haswordvenue(J, I).;false;false
6;true,false,false;venue(C, K).;false;false
6;true;haswordvenue(B, D), haswordvenue(A, D).;true;true
7;;samevenue(B, A) :- haswordvenue(B, H).;true;false
7;true;haswordvenue(A, H), haswordvenue(G, I).;false;false
8;;samevenue(B, A) :- venue(C, B).;true;false
8;true,false,true;venue(C, L), haswordvenue(L, K).;false;false
8;true,false,false;venue(C, M).;false;false
8;true;haswordvenue(B, D), haswordvenue(A, D).;false;true
8;true,false;haswordvenue(B, J), haswordvenue(A, K).;true;true
9;;samevenue(B, A) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(C, D) )
%   then return 0.32788489441402646;  // std dev = 16,004, 1.050,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( sametitle(D, E) )
%   | then return 0.2712654494556198;  // std dev = 15,969, 1.050,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then return 0.27421995707969016;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.006803568884946218;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(A, D) )
%   | then return 0.16745573151152665;  // std dev = 15,772, 1.050,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=550 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17143904559998294;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return -0.03810002661400994;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(E, D) )
%   | | then return 0.1291169148295214;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordvenue(B, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.030465421949036984;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C) )
%   then if ( haswordvenue(B, C), haswordvenue(D, E) )
%   | then return 0.0968876006621675;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   | else return -0.02445456775322042;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0726819711126409;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   | else if ( haswordvenue(A, E), haswordvenue(B, F) )
%   | | then if ( venue(C, G), haswordvenue(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.019690800093611193;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then return 0.05458819380538271;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return -0.015894948376113802;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.535236
   AUC PR    = 0.542776
   CLL	      = -0.684357
   Precision = 0.543247 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.691798


Total learning time: 37.04 seconds
Total inference time: 5.32 seconds
AUC ROC: 0.535236


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'sametitle(C, D)'}, {'false': [0.0, 0, 0], 'true': [16.004, 500, 550]}], ['samevenue(A, B)', {'': 'venue(C, A)', 'true': 'sametitle(D, E)'}, {'true,true': [15.969, 500, 550], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(D, C)'}, {'true,true': [14.19, 338, 498], 'false': [6.274, 162, 52], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'venue(C, A)', 'true': 'haswordvenue(A, D)'}, {'true,true': [15.772, 500, 550], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'venue(C, A)', 'true,true': 'haswordvenue(E, D)', 'true': 'haswordvenue(A, D), haswordvenue(B, D)', 'true,false,true': 'venue(C, G), haswordvenue(G, F)', 'true,false': 'haswordvenue(B, F)'}, {'true,true,true': [14.19, 338, 498], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C)', 'true': 'haswordvenue(B, C), haswordvenue(D, E)'}, {'true,true': [14.19, 338, 498], 'false': [0.0, 0, 0], 'true,false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'venue(C, A)', 'true': 'haswordvenue(A, D), haswordvenue(B, D)', 'true,false,true': 'venue(C, G), haswordvenue(G, F)', 'true,false': 'haswordvenue(A, E), haswordvenue(B, F)'}, {'true,true': [14.19, 338, 498], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [6.274, 162, 52], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordvenue(A, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2439308073162957, nan]}, {'': [0.2428749694918486, nan], 'true': [0.2428749694918486, nan]}, {'': [0.24084270048761972, 0.18394619617433894], 'true': [0.24084270048761972, nan]}, {'': [0.2369067068687524, nan], 'true': [0.2369067068687524, nan]}, {'': [0.2408427004876268, 0.18394619617433958]}, {'': [0.23337913420242556, nan], 'true,true': [0.24084270048762396, nan], 'true': [0.24084270048762396, 0.1839461961743387], 'true,false,true': [nan, 0.1839461961743387], 'true,false': [0.1839461961743387, nan]}, {'': [0.23163591952881124, nan], 'true': [0.24084270048762768, 0.1839461961743374]}, {'': [0.2306312672040295, nan], 'true,false,true': [nan, 0.18394619617433794], 'true': [0.24084270048762743, 0.18394619617433794], 'true,false': [0.18394619617433794, nan]}, {'': [0.24084270048762288, 0.1839461961743399]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- sametitle(C, D).;true;true', '2;;samevenue(A, B) :- venue(C, A).;true;true', '2;true;sametitle(D, E).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;true;haswordvenue(D, C).;true;true', '4;;samevenue(A, B) :- venue(C, A).;true;true', '4;true;haswordvenue(A, D).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- venue(C, A).;true;true', '6;true,true;haswordvenue(E, D).;true;true', '6;true;haswordvenue(A, D), haswordvenue(B, D).;true;true', '6;true,false,true;venue(C, G), haswordvenue(G, F).;true;true', '6;true,false;haswordvenue(B, F).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C).;true;true', '7;true;haswordvenue(B, C), haswordvenue(D, E).;true;true', '8;;samevenue(A, B) :- venue(C, A).;true;true', '8;true,false,true;venue(C, G), haswordvenue(G, F).;true;true', '8;true;haswordvenue(A, D), haswordvenue(B, D).;true;true', '8;true,false;haswordvenue(A, E), haswordvenue(B, F).;true;true', '9;;samevenue(A, B) :- haswordvenue(B, C), haswordvenue(A, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.6498156017661788;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.44563297085940545;  // std dev = 0,492, 783,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.762910839861417;  // std dev = 0,294, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.16249676118646889;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( sametitle(C, D) )
%   then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordtitle(F, E) )
%   | | then return 0.3796756457173261;  // std dev = 0,491, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5382879672063556;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.669980681397132;  // std dev = 1,307, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.23804772605684593;  // std dev = 1,550, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.10935948583233114;  // std dev = 2,931, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.1414291185239391;  // std dev = 3,065, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.04479249977758044;  // std dev = 4,214, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( sametitle(D, E) )
%   | then if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordauthor(G, F) )
%   | | | then return 0.6612623033592454;  // std dev = 0,135, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.3135769764092892;  // std dev = 14,048, 826,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=488 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.11410307386372052;  // std dev = 3,329, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | | else return 0.06270215113629489;  // std dev = 5,229, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(D, C) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.5033373514424412;  // std dev = 0,148, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.0407582616973319;  // std dev = 3,243, 51,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.0591524030731116;  // std dev = 3,393, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.2739337096602971;  // std dev = 13,064, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.1838778956318578;  // std dev = 0,437, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, A) )
%   | | | then return -0.18869334780422786;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10360896565675141;  // std dev = 2,911, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05209035109667839;  // std dev = 0,416, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(A, D) )
%   | then if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | | then if ( haswordtitle(F, E) )
%   | | | then return 0.1852693986247361;  // std dev = 13,840, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | | | else return 0.35238588733532944;  // std dev = 1,806, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.08706505040782721;  // std dev = 3,321, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | | | else return 0.0439680850637188;  // std dev = 5,214, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.26452694585817266;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3078060949077859;  // std dev = 1,924, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.09654531200256128;  // std dev = 0,399, 29,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else return 0.1531880337175252;  // std dev = 0,486, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.4675855403925092;  // std dev = 0,891, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18284499732265683;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06207074233261612;  // std dev = 0,443, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 4.952919275974597E-4;  // std dev = 0,386, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.06064587661598629;  // std dev = 0,433, 94,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(E, D) )
%   | | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.0030995237552130573;  // std dev = 3,577, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | | else return 0.1171362541864833;  // std dev = 13,421, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordvenue(B, H) )
%   | | then if ( venue(C, I), haswordvenue(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.03780961516422029;  // std dev = 6,142, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C) )
%   then if ( haswordvenue(B, C), haswordvenue(D, E) )
%   | then if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.07729803010384036;  // std dev = 0,484, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1984252354539841;  // std dev = 1,253, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3097490472260358;  // std dev = 0,142, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.14293546455200107;  // std dev = 1,547, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.03508173779540709;  // std dev = 2,894, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.011154830719959923;  // std dev = 3,071, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | | else return 0.04826270905522543;  // std dev = 4,151, 94,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A) )
%   then if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.09920767611436715;  // std dev = 2,619, 32,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.15294545558835673;  // std dev = 2,202, 29,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else return 0.06826878491768769;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, I) )
%   | | then if ( venue(C, J), haswordvenue(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.02607757117144702;  // std dev = 6,132, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordvenue(A, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04241674803209546;  // std dev = 0,483, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.206866819557264;  // std dev = 0,280, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.33298512214411957;  // std dev = 0,895, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16883281155947436;  // std dev = 0,013, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03191466758603758;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.1923198797957184;  // std dev = 0,067, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07139687877705113;  // std dev = 4,093, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.023025957414853453;  // std dev = 3,056, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.22252057844802123;  // std dev = 0,074, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.540589
   AUC PR    = 0.562486
   CLL	      = -0.689915
   Precision = 0.541468 at threshold = 0.5
   Recall    = 0.920957
   F1        = 0.681975


Total learning time: 157.781 seconds
Total inference time: 212.865 seconds
AUC ROC: 0.540589


Refined model AUC ROC: 0.540589


Dataset: 11_uwcse_cora, Fold: 5, Type: transfer, Time: 02:45:18
{'AUC ROC': 0.540589, 'Recall': 0.920957, 'Parameter Learning results': {'AUC ROC': 0.535236, 'Recall': 0.952169, 'CLL': -0.684357, 'AUC PR': 0.542776, 'Precision': [0.543247, 0.5], 'F1': 0.691798, 'Inference time': 5.32, 'Learning time': 37.04}, 'CLL': -0.689915, 'AUC PR': 0.562486, 'Precision': [0.541468, 0.5], 'F1': 0.681975, 'Inference time': 212.865, 'Mapping results': {'Total time': 2.2069292068481445, 'Possible mappings': 126, 'Finding best mapping': 0.02218484878540039, 'Knowledge compiling time': 0.06771492958068848, 'Generating paths time': 2.051567554473877, 'Generating mappings time': 0.06545639038085938}, 'Learning time': 194.821}


Start learning from scratch in target domain

Target train facts examples: 8094
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 31447
Target test pos examples: 2467
Target test neg examples: 2240

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( author(H, F), venue(H, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( author(H, F), venue(H, B) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.13146151704002107;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.21625389107086207;  // std dev = 1,368, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.12574084969515806;  // std dev = 2,793, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.48283090502633463;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( author(H, F), venue(H, B) )
%   | | | then return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.11288344742103278;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.026519921641676734;  // std dev = 0,889, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13280913098258706;  // std dev = 2,978, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039048804834509544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5934536245591475;  // std dev = 0,082, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.17888762943411973;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12448270489505191;  // std dev = 1,921, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.19883064937713968;  // std dev = 2,542, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.1151284360172542;  // std dev = 1,909, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.2735317718382664;  // std dev = 0,485, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.15014547717490415;  // std dev = 0,477, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.08218374249373092;  // std dev = 0,442, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05356050148065419;  // std dev = 0,415, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4505277728309437;  // std dev = 0,082, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.11218517009690815;  // std dev = 2,763, 31,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.11215445501091395;  // std dev = 1,695, 20,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.15763745946282626;  // std dev = 2,542, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.08697219909012875;  // std dev = 1,913, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.2096888631146;  // std dev = 0,485, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.17420257116386786;  // std dev = 0,057, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.0968370101259656;  // std dev = 0,445, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else return 0.04791109385110592;  // std dev = 0,424, 109,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=26 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13919187834563426;  // std dev = 0,486, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.2862194071392406;  // std dev = 0,332, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( author(H, F), venue(H, B) )
%   | | | then return 0.15242485306639342;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12097059002977051;  // std dev = 0,006, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.08046269947873368;  // std dev = 0,458, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.14753493759993047;  // std dev = 1,367, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.06634681102211124;  // std dev = 2,776, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.012398731864917283;  // std dev = 2,970, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.026862982125390965;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3491681323823131;  // std dev = 0,059, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.10341799352333234;  // std dev = 0,486, 808,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=472 */
%   | else return 0.24798405240059998;  // std dev = 0,291, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return -0.005102509860331307;  // std dev = 0,404, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return -0.1070187129422719;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07809595580596303;  // std dev = 3,084, 44,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.14793622803048387;  // std dev = 0,022, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08113088534997354;  // std dev = 4,091, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -4.043530882650278E-4;  // std dev = 0,390, 65,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.24298085458737248;  // std dev = 0,065, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.07581330981996694;  // std dev = 3,064, 46,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.24162794661046566;  // std dev = 0,887, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.0683895510354341;  // std dev = 2,553, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.14568127939575393;  // std dev = 1,810, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.09680041772403686;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.0591719057831894;  // std dev = 0,434, 98,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | else return -0.14678485711504452;  // std dev = 0,080, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.015841817947906938;  // std dev = 0,418, 109,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=26 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D), haswordauthor(F, C) )
%   | | then return 0.24779954225751233;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.03553949718081731;  // std dev = 2,587, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.0581972318682282;  // std dev = 13,530, 782,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=459 */
%   | else return 0.1872566150462847;  // std dev = 0,292, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then return -0.13421359642175537;  // std dev = 0,077, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(K, H) )
%   | | | then return 0.1570309915197395;  // std dev = 1,091, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.058526028214472586;  // std dev = 4,120, 86,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.059636087166231956;  // std dev = 0,443, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.2220000529801926;  // std dev = 0,131, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.4981538107552676;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.18388431773981997;  // std dev = 0,401, 31,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.18654421570112414;  // std dev = 0,288, 24,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordauthor(D, H), haswordvenue(B, H) )
%   | | | then return 0.014333815277041126;  // std dev = 0,350, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.07263585337912941;  // std dev = 3,169, 48,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordtitle(J, I) )
%   | | then return 0.05031232597717396;  // std dev = 0,487, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.11916738932461218;  // std dev = 0,339, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.03311694683756099;  // std dev = 0,423, 95,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.010998998373069023;  // std dev = 0,386, 65,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */


Results
   AUC ROC   = 0.542745
   AUC PR    = 0.563931
   CLL	      = -0.691898
   Precision = 0.541987 at threshold = 0.5
   Recall    = 0.915687
   F1        = 0.680934


Total learning time: 100.513 seconds
Total inference time: 18.519 seconds
AUC ROC: 0.542745


Dataset: 11_uwcse_cora, Fold: 5, Type: scratch, Time: 02:47:17
{'AUC ROC': 0.542745, 'Recall': 0.915687, 'CLL': -0.691898, 'AUC PR': 0.563931, 'Precision': [0.541987, 0.5], 'F1': 0.680934, 'Inference time': 18.519, 'Learning time': 100.513}


