Starting experiment #1 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( tempadvisedby(A, G), publication(E, G) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3581489350995123;  // std dev = 0,500, 18,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L), ta(M, A, N) )
%   | | | then return 0.4735335504841277;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.36389606153629317;  // std dev = 4,663, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, P), projectmember(Q, P) )
%   | | then return 0.24276431971489695;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.4581489350995123;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.3470378239884017;  // std dev = 4,742, 90,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=44 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( advisedby(A, F) )
%   | then return 0.2431522573300012;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(D, G, E), advisedby(G, H) )
%   | | then return 0.47540780245230163;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.24779728811959792;  // std dev = 0,493, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( advisedby(A, I), publication(J, I) )
%   | then if ( advisedby(K, I), publication(J, K) )
%   | | then if ( ta(L, A, M), ta(N, K, P) )
%   | | | then return 0.40564015880039006;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.3135977252686114;  // std dev = 4,663, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.43201604470553195;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, Q) )
%   | | then if ( tempadvisedby(R, Q), publication(S, R) )
%   | | | then return 0.2390253257491676;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.3636453865394401;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else return 0.2554524423348888;  // std dev = 0,495, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( publication(E, A), advisedby(A, F) )
%   | then if ( tempadvisedby(G, F) )
%   | | then return 0.2209329843208306;  // std dev = 0,496, 34,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | | else return 0.10912178652522565;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( ta(C, H, D), advisedby(H, I) )
%   | | then return 0.2892651658722928;  // std dev = 0,494, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | else if ( ta(C, J, K), advisedby(J, L) )
%   | | | then return 0.1901562241304402;  // std dev = 3,012, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.26120273584774223;  // std dev = 1,859, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( advisedby(A, M), projectmember(N, M) )
%   | then return 0.20878533243596462;  // std dev = 0,488, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( publication(P, A), tempadvisedby(A, Q) )
%   | | then return 0.19956621655278314;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( tempadvisedby(A, R) )
%   | | | then return 0.31644007361194815;  // std dev = 2,473, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   | | | else return 0.280957440571991;  // std dev = 4,931, 98,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=52 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.19996047725594274;  // std dev = 0,494, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else return 0.16925820770729885;  // std dev = 0,496, 51,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=23 */
%   else if ( publication(G, A), advisedby(A, H) )
%   | then if ( tempadvisedby(I, H) )
%   | | then if ( publication(G, I) )
%   | | | then return 0.03212463845343139;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.22002215617147441;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.34112849147539126;  // std dev = 0,476, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, J) )
%   | | then if ( tempadvisedby(K, J), publication(L, K) )
%   | | | then return 0.15818973033900452;  // std dev = 1,984, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.3091428563595358;  // std dev = 1,936, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( advisedby(A, M) )
%   | | | then return 0.20637616651744883;  // std dev = 3,398, 47,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=24 */
%   | | | else return 0.13100575780333848;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( advisedby(A, C), ta(D, A, E) )
%   then if ( advisedby(F, C), publication(G, F) )
%   | then if ( ta(H, F, I), publication(G, C) )
%   | | then return 0.16363542134692194;  // std dev = 0,494, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | else return 0.0812561570875167;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.2765475127792703;  // std dev = 1,141, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( advisedby(A, J), publication(K, A) )
%   | then if ( tempadvisedby(L, J) )
%   | | then return 0.16010619236818305;  // std dev = 0,499, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | else return 0.2644264273219808;  // std dev = 0,475, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, M) )
%   | | then if ( tempadvisedby(N, M), publication(P, N) )
%   | | | then return 0.1176254691010523;  // std dev = 2,516, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return 0.2029883906524898;  // std dev = 3,385, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, Q), publication(R, Q) )
%   | | | then return 0.1811892521586216;  // std dev = 2,856, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.12291740489167781;  // std dev = 3,149, 41,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then return 0.1002328929391528;  // std dev = 0,494, 74,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=34 */
%   | else return 0.2093134000373206;  // std dev = 1,140, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( publication(H, A) )
%   | then if ( publication(H, I), advisedby(J, I) )
%   | | then if ( ta(K, J, L), publication(M, J) )
%   | | | then return 0.16310673998158995;  // std dev = 3,366, 47,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=25 */
%   | | | else return 0.04262194066762274;  // std dev = 2,116, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | else return 0.25405196894779786;  // std dev = 0,460, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.08835662601550746;  // std dev = 1,850, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.1556735473051077;  // std dev = 3,384, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, R), publication(S, R) )
%   | | | then return 0.13843610593133018;  // std dev = 2,856, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.06930795430027291;  // std dev = 2,760, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, F), publication(G, E) )
%   | then return 0.09937299079855626;  // std dev = 0,492, 86,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=41 */
%   | else if ( ta(C, H, I), advisedby(H, J) )
%   | | then if ( advisedby(K, J), publication(L, K) )
%   | | | then return 0.03853691951068627;  // std dev = 3,048, 38,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=17 */
%   | | | else return 0.17585017471864975;  // std dev = 0,795, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(A, M), publication(N, M) )
%   | | | then return 0.24115658520634095;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.09217674812699243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( publication(P, A), advisedby(A, Q) )
%   | then return 0.11608121066586707;  // std dev = 0,491, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( tempadvisedby(A, R) )
%   | | then return 0.1116363196937031;  // std dev = 0,492, 32,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else if ( advisedby(A, S), publication(T, S) )
%   | | | then return 0.10475757629717576;  // std dev = 2,856, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.06166727356463978;  // std dev = 2,496, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then if ( advisedby(E, C), ta(F, E, G) )
%   | then return 0.1942336562903651;  // std dev = 0,465, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | else return -0.013558645723033133;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( ta(H, A, I), advisedby(A, J) )
%   | then if ( publication(K, J) )
%   | | then if ( ta(H, L, I), publication(K, L) )
%   | | | then return 0.03366285512972227;  // std dev = 2,775, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | | | else return 0.0743409235067799;  // std dev = 3,158, 41,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | | else return -0.033407134757743887;  // std dev = 1,081, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( publication(M, A), tempadvisedby(A, N) )
%   | | then if ( publication(M, N) )
%   | | | then return -0.003486862373213398;  // std dev = 1,368, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.11281745598045344;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(P, A), ta(Q, A, R) )
%   | | | then return 0.14659450678377492;  // std dev = 1,078, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07769289303843335;  // std dev = 6,410, 169,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=88 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), publication(D, A) )
%   then if ( publication(D, C) )
%   | then return -0.0026673148504313404;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.08573314507731802;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tempadvisedby(A, E), advisedby(F, E) )
%   | then if ( ta(G, A, H), ta(I, F, H) )
%   | | then if ( publication(J, F) )
%   | | | then return -0.04572380190612067;  // std dev = 1,364, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.08957103620669114;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( ta(K, F, L), publication(M, F) )
%   | | | then return 0.15032445575699024;  // std dev = 2,076, 19,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | | | else return 0.029700176447690654;  // std dev = 2,421, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else if ( advisedby(A, N), publication(P, N) )
%   | | then if ( advisedby(Q, N), publication(P, Q) )
%   | | | then return 0.05116577019732887;  // std dev = 5,702, 133,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=66 */
%   | | | else return 0.10250800024009951;  // std dev = 2,171, 21,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | else return 0.03989530085557335;  // std dev = 0,490, 59,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=27 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then if ( advisedby(A, E), publication(F, E) )
%   | then return 0.44657830492303746;  // std dev = 0,137, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.009488344381908794;  // std dev = 0,482, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   else if ( ta(G, A, H), advisedby(A, I) )
%   | then if ( publication(J, I), tempadvisedby(K, I) )
%   | | then if ( ta(G, K, L) )
%   | | | then return -0.006808279810474516;  // std dev = 1,554, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.045476346616208335;  // std dev = 3,310, 45,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=22 */
%   | | else if ( publication(M, A) )
%   | | | then return -0.04092068139087173;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.02398586804108403;  // std dev = 1,856, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( tempadvisedby(A, N), projectmember(P, N) )
%   | | then return 0.1283667607333296;  // std dev = 1,022, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( advisedby(A, Q) )
%   | | | then return 0.051053361775746514;  // std dev = 4,582, 86,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=47 */
%   | | | else return 0.03445325619153126;  // std dev = 4,790, 95,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=46 */


Predicates from source: ['inphase(person,prequals).', 'ta(course,person,quarter).', 'publication(title,person).', 'projectmember(project,person).', 'tempadvisedby(person,person).', 'advisedby(person,person).']

Starting fold 1

Target predicate: genre 

Mapping Results
   Knowledge compiling time   = 0.016196012496948242
   Generating paths time   = 2.589240312576294
   Generating mappings time   = 0.010332822799682617
   Possible mappings   = 145
   Finding best mapping   = 0.026539325714111328
   Total time   = 2.6423144340515137


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;true;workedunder(F, A).;false;true
1;true,false;workedunder(H, G).;false;false
1;false,false;workedunder(Q, A).;true;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
2;true,false,false;workedunder(L, J).;false;false
2;true;workedunder(F, G).;false;true
2;true,false;workedunder(I, H).;false;true
2;false,false;movie(P, A), workedunder(Q, A).;false;true
2;false,false,false;workedunder(R, A).;false;false
2;false;workedunder(M, A), workedunder(M, N).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false,true,true;movie(G, I).;false;false
3;false,true;workedunder(H, I).;true;false
3;false,false;workedunder(J, A).;true;true
3;false,false,false;workedunder(M, A).;false;false
3;false;movie(G, A), workedunder(H, A).;true;true
3;false,false,true;workedunder(J, K), movie(L, K).;false;false
4;;genre(A, B) :- workedunder(C, A).;true;true
4;true;workedunder(C, F), movie(G, F).;true;false
4;true,true;movie(G, C).;false;false
4;false,true;workedunder(J, L).;false;false
4;false,false;workedunder(M, A).;true;true
4;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
4;false;workedunder(J, A), movie(K, A).;true;true
4;false,false,true;workedunder(M, N), movie(P, N).;false;false
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;false;false
5;false,true,true;movie(M, J).;false;false
5;false,true;movie(H, I), workedunder(I, J).;true;false
5;false,false;workedunder(N, A).;true;true
5;false,false,false;workedunder(R, A), movie(S, R).;false;false
5;false;movie(H, A).;true;true
5;false,false,true;workedunder(N, P), movie(Q, P).;false;false
6;;genre(A, B) :- movie(G, E).;false;true
6;false;movie(P, A), workedunder(Q, A).;false;true
6;false,false;workedunder(R, A).;false;true
6;false,false,false;workedunder(S, A), movie(T, S).;false;false
7;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
7;true;workedunder(C, E).;false;false
7;false,true,true;movie(K, L).;false;false
7;false,true;movie(K, J).;true;false
7;false,false;movie(M, A), workedunder(N, A).;true;true
7;false,false,false;movie(P, A).;false;false
7;false;workedunder(J, A).;true;true
7;false,false,true;movie(M, N).;false;false
8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
8;true;movie(D, C).;false;false
8;false,true;movie(J, F).;false;true
8;false,false;workedunder(N, A), movie(P, N).;true;false
8;false;workedunder(E, A), workedunder(E, F).;true;true
8;false,true,false;movie(M, F).;false;false
8;false,false,true;workedunder(N, Q), movie(P, Q).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
9;true;workedunder(E, A), movie(F, E).;false;false
9;false,true;movie(J, I), workedunder(I, K).;false;true
9;false,false;workedunder(N, A), workedunder(N, P).;false;true
9;false,false,false;workedunder(Q, A).;false;false
9;false;workedunder(I, A).;true;true
9;false,true,false;movie(M, A).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.15795862733523683;  // std dev = 1,217, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.379670407154312;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11694812838381761;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.2951257630772826;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.10540117602192779;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.07087859096812653;  // std dev = 0,782, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(C, E) )
%   | then return 0.22502449270940558;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.10219004323816935;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.18821560123839973;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09318816756258273;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.16112756551602878;  // std dev = 1,49e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08560629730701765;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.351932
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.112 seconds
Total inference time: 0.737 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,false': [0.0, 11, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [5.27e-09, 11, 0], 'true,true': [4.21e-08, 0, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(D, E)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A)'}, {'true,true': [0.0, 0, 11], 'false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.217, 11, 11]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A)', 'false,false,false': 'workedunder(I, A), movie(J, I)', 'false': 'workedunder(F, A), movie(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false': 'movie(F, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)'}, {'true,true': [0.0, 0, 11], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true,true': [7.45e-09, 11, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.782, 11, 11]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(F, A)', 'true': 'workedunder(C, E)', 'false,false': 'movie(G, A), workedunder(H, A)', 'false,false,false': 'movie(I, A)'}, {'true,true': [0.0, 0, 11], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [3.73e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'true': 'movie(D, C)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [7.45e-09, 0, 11], 'true,false': [0.0, 0, 0], 'false,false,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(G, A)', 'true': 'workedunder(E, A), movie(F, E)', 'false,false': 'workedunder(H, A), workedunder(H, I)', 'false,false,false': 'workedunder(J, A)'}, {'true,true': [1.49e-08, 0, 11], 'false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999958, nan], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.17847162811629388, nan], 'true': [1.6148698540002277e-16, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [-2.0185873175002846e-16, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'true': [-2.0185873175002846e-16, nan], 'false,false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18]}, {'': [0.06736877561142736, nan]}, {'': [-4.0371746350005693e-17, -2.523234146875356e-18], 'true': [-4.0371746350005693e-17, nan], 'true,true': [-4.0371746350005693e-17, nan], 'false,false': [nan, -2.523234146875356e-18], 'false,false,false': [nan, -2.523234146875356e-18], 'false': [nan, -2.523234146875356e-18]}, {'': [-2.0185873175002847e-17, 5.046468293750712e-18], 'false': [5.046468293750712e-18, nan], 'true': [-2.0185873175002847e-17, nan], 'false,true,true': [5.046468293750712e-18, nan], 'false,true': [5.046468293750712e-18, nan]}, {'': [0.02780443610551242, nan]}, {'': [-2.0185873175002847e-17, 1.261617073437678e-18], 'false': [nan, 1.261617073437678e-18], 'true': [-2.0185873175002847e-17, nan], 'false,false': [nan, 1.261617073437678e-18], 'false,false,false': [1.261617073437678e-18, nan]}, {'': [5.046468293750712e-18, 0.0], 'false': [nan, 0.0], 'true': [5.046468293750712e-18, nan], 'false,false': [nan, 0.0]}, {'': [2.0185873175002847e-17, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'true': [2.0185873175002847e-17, nan], 'false,false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.169 seconds
Total inference time: 1.099 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: transfer, Time: 00:05:35
{'AUC PR': 0.8, 'AUC ROC': 0.875, 'Inference time': 1.099, 'Recall': 1.0, 'Mapping results': {'Generating mappings time': 0.010332822799682617, 'Total time': 2.6423144340515137, 'Generating paths time': 2.589240312576294, 'Knowledge compiling time': 0.016196012496948242, 'Finding best mapping': 0.026539325714111328, 'Possible mappings': 145}, 'Parameter Learning results': {'AUC PR': 0.8, 'AUC ROC': 0.875, 'Inference time': 0.737, 'Recall': 1.0, 'CLL': -0.351932, 'Precision': [0.8, 0.5], 'F1': 0.888889, 'Learning time': 1.112}, 'CLL': -0.352709, 'Precision': [0.8, 0.5], 'F1': 0.888889, 'Learning time': 2.281}


Start learning from scratch in target domain

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.283 seconds
Total inference time: 0.664 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: scratch, Time: 00:05:38
{'AUC PR': 0.8, 'AUC ROC': 0.875, 'Inference time': 0.664, 'Recall': 1.0, 'CLL': -0.352709, 'Precision': [0.8, 0.5], 'F1': 0.888889, 'Learning time': 1.283}


Starting fold 2

Target predicate: genre 

Mapping Results
   Knowledge compiling time   = 0.03610038757324219
   Generating paths time   = 2.620077133178711
   Generating mappings time   = 0.010189056396484375
   Possible mappings   = 145
   Finding best mapping   = 0.027159929275512695
   Total time   = 2.693533420562744


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;true;workedunder(F, A).;false;true
1;true,false;workedunder(H, G).;false;false
1;false,false;workedunder(Q, A).;true;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
2;true,false,false;workedunder(L, J).;false;false
2;true;workedunder(F, G).;false;true
2;true,false;workedunder(I, H).;false;true
2;false,false;movie(P, A), workedunder(Q, A).;false;true
2;false,false,false;workedunder(R, A).;false;false
2;false;workedunder(M, A), workedunder(M, N).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false,true,true;movie(G, I).;false;false
3;false,true;workedunder(H, I).;true;false
3;false,false;workedunder(J, A).;true;true
3;false,false,false;workedunder(M, A).;false;false
3;false;movie(G, A), workedunder(H, A).;true;true
3;false,false,true;workedunder(J, K), movie(L, K).;false;false
4;;genre(A, B) :- workedunder(C, A).;true;true
4;true;workedunder(C, F), movie(G, F).;true;false
4;true,true;movie(G, C).;false;false
4;false,true;workedunder(J, L).;false;false
4;false,false;workedunder(M, A).;true;true
4;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
4;false;workedunder(J, A), movie(K, A).;true;true
4;false,false,true;workedunder(M, N), movie(P, N).;false;false
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;false;false
5;false,true,true;movie(M, J).;false;false
5;false,true;movie(H, I), workedunder(I, J).;true;false
5;false,false;workedunder(N, A).;true;true
5;false,false,false;workedunder(R, A), movie(S, R).;false;false
5;false;movie(H, A).;true;true
5;false,false,true;workedunder(N, P), movie(Q, P).;false;false
6;;genre(A, B) :- movie(G, E).;false;true
6;false;movie(P, A), workedunder(Q, A).;false;true
6;false,false;workedunder(R, A).;false;true
6;false,false,false;workedunder(S, A), movie(T, S).;false;false
7;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
7;true;workedunder(C, E).;false;false
7;false,true,true;movie(K, L).;false;false
7;false,true;movie(K, J).;true;false
7;false,false;movie(M, A), workedunder(N, A).;true;true
7;false,false,false;movie(P, A).;false;false
7;false;workedunder(J, A).;true;true
7;false,false,true;movie(M, N).;false;false
8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
8;true;movie(D, C).;false;false
8;false,true;movie(J, F).;false;true
8;false,false;workedunder(N, A), movie(P, N).;true;false
8;false;workedunder(E, A), workedunder(E, F).;true;true
8;false,true,false;movie(M, F).;false;false
8;false,false,true;workedunder(N, Q), movie(P, Q).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
9;true;workedunder(E, A), movie(F, E).;false;false
9;false,true;movie(J, I), workedunder(I, K).;false;true
9;false,false;workedunder(N, A), workedunder(N, P).;false;true
9;false,false,false;workedunder(Q, A).;false;false
9;false;workedunder(I, A).;true;true
9;false,true,false;movie(M, A).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.5123505661168763;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.16214040922766773;  // std dev = 1,528, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.34533087234248505;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11738067852967662;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.2640730309307144;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.10575522108695315;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.06828761491311085;  // std dev = 1,213, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(C, E) )
%   | then return 0.19374828807902636;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.10226385095097255;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.15723715925458953;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09324990797012657;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.13022469101534478;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08565865328184974;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.326947
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 2.298 seconds
Total inference time: 0.73 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,false': [0.0, 11, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [5.27e-09, 11, 0], 'true,true': [0.961, 1, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(D, E)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A)'}, {'true,true': [0.961, 1, 12], 'false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.528, 12, 12]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A)', 'false,false,false': 'workedunder(I, A), movie(J, I)', 'false': 'workedunder(F, A), movie(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false': 'movie(F, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)'}, {'true,true': [0.961, 1, 12], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 11, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.213, 12, 12]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(F, A)', 'true': 'workedunder(C, E)', 'false,false': 'movie(G, A), workedunder(H, A)', 'false,false,false': 'movie(I, A)'}, {'true,true': [0.961, 1, 12], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [5.27e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'true': 'movie(D, C)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false': [0.0, 0, 0], 'false,false,false': [7.45e-09, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(G, A)', 'true': 'workedunder(E, A), movie(F, E)', 'false,false': 'workedunder(H, A), workedunder(H, I)', 'false,false,false': 'workedunder(J, A)'}, {'true,true': [0.961, 1, 12], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999956, nan], 'true': [0.07100591715976314, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.19076867375623552, nan], 'true': [0.07100591715976333, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.07100591715976351, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'true': [0.07100591715976351, nan], 'false,false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18]}, {'': [0.09731751852547608, nan]}, {'': [0.07100591715976337, -2.523234146875356e-18], 'true': [0.07100591715976337, nan], 'true,true': [0.07100591715976337, nan], 'false,false': [nan, -2.523234146875356e-18], 'false,false,false': [nan, -2.523234146875356e-18], 'false': [nan, -2.523234146875356e-18]}, {'': [0.07100591715976332, 0.0], 'false': [0.0, nan], 'true': [0.07100591715976332, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.06134484954534902, nan]}, {'': [0.0710059171597633, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'true': [0.0710059171597633, nan], 'false,false': [nan, 2.523234146875356e-18], 'false,false,false': [2.523234146875356e-18, nan]}, {'': [0.07100591715976332, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'true': [0.07100591715976332, nan], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.07100591715976332, 0.0], 'false': [nan, 0.0], 'true': [0.07100591715976332, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.588 seconds
Total inference time: 0.581 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: transfer, Time: 00:05:46
{'AUC PR': 0.813953, 'AUC ROC': 0.885714, 'Inference time': 0.581, 'Recall': 1.0, 'Mapping results': {'Generating mappings time': 0.010189056396484375, 'Total time': 2.693533420562744, 'Generating paths time': 2.620077133178711, 'Knowledge compiling time': 0.03610038757324219, 'Finding best mapping': 0.027159929275512695, 'Possible mappings': 145}, 'Parameter Learning results': {'AUC PR': 0.813953, 'AUC ROC': 0.885714, 'Inference time': 0.73, 'Recall': 1.0, 'CLL': -0.326947, 'Precision': [0.813953, 0.5], 'F1': 0.897436, 'Learning time': 2.298}, 'CLL': -0.320018, 'Precision': [0.813953, 0.5], 'F1': 0.897436, 'Learning time': 3.886}


Start learning from scratch in target domain

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( director(A) )
%   then return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.426 seconds
Total inference time: 0.517 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: scratch, Time: 00:05:48
{'AUC PR': 0.813953, 'AUC ROC': 0.885714, 'Inference time': 0.517, 'Recall': 1.0, 'CLL': -0.320018, 'Precision': [0.813953, 0.5], 'F1': 0.897436, 'Learning time': 1.426}


Starting fold 3

Target predicate: genre 

Mapping Results
   Knowledge compiling time   = 0.01681828498840332
   Generating paths time   = 2.5680723190307617
   Generating mappings time   = 0.01021718978881836
   Possible mappings   = 145
   Finding best mapping   = 0.026741504669189453
   Total time   = 2.621856689453125


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;true;workedunder(F, A).;false;true
1;true,false;workedunder(H, G).;false;false
1;false,false;workedunder(Q, A).;true;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
2;true,false,false;workedunder(L, J).;false;false
2;true;workedunder(F, G).;false;true
2;true,false;workedunder(I, H).;false;true
2;false,false;movie(P, A), workedunder(Q, A).;false;true
2;false,false,false;workedunder(R, A).;false;false
2;false;workedunder(M, A), workedunder(M, N).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false,true,true;movie(G, I).;false;false
3;false,true;workedunder(H, I).;true;false
3;false,false;workedunder(J, A).;true;true
3;false,false,false;workedunder(M, A).;false;false
3;false;movie(G, A), workedunder(H, A).;true;true
3;false,false,true;workedunder(J, K), movie(L, K).;false;false
4;;genre(A, B) :- workedunder(C, A).;true;true
4;true;workedunder(C, F), movie(G, F).;true;false
4;true,true;movie(G, C).;false;false
4;false,true;workedunder(J, L).;false;false
4;false,false;workedunder(M, A).;true;true
4;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
4;false;workedunder(J, A), movie(K, A).;true;true
4;false,false,true;workedunder(M, N), movie(P, N).;false;false
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;false;false
5;false,true,true;movie(M, J).;false;false
5;false,true;movie(H, I), workedunder(I, J).;true;false
5;false,false;workedunder(N, A).;true;true
5;false,false,false;workedunder(R, A), movie(S, R).;false;false
5;false;movie(H, A).;true;true
5;false,false,true;workedunder(N, P), movie(Q, P).;false;false
6;;genre(A, B) :- movie(G, E).;false;true
6;false;movie(P, A), workedunder(Q, A).;false;true
6;false,false;workedunder(R, A).;false;true
6;false,false,false;workedunder(S, A), movie(T, S).;false;false
7;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
7;true;workedunder(C, E).;false;false
7;false,true,true;movie(K, L).;false;false
7;false,true;movie(K, J).;true;false
7;false,false;movie(M, A), workedunder(N, A).;true;true
7;false,false,false;movie(P, A).;false;false
7;false;workedunder(J, A).;true;true
7;false,false,true;movie(M, N).;false;false
8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
8;true;movie(D, C).;false;false
8;false,true;movie(J, F).;false;true
8;false,false;workedunder(N, A), movie(P, N).;true;false
8;false;workedunder(E, A), workedunder(E, F).;true;true
8;false,true,false;movie(M, F).;false;false
8;false,false,true;workedunder(N, Q), movie(P, Q).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
9;true;workedunder(E, A), movie(F, E).;false;false
9;false,true;movie(J, I), workedunder(I, K).;false;true
9;false,false;workedunder(N, A), workedunder(N, P).;false;true
9;false,false,false;workedunder(Q, A).;false;false
9;false;workedunder(I, A).;true;true
9;false,true,false;movie(M, A).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.39468718495146987;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.17931826699808692;  // std dev = 2,508, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.25878603914901577;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11917207682255643;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.19419056870327844;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.1072191863590061;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.07174776700599174;  // std dev = 2,344, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(C, E) )
%   | then return 0.1287179345000556;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.10387075057951986;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.09801412171314201;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09459240283509128;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.07525937296520657;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08679586469732713;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.282685
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.294 seconds
Total inference time: 0.919 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,false': [0.0, 11, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [5.27e-09, 11, 0], 'true,true': [2.245, 7, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(D, E)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A)'}, {'true,true': [2.245, 7, 18], 'false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [2.508, 18, 18]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A)', 'false,false,false': 'workedunder(I, A), movie(J, I)', 'false': 'workedunder(F, A), movie(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false': 'movie(F, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)'}, {'true,true': [2.245, 7, 18], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 11, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'false': [0.0, 0, 0], 'true': [2.344, 18, 18]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(F, A)', 'true': 'workedunder(C, E)', 'false,false': 'movie(G, A), workedunder(H, A)', 'false,false,false': 'movie(I, A)'}, {'true,true': [2.245, 7, 18], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [3.73e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'true': 'movie(D, C)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false': [0.0, 0, 0], 'false,false,false': [3.73e-09, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(G, A)', 'true': 'workedunder(E, A), movie(F, E)', 'false,false': 'workedunder(H, A), workedunder(H, I)', 'false,false,false': 'workedunder(J, A)'}, {'true,true': [2.245, 7, 18], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2499999999999995, nan], 'true': [0.2015999999999996, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.22099738300738728, nan], 'true': [0.2016000000000001, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.20160000000000053, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'true': [0.20160000000000053, nan], 'false,false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18]}, {'': [0.1747217246282939, nan]}, {'': [0.20159999999999975, 2.523234146875356e-18], 'true': [0.20159999999999975, nan], 'true,true': [0.20159999999999975, nan], 'false,false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18]}, {'': [0.20160000000000003, 0.0], 'false': [0.0, nan], 'true': [0.20160000000000003, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.15258579265939826, nan]}, {'': [0.20160000000000003, 1.261617073437678e-18], 'false': [nan, 1.261617073437678e-18], 'true': [0.20160000000000003, nan], 'false,false': [nan, 1.261617073437678e-18], 'false,false,false': [1.261617073437678e-18, nan]}, {'': [0.2016, 1.261617073437678e-18], 'false': [nan, 1.261617073437678e-18], 'true': [0.2016, nan], 'false,false': [nan, 1.261617073437678e-18]}, {'': [0.20160000000000003, 0.0], 'false': [nan, 0.0], 'true': [0.20160000000000003, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.567 seconds
Total inference time: 1.445 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: transfer, Time: 00:05:57
{'AUC PR': 0.935484, 'AUC ROC': 0.965517, 'Inference time': 1.445, 'Recall': 1.0, 'Mapping results': {'Generating mappings time': 0.01021718978881836, 'Total time': 2.621856689453125, 'Generating paths time': 2.5680723190307617, 'Knowledge compiling time': 0.01681828498840332, 'Finding best mapping': 0.026741504669189453, 'Possible mappings': 145}, 'Parameter Learning results': {'AUC PR': 0.935484, 'AUC ROC': 0.965517, 'Inference time': 0.919, 'Recall': 1.0, 'CLL': -0.282685, 'Precision': [0.935484, 0.5], 'F1': 0.966667, 'Learning time': 1.294}, 'CLL': -0.264596, 'Precision': [0.935484, 0.5], 'F1': 0.966667, 'Learning time': 2.8609999999999998}


Start learning from scratch in target domain

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.563 seconds
Total inference time: 0.846 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: scratch, Time: 00:05:59
{'AUC PR': 0.935484, 'AUC ROC': 0.965517, 'Inference time': 0.846, 'Recall': 1.0, 'CLL': -0.264596, 'Precision': [0.935484, 0.5], 'F1': 0.966667, 'Learning time': 1.563}


Starting fold 4

Target predicate: genre 

Mapping Results
   Knowledge compiling time   = 0.01542043685913086
   Generating paths time   = 2.5378737449645996
   Generating mappings time   = 0.010219573974609375
   Possible mappings   = 145
   Finding best mapping   = 0.02654719352722168
   Total time   = 2.590070962905884


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;true;workedunder(F, A).;false;true
1;true,false;workedunder(H, G).;false;false
1;false,false;workedunder(Q, A).;true;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
2;true,false,false;workedunder(L, J).;false;false
2;true;workedunder(F, G).;false;true
2;true,false;workedunder(I, H).;false;true
2;false,false;movie(P, A), workedunder(Q, A).;false;true
2;false,false,false;workedunder(R, A).;false;false
2;false;workedunder(M, A), workedunder(M, N).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false,true,true;movie(G, I).;false;false
3;false,true;workedunder(H, I).;true;false
3;false,false;workedunder(J, A).;true;true
3;false,false,false;workedunder(M, A).;false;false
3;false;movie(G, A), workedunder(H, A).;true;true
3;false,false,true;workedunder(J, K), movie(L, K).;false;false
4;;genre(A, B) :- workedunder(C, A).;true;true
4;true;workedunder(C, F), movie(G, F).;true;false
4;true,true;movie(G, C).;false;false
4;false,true;workedunder(J, L).;false;false
4;false,false;workedunder(M, A).;true;true
4;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
4;false;workedunder(J, A), movie(K, A).;true;true
4;false,false,true;workedunder(M, N), movie(P, N).;false;false
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;false;false
5;false,true,true;movie(M, J).;false;false
5;false,true;movie(H, I), workedunder(I, J).;true;false
5;false,false;workedunder(N, A).;true;true
5;false,false,false;workedunder(R, A), movie(S, R).;false;false
5;false;movie(H, A).;true;true
5;false,false,true;workedunder(N, P), movie(Q, P).;false;false
6;;genre(A, B) :- movie(G, E).;false;true
6;false;movie(P, A), workedunder(Q, A).;false;true
6;false,false;workedunder(R, A).;false;true
6;false,false,false;workedunder(S, A), movie(T, S).;false;false
7;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
7;true;workedunder(C, E).;false;false
7;false,true,true;movie(K, L).;false;false
7;false,true;movie(K, J).;true;false
7;false,false;movie(M, A), workedunder(N, A).;true;true
7;false,false,false;movie(P, A).;false;false
7;false;workedunder(J, A).;true;true
7;false,false,true;movie(M, N).;false;false
8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
8;true;movie(D, C).;false;false
8;false,true;movie(J, F).;false;true
8;false,false;workedunder(N, A), movie(P, N).;true;false
8;false;workedunder(E, A), workedunder(E, F).;true;true
8;false,true,false;movie(M, F).;false;false
8;false,false,true;workedunder(N, Q), movie(P, Q).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
9;true;workedunder(E, A), movie(F, E).;false;false
9;false,true;movie(J, I), workedunder(I, K).;false;true
9;false,false;workedunder(N, A), workedunder(N, P).;false;true
9;false,false,false;workedunder(Q, A).;false;false
9;false;workedunder(I, A).;true;true
9;false,true,false;movie(M, A).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.17153349828640083;  // std dev = 1,076, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.29258794850627473;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11835732849170555;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.220130347586957;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.10655381774489354;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.0684628867602125;  // std dev = 0,965, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(C, E) )
%   | then return 0.1518695309834887;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.10298152613232209;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.1180601174147919;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0938498914246289;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.09302006247845614;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08616718168199279;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.314344
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 2.459 seconds
Total inference time: 0.933 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,false': [0.0, 3, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 3, 0], 'true,true': [0.894, 1, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(D, E)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A)'}, {'true,true': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,false,false': [2.63e-09, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.076, 4, 4]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A)', 'false,false,false': 'workedunder(I, A), movie(J, I)', 'false': 'workedunder(F, A), movie(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false': 'movie(F, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)'}, {'true,true': [0.894, 1, 4], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 3, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.965, 4, 4]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(F, A)', 'true': 'workedunder(C, E)', 'false,false': 'movie(G, A), workedunder(H, A)', 'false,false,false': 'movie(I, A)'}, {'true,true': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'true': 'movie(D, C)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false': [0.0, 0, 0], 'false,false,false': [1.86e-09, 3, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(G, A)', 'true': 'workedunder(E, A), movie(F, E)', 'false,false': 'workedunder(H, A), workedunder(H, I)', 'false,false,false': 'workedunder(J, A)'}, {'true,true': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999986, nan], 'true': [0.15999999999999986, 0.0], 'true,false': [nan, 0.0]}, {'': [0.20948195373304385, nan], 'true': [0.16, 0.0], 'true,false': [0.0, nan]}, {'': [0.15999999999999998, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'true': [0.15999999999999998, nan], 'false,false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18]}, {'': [0.14475994169199063, nan]}, {'': [0.15999999999999998, 0.0], 'true': [0.15999999999999998, nan], 'true,true': [0.15999999999999998, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false': [nan, 0.0]}, {'': [0.16, 0.0], 'false': [0.0, nan], 'true': [0.16, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.11639242212082301, nan]}, {'': [0.16, 0.0], 'false': [nan, 0.0], 'true': [0.16, nan], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan]}, {'': [0.15999999999999998, 1.1564823173178713e-18], 'false': [nan, 1.1564823173178713e-18], 'true': [0.15999999999999998, nan], 'false,false': [nan, 1.1564823173178713e-18]}, {'': [0.16, -1.1564823173178713e-18], 'false': [nan, -1.1564823173178713e-18], 'true': [0.16, nan], 'false,false': [nan, -1.1564823173178713e-18], 'false,false,false': [nan, -1.1564823173178713e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.506 seconds
Total inference time: 0.722 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: transfer, Time: 00:06:08
{'AUC PR': 0.843137, 'AUC ROC': 0.906977, 'Inference time': 0.722, 'Recall': 1.0, 'Mapping results': {'Generating mappings time': 0.010219573974609375, 'Total time': 2.590070962905884, 'Generating paths time': 2.5378737449645996, 'Knowledge compiling time': 0.01542043685913086, 'Finding best mapping': 0.02654719352722168, 'Possible mappings': 145}, 'Parameter Learning results': {'AUC PR': 0.843137, 'AUC ROC': 0.906977, 'Inference time': 0.933, 'Recall': 1.0, 'CLL': -0.314344, 'Precision': [0.843137, 0.5], 'F1': 0.914894, 'Learning time': 2.459}, 'CLL': -0.300536, 'Precision': [0.843137, 0.5], 'F1': 0.914894, 'Learning time': 3.965}


Start learning from scratch in target domain

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 11.468 seconds
Total inference time: 0.45 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: scratch, Time: 00:06:20
{'AUC PR': 0.843137, 'AUC ROC': 0.906977, 'Inference time': 0.45, 'Recall': 1.0, 'CLL': -0.300536, 'Precision': [0.843137, 0.5], 'F1': 0.914894, 'Learning time': 11.468}


Starting fold 5

Target predicate: genre 

Mapping Results
   Knowledge compiling time   = 0.05018925666809082
   Generating paths time   = 2.3595495223999023
   Generating mappings time   = 0.010174989700317383
   Possible mappings   = 145
   Finding best mapping   = 0.026975631713867188
   Total time   = 2.4468984603881836


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;true;workedunder(F, A).;false;true
1;true,false;workedunder(H, G).;false;false
1;false,false;workedunder(Q, A).;true;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
2;true,false,false;workedunder(L, J).;false;false
2;true;workedunder(F, G).;false;true
2;true,false;workedunder(I, H).;false;true
2;false,false;movie(P, A), workedunder(Q, A).;false;true
2;false,false,false;workedunder(R, A).;false;false
2;false;workedunder(M, A), workedunder(M, N).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false,true,true;movie(G, I).;false;false
3;false,true;workedunder(H, I).;true;false
3;false,false;workedunder(J, A).;true;true
3;false,false,false;workedunder(M, A).;false;false
3;false;movie(G, A), workedunder(H, A).;true;true
3;false,false,true;workedunder(J, K), movie(L, K).;false;false
4;;genre(A, B) :- workedunder(C, A).;true;true
4;true;workedunder(C, F), movie(G, F).;true;false
4;true,true;movie(G, C).;false;false
4;false,true;workedunder(J, L).;false;false
4;false,false;workedunder(M, A).;true;true
4;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
4;false;workedunder(J, A), movie(K, A).;true;true
4;false,false,true;workedunder(M, N), movie(P, N).;false;false
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;false;false
5;false,true,true;movie(M, J).;false;false
5;false,true;movie(H, I), workedunder(I, J).;true;false
5;false,false;workedunder(N, A).;true;true
5;false,false,false;workedunder(R, A), movie(S, R).;false;false
5;false;movie(H, A).;true;true
5;false,false,true;workedunder(N, P), movie(Q, P).;false;false
6;;genre(A, B) :- movie(G, E).;false;true
6;false;movie(P, A), workedunder(Q, A).;false;true
6;false,false;workedunder(R, A).;false;true
6;false,false,false;workedunder(S, A), movie(T, S).;false;false
7;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
7;true;workedunder(C, E).;false;false
7;false,true,true;movie(K, L).;false;false
7;false,true;movie(K, J).;true;false
7;false,false;movie(M, A), workedunder(N, A).;true;true
7;false,false,false;movie(P, A).;false;false
7;false;workedunder(J, A).;true;true
7;false,false,true;movie(M, N).;false;false
8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
8;true;movie(D, C).;false;false
8;false,true;movie(J, F).;false;true
8;false,false;workedunder(N, A), movie(P, N).;true;false
8;false;workedunder(E, A), workedunder(E, F).;true;true
8;false,true,false;movie(M, F).;false;false
8;false,false,true;workedunder(N, Q), movie(P, Q).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
9;true;workedunder(E, A), movie(F, E).;false;false
9;false,true;movie(J, I), workedunder(I, K).;false;true
9;false,false;workedunder(N, A), workedunder(N, P).;false;true
9;false,false,false;workedunder(Q, A).;false;false
9;false;workedunder(I, A).;true;true
9;false,true,false;movie(M, A).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.15795862733523686;  // std dev = 0,519, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.379670407154312;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11694812838381759;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.29512576307728255;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.10540117602192783;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.07087859096812646;  // std dev = 0,333, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(C, E) )
%   | then return 0.2250244927094055;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.10219004323816935;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.18821560123839975;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09318816756258273;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.1611275655160288;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08560629730701763;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.304933
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 1.119 seconds
Total inference time: 0.84 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,false': [0.0, 2, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 2, 0], 'true,true': [0.0, 0, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(D, E)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A)'}, {'true,true': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.519, 2, 2]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A)', 'false,false,false': 'workedunder(I, A), movie(J, I)', 'false': 'workedunder(F, A), movie(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false': 'movie(F, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)'}, {'true,true': [0.0, 0, 2], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 2, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.333, 2, 2]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(F, A)', 'true': 'workedunder(C, E)', 'false,false': 'movie(G, A), workedunder(H, A)', 'false,false,false': 'movie(I, A)'}, {'true,true': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'true': 'movie(D, C)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false': [0.0, 0, 0], 'false,false,false': [0.0, 2, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(G, A)', 'true': 'workedunder(E, A), movie(F, E)', 'false,false': 'workedunder(H, A), workedunder(H, I)', 'false,false,false': 'workedunder(J, A)'}, {'true,true': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.25, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.17847162811629394, nan], 'true': [0.0, 0.0], 'true,false': [0.0, nan]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}, {'': [0.06736877561142736, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'true,true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false': [nan, 0.0]}, {'': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.0, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.02780443610551245, nan]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'true': [0.0, nan], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,260, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,170, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.299128
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.601 seconds
Total inference time: 0.423 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: transfer, Time: 00:06:26
{'AUC PR': 0.833333, 'AUC ROC': 0.9, 'Inference time': 0.423, 'Recall': 1.0, 'Mapping results': {'Generating mappings time': 0.010174989700317383, 'Total time': 2.4468984603881836, 'Generating paths time': 2.3595495223999023, 'Knowledge compiling time': 0.05018925666809082, 'Finding best mapping': 0.026975631713867188, 'Possible mappings': 145}, 'Parameter Learning results': {'AUC PR': 0.833333, 'AUC ROC': 0.9, 'Inference time': 0.84, 'Recall': 1.0, 'CLL': -0.304933, 'Precision': [0.833333, 0.5], 'F1': 0.909091, 'Learning time': 1.119}, 'CLL': -0.299128, 'Precision': [0.833333, 0.5], 'F1': 0.909091, 'Learning time': 1.72}


Start learning from scratch in target domain

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.331 seconds
Total inference time: 0.416 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: scratch, Time: 00:06:28
{'AUC PR': 0.5, 'AUC ROC': 0.5, 'Inference time': 0.416, 'Recall': 0.0, 'CLL': -1.052978, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 1.331}


Starting experiment #2 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.3343394112899885;  // std dev = 0,499, 21,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   else if ( advisedby(A, G), publication(H, G) )
%   | then if ( advisedby(I, G), publication(H, I) )
%   | | then if ( ta(J, I, K), ta(L, A, M) )
%   | | | then return 0.4735335504841277;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.36389606153629317;  // std dev = 4,663, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.28672036367094095;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.41134042446121344;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( publication(R, A) )
%   | | | then return 0.40360348055405776;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.26991364098186527;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( advisedby(A, F) )
%   | then return 0.24415759818152227;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( tempadvisedby(A, G), publication(C, G) )
%   | | then return 0.14573025403358983;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.38382549212882794;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, A, L), ta(M, J, N) )
%   | | | then return 0.40564015880039006;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.3135977252686114;  // std dev = 4,663, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.43201604470553195;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, P), projectmember(Q, P) )
%   | | then return 0.2003551026572654;  // std dev = 0,485, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.4158966988212668;  // std dev = 1,547, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.2981226912865668;  // std dev = 4,730, 90,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=44 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.25059978452298354;  // std dev = 0,496, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then return 0.190838102919142;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.256966986584703;  // std dev = 0,497, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( publication(J, A), advisedby(A, K) )
%   | then if ( tempadvisedby(L, K) )
%   | | then if ( publication(J, L) )
%   | | | then return 0.08778663062391663;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.27122499763335217;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.39369149181773244;  // std dev = 0,476, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, M), projectmember(N, M) )
%   | | then return 0.18204059565356132;  // std dev = 0,480, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( advisedby(A, P), tempadvisedby(Q, P) )
%   | | | then return 0.29976748555992905;  // std dev = 2,336, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.26032849279595094;  // std dev = 3,825, 59,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=30 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( publication(E, A), advisedby(A, F) )
%   | then if ( tempadvisedby(G, F) )
%   | | then return 0.17584803613324085;  // std dev = 0,496, 34,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | | else return 0.06476071863812165;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( ta(C, H, D), advisedby(H, I) )
%   | | then return 0.23960217457425934;  // std dev = 0,494, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | else if ( ta(C, J, K), advisedby(J, L) )
%   | | | then return 0.15420756731022733;  // std dev = 3,010, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.20673499236387533;  // std dev = 1,860, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( advisedby(A, M), projectmember(N, M) )
%   | then return 0.1685566006916681;  // std dev = 0,486, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( publication(P, A), advisedby(A, Q) )
%   | | then return 0.24183428527499004;  // std dev = 0,494, 49,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=27 */
%   | | else if ( publication(R, A), tempadvisedby(A, S) )
%   | | | then return 0.15065660984276588;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.22363125185227248;  // std dev = 4,283, 74,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=39 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then if ( publication(G, E), ta(H, F, I) )
%   | | then return 0.16272158635708453;  // std dev = 0,494, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | else return 0.08227180040179385;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.278428887076794;  // std dev = 1,140, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( advisedby(A, J), publication(K, A) )
%   | then if ( tempadvisedby(L, J) )
%   | | then if ( publication(K, L) )
%   | | | then return 0.021783857194308198;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.16693299521370414;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.25675865457280234;  // std dev = 0,475, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, M), projectmember(N, M) )
%   | | then return 0.2508490738107413;  // std dev = 1,094, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( advisedby(A, P), publication(Q, P) )
%   | | | then return 0.176967327119152;  // std dev = 2,857, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.15450902660214963;  // std dev = 5,172, 109,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=52 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C) )
%   then if ( tempadvisedby(D, C), publication(E, D) )
%   | then if ( publication(E, C), sameperson(A, D) )
%   | | then return 0.036297369080210085;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.09544373343519709;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | else if ( advisedby(F, C), publication(G, F) )
%   | | then return 0.20715325429568618;  // std dev = 0,490, 31,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   | | else if ( publication(H, C), ta(I, A, J) )
%   | | | then return 0.19502722328627775;  // std dev = 1,285, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.05671311037207895;  // std dev = 1,498, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   else if ( advisedby(A, K), publication(L, K) )
%   | then if ( advisedby(A, M), projectmember(N, M) )
%   | | then return 0.5925205912636454;  // std dev = 0,105, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(L, A), ta(P, A, Q) )
%   | | | then return 0.08331498919257757;  // std dev = 2,650, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | | else return 0.12457850203195389;  // std dev = 5,464, 122,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=64 */
%   | else return 0.09535867943894112;  // std dev = 0,491, 53,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=24 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), projectmember(D, C) )
%   then return 0.16392662499476823;  // std dev = 1,068, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( ta(E, A, F), advisedby(A, G) )
%   | then if ( advisedby(H, G), publication(I, H) )
%   | | then if ( ta(J, H, K), publication(I, G) )
%   | | | then return 0.1038051000385812;  // std dev = 3,232, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | | else return 0.03179085065174668;  // std dev = 2,720, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else return 0.1632584979026221;  // std dev = 1,111, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( publication(L, A), advisedby(A, M) )
%   | | then if ( publication(L, M) )
%   | | | then return 0.09317815209360991;  // std dev = 3,219, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | else return 0.19312621329802668;  // std dev = 1,549, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else if ( advisedby(A, N), projectmember(P, N) )
%   | | | then return 0.050782367576073816;  // std dev = 1,471, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09626175872259654;  // std dev = 5,700, 132,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=66 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.0783107131778219;  // std dev = 0,489, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then return 0.03142622404387487;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.06343329639527161;  // std dev = 0,492, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( tempadvisedby(A, J) )
%   | then if ( tempadvisedby(K, J), publication(L, K) )
%   | | then if ( ta(M, K, N) )
%   | | | then return -0.004925699175581522;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06706431693504583;  // std dev = 1,648, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return 0.168818148048346;  // std dev = 0,480, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else if ( advisedby(A, P) )
%   | | then if ( tempadvisedby(Q, P), ta(R, Q, S) )
%   | | | then return 0.09984872871370361;  // std dev = 3,016, 38,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=20 */
%   | | | else return 0.06660781216584544;  // std dev = 3,882, 62,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=33 */
%   | | else return 0.004974349409089594;  // std dev = 0,491, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then if ( ta(H, F, I), publication(G, E) )
%   | | then return 0.06043532182790261;  // std dev = 0,493, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | else return 0.0054822853233256535;  // std dev = 0,489, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.10409641301213995;  // std dev = 1,112, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( publication(J, A), tempadvisedby(A, K) )
%   | then if ( publication(J, K) )
%   | | then return -0.009418042699065418;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.09266599636376212;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tempadvisedby(A, L) )
%   | | then if ( tempadvisedby(M, L), publication(N, M) )
%   | | | then return 0.028572279899641;  // std dev = 1,848, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.08754679194874186;  // std dev = 3,366, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( publication(P, A), ta(Q, A, R) )
%   | | | then return 0.14580244004612394;  // std dev = 1,094, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.051399980302493355;  // std dev = 5,433, 122,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=62 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then return 0.0658774709367207;  // std dev = 0,464, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   else if ( ta(E, A, F) )
%   | then if ( ta(E, G, F), advisedby(G, H) )
%   | | then if ( sameperson(A, G) )
%   | | | then return 0.022678732104306328;  // std dev = 4,338, 78,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=36 */
%   | | | else return 0.30147015492854035;  // std dev = 0,890, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tempadvisedby(A, I), advisedby(J, I) )
%   | | | then return 0.020859816256899914;  // std dev = 2,885, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | | | else return -0.002939376047600296;  // std dev = 2,031, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | else if ( tempadvisedby(A, K) )
%   | | then if ( tempadvisedby(L, K), publication(M, L) )
%   | | | then return 0.027913038615809245;  // std dev = 1,980, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.1049553734384212;  // std dev = 1,921, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( advisedby(A, N) )
%   | | | then return 0.05183667880409943;  // std dev = 4,582, 86,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=47 */
%   | | | else return -0.008730872487340982;  // std dev = 1,702, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */


Predicates from source: ['inphase(person,prequals).', 'ta(course,person,quarter).', 'projectmember(project,person).', 'publication(title,person).', 'advisedby(person,person).', 'tempadvisedby(person,person).', 'sameperson(person,person).']

Starting fold 1

Target predicate: genre 

Mapping Results
   Knowledge compiling time   = 0.01698160171508789
   Generating paths time   = 2.535536050796509
   Generating mappings time   = 0.030477046966552734
   Possible mappings   = 433
   Finding best mapping   = 0.20305347442626953
   Total time   = 2.786055326461792


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)'] 

Transferred target predicate: genre 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false;workedunder(N, A).;true;true
0;false,false,false;movie(R, A).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,false,true;workedunder(N, P), movie(Q, P).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;true;workedunder(F, A).;false;true
1;true,false;workedunder(G, A), movie(C, G).;false;false
1;false,false;workedunder(P, A), movie(Q, P).;false;true
1;false,false,false;workedunder(R, A).;false;false
1;false;workedunder(H, A), movie(I, H).;true;true
1;false,true;workedunder(H, J), movie(I, J).;false;false
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false,true,true;movie(J, L).;false;false
2;false,true;workedunder(K, L).;true;false
2;false,false;workedunder(M, A), movie(N, M).;false;true
2;false,false,false;workedunder(P, A), workedunder(P, Q).;false;false
2;false;movie(J, A), workedunder(K, A).;true;true
3;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
3;true,false,false;workedunder(L, J).;false;false
3;true;workedunder(F, G).;false;true
3;true,false;workedunder(I, H).;false;true
3;false,false;movie(P, A), workedunder(Q, A).;false;true
3;false,false,false;movie(R, A), workedunder(S, A).;false;false
3;false;workedunder(M, A), movie(N, M).;false;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true;workedunder(E, F), movie(G, F).;true;false
4;false,true,true;movie(K, L).;false;false
4;true,true;movie(G, E).;false;false
4;false,true;workedunder(J, L).;true;false
4;false,false;workedunder(M, A), movie(N, M).;false;true
4;false,false,false;workedunder(P, A), movie(Q, P).;false;false
4;false;workedunder(J, A), movie(K, A).;true;true
5;;genre(A, B) :- workedunder(C, A).;true;true
5;true,false,false;movie(H, C).;false;false
5;true;workedunder(C, D), movie(E, D).;true;true
5;true,true;movie(E, C), workedunder(A, D).;false;false
5;true,false;workedunder(C, F), movie(G, F).;false;true
5;false;workedunder(K, A), movie(L, K).;true;false
5;false,true,false;movie(L, A).;false;false
5;false,true;workedunder(M, A), movie(N, M).;false;true
6;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
6;false,true,true;movie(I, G).;false;false
6;false,true;workedunder(G, H), movie(I, H).;true;false
6;false,false;movie(L, A), workedunder(M, A).;true;true
6;false,false,false;workedunder(N, A), movie(P, N).;false;false
6;false;workedunder(G, A).;true;true
6;false,false,true;movie(L, M).;false;false
7;;genre(A, B) :- workedunder(F, E).;false;true
7;false;workedunder(J, A).;true;true
7;false,true;workedunder(J, K), movie(L, K).;false;false
7;false,false;workedunder(P, A).;true;false
7;false,false,true;workedunder(P, Q).;false;false
8;;genre(A, B) :- workedunder(E, A).;true;true
8;true;workedunder(E, F), movie(G, F).;true;false
8;true,true;movie(G, E).;false;false
8;false,true;movie(J, K).;false;false
8;false,false;workedunder(L, A).;true;true
8;false,false,false;movie(P, A).;false;false
8;false;movie(J, A), workedunder(K, A).;true;true
8;false,false,true;workedunder(L, M), movie(N, M).;false;false
9;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
9;false,true;workedunder(A, G).;false;true
9;false,false;workedunder(K, A).;true;true
9;false,false,false;workedunder(N, A).;false;false
9;false;workedunder(H, G).;true;true
9;false,true,false;workedunder(I, A), workedunder(I, J).;false;false
9;false,false,true;workedunder(K, L), movie(M, L).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.2215250292763393;  // std dev = 1,566, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.5002131558403854;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(J, A), workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13637023346435795;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.377690957815415;  // std dev = 1,49e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12109080086507204;  // std dev = 9,13e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C), workedunder(A, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2937891549544798;  // std dev = 1,83e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10878311281985807;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.23670306731689034;  // std dev = 1,05e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A), workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09867673075523296;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.0531902063995878;  // std dev = 0,673, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.188355099893857;  // std dev = 1,05e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.09470437538696898;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.16123210930024068;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( workedunder(E, F) )
%   | then if ( workedunder(A, F) )
%   | | then return -0.08689060960147423;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352356
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.143 seconds
Total inference time: 0.774 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'true,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,false': [5.27e-09, 11, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [4.21e-08, 0, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.566, 11, 11]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(F, A), movie(G, F)', 'true': 'workedunder(D, E)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'movie(J, A), workedunder(K, A)'}, {'true,true': [0.0, 0, 11], 'false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A), movie(I, H)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false': 'workedunder(F, A), movie(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [9.13e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [1.49e-08, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false': 'workedunder(F, A), movie(G, F)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C), workedunder(A, D)'}, {'true,true,false': [1.83e-08, 0, 11], 'true,true,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.27e-09, 11, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A), workedunder(G, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)'}, {'false,false,false,false': [0.0, 11, 0], 'true': [1.05e-08, 0, 11], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.673, 11, 11]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A)', 'false,false,false': 'movie(I, A)', 'false': 'movie(F, A), workedunder(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [3.73e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [1.05e-08, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, F)', 'false,true': 'workedunder(A, F)'}, {'true': [0.0, 0, 11], 'false,true,true': [3.73e-09, 11, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999958, nan], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17]}, {'': [0.17847162811629388, nan], 'true': [1.6148698540002277e-16, 2.523234146875356e-18], 'true,false': [nan, 2.523234146875356e-18]}, {'': [0.11145008534151403, nan]}, {'': [0.0, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'true': [0.0, nan], 'false,false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18]}, {'': [2.0185873175002847e-17, 7.569702440626067e-18], 'true': [2.0185873175002847e-17, nan], 'true,true': [2.0185873175002847e-17, nan], 'false,false': [nan, 7.569702440626067e-18], 'false,false,false': [nan, 7.569702440626067e-18], 'false': [nan, 7.569702440626067e-18]}, {'': [3.027880976250427e-17, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'true': [3.027880976250427e-17, nan], 'true,true': [nan, 3.027880976250427e-17]}, {'': [1.0092936587501423e-17, 0.0], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}, {'': [0.020572612425164963, nan]}, {'': [1.0092936587501423e-17, 1.261617073437678e-18], 'true': [1.0092936587501423e-17, nan], 'true,true': [1.0092936587501423e-17, nan], 'false,false': [nan, 1.261617073437678e-18], 'false,false,false': [1.261617073437678e-18, nan], 'false': [nan, 1.261617073437678e-18]}, {'': [-5.046468293750712e-18, 1.261617073437678e-18], 'false': [1.261617073437678e-18, nan], 'false,true': [1.261617073437678e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.067 seconds
Total inference time: 0.582 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: transfer, Time: 00:49:02
{'AUC PR': 0.8, 'AUC ROC': 0.875, 'Inference time': 0.582, 'Recall': 1.0, 'Mapping results': {'Generating mappings time': 0.030477046966552734, 'Total time': 2.786055326461792, 'Generating paths time': 2.535536050796509, 'Knowledge compiling time': 0.01698160171508789, 'Finding best mapping': 0.20305347442626953, 'Possible mappings': 433}, 'Parameter Learning results': {'AUC PR': 0.8, 'AUC ROC': 0.875, 'Inference time': 0.774, 'Recall': 1.0, 'CLL': -0.352356, 'Precision': [0.8, 0.5], 'F1': 0.888889, 'Learning time': 1.143}, 'CLL': -0.352709, 'Precision': [0.8, 0.5], 'F1': 0.888889, 'Learning time': 2.21}


Start learning from scratch in target domain

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.269 seconds
Total inference time: 0.559 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: scratch, Time: 00:49:04
{'AUC PR': 0.8, 'AUC ROC': 0.875, 'Inference time': 0.559, 'Recall': 1.0, 'CLL': -0.352709, 'Precision': [0.8, 0.5], 'F1': 0.888889, 'Learning time': 1.269}


Starting fold 2

Target predicate: genre 

Mapping Results
   Knowledge compiling time   = 0.017986297607421875
   Generating paths time   = 2.559387445449829
   Generating mappings time   = 0.030495882034301758
   Possible mappings   = 433
   Finding best mapping   = 0.2549552917480469
   Total time   = 2.862833261489868


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)'] 

Transferred target predicate: genre 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false;workedunder(N, A).;true;true
0;false,false,false;movie(R, A).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,false,true;workedunder(N, P), movie(Q, P).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;true;workedunder(F, A).;false;true
1;true,false;workedunder(G, A), movie(C, G).;false;false
1;false,false;workedunder(P, A), movie(Q, P).;false;true
1;false,false,false;workedunder(R, A).;false;false
1;false;workedunder(H, A), movie(I, H).;true;true
1;false,true;workedunder(H, J), movie(I, J).;false;false
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false,true,true;movie(J, L).;false;false
2;false,true;workedunder(K, L).;true;false
2;false,false;workedunder(M, A), movie(N, M).;false;true
2;false,false,false;workedunder(P, A), workedunder(P, Q).;false;false
2;false;movie(J, A), workedunder(K, A).;true;true
3;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
3;true,false,false;workedunder(L, J).;false;false
3;true;workedunder(F, G).;false;true
3;true,false;workedunder(I, H).;false;true
3;false,false;movie(P, A), workedunder(Q, A).;false;true
3;false,false,false;movie(R, A), workedunder(S, A).;false;false
3;false;workedunder(M, A), movie(N, M).;false;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true;workedunder(E, F), movie(G, F).;true;false
4;false,true,true;movie(K, L).;false;false
4;true,true;movie(G, E).;false;false
4;false,true;workedunder(J, L).;true;false
4;false,false;workedunder(M, A), movie(N, M).;false;true
4;false,false,false;workedunder(P, A), movie(Q, P).;false;false
4;false;workedunder(J, A), movie(K, A).;true;true
5;;genre(A, B) :- workedunder(C, A).;true;true
5;true,false,false;movie(H, C).;false;false
5;true;workedunder(C, D), movie(E, D).;true;true
5;true,true;movie(E, C), workedunder(A, D).;false;false
5;true,false;workedunder(C, F), movie(G, F).;false;true
5;false;workedunder(K, A), movie(L, K).;true;false
5;false,true,false;movie(L, A).;false;false
5;false,true;workedunder(M, A), movie(N, M).;false;true
6;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
6;false,true,true;movie(I, G).;false;false
6;false,true;workedunder(G, H), movie(I, H).;true;false
6;false,false;movie(L, A), workedunder(M, A).;true;true
6;false,false,false;workedunder(N, A), movie(P, N).;false;false
6;false;workedunder(G, A).;true;true
6;false,false,true;movie(L, M).;false;false
7;;genre(A, B) :- workedunder(F, E).;false;true
7;false;workedunder(J, A).;true;true
7;false,true;workedunder(J, K), movie(L, K).;false;false
7;false,false;workedunder(P, A).;true;false
7;false,false,true;workedunder(P, Q).;false;false
8;;genre(A, B) :- workedunder(E, A).;true;true
8;true;workedunder(E, F), movie(G, F).;true;false
8;true,true;movie(G, E).;false;false
8;false,true;movie(J, K).;false;false
8;false,false;workedunder(L, A).;true;true
8;false,false,false;movie(P, A).;false;false
8;false;movie(J, A), workedunder(K, A).;true;true
8;false,false,true;workedunder(L, M), movie(N, M).;false;false
9;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
9;false,true;workedunder(A, G).;false;true
9;false,false;workedunder(K, A).;true;true
9;false,false,false;workedunder(N, A).;false;false
9;false;workedunder(H, G).;true;true
9;false,true,false;workedunder(I, A), workedunder(I, J).;false;false
9;false,false,true;workedunder(K, L), movie(M, L).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.22604488330790526;  // std dev = 1,802, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.45675549767123047;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(J, A), workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13690342743409517;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.3433050670813882;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12151573373300312;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C), workedunder(A, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2626624083339769;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10912890140512534;  // std dev = 9,13e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.20644729228399653;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A), workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09896312453850857;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.048691730049793776;  // std dev = 1,147, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.1576002994374002;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.09456994783375096;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.1304975833062753;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, F) )
%   | then if ( workedunder(A, F) )
%   | | then return -0.08677686257721116;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.327349
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.232 seconds
Total inference time: 0.968 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,false': [5.27e-09, 11, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.802, 12, 12]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(F, A), movie(G, F)', 'true': 'workedunder(D, E)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'movie(J, A), workedunder(K, A)'}, {'true,true': [0.961, 1, 12], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A), movie(I, H)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false': 'workedunder(F, A), movie(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false': 'workedunder(F, A), movie(G, F)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C), workedunder(A, D)'}, {'true,true,false': [0.961, 1, 12], 'true,true,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [9.13e-09, 11, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A), workedunder(G, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)'}, {'false,false,false,false': [5.27e-09, 11, 0], 'true': [0.961, 1, 12], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.147, 12, 12]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A)', 'false,false,false': 'movie(I, A)', 'false': 'movie(F, A), workedunder(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [5.27e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, F)', 'false,true': 'workedunder(A, F)'}, {'true': [0.961, 1, 12], 'false,true,true': [0.0, 11, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999956, nan], 'true': [0.07100591715976314, -1.0092936587501423e-17]}, {'': [0.19076867375623552, nan], 'true': [0.07100591715976333, 2.523234146875356e-18], 'true,false': [nan, 2.523234146875356e-18]}, {'': [0.13533629047183346, nan]}, {'': [0.0710059171597634, -7.569702440626067e-18], 'false': [nan, -7.569702440626067e-18], 'true': [0.0710059171597634, nan], 'false,false': [nan, -7.569702440626067e-18], 'false,false,false': [nan, -7.569702440626067e-18]}, {'': [0.07100591715976344, 2.523234146875356e-18], 'true': [0.07100591715976344, nan], 'true,true': [0.07100591715976344, nan], 'false,false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18]}, {'': [0.07100591715976337, 7.569702440626067e-18], 'false': [nan, 7.569702440626067e-18], 'true': [0.07100591715976337, nan], 'true,true': [nan, 0.07100591715976337]}, {'': [0.0710059171597633, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18]}, {'': [0.054851004889959636, nan]}, {'': [0.07100591715976329, 2.523234146875356e-18], 'true': [0.07100591715976329, nan], 'true,true': [0.07100591715976329, nan], 'false,false': [nan, 2.523234146875356e-18], 'false,false,false': [2.523234146875356e-18, nan], 'false': [nan, 2.523234146875356e-18]}, {'': [0.07100591715976332, -2.523234146875356e-18], 'false': [-2.523234146875356e-18, nan], 'false,true': [-2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.338 seconds
Total inference time: 0.568 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: transfer, Time: 00:49:11
{'AUC PR': 0.813953, 'AUC ROC': 0.885714, 'Inference time': 0.568, 'Recall': 1.0, 'Mapping results': {'Generating mappings time': 0.030495882034301758, 'Total time': 2.862833261489868, 'Generating paths time': 2.559387445449829, 'Knowledge compiling time': 0.017986297607421875, 'Finding best mapping': 0.2549552917480469, 'Possible mappings': 433}, 'Parameter Learning results': {'AUC PR': 0.813953, 'AUC ROC': 0.885714, 'Inference time': 0.968, 'Recall': 1.0, 'CLL': -0.327349, 'Precision': [0.813953, 0.5], 'F1': 0.897436, 'Learning time': 1.232}, 'CLL': -0.320018, 'Precision': [0.813953, 0.5], 'F1': 0.897436, 'Learning time': 2.5700000000000003}


Start learning from scratch in target domain

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.379 seconds
Total inference time: 0.585 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: scratch, Time: 00:49:14
{'AUC PR': 0.813953, 'AUC ROC': 0.885714, 'Inference time': 0.585, 'Recall': 1.0, 'CLL': -0.320018, 'Precision': [0.813953, 0.5], 'F1': 0.897436, 'Learning time': 1.379}


Starting fold 3

Target predicate: genre 

Mapping Results
   Knowledge compiling time   = 0.018511533737182617
   Generating paths time   = 2.5253448486328125
   Generating mappings time   = 0.030712366104125977
   Possible mappings   = 433
   Finding best mapping   = 0.20145463943481445
   Total time   = 2.776028871536255


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)'] 

Transferred target predicate: genre 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false;workedunder(N, A).;true;true
0;false,false,false;movie(R, A).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,false,true;workedunder(N, P), movie(Q, P).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;true;workedunder(F, A).;false;true
1;true,false;workedunder(G, A), movie(C, G).;false;false
1;false,false;workedunder(P, A), movie(Q, P).;false;true
1;false,false,false;workedunder(R, A).;false;false
1;false;workedunder(H, A), movie(I, H).;true;true
1;false,true;workedunder(H, J), movie(I, J).;false;false
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false,true,true;movie(J, L).;false;false
2;false,true;workedunder(K, L).;true;false
2;false,false;workedunder(M, A), movie(N, M).;false;true
2;false,false,false;workedunder(P, A), workedunder(P, Q).;false;false
2;false;movie(J, A), workedunder(K, A).;true;true
3;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
3;true,false,false;workedunder(L, J).;false;false
3;true;workedunder(F, G).;false;true
3;true,false;workedunder(I, H).;false;true
3;false,false;movie(P, A), workedunder(Q, A).;false;true
3;false,false,false;movie(R, A), workedunder(S, A).;false;false
3;false;workedunder(M, A), movie(N, M).;false;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true;workedunder(E, F), movie(G, F).;true;false
4;false,true,true;movie(K, L).;false;false
4;true,true;movie(G, E).;false;false
4;false,true;workedunder(J, L).;true;false
4;false,false;workedunder(M, A), movie(N, M).;false;true
4;false,false,false;workedunder(P, A), movie(Q, P).;false;false
4;false;workedunder(J, A), movie(K, A).;true;true
5;;genre(A, B) :- workedunder(C, A).;true;true
5;true,false,false;movie(H, C).;false;false
5;true;workedunder(C, D), movie(E, D).;true;true
5;true,true;movie(E, C), workedunder(A, D).;false;false
5;true,false;workedunder(C, F), movie(G, F).;false;true
5;false;workedunder(K, A), movie(L, K).;true;false
5;false,true,false;movie(L, A).;false;false
5;false,true;workedunder(M, A), movie(N, M).;false;true
6;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
6;false,true,true;movie(I, G).;false;false
6;false,true;workedunder(G, H), movie(I, H).;true;false
6;false,false;movie(L, A), workedunder(M, A).;true;true
6;false,false,false;workedunder(N, A), movie(P, N).;false;false
6;false;workedunder(G, A).;true;true
6;false,false,true;movie(L, M).;false;false
7;;genre(A, B) :- workedunder(F, E).;false;true
7;false;workedunder(J, A).;true;true
7;false,true;workedunder(J, K), movie(L, K).;false;false
7;false,false;workedunder(P, A).;true;false
7;false,false,true;workedunder(P, Q).;false;false
8;;genre(A, B) :- workedunder(E, A).;true;true
8;true;workedunder(E, F), movie(G, F).;true;false
8;true,true;movie(G, E).;false;false
8;false,true;movie(J, K).;false;false
8;false,false;workedunder(L, A).;true;true
8;false,false,false;movie(P, A).;false;false
8;false;movie(J, A), workedunder(K, A).;true;true
8;false,false,true;workedunder(L, M), movie(N, M).;false;false
9;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
9;false,true;workedunder(A, G).;false;true
9;false,false;workedunder(K, A).;true;true
9;false,false,false;workedunder(N, A).;false;false
9;false;workedunder(H, G).;true;true
9;false,true,false;workedunder(I, A), workedunder(I, J).;false;false
9;false,false,true;workedunder(K, L), movie(M, L).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.23976942954603;  // std dev = 2,646, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.34003398980794736;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(J, A), workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13853322814260766;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.25734494947429226;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12281276528082398;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C), workedunder(A, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.19310437536269215;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11018309181253085;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.1453641726202693;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A), workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09983535026065292;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.04870888547489671;  // std dev = 2,313, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.09874843404255991;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.09533378229674382;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.07580645260541768;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, F) )
%   | then if ( workedunder(A, F) )
%   | | then return -0.08742287660565938;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.283226
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.796 seconds
Total inference time: 0.833 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,false': [5.27e-09, 11, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [2.646, 18, 18]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(F, A), movie(G, F)', 'true': 'workedunder(D, E)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'movie(J, A), workedunder(K, A)'}, {'true,true': [2.245, 7, 18], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A), movie(I, H)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false': 'workedunder(F, A), movie(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false': 'workedunder(F, A), movie(G, F)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C), workedunder(A, D)'}, {'true,true,false': [2.245, 7, 18], 'true,true,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.27e-09, 11, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A), workedunder(G, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)'}, {'false,false,false,false': [0.0, 11, 0], 'true': [2.245, 7, 18], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [2.313, 18, 18]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A)', 'false,false,false': 'movie(I, A)', 'false': 'movie(F, A), workedunder(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, F)', 'false,true': 'workedunder(A, F)'}, {'true': [2.245, 7, 18], 'false,true,true': [0.0, 11, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2499999999999995, nan], 'true': [0.2015999999999996, -1.0092936587501423e-17]}, {'': [0.22099738300738728, nan], 'true': [0.2016000000000001, 2.523234146875356e-18], 'true,false': [nan, 2.523234146875356e-18]}, {'': [0.1945443430451362, nan]}, {'': [0.20160000000000022, -5.046468293750712e-18], 'false': [nan, -5.046468293750712e-18], 'true': [0.20160000000000022, nan], 'false,false': [nan, -5.046468293750712e-18], 'false,false,false': [nan, -5.046468293750712e-18]}, {'': [0.20159999999999997, 2.523234146875356e-18], 'true': [0.20159999999999997, nan], 'true,true': [0.20159999999999997, nan], 'false,false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18]}, {'': [0.2016, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'true': [0.2016, nan], 'true,true': [nan, 0.2016]}, {'': [0.2016000000000001, -3.784851220313033e-18], 'false': [nan, -3.784851220313033e-18], 'false,false': [nan, -3.784851220313033e-18], 'false,false,false': [nan, -3.784851220313033e-18]}, {'': [0.14861460968330292, nan]}, {'': [0.2015999999999999, -3.784851220313033e-18], 'true': [0.2015999999999999, nan], 'true,true': [0.2015999999999999, nan], 'false,false': [nan, -3.784851220313033e-18], 'false,false,false': [-3.784851220313033e-18, nan], 'false': [nan, -3.784851220313033e-18]}, {'': [0.2016, -2.523234146875356e-18], 'false': [-2.523234146875356e-18, nan], 'false,true': [-2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.424 seconds
Total inference time: 0.549 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: transfer, Time: 00:49:22
{'AUC PR': 0.935484, 'AUC ROC': 0.965517, 'Inference time': 0.549, 'Recall': 1.0, 'Mapping results': {'Generating mappings time': 0.030712366104125977, 'Total time': 2.776028871536255, 'Generating paths time': 2.5253448486328125, 'Knowledge compiling time': 0.018511533737182617, 'Finding best mapping': 0.20145463943481445, 'Possible mappings': 433}, 'Parameter Learning results': {'AUC PR': 0.935484, 'AUC ROC': 0.965517, 'Inference time': 0.833, 'Recall': 1.0, 'CLL': -0.283226, 'Precision': [0.935484, 0.5], 'F1': 0.966667, 'Learning time': 1.796}, 'CLL': -0.264596, 'Precision': [0.935484, 0.5], 'F1': 0.966667, 'Learning time': 3.2199999999999998}


Start learning from scratch in target domain

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.689 seconds
Total inference time: 0.665 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: scratch, Time: 00:49:24
{'AUC PR': 0.935484, 'AUC ROC': 0.965517, 'Inference time': 0.665, 'Recall': 1.0, 'CLL': -0.264596, 'Precision': [0.935484, 0.5], 'F1': 0.966667, 'Learning time': 1.689}


Starting fold 4

Target predicate: genre 

Mapping Results
   Knowledge compiling time   = 0.017255544662475586
   Generating paths time   = 2.566763401031494
   Generating mappings time   = 0.03052830696105957
   Possible mappings   = 433
   Finding best mapping   = 0.2431352138519287
   Total time   = 2.8576900959014893


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)'] 

Transferred target predicate: genre 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false;workedunder(N, A).;true;true
0;false,false,false;movie(R, A).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,false,true;workedunder(N, P), movie(Q, P).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;true;workedunder(F, A).;false;true
1;true,false;workedunder(G, A), movie(C, G).;false;false
1;false,false;workedunder(P, A), movie(Q, P).;false;true
1;false,false,false;workedunder(R, A).;false;false
1;false;workedunder(H, A), movie(I, H).;true;true
1;false,true;workedunder(H, J), movie(I, J).;false;false
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false,true,true;movie(J, L).;false;false
2;false,true;workedunder(K, L).;true;false
2;false,false;workedunder(M, A), movie(N, M).;false;true
2;false,false,false;workedunder(P, A), workedunder(P, Q).;false;false
2;false;movie(J, A), workedunder(K, A).;true;true
3;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
3;true,false,false;workedunder(L, J).;false;false
3;true;workedunder(F, G).;false;true
3;true,false;workedunder(I, H).;false;true
3;false,false;movie(P, A), workedunder(Q, A).;false;true
3;false,false,false;movie(R, A), workedunder(S, A).;false;false
3;false;workedunder(M, A), movie(N, M).;false;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true;workedunder(E, F), movie(G, F).;true;false
4;false,true,true;movie(K, L).;false;false
4;true,true;movie(G, E).;false;false
4;false,true;workedunder(J, L).;true;false
4;false,false;workedunder(M, A), movie(N, M).;false;true
4;false,false,false;workedunder(P, A), movie(Q, P).;false;false
4;false;workedunder(J, A), movie(K, A).;true;true
5;;genre(A, B) :- workedunder(C, A).;true;true
5;true,false,false;movie(H, C).;false;false
5;true;workedunder(C, D), movie(E, D).;true;true
5;true,true;movie(E, C), workedunder(A, D).;false;false
5;true,false;workedunder(C, F), movie(G, F).;false;true
5;false;workedunder(K, A), movie(L, K).;true;false
5;false,true,false;movie(L, A).;false;false
5;false,true;workedunder(M, A), movie(N, M).;false;true
6;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
6;false,true,true;movie(I, G).;false;false
6;false,true;workedunder(G, H), movie(I, H).;true;false
6;false,false;movie(L, A), workedunder(M, A).;true;true
6;false,false,false;workedunder(N, A), movie(P, N).;false;false
6;false;workedunder(G, A).;true;true
6;false,false,true;movie(L, M).;false;false
7;;genre(A, B) :- workedunder(F, E).;false;true
7;false;workedunder(J, A).;true;true
7;false,true;workedunder(J, K), movie(L, K).;false;false
7;false,false;workedunder(P, A).;true;false
7;false,false,true;workedunder(P, Q).;false;false
8;;genre(A, B) :- workedunder(E, A).;true;true
8;true;workedunder(E, F), movie(G, F).;true;false
8;true,true;movie(G, E).;false;false
8;false,true;movie(J, K).;false;false
8;false,false;workedunder(L, A).;true;true
8;false,false,false;movie(P, A).;false;false
8;false;movie(J, A), workedunder(K, A).;true;true
8;false,false,true;workedunder(L, M), movie(N, M).;false;false
9;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
9;false,true;workedunder(A, G).;false;true
9;false,false;workedunder(K, A).;true;true
9;false,false,false;workedunder(N, A).;false;false
9;false;workedunder(H, G).;true;true
9;false,true,false;workedunder(I, A), workedunder(I, J).;false;false
9;false,false,true;workedunder(K, L), movie(M, L).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.23409923944267316;  // std dev = 1,173, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.38655270713914897;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(J, A), workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13785792350709075;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.2907959857459462;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12227568030698387;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C), workedunder(A, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.21882075071123416;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1097467955537839;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.1666914575795228;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A), workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09947452584816373;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.04647551181518202;  // std dev = 0,944, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.11873226517415188;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.09482665918715576;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.09352268037546381;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( workedunder(E, F) )
%   | then if ( workedunder(A, F) )
%   | | then return -0.0869940607594792;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.314791
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 0.972 seconds
Total inference time: 0.778 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false': [0.0, 3, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,false': [0.0, 3, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.173, 4, 4]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(F, A), movie(G, F)', 'true': 'workedunder(D, E)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'movie(J, A), workedunder(K, A)'}, {'true,true': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A), movie(I, H)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false': 'workedunder(F, A), movie(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [2.63e-09, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false': 'workedunder(F, A), movie(G, F)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C), workedunder(A, D)'}, {'true,true,false': [0.894, 1, 4], 'true,true,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [2.63e-09, 3, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A), workedunder(G, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)'}, {'false,false,false,false': [2.63e-09, 3, 0], 'true': [0.894, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.944, 4, 4]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A)', 'false,false,false': 'movie(I, A)', 'false': 'movie(F, A), workedunder(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [1.86e-09, 3, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, F)', 'false,true': 'workedunder(A, F)'}, {'true': [0.894, 1, 4], 'false,true,true': [0.0, 3, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999986, nan], 'true': [0.15999999999999986, 0.0]}, {'': [0.20948195373304385, nan], 'true': [0.16, 0.0], 'true,false': [nan, 0.0]}, {'': [0.17200226808539504, nan]}, {'': [0.15999999999999998, 0.0], 'false': [nan, 0.0], 'true': [0.15999999999999998, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}, {'': [0.15999999999999998, 2.3129646346357427e-18], 'true': [0.15999999999999998, nan], 'true,true': [0.15999999999999998, nan], 'false,false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18]}, {'': [0.15999999999999998, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'true': [0.15999999999999998, nan], 'true,true': [nan, 0.15999999999999998]}, {'': [0.16, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'false,false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18]}, {'': [0.1113251766618536, nan]}, {'': [0.15999999999999998, 1.1564823173178713e-18], 'true': [0.15999999999999998, nan], 'true,true': [0.15999999999999998, nan], 'false,false': [nan, 1.1564823173178713e-18], 'false,false,false': [1.1564823173178713e-18, nan], 'false': [nan, 1.1564823173178713e-18]}, {'': [0.15999999999999998, -1.1564823173178713e-18], 'false': [-1.1564823173178713e-18, nan], 'false,true': [-1.1564823173178713e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 0.973 seconds
Total inference time: 0.531 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: transfer, Time: 00:49:31
{'AUC PR': 0.843137, 'AUC ROC': 0.906977, 'Inference time': 0.531, 'Recall': 1.0, 'Mapping results': {'Generating mappings time': 0.03052830696105957, 'Total time': 2.8576900959014893, 'Generating paths time': 2.566763401031494, 'Knowledge compiling time': 0.017255544662475586, 'Finding best mapping': 0.2431352138519287, 'Possible mappings': 433}, 'Parameter Learning results': {'AUC PR': 0.843137, 'AUC ROC': 0.906977, 'Inference time': 0.778, 'Recall': 1.0, 'CLL': -0.314791, 'Precision': [0.843137, 0.5], 'F1': 0.914894, 'Learning time': 0.972}, 'CLL': -0.300536, 'Precision': [0.843137, 0.5], 'F1': 0.914894, 'Learning time': 1.9449999999999998}


Start learning from scratch in target domain

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.352 seconds
Total inference time: 0.805 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: scratch, Time: 00:49:33
{'AUC PR': 0.843137, 'AUC ROC': 0.906977, 'Inference time': 0.805, 'Recall': 1.0, 'CLL': -0.300536, 'Precision': [0.843137, 0.5], 'F1': 0.914894, 'Learning time': 1.352}


Starting fold 5

Target predicate: genre 

Mapping Results
   Knowledge compiling time   = 0.028452157974243164
   Generating paths time   = 2.7721145153045654
   Generating mappings time   = 0.03031182289123535
   Possible mappings   = 433
   Finding best mapping   = 0.20308685302734375
   Total time   = 3.0339720249176025


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)'] 

Transferred target predicate: genre 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false;workedunder(N, A).;true;true
0;false,false,false;movie(R, A).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,false,true;workedunder(N, P), movie(Q, P).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;true;workedunder(F, A).;false;true
1;true,false;workedunder(G, A), movie(C, G).;false;false
1;false,false;workedunder(P, A), movie(Q, P).;false;true
1;false,false,false;workedunder(R, A).;false;false
1;false;workedunder(H, A), movie(I, H).;true;true
1;false,true;workedunder(H, J), movie(I, J).;false;false
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false,true,true;movie(J, L).;false;false
2;false,true;workedunder(K, L).;true;false
2;false,false;workedunder(M, A), movie(N, M).;false;true
2;false,false,false;workedunder(P, A), workedunder(P, Q).;false;false
2;false;movie(J, A), workedunder(K, A).;true;true
3;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
3;true,false,false;workedunder(L, J).;false;false
3;true;workedunder(F, G).;false;true
3;true,false;workedunder(I, H).;false;true
3;false,false;movie(P, A), workedunder(Q, A).;false;true
3;false,false,false;movie(R, A), workedunder(S, A).;false;false
3;false;workedunder(M, A), movie(N, M).;false;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true;workedunder(E, F), movie(G, F).;true;false
4;false,true,true;movie(K, L).;false;false
4;true,true;movie(G, E).;false;false
4;false,true;workedunder(J, L).;true;false
4;false,false;workedunder(M, A), movie(N, M).;false;true
4;false,false,false;workedunder(P, A), movie(Q, P).;false;false
4;false;workedunder(J, A), movie(K, A).;true;true
5;;genre(A, B) :- workedunder(C, A).;true;true
5;true,false,false;movie(H, C).;false;false
5;true;workedunder(C, D), movie(E, D).;true;true
5;true,true;movie(E, C), workedunder(A, D).;false;false
5;true,false;workedunder(C, F), movie(G, F).;false;true
5;false;workedunder(K, A), movie(L, K).;true;false
5;false,true,false;movie(L, A).;false;false
5;false,true;workedunder(M, A), movie(N, M).;false;true
6;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
6;false,true,true;movie(I, G).;false;false
6;false,true;workedunder(G, H), movie(I, H).;true;false
6;false,false;movie(L, A), workedunder(M, A).;true;true
6;false,false,false;workedunder(N, A), movie(P, N).;false;false
6;false;workedunder(G, A).;true;true
6;false,false,true;movie(L, M).;false;false
7;;genre(A, B) :- workedunder(F, E).;false;true
7;false;workedunder(J, A).;true;true
7;false,true;workedunder(J, K), movie(L, K).;false;false
7;false,false;workedunder(P, A).;true;false
7;false,false,true;workedunder(P, Q).;false;false
8;;genre(A, B) :- workedunder(E, A).;true;true
8;true;workedunder(E, F), movie(G, F).;true;false
8;true,true;movie(G, E).;false;false
8;false,true;movie(J, K).;false;false
8;false,false;workedunder(L, A).;true;true
8;false,false,false;movie(P, A).;false;false
8;false;movie(J, A), workedunder(K, A).;true;true
8;false,false,true;workedunder(L, M), movie(N, M).;false;false
9;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
9;false,true;workedunder(A, G).;false;true
9;false,false;workedunder(K, A).;true;true
9;false,false,false;workedunder(N, A).;false;false
9;false;workedunder(H, G).;true;true
9;false,true,false;workedunder(I, A), workedunder(I, J).;false;false
9;false,false,true;workedunder(K, L), movie(M, L).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.22152502927633905;  // std dev = 0,668, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.5002131558403854;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(J, A), workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13637023346435792;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.37769095781541506;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12109080086507203;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C), workedunder(A, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2937891549544799;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10878311281985809;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.2367030673168904;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A), workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09867673075523296;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.053190206399587825;  // std dev = 0,287, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.18835509989385701;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.09470437538696899;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.16123210930024046;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, F) )
%   | then if ( workedunder(A, F) )
%   | | then return -0.0868906096014742;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.305401
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 1.579 seconds
Total inference time: 0.934 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false': [0.0, 2, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,false': [0.0, 2, 0], 'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.668, 2, 2]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(F, A), movie(G, F)', 'true': 'workedunder(D, E)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'movie(J, A), workedunder(K, A)'}, {'true,true': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A), movie(I, H)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false': 'workedunder(F, A), movie(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false': 'workedunder(F, A), movie(G, F)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C), workedunder(A, D)'}, {'true,true,false': [0.0, 0, 2], 'true,true,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 2, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A), workedunder(G, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)'}, {'false,false,false,false': [0.0, 2, 0], 'true': [0.0, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.287, 2, 2]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'false,false': 'workedunder(H, A)', 'false,false,false': 'movie(I, A)', 'false': 'movie(F, A), workedunder(G, A)'}, {'false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, F)', 'false,true': 'workedunder(A, F)'}, {'true': [0.0, 0, 2], 'false,true,true': [0.0, 2, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.25, nan], 'true': [0.0, 0.0]}, {'': [0.17847162811629394, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.11145008534151418, nan]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'true,true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false': [nan, 0.0]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'true': [0.0, nan], 'true,true': [nan, 0.0]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}, {'': [0.020572612425164952, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'true,true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan], 'false': [nan, 0.0]}, {'': [0.0, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,334, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,144, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.299128
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.834 seconds
Total inference time: 0.542 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: transfer, Time: 00:49:41
{'AUC PR': 0.833333, 'AUC ROC': 0.9, 'Inference time': 0.542, 'Recall': 1.0, 'Mapping results': {'Generating mappings time': 0.03031182289123535, 'Total time': 3.0339720249176025, 'Generating paths time': 2.7721145153045654, 'Knowledge compiling time': 0.028452157974243164, 'Finding best mapping': 0.20308685302734375, 'Possible mappings': 433}, 'Parameter Learning results': {'AUC PR': 0.833333, 'AUC ROC': 0.9, 'Inference time': 0.934, 'Recall': 1.0, 'CLL': -0.305401, 'Precision': [0.833333, 0.5], 'F1': 0.909091, 'Learning time': 1.579}, 'CLL': -0.299128, 'Precision': [0.833333, 0.5], 'F1': 0.909091, 'Learning time': 2.413}


Start learning from scratch in target domain

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.75 seconds
Total inference time: 0.634 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: scratch, Time: 00:49:42
{'AUC PR': 0.5, 'AUC ROC': 0.5, 'Inference time': 0.634, 'Recall': 0.0, 'CLL': -1.052978, 'Precision': [nan, 0.5], 'F1': nan, 'Learning time': 0.75}


Starting experiment #3 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

('Encountered problems while running process: ', '(cd boostsrl; java -jar v1-0.jar -l -combine -train train/ -target inphase -trees 10 > train_output.txt 2>&1)')
Error in experiment of 6_uwcse_imdb
