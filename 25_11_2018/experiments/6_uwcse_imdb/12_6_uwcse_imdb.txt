Starting experiment #12 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( tempadvisedby(A, G), publication(E, G) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3581489350995123;  // std dev = 0,500, 18,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L), ta(M, A, N) )
%   | | | then return 0.4735335504841277;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.36389606153629317;  // std dev = 4,663, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, P), projectmember(Q, P) )
%   | | then return 0.24276431971489695;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.4581489350995123;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.3470378239884017;  // std dev = 4,742, 90,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=44 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( advisedby(A, F) )
%   | then return 0.2431522573300012;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(D, G, E), advisedby(G, H) )
%   | | then return 0.47540780245230163;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.24779728811959792;  // std dev = 0,493, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( advisedby(A, I), publication(J, I) )
%   | then if ( advisedby(K, I), publication(J, K) )
%   | | then if ( ta(L, A, M), ta(N, K, P) )
%   | | | then return 0.40564015880039006;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.3135977252686114;  // std dev = 4,663, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.43201604470553195;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, Q) )
%   | | then if ( tempadvisedby(R, Q), publication(S, R) )
%   | | | then return 0.2390253257491676;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.3636453865394401;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else return 0.2554524423348888;  // std dev = 0,495, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( publication(E, A), advisedby(A, F) )
%   | then return 0.20416130465148977;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else return 0.24697449019737408;  // std dev = 0,497, 96,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=48 */
%   else if ( publication(G, A), advisedby(A, H) )
%   | then if ( tempadvisedby(I, H) )
%   | | then if ( publication(G, I) )
%   | | | then return 0.08778663062391663;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.27344501229721296;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.39730835744672083;  // std dev = 0,476, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, J) )
%   | | then if ( tempadvisedby(K, J), publication(L, K) )
%   | | | then return 0.20849478798135473;  // std dev = 1,984, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.3732530467791574;  // std dev = 1,936, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( advisedby(A, M), publication(N, M) )
%   | | | then return 0.28438876928279155;  // std dev = 2,854, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.19348873344432393;  // std dev = 2,507, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.20485456788491727;  // std dev = 0,495, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then if ( ta(J, G, D), tempadvisedby(K, I) )
%   | | | then return 0.380467971999319;  // std dev = 0,808, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1209886211993066;  // std dev = 2,869, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
%   | | else if ( tempadvisedby(A, L), publication(M, L) )
%   | | | then return 0.27247002784360075;  // std dev = 1,468, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.10758594903363423;  // std dev = 1,100, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( publication(N, A), advisedby(A, P) )
%   | then return 0.24228227716076622;  // std dev = 0,494, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( advisedby(A, Q), projectmember(R, Q) )
%   | | then return 0.14069954279523825;  // std dev = 0,477, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( publication(S, A), tempadvisedby(A, T) )
%   | | | then return 0.1606986352195005;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.2228169649286983;  // std dev = 4,274, 74,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=39 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), projectmember(D, C) )
%   then return 0.25742982977449197;  // std dev = 1,063, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( ta(E, A, F), publication(G, A) )
%   | then if ( tempadvisedby(A, H), publication(G, H) )
%   | | then return 0.032067205906197306;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( advisedby(A, I) )
%   | | | then return 0.1259629758790394;  // std dev = 3,125, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | | | else return 0.2379192784977962;  // std dev = 1,297, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( advisedby(A, J), publication(K, A) )
%   | | then if ( tempadvisedby(L, J) )
%   | | | then return 0.15505453890190463;  // std dev = 2,995, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | | else return 0.2602867918969465;  // std dev = 1,960, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( tempadvisedby(A, M) )
%   | | | then return 0.17118763975497553;  // std dev = 3,932, 63,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=32 */
%   | | | else return 0.1488202760139665;  // std dev = 5,166, 109,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=54 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then if ( sameperson(A, E) )
%   | | then if ( tempadvisedby(G, F) )
%   | | | then return 0.12520157254473613;  // std dev = 3,897, 62,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=30 */
%   | | | else return 0.07107045296485341;  // std dev = 2,082, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | else return 0.38704451913389537;  // std dev = 0,916, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( ta(C, H, I), advisedby(H, J) )
%   | | then return 0.07402710626714475;  // std dev = 0,493, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.1277531179326405;  // std dev = 0,492, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( advisedby(A, K), publication(L, A) )
%   | then return 0.14423694813482754;  // std dev = 0,493, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( advisedby(A, M), projectmember(N, M) )
%   | | then return 0.08175044842312293;  // std dev = 0,476, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( advisedby(A, P), tempadvisedby(Q, P) )
%   | | | then return 0.16117714600511787;  // std dev = 2,335, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.12292313001934209;  // std dev = 3,805, 59,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=30 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( publication(C, F), tempadvisedby(G, F) )
%   | then if ( advisedby(A, F), ta(H, G, E) )
%   | | then return 0.15129247615723793;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.05034757548779331;  // std dev = 0,491, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
%   | else return 0.1181784796483829;  // std dev = 0,485, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( tempadvisedby(A, I), advisedby(J, I) )
%   | then if ( ta(K, A, L), ta(M, J, L) )
%   | | then if ( publication(N, J) )
%   | | | then return 0.0027085536335666877;  // std dev = 1,367, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.1313328294316414;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.12648157860059245;  // std dev = 0,491, 50,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=27 */
%   | else if ( advisedby(A, P) )
%   | | then if ( tempadvisedby(Q, P), publication(R, A) )
%   | | | then return 0.08477225479699159;  // std dev = 2,994, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | | else return 0.10907428372275468;  // std dev = 5,015, 104,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=56 */
%   | | else return 0.051768887418411014;  // std dev = 0,490, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( tempadvisedby(A, F), publication(E, F) )
%   | then return -0.013926005393223898;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( publication(E, G), tempadvisedby(G, H) )
%   | | then return 0.12674686581320682;  // std dev = 0,498, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.049856311441311446;  // std dev = 0,491, 39,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=17 */
%   else if ( advisedby(A, I), publication(J, A) )
%   | then if ( publication(J, I) )
%   | | then if ( advisedby(K, I), ta(L, K, M) )
%   | | | then return 0.0859545256028807;  // std dev = 2,920, 35,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   | | | else return -0.043030128211804006;  // std dev = 1,326, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.17070212679366767;  // std dev = 0,466, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | else if ( tempadvisedby(A, N), projectmember(P, N) )
%   | | then return 0.13555585821755275;  // std dev = 1,060, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tempadvisedby(A, Q) )
%   | | | then return 0.0802143853258971;  // std dev = 3,905, 63,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=32 */
%   | | | else return 0.06302968116842446;  // std dev = 5,156, 109,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=54 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then if ( advisedby(A, E), publication(F, E) )
%   | then return 0.5297812433808763;  // std dev = 0,074, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( publication(G, A) )
%   | | then return 0.05756612301464581;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.02907643641782092;  // std dev = 0,471, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   else if ( ta(H, A, I), advisedby(A, J) )
%   | then if ( advisedby(K, J), publication(L, K) )
%   | | then if ( publication(L, J), ta(M, K, N) )
%   | | | then return 0.07507499604229924;  // std dev = 3,231, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | | else return -0.030768792663937516;  // std dev = 2,674, 30,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | | else return 0.11351255002140144;  // std dev = 1,087, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( tempadvisedby(A, P), projectmember(Q, P) )
%   | | then return 0.10181314964708758;  // std dev = 1,060, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.0648714565114575;  // std dev = 4,580, 86,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=47 */
%   | | | else return 0.04926374877755377;  // std dev = 4,788, 95,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=46 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then return 0.07318778788061497;  // std dev = 0,462, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   else if ( ta(E, A, F), publication(G, A) )
%   | then if ( publication(G, H), tempadvisedby(I, H) )
%   | | then if ( advisedby(A, H), ta(J, I, F) )
%   | | | then return 0.08625414935090325;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.006089501575165268;  // std dev = 2,799, 33,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | else if ( advisedby(A, K) )
%   | | | then return 0.029434376460092265;  // std dev = 1,296, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.17611643689629908;  // std dev = 0,767, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tempadvisedby(A, L) )
%   | | then if ( tempadvisedby(M, L), publication(N, M) )
%   | | | then return 0.0022082792679477205;  // std dev = 2,264, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.0721545440800016;  // std dev = 3,342, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, P) )
%   | | | then return 0.04650690655456792;  // std dev = 5,522, 125,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=67 */
%   | | | else return -5.256406259049707E-4;  // std dev = 2,302, 22,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */


Predicates from source: ['inphase(person,prequals).', 'tempadvisedby(person,person).', 'ta(course,person,quarter).', 'advisedby(person,person).', 'sameperson(person,person).', 'publication(title,person).', 'projectmember(project,person).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.01756429672241211
   Generating paths time   = 2.6572959423065186
   Generating mappings time   = 0.23212003707885742
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.1920928955078125e-06
   Total time   = 2.906989812850952


Best mapping found: ['sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'projectmember(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false;workedunder(P, A), workedunder(Q, P).;false;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;false,false,false;workedunder(R, A).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;true;workedunder(F, A).;false;true
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false;workedunder(Q, A).;true;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
2;false,false,true;workedunder(J, K), movie(L, K).;false;false
2;false;movie(G, A), workedunder(H, A).;true;true
2;false,true,true;movie(G, I).;false;false
2;false,false;workedunder(J, A).;true;true
2;false,true;workedunder(H, I).;true;false
2;false,false,false;workedunder(M, A), movie(N, M).;false;false
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(N, A), workedunder(P, A).;false;true
3;false,false;workedunder(Q, A), workedunder(R, Q).;false;true
3;false,false,false;movie(S, A), workedunder(T, A).;false;false
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false,false,true;workedunder(J, L).;false;false
4;false;movie(G, A).;true;true
4;false,true,false;workedunder(I, A).;false;false
4;false,false;workedunder(J, A), movie(K, A).;true;true
4;false,true;workedunder(H, A), movie(G, H).;false;true
4;false,false,false;workedunder(M, A).;false;false
5;;genre(A, B) :- workedunder(F, E).;true;true
5;false;workedunder(K, A), movie(L, A).;false;true
5;true,true;workedunder(F, G).;false;false
5;true;workedunder(A, E).;true;true
5;true,false;workedunder(J, H).;false;false
5;false,false;workedunder(M, A), workedunder(N, M).;false;true
5;false,false,false;workedunder(P, A), workedunder(P, Q).;false;false
6;;genre(A, B) :- movie(C, A).;true;true
6;true,true;workedunder(F, A).;false;false
6;true;movie(C, F), workedunder(F, G).;true;false
6;false,false,true;workedunder(P, Q), movie(R, A).;false;false
6;false;workedunder(I, A), workedunder(I, J).;true;true
6;false,false;workedunder(P, A).;true;false
6;false,true;movie(N, J).;false;false
7;;genre(A, B) :- movie(E, A).;true;true
7;false;workedunder(I, A), movie(J, A).;true;true
7;true;workedunder(F, A), movie(E, F).;false;true
7;true,false;movie(E, G), workedunder(H, G).;false;false
7;false,true,true;workedunder(I, K).;false;false
7;false,false;workedunder(N, A), workedunder(P, N).;false;true
7;false,true;movie(J, I).;true;false
7;false,false,false;workedunder(Q, A).;false;false
8;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;true;true
8;false;workedunder(J, A).;true;true
8;true;workedunder(E, A), movie(F, E).;false;true
8;true,false;movie(G, A).;false;false
8;false,true,true;movie(L, J).;false;false
8;false,false;workedunder(P, A), workedunder(Q, P).;false;true
8;false,true;workedunder(J, K), movie(L, K).;true;false
8;false,false,false;workedunder(R, A).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
9;false,false,true;workedunder(L, M), movie(N, M).;false;false
9;false;movie(G, A).;true;true
9;false,true,false;workedunder(K, A).;false;false
9;false,true,true;workedunder(H, A).;false;false
9;false,false;workedunder(L, A).;true;true
9;false,true;movie(G, H), workedunder(H, I).;true;true
9;false,false,false;workedunder(P, A).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.15795862733523683;  // std dev = 1,217, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( workedunder(F, A), movie(E, F) )
%   | | then return 0.379670407154312;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( workedunder(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11694812838381761;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then if ( workedunder(C, E) )
%   | | then return -0.10540117602192779;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, G) )
%   | | then return 0.2951257630772826;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.23762521343920523;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.0958680315029523;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.1972820786902342;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(C, E), workedunder(F, E) )
%   | | then return -0.0878742707515664;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then if ( workedunder(E, F), movie(G, F) )
%   | | then if ( movie(G, E) )
%   | | | then return 0.16789066593974375;  // std dev = 1,29e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08108131764096839;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( movie(E, F), workedunder(F, G) )
%   | | then if ( workedunder(F, A) )
%   | | | then return 0.14572379648964598;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.0752417298458359;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.35253
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.382 seconds
Total inference time: 1.04 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'workedunder(E, A), movie(C, E)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'workedunder(E, F)', 'true': 'workedunder(D, A)'}, {'false': [0.0, 0, 0], 'true,true': [4.21e-08, 0, 11], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false': 'workedunder(G, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)'}, {'false,false,false,false': [7.45e-09, 11, 0], 'true': [0.0, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.217, 11, 11]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'movie(E, A)', 'false,true': 'workedunder(F, A), movie(E, F)', 'false,true,false': 'workedunder(G, A)'}, {'false,true,false,true': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 11], 'false,true,false,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true,false': 'workedunder(F, G)', 'true,true': 'workedunder(C, E)', 'true': 'workedunder(A, D)'}, {'true,true,true': [7.45e-09, 11, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,true': 'workedunder(D, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,true,true': [0.0, 0, 11], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, E), workedunder(F, E)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'workedunder(E, A)', 'false,true,true': 'movie(G, E)', 'false,false': 'workedunder(H, A), workedunder(I, H)', 'false,true': 'workedunder(E, F), movie(G, F)', 'false,false,false': 'workedunder(J, A)'}, {'false,false,false,false': [0.0, 11, 0], 'false,true,true,true': [1.29e-08, 0, 11], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'movie(E, A)', 'false,true,true': 'workedunder(F, A)', 'false,true': 'movie(E, F), workedunder(F, G)'}, {'false,true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 11], 'false,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,true,true,false': [0.0, 11, 0]}]]
[{'': [0.24999999999999958, nan], 'true,false': [nan, -1.0092936587501423e-17], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17]}, {'': [0.17847162811629388, nan], 'true,false': [2.523234146875356e-18, nan], 'true': [1.6148698540002277e-16, 2.523234146875356e-18]}, {'': [-2.0185873175002846e-16, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18]}, {'': [0.06736877561142736, nan]}, {'': [nan, 0.06165749246000911], 'false': [0.061657492460009095, nan], 'false,true': [-4.0371746350005693e-17, -2.523234146875356e-18], 'false,true,false': [nan, -2.523234146875356e-18]}, {'': [0.04010545723604565, nan], 'true,false': [-2.0185873175002847e-17, nan], 'true,true': [5.046468293750712e-18, nan], 'true': [5.046468293750712e-18, -2.0185873175002847e-17]}, {'': [0.02780443610551242, nan], 'true,true': [-3.027880976250427e-17, -3.784851220313033e-18], 'true': [0.02780443610551242, nan]}, {'': [0.020328535906743557, nan], 'true,false': [0.0, nan], 'true': [-2.0185873175002847e-17, 0.0]}, {'': [nan, 0.015496762152028607], 'false': [1.5139404881252134e-17, 0.0], 'false,true,true': [1.5139404881252134e-17, nan], 'false,false': [nan, 0.0], 'false,true': [1.5139404881252134e-17, nan], 'false,false,false': [nan, 0.0]}, {'': [nan, 0.012206440957179128], 'false': [0.012206440957179128, nan], 'false,true,true': [-7.569702440626067e-18, 0.0], 'false,true': [0.012206440957179128, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(F, A), movie(E, F).;true;true', '5;;genre(A, B) :- workedunder(A, D).;true;true', '6;;genre(A, B) :- workedunder(D, A).;true;true', '7;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '8;;genre(A, B) :- workedunder(E, A).;true;true', '9;;genre(A, B) :- workedunder(F, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.173 seconds
Total inference time: 0.669 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 06:47:56
{'Recall': 1.0, 'F1': 0.888889, 'AUC PR': 0.8, 'Learning time': 2.5549999999999997, 'AUC ROC': 0.875, 'Inference time': 0.669, 'Precision': [0.8, 0.5], 'Mapping results': {'Generating mappings time': 0.23212003707885742, 'Possible mappings': [433], 'Generating paths time': 2.6572959423065186, 'Total time': 2.906989812850952, 'Numbers preds mapping': [7], 'Finding best mapping': 1.1920928955078125e-06, 'Max mapping': 4096, 'Knowledge compiling time': 0.01756429672241211}, 'parameter': {'Recall': 1.0, 'F1': 0.888889, 'AUC PR': 0.8, 'Learning time': 1.382, 'AUC ROC': 0.875, 'Inference time': 1.04, 'Precision': [0.8, 0.5], 'CLL': -0.35253}, 'CLL': -0.352709}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.671 seconds
Total inference time: 0.642 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 06:47:58
{'Recall': 1.0, 'F1': 0.888889, 'AUC PR': 0.8, 'Learning time': 1.671, 'AUC ROC': 0.875, 'Inference time': 0.642, 'Precision': [0.8, 0.5], 'CLL': -0.352709}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.726963
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.781 seconds
Total inference time: 0.524 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN), Time: 06:48:00
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.8, 'Learning time': 0.781, 'AUC ROC': 0.875, 'Inference time': 0.524, 'Precision': [nan, 0.5], 'CLL': -0.726963}


Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.023012161254882812
   Generating paths time   = 2.711378574371338
   Generating mappings time   = 0.22810578346252441
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.1920928955078125e-06
   Total time   = 2.962506055831909


Best mapping found: ['sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'projectmember(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false;workedunder(P, A), workedunder(Q, P).;false;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;false,false,false;workedunder(R, A).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;true;workedunder(F, A).;false;true
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false;workedunder(Q, A).;true;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
2;false,false,true;workedunder(J, K), movie(L, K).;false;false
2;false;movie(G, A), workedunder(H, A).;true;true
2;false,true,true;movie(G, I).;false;false
2;false,false;workedunder(J, A).;true;true
2;false,true;workedunder(H, I).;true;false
2;false,false,false;workedunder(M, A), movie(N, M).;false;false
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(N, A), workedunder(P, A).;false;true
3;false,false;workedunder(Q, A), workedunder(R, Q).;false;true
3;false,false,false;movie(S, A), workedunder(T, A).;false;false
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false,false,true;workedunder(J, L).;false;false
4;false;movie(G, A).;true;true
4;false,true,false;workedunder(I, A).;false;false
4;false,false;workedunder(J, A), movie(K, A).;true;true
4;false,true;workedunder(H, A), movie(G, H).;false;true
4;false,false,false;workedunder(M, A).;false;false
5;;genre(A, B) :- workedunder(F, E).;true;true
5;false;workedunder(K, A), movie(L, A).;false;true
5;true,true;workedunder(F, G).;false;false
5;true;workedunder(A, E).;true;true
5;true,false;workedunder(J, H).;false;false
5;false,false;workedunder(M, A), workedunder(N, M).;false;true
5;false,false,false;workedunder(P, A), workedunder(P, Q).;false;false
6;;genre(A, B) :- movie(C, A).;true;true
6;true,true;workedunder(F, A).;false;false
6;true;movie(C, F), workedunder(F, G).;true;false
6;false,false,true;workedunder(P, Q), movie(R, A).;false;false
6;false;workedunder(I, A), workedunder(I, J).;true;true
6;false,false;workedunder(P, A).;true;false
6;false,true;movie(N, J).;false;false
7;;genre(A, B) :- movie(E, A).;true;true
7;false;workedunder(I, A), movie(J, A).;true;true
7;true;workedunder(F, A), movie(E, F).;false;true
7;true,false;movie(E, G), workedunder(H, G).;false;false
7;false,true,true;workedunder(I, K).;false;false
7;false,false;workedunder(N, A), workedunder(P, N).;false;true
7;false,true;movie(J, I).;true;false
7;false,false,false;workedunder(Q, A).;false;false
8;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;true;true
8;false;workedunder(J, A).;true;true
8;true;workedunder(E, A), movie(F, E).;false;true
8;true,false;movie(G, A).;false;false
8;false,true,true;movie(L, J).;false;false
8;false,false;workedunder(P, A), workedunder(Q, P).;false;true
8;false,true;workedunder(J, K), movie(L, K).;true;false
8;false,false,false;workedunder(R, A).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
9;false,false,true;workedunder(L, M), movie(N, M).;false;false
9;false;movie(G, A).;true;true
9;false,true,false;workedunder(K, A).;false;false
9;false,true,true;workedunder(H, A).;false;false
9;false,false;workedunder(L, A).;true;true
9;false,true;movie(G, H), workedunder(H, I).;true;true
9;false,false,false;workedunder(P, A).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5123505661168763;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.16214040922766773;  // std dev = 1,528, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( workedunder(F, A), movie(E, F) )
%   | | then return 0.34533087234248505;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( workedunder(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11738067852967662;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then if ( workedunder(C, E) )
%   | | then return -0.10575522108695315;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, G) )
%   | | then return 0.2640730309307144;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.20743789944857718;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.0961627213560766;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.16716987599309338;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( movie(C, E), workedunder(F, E) )
%   | | then return -0.08812310071598085;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then if ( workedunder(E, F), movie(G, F) )
%   | | then if ( movie(G, E) )
%   | | | then return 0.13765638269300923;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08129404115518012;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( movie(E, F), workedunder(F, G) )
%   | | then if ( workedunder(F, A) )
%   | | | then return 0.11536736846558006;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.07542555455601921;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.323511
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.739 seconds
Total inference time: 1.165 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'workedunder(E, A), movie(C, E)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'workedunder(E, F)', 'true': 'workedunder(D, A)'}, {'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false': 'workedunder(G, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)'}, {'false,false,false,false': [7.45e-09, 11, 0], 'true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.528, 12, 12]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'movie(E, A)', 'false,true': 'workedunder(F, A), movie(E, F)', 'false,true,false': 'workedunder(G, A)'}, {'false,true,false,true': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.961, 1, 12], 'false,true,false,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true,false': 'workedunder(F, G)', 'true,true': 'workedunder(C, E)', 'true': 'workedunder(A, D)'}, {'true,true,true': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.961, 1, 12], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,true': 'workedunder(D, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,true,true': [0.961, 1, 12], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, E), workedunder(F, E)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false,true': [7.45e-09, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'workedunder(E, A)', 'false,true,true': 'movie(G, E)', 'false,false': 'workedunder(H, A), workedunder(I, H)', 'false,true': 'workedunder(E, F), movie(G, F)', 'false,false,false': 'workedunder(J, A)'}, {'false,false,false,false': [0.0, 11, 0], 'false,true,true,true': [0.961, 1, 12], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'movie(E, A)', 'false,true,true': 'workedunder(F, A)', 'false,true': 'movie(E, F), workedunder(F, G)'}, {'false,true,false': [0.0, 0, 0], 'false,true,true,true': [0.961, 1, 12], 'false,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,true,true,false': [3.73e-09, 11, 0]}]]
[{'': [0.24999999999999956, nan], 'true,false': [nan, -1.0092936587501423e-17], 'true': [0.07100591715976314, -1.0092936587501423e-17]}, {'': [0.19076867375623552, nan], 'true,false': [2.523234146875356e-18, nan], 'true': [0.07100591715976333, 2.523234146875356e-18]}, {'': [0.07100591715976351, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18]}, {'': [0.09731751852547608, nan]}, {'': [nan, 0.09161532846397687], 'false': [0.09161532846397692, nan], 'false,true': [0.07100591715976337, -2.523234146875356e-18], 'false,true,false': [nan, -2.523234146875356e-18]}, {'': [0.07241731944527703, nan], 'true,false': [0.07100591715976332, nan], 'true,true': [0.0, nan], 'true': [0.0, 0.07100591715976332]}, {'': [0.06134484954534902, nan], 'true,true': [0.07100591715976332, -1.261617073437678e-18], 'true': [0.06134484954534902, nan]}, {'': [0.05464201427030261, nan], 'true,false': [5.046468293750712e-18, nan], 'true': [0.07100591715976336, 5.046468293750712e-18]}, {'': [nan, 0.050363132556629], 'false': [0.0710059171597633, -1.261617073437678e-18], 'false,true,true': [0.0710059171597633, nan], 'false,false': [nan, -1.261617073437678e-18], 'false,true': [0.0710059171597633, nan], 'false,false,false': [nan, -1.261617073437678e-18]}, {'': [nan, 0.047498825518731184], 'false': [0.04749882551873117, nan], 'false,true,true': [0.07100591715976333, 1.261617073437678e-18], 'false,true': [0.04749882551873117, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(F, A), movie(E, F).;true;true', '5;;genre(A, B) :- workedunder(A, D).;true;true', '6;;genre(A, B) :- workedunder(D, A).;true;true', '7;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '8;;genre(A, B) :- workedunder(E, A).;true;true', '9;;genre(A, B) :- workedunder(F, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.625 seconds
Total inference time: 0.684 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 06:48:08
{'Recall': 1.0, 'F1': 0.897436, 'AUC PR': 0.813953, 'Learning time': 3.364, 'AUC ROC': 0.885714, 'Inference time': 0.684, 'Precision': [0.813953, 0.5], 'Mapping results': {'Generating mappings time': 0.22810578346252441, 'Possible mappings': [433], 'Generating paths time': 2.711378574371338, 'Total time': 2.962506055831909, 'Numbers preds mapping': [7], 'Finding best mapping': 1.1920928955078125e-06, 'Max mapping': 4096, 'Knowledge compiling time': 0.023012161254882812}, 'parameter': {'Recall': 1.0, 'F1': 0.897436, 'AUC PR': 0.813953, 'Learning time': 1.739, 'AUC ROC': 0.885714, 'Inference time': 1.165, 'Precision': [0.813953, 0.5], 'CLL': -0.323511}, 'CLL': -0.320018}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.798 seconds
Total inference time: 0.726 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 06:48:11
{'Recall': 1.0, 'F1': 0.897436, 'AUC PR': 0.813953, 'Learning time': 1.798, 'AUC ROC': 0.885714, 'Inference time': 0.726, 'Precision': [0.813953, 0.5], 'CLL': -0.320018}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.75044
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.858 seconds
Total inference time: 0.613 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN), Time: 06:48:13
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.813953, 'Learning time': 0.858, 'AUC ROC': 0.885714, 'Inference time': 0.613, 'Precision': [nan, 0.5], 'CLL': -0.75044}


Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03263568878173828
   Generating paths time   = 2.5623703002929688
   Generating mappings time   = 0.22273874282836914
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.1920928955078125e-06
   Total time   = 2.8177554607391357


Best mapping found: ['sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'projectmember(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false;workedunder(P, A), workedunder(Q, P).;false;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;false,false,false;workedunder(R, A).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;true;workedunder(F, A).;false;true
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false;workedunder(Q, A).;true;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
2;false,false,true;workedunder(J, K), movie(L, K).;false;false
2;false;movie(G, A), workedunder(H, A).;true;true
2;false,true,true;movie(G, I).;false;false
2;false,false;workedunder(J, A).;true;true
2;false,true;workedunder(H, I).;true;false
2;false,false,false;workedunder(M, A), movie(N, M).;false;false
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(N, A), workedunder(P, A).;false;true
3;false,false;workedunder(Q, A), workedunder(R, Q).;false;true
3;false,false,false;movie(S, A), workedunder(T, A).;false;false
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false,false,true;workedunder(J, L).;false;false
4;false;movie(G, A).;true;true
4;false,true,false;workedunder(I, A).;false;false
4;false,false;workedunder(J, A), movie(K, A).;true;true
4;false,true;workedunder(H, A), movie(G, H).;false;true
4;false,false,false;workedunder(M, A).;false;false
5;;genre(A, B) :- workedunder(F, E).;true;true
5;false;workedunder(K, A), movie(L, A).;false;true
5;true,true;workedunder(F, G).;false;false
5;true;workedunder(A, E).;true;true
5;true,false;workedunder(J, H).;false;false
5;false,false;workedunder(M, A), workedunder(N, M).;false;true
5;false,false,false;workedunder(P, A), workedunder(P, Q).;false;false
6;;genre(A, B) :- movie(C, A).;true;true
6;true,true;workedunder(F, A).;false;false
6;true;movie(C, F), workedunder(F, G).;true;false
6;false,false,true;workedunder(P, Q), movie(R, A).;false;false
6;false;workedunder(I, A), workedunder(I, J).;true;true
6;false,false;workedunder(P, A).;true;false
6;false,true;movie(N, J).;false;false
7;;genre(A, B) :- movie(E, A).;true;true
7;false;workedunder(I, A), movie(J, A).;true;true
7;true;workedunder(F, A), movie(E, F).;false;true
7;true,false;movie(E, G), workedunder(H, G).;false;false
7;false,true,true;workedunder(I, K).;false;false
7;false,false;workedunder(N, A), workedunder(P, N).;false;true
7;false,true;movie(J, I).;true;false
7;false,false,false;workedunder(Q, A).;false;false
8;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;true;true
8;false;workedunder(J, A).;true;true
8;true;workedunder(E, A), movie(F, E).;false;true
8;true,false;movie(G, A).;false;false
8;false,true,true;movie(L, J).;false;false
8;false,false;workedunder(P, A), workedunder(Q, P).;false;true
8;false,true;workedunder(J, K), movie(L, K).;true;false
8;false,false,false;workedunder(R, A).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
9;false,false,true;workedunder(L, M), movie(N, M).;false;false
9;false;movie(G, A).;true;true
9;false,true,false;workedunder(K, A).;false;false
9;false,true,true;workedunder(H, A).;false;false
9;false,false;workedunder(L, A).;true;true
9;false,true;movie(G, H), workedunder(H, I).;true;true
9;false,false,false;workedunder(P, A).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.39468718495146987;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.17931826699808692;  // std dev = 2,508, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( workedunder(F, A), movie(E, F) )
%   | | then return 0.25878603914901577;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else if ( workedunder(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11917207682255643;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then if ( workedunder(C, E) )
%   | | then return -0.1072191863590061;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, G) )
%   | | then return 0.19419056870327844;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.14616381883713392;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return -0.0973796235193314;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.1108635081447019;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( movie(C, E), workedunder(F, E) )
%   | | then return -0.08914944651402874;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then if ( workedunder(E, F), movie(G, F) )
%   | | then if ( movie(G, E) )
%   | | | then return 0.08481000842168669;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08217058588764369;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( movie(E, F), workedunder(F, G) )
%   | | then if ( workedunder(F, A) )
%   | | | then return 0.0653917989087569;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return -0.07618236135825017;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.273236
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.975 seconds
Total inference time: 0.962 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'workedunder(E, A), movie(C, E)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'workedunder(E, F)', 'true': 'workedunder(D, A)'}, {'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false': 'workedunder(G, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)'}, {'false,false,false,false': [7.45e-09, 11, 0], 'true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [2.508, 18, 18]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'movie(E, A)', 'false,true': 'workedunder(F, A), movie(E, F)', 'false,true,false': 'workedunder(G, A)'}, {'false,true,false,true': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [2.245, 7, 18], 'false,true,false,false': [5.27e-09, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true,false': 'workedunder(F, G)', 'true,true': 'workedunder(C, E)', 'true': 'workedunder(A, D)'}, {'true,true,true': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false,true': [2.245, 7, 18], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,true': 'workedunder(D, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,true,true': [2.245, 7, 18], 'true,false': [0.0, 0, 0], 'true,true,false': [5.27e-09, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, E), workedunder(F, E)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'workedunder(E, A)', 'false,true,true': 'movie(G, E)', 'false,false': 'workedunder(H, A), workedunder(I, H)', 'false,true': 'workedunder(E, F), movie(G, F)', 'false,false,false': 'workedunder(J, A)'}, {'false,false,false,false': [0.0, 11, 0], 'false,true,true,true': [2.245, 7, 18], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'movie(E, A)', 'false,true,true': 'workedunder(F, A)', 'false,true': 'movie(E, F), workedunder(F, G)'}, {'false,true,false': [0.0, 0, 0], 'false,true,true,true': [2.245, 7, 18], 'false,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,true,true,false': [0.0, 11, 0]}]]
[{'': [0.2499999999999995, nan], 'true,false': [nan, -1.0092936587501423e-17], 'true': [0.2015999999999996, -1.0092936587501423e-17]}, {'': [0.22099738300738728, nan], 'true,false': [2.523234146875356e-18, nan], 'true': [0.2016000000000001, 2.523234146875356e-18]}, {'': [0.20160000000000053, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18]}, {'': [0.1747217246282939, nan]}, {'': [nan, 0.1703120314760142], 'false': [0.1703120314760143, nan], 'false,true': [0.20159999999999975, 2.523234146875356e-18], 'false,true,false': [nan, 2.523234146875356e-18]}, {'': [0.15927712663799698, nan], 'true,false': [0.20160000000000003, nan], 'true,true': [0.0, nan], 'true': [0.0, 0.20160000000000003]}, {'': [0.15258579265939826, nan], 'true,true': [0.2016, 2.523234146875356e-18], 'true': [0.15258579265939826, nan]}, {'': [0.1484887539032498, nan], 'true,false': [0.0, nan], 'true': [0.20160000000000003, 0.0]}, {'': [nan, 0.14591642954542566], 'false': [0.2015999999999999, -2.523234146875356e-18], 'false,true,true': [0.2015999999999999, nan], 'false,false': [nan, -2.523234146875356e-18], 'false,true': [0.2015999999999999, nan], 'false,false,false': [nan, -2.523234146875356e-18]}, {'': [nan, 0.14425300292068652], 'false': [0.1442530029206865, nan], 'false,true,true': [0.20159999999999997, -1.261617073437678e-18], 'false,true': [0.1442530029206865, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(F, A), movie(E, F).;true;true', '5;;genre(A, B) :- workedunder(A, D).;true;true', '6;;genre(A, B) :- workedunder(D, A).;true;true', '7;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '8;;genre(A, B) :- workedunder(E, A).;true;true', '9;;genre(A, B) :- workedunder(F, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.754 seconds
Total inference time: 0.726 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 06:48:22
{'Recall': 1.0, 'F1': 0.966667, 'AUC PR': 0.935484, 'Learning time': 3.729, 'AUC ROC': 0.965517, 'Inference time': 0.726, 'Precision': [0.935484, 0.5], 'Mapping results': {'Generating mappings time': 0.22273874282836914, 'Possible mappings': [433], 'Generating paths time': 2.5623703002929688, 'Total time': 2.8177554607391357, 'Numbers preds mapping': [7], 'Finding best mapping': 1.1920928955078125e-06, 'Max mapping': 4096, 'Knowledge compiling time': 0.03263568878173828}, 'parameter': {'Recall': 1.0, 'F1': 0.966667, 'AUC PR': 0.935484, 'Learning time': 1.975, 'AUC ROC': 0.965517, 'Inference time': 0.962, 'Precision': [0.935484, 0.5], 'CLL': -0.273236}, 'CLL': -0.264596}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.032 seconds
Total inference time: 0.589 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 06:48:25
{'Recall': 1.0, 'F1': 0.966667, 'AUC PR': 0.935484, 'Learning time': 2.032, 'AUC ROC': 0.965517, 'Inference time': 0.589, 'Precision': [0.935484, 0.5], 'CLL': -0.264596}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.811362
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.844 seconds
Total inference time: 0.603 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN), Time: 06:48:26
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.935484, 'Learning time': 0.844, 'AUC ROC': 0.965517, 'Inference time': 0.603, 'Precision': [nan, 0.5], 'CLL': -0.811362}


Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017204999923706055
   Generating paths time   = 2.5747227668762207
   Generating mappings time   = 0.22667980194091797
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 2.818617343902588


Best mapping found: ['sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'projectmember(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false;workedunder(P, A), workedunder(Q, P).;false;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;false,false,false;workedunder(R, A).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;true;workedunder(F, A).;false;true
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false;workedunder(Q, A).;true;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
2;false,false,true;workedunder(J, K), movie(L, K).;false;false
2;false;movie(G, A), workedunder(H, A).;true;true
2;false,true,true;movie(G, I).;false;false
2;false,false;workedunder(J, A).;true;true
2;false,true;workedunder(H, I).;true;false
2;false,false,false;workedunder(M, A), movie(N, M).;false;false
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(N, A), workedunder(P, A).;false;true
3;false,false;workedunder(Q, A), workedunder(R, Q).;false;true
3;false,false,false;movie(S, A), workedunder(T, A).;false;false
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false,false,true;workedunder(J, L).;false;false
4;false;movie(G, A).;true;true
4;false,true,false;workedunder(I, A).;false;false
4;false,false;workedunder(J, A), movie(K, A).;true;true
4;false,true;workedunder(H, A), movie(G, H).;false;true
4;false,false,false;workedunder(M, A).;false;false
5;;genre(A, B) :- workedunder(F, E).;true;true
5;false;workedunder(K, A), movie(L, A).;false;true
5;true,true;workedunder(F, G).;false;false
5;true;workedunder(A, E).;true;true
5;true,false;workedunder(J, H).;false;false
5;false,false;workedunder(M, A), workedunder(N, M).;false;true
5;false,false,false;workedunder(P, A), workedunder(P, Q).;false;false
6;;genre(A, B) :- movie(C, A).;true;true
6;true,true;workedunder(F, A).;false;false
6;true;movie(C, F), workedunder(F, G).;true;false
6;false,false,true;workedunder(P, Q), movie(R, A).;false;false
6;false;workedunder(I, A), workedunder(I, J).;true;true
6;false,false;workedunder(P, A).;true;false
6;false,true;movie(N, J).;false;false
7;;genre(A, B) :- movie(E, A).;true;true
7;false;workedunder(I, A), movie(J, A).;true;true
7;true;workedunder(F, A), movie(E, F).;false;true
7;true,false;movie(E, G), workedunder(H, G).;false;false
7;false,true,true;workedunder(I, K).;false;false
7;false,false;workedunder(N, A), workedunder(P, N).;false;true
7;false,true;movie(J, I).;true;false
7;false,false,false;workedunder(Q, A).;false;false
8;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;true;true
8;false;workedunder(J, A).;true;true
8;true;workedunder(E, A), movie(F, E).;false;true
8;true,false;movie(G, A).;false;false
8;false,true,true;movie(L, J).;false;false
8;false,false;workedunder(P, A), workedunder(Q, P).;false;true
8;false,true;workedunder(J, K), movie(L, K).;true;false
8;false,false,false;workedunder(R, A).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
9;false,false,true;workedunder(L, M), movie(N, M).;false;false
9;false;movie(G, A).;true;true
9;false,true,false;workedunder(K, A).;false;false
9;false,true,true;workedunder(H, A).;false;false
9;false,false;workedunder(L, A).;true;true
9;false,true;movie(G, H), workedunder(H, I).;true;true
9;false,false,false;workedunder(P, A).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.17153349828640083;  // std dev = 1,076, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( workedunder(F, A), movie(E, F) )
%   | | then return 0.29258794850627473;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( workedunder(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11835732849170555;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then if ( workedunder(C, E) )
%   | | then return -0.10655381774489354;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, G) )
%   | | then return 0.220130347586957;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.16763674053475225;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.09682686953068707;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.1295976437502671;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( movie(C, E), workedunder(F, E) )
%   | | then return -0.08868348436308877;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then if ( workedunder(E, F), movie(G, F) )
%   | | then if ( movie(G, E) )
%   | | | then return 0.10161839106947597;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08177280759201208;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( movie(E, F), workedunder(F, G) )
%   | | then if ( workedunder(F, A) )
%   | | | then return 0.08065368152237058;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.07583905155796608;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.307206
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.158 seconds
Total inference time: 1.113 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'workedunder(E, A), movie(C, E)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 3, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'workedunder(E, F)', 'true': 'workedunder(D, A)'}, {'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false,true': [0.0, 3, 0], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false': 'workedunder(G, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)'}, {'false,false,false,false': [2.63e-09, 3, 0], 'true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.076, 4, 4]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'movie(E, A)', 'false,true': 'workedunder(F, A), movie(E, F)', 'false,true,false': 'workedunder(G, A)'}, {'false,true,false,true': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.894, 1, 4], 'false,true,false,false': [0.0, 3, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true,false': 'workedunder(F, G)', 'true,true': 'workedunder(C, E)', 'true': 'workedunder(A, D)'}, {'true,true,true': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.894, 1, 4], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,true': 'workedunder(D, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,true,true': [0.894, 1, 4], 'true,false': [0.0, 0, 0], 'true,true,false': [1.86e-09, 3, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, E), workedunder(F, E)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false,true': [1.86e-09, 3, 0], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'workedunder(E, A)', 'false,true,true': 'movie(G, E)', 'false,false': 'workedunder(H, A), workedunder(I, H)', 'false,true': 'workedunder(E, F), movie(G, F)', 'false,false,false': 'workedunder(J, A)'}, {'false,false,false,false': [0.0, 3, 0], 'false,true,true,true': [0.894, 1, 4], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'movie(E, A)', 'false,true,true': 'workedunder(F, A)', 'false,true': 'movie(E, F), workedunder(F, G)'}, {'false,true,false': [0.0, 0, 0], 'false,true,true,true': [0.894, 1, 4], 'false,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,true,true,false': [0.0, 3, 0]}]]
[{'': [0.24999999999999986, nan], 'true,false': [nan, 0.0], 'true': [0.15999999999999986, 0.0]}, {'': [0.20948195373304385, nan], 'true,false': [0.0, nan], 'true': [0.16, 0.0]}, {'': [0.15999999999999998, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'false,false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18]}, {'': [0.14475994169199063, nan]}, {'': [nan, 0.13958031734850312], 'false': [0.13958031734850312, nan], 'false,true': [0.15999999999999998, 0.0], 'false,true,false': [nan, 0.0]}, {'': [0.12501309622153933, nan], 'true,false': [0.16, nan], 'true,true': [0.0, nan], 'true': [0.0, 0.16]}, {'': [0.11639242212082301, nan], 'true,true': [0.16, 1.1564823173178713e-18], 'true': [0.11639242212082301, nan]}, {'': [0.11116718380244672, nan], 'true,false': [1.1564823173178713e-18, nan], 'true': [0.16, 1.1564823173178713e-18]}, {'': [nan, 0.10788257775308532], 'false': [0.16, 0.0], 'false,true,true': [0.16, nan], 'false,false': [nan, 0.0], 'false,true': [0.16, nan], 'false,false,false': [nan, 0.0]}, {'': [nan, 0.10573983800944221], 'false': [0.10573983800944221, nan], 'false,true,true': [0.15999999999999998, 0.0], 'false,true': [0.10573983800944221, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(F, A), movie(E, F).;true;true', '5;;genre(A, B) :- workedunder(A, D).;true;true', '6;;genre(A, B) :- workedunder(D, A).;true;true', '7;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '8;;genre(A, B) :- workedunder(E, A).;true;true', '9;;genre(A, B) :- workedunder(F, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.081 seconds
Total inference time: 0.669 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 06:48:34
{'Recall': 1.0, 'F1': 0.914894, 'AUC PR': 0.843137, 'Learning time': 2.239, 'AUC ROC': 0.906977, 'Inference time': 0.669, 'Precision': [0.843137, 0.5], 'Mapping results': {'Generating mappings time': 0.22667980194091797, 'Possible mappings': [433], 'Generating paths time': 2.5747227668762207, 'Total time': 2.818617343902588, 'Numbers preds mapping': [7], 'Finding best mapping': 1.430511474609375e-06, 'Max mapping': 4096, 'Knowledge compiling time': 0.017204999923706055}, 'parameter': {'Recall': 1.0, 'F1': 0.914894, 'AUC PR': 0.843137, 'Learning time': 1.158, 'AUC ROC': 0.906977, 'Inference time': 1.113, 'Precision': [0.843137, 0.5], 'CLL': -0.307206}, 'CLL': -0.300536}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.45 seconds
Total inference time: 0.687 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 06:48:36
{'Recall': 1.0, 'F1': 0.914894, 'AUC PR': 0.843137, 'Learning time': 1.45, 'AUC ROC': 0.906977, 'Inference time': 0.687, 'Precision': [0.843137, 0.5], 'CLL': -0.300536}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.789772
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.658 seconds
Total inference time: 0.554 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN), Time: 06:48:37
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.843137, 'Learning time': 0.658, 'AUC ROC': 0.906977, 'Inference time': 0.554, 'Precision': [nan, 0.5], 'CLL': -0.789772}


Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.01699995994567871
   Generating paths time   = 2.581833600997925
   Generating mappings time   = 0.2940483093261719
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 2.892893075942993


Best mapping found: ['sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'projectmember(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false;workedunder(P, A), workedunder(Q, P).;false;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;false,false,false;workedunder(R, A).;false;false
1;;genre(A, B) :- movie(C, A).;true;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;true;workedunder(F, A).;false;true
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false;workedunder(Q, A).;true;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
2;false,false,true;workedunder(J, K), movie(L, K).;false;false
2;false;movie(G, A), workedunder(H, A).;true;true
2;false,true,true;movie(G, I).;false;false
2;false,false;workedunder(J, A).;true;true
2;false,true;workedunder(H, I).;true;false
2;false,false,false;workedunder(M, A), movie(N, M).;false;false
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(N, A), workedunder(P, A).;false;true
3;false,false;workedunder(Q, A), workedunder(R, Q).;false;true
3;false,false,false;movie(S, A), workedunder(T, A).;false;false
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false,false,true;workedunder(J, L).;false;false
4;false;movie(G, A).;true;true
4;false,true,false;workedunder(I, A).;false;false
4;false,false;workedunder(J, A), movie(K, A).;true;true
4;false,true;workedunder(H, A), movie(G, H).;false;true
4;false,false,false;workedunder(M, A).;false;false
5;;genre(A, B) :- workedunder(F, E).;true;true
5;false;workedunder(K, A), movie(L, A).;false;true
5;true,true;workedunder(F, G).;false;false
5;true;workedunder(A, E).;true;true
5;true,false;workedunder(J, H).;false;false
5;false,false;workedunder(M, A), workedunder(N, M).;false;true
5;false,false,false;workedunder(P, A), workedunder(P, Q).;false;false
6;;genre(A, B) :- movie(C, A).;true;true
6;true,true;workedunder(F, A).;false;false
6;true;movie(C, F), workedunder(F, G).;true;false
6;false,false,true;workedunder(P, Q), movie(R, A).;false;false
6;false;workedunder(I, A), workedunder(I, J).;true;true
6;false,false;workedunder(P, A).;true;false
6;false,true;movie(N, J).;false;false
7;;genre(A, B) :- movie(E, A).;true;true
7;false;workedunder(I, A), movie(J, A).;true;true
7;true;workedunder(F, A), movie(E, F).;false;true
7;true,false;movie(E, G), workedunder(H, G).;false;false
7;false,true,true;workedunder(I, K).;false;false
7;false,false;workedunder(N, A), workedunder(P, N).;false;true
7;false,true;movie(J, I).;true;false
7;false,false,false;workedunder(Q, A).;false;false
8;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;true;true
8;false;workedunder(J, A).;true;true
8;true;workedunder(E, A), movie(F, E).;false;true
8;true,false;movie(G, A).;false;false
8;false,true,true;movie(L, J).;false;false
8;false,false;workedunder(P, A), workedunder(Q, P).;false;true
8;false,true;workedunder(J, K), movie(L, K).;true;false
8;false,false,false;workedunder(R, A).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
9;false,false,true;workedunder(L, M), movie(N, M).;false;false
9;false;movie(G, A).;true;true
9;false,true,false;workedunder(K, A).;false;false
9;false,true,true;workedunder(H, A).;false;false
9;false,false;workedunder(L, A).;true;true
9;false,true;movie(G, H), workedunder(H, I).;true;true
9;false,false,false;workedunder(P, A).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.15795862733523686;  // std dev = 0,519, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( workedunder(F, A), movie(E, F) )
%   | | then return 0.379670407154312;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( workedunder(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11694812838381759;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then if ( workedunder(C, E) )
%   | | then return -0.10540117602192783;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, G) )
%   | | then return 0.29512576307728255;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.23762521343920517;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.09586803150295227;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.19728207869023417;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( movie(C, E), workedunder(F, E) )
%   | | then return -0.0878742707515664;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then if ( workedunder(E, F), movie(G, F) )
%   | | then if ( movie(G, E) )
%   | | | then return 0.16789066593974378;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(I, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08108131764096839;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( movie(E, F), workedunder(F, G) )
%   | | then if ( workedunder(F, A) )
%   | | | then return 0.14572379648964595;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.0752417298458359;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.303054
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 1.124 seconds
Total inference time: 1.162 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'workedunder(E, A), movie(C, E)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'workedunder(E, F)', 'true': 'workedunder(D, A)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false,true': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false': 'workedunder(G, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)'}, {'false,false,false,false': [0.0, 2, 0], 'true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.519, 2, 2]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'movie(E, A)', 'false,true': 'workedunder(F, A), movie(E, F)', 'false,true,false': 'workedunder(G, A)'}, {'false,true,false,true': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false,false': [0.0, 2, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true,false': 'workedunder(F, G)', 'true,true': 'workedunder(C, E)', 'true': 'workedunder(A, D)'}, {'true,true,true': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 2], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,true': 'workedunder(D, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,true,true': [0.0, 0, 2], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 2, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, E), workedunder(F, E)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false,true': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'workedunder(E, A)', 'false,true,true': 'movie(G, E)', 'false,false': 'workedunder(H, A), workedunder(I, H)', 'false,true': 'workedunder(E, F), movie(G, F)', 'false,false,false': 'workedunder(J, A)'}, {'false,false,false,false': [0.0, 2, 0], 'false,true,true,true': [0.0, 0, 2], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'movie(E, A)', 'false,true,true': 'workedunder(F, A)', 'false,true': 'movie(E, F), workedunder(F, G)'}, {'false,true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 2], 'false,false': [0.0, 0, 0], 'true': [0.0, 0, 0], 'false,true,true,false': [0.0, 2, 0]}]]
[{'': [0.25, nan], 'true,false': [nan, 0.0], 'true': [0.0, 0.0]}, {'': [0.17847162811629394, nan], 'true,false': [0.0, nan], 'true': [0.0, 0.0]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}, {'': [0.06736877561142736, nan]}, {'': [nan, 0.06165749246000912], 'false': [0.06165749246000911, nan], 'false,true': [0.0, 0.0], 'false,true,false': [nan, 0.0]}, {'': [0.04010545723604565, nan], 'true,false': [0.0, nan], 'true,true': [0.0, nan], 'true': [0.0, 0.0]}, {'': [0.02780443610551245, nan], 'true,true': [0.0, 0.0], 'true': [0.02780443610551245, nan]}, {'': [0.020328535906743567, nan], 'true,false': [0.0, nan], 'true': [0.0, 0.0]}, {'': [nan, 0.015496762152028604], 'false': [0.0, 0.0], 'false,true,true': [0.0, nan], 'false,false': [nan, 0.0], 'false,true': [0.0, nan], 'false,false,false': [nan, 0.0]}, {'': [nan, 0.012206440957179132], 'false': [0.01220644095717913, nan], 'false,true,true': [0.0, 0.0], 'false,true': [0.01220644095717913, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(F, A), movie(E, F).;true;true', '5;;genre(A, B) :- workedunder(A, D).;true;true', '6;;genre(A, B) :- workedunder(D, A).;true;true', '7;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '8;;genre(A, B) :- workedunder(E, A).;true;true', '9;;genre(A, B) :- workedunder(F, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,260, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.299463
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.859 seconds
Total inference time: 0.703 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 06:48:45
{'Recall': 1.0, 'F1': 0.909091, 'AUC PR': 0.833333, 'Learning time': 1.983, 'AUC ROC': 0.9, 'Inference time': 0.703, 'Precision': [0.833333, 0.5], 'Mapping results': {'Generating mappings time': 0.2940483093261719, 'Possible mappings': [433], 'Generating paths time': 2.581833600997925, 'Total time': 2.892893075942993, 'Numbers preds mapping': [7], 'Finding best mapping': 1.6689300537109375e-06, 'Max mapping': 4096, 'Knowledge compiling time': 0.01699995994567871}, 'parameter': {'Recall': 1.0, 'F1': 0.909091, 'AUC PR': 0.833333, 'Learning time': 1.124, 'AUC ROC': 0.9, 'Inference time': 1.162, 'Precision': [0.833333, 0.5], 'CLL': -0.303054}, 'CLL': -0.299463}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.926 seconds
Total inference time: 0.586 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 06:48:47
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.5, 'Learning time': 0.926, 'AUC ROC': 0.5, 'Inference time': 0.586, 'Precision': [nan, 0.5], 'CLL': -1.052978}


WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.465 seconds
Total inference time: 0.569 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN), Time: 06:48:48
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.5, 'Learning time': 0.465, 'AUC ROC': 0.5, 'Inference time': 0.569, 'Precision': [nan, 0.5], 'CLL': -1.052978}


