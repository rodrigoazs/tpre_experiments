Starting experiment #4 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( tempadvisedby(A, G), publication(E, G) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3581489350995123;  // std dev = 0,500, 18,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L) )
%   | | | then return 0.4071685429426485;  // std dev = 3,554, 51,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=28 */
%   | | | else return 0.3479448534668582;  // std dev = 3,499, 49,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=24 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, M), projectmember(N, M) )
%   | | then return 0.24276431971489695;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( advisedby(A, P) )
%   | | | then return 0.4581489350995123;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.3470378239884017;  // std dev = 4,742, 90,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=44 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F) )
%   | then return 0.2431522573300012;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then return 0.47540780245230163;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.24779728811959792;  // std dev = 0,493, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( advisedby(A, I), publication(J, I) )
%   | then if ( advisedby(K, I), publication(J, K) )
%   | | then if ( ta(L, K, M), ta(N, A, P) )
%   | | | then return 0.41642849982537694;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.31201240418820314;  // std dev = 4,662, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.43201604470553195;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, Q) )
%   | | then if ( tempadvisedby(R, Q), publication(S, R) )
%   | | | then return 0.2390253257491676;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.3636453865394401;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else return 0.2554524423348888;  // std dev = 0,495, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( advisedby(A, E), publication(F, A) )
%   | then return 0.20416130465148977;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else return 0.2491290174807512;  // std dev = 0,497, 96,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=48 */
%   else if ( advisedby(A, G), publication(H, A) )
%   | then if ( tempadvisedby(I, G) )
%   | | then if ( publication(J, I), ta(K, I, L) )
%   | | | then return 0.3022045057495928;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.2392950596423611;  // std dev = 2,597, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else return 0.39783358394301715;  // std dev = 0,476, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, M) )
%   | | then if ( tempadvisedby(N, M), publication(P, N) )
%   | | | then return 0.20849478798135473;  // std dev = 1,984, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.3732530467791574;  // std dev = 1,936, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( advisedby(A, Q), publication(R, Q) )
%   | | | then return 0.2812908835453354;  // std dev = 2,856, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.19348873344432393;  // std dev = 2,507, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then if ( sameperson(A, E) )
%   | | then return 0.190097781311193;  // std dev = 0,495, 80,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=38 */
%   | | else return 0.4826110975259897;  // std dev = 0,907, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then return 0.14158359342566837;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else if ( tempadvisedby(A, J), publication(K, J) )
%   | | | then return 0.27203395766649796;  // std dev = 1,468, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.10714020153543455;  // std dev = 1,100, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( advisedby(A, L), projectmember(M, L) )
%   | then return 0.17002651949558656;  // std dev = 0,486, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( publication(N, A), tempadvisedby(A, P) )
%   | | then return 0.1606986352195005;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( tempadvisedby(A, Q) )
%   | | | then return 0.2534791628241441;  // std dev = 2,461, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   | | | else return 0.22282505075125422;  // std dev = 4,917, 98,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=52 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), projectmember(D, C) )
%   then return 0.255677050472627;  // std dev = 1,060, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( ta(E, A, F) )
%   | then if ( ta(E, G, F), advisedby(G, H) )
%   | | then if ( sameperson(A, G) )
%   | | | then return 0.1500575468609239;  // std dev = 4,428, 80,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=38 */
%   | | | else return 0.3704262235515191;  // std dev = 0,908, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( ta(E, I, J), advisedby(I, K) )
%   | | | then return 0.11156241559634364;  // std dev = 3,011, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.168279818498564;  // std dev = 1,565, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | else if ( publication(L, A), advisedby(A, M) )
%   | | then if ( publication(N, M), tempadvisedby(P, M) )
%   | | | then return 0.15128435103463284;  // std dev = 2,824, 32,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.25476886057448006;  // std dev = 2,201, 21,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | else if ( tempadvisedby(A, Q), publication(R, Q) )
%   | | | then return 0.17639251102640705;  // std dev = 2,566, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.14577400589144035;  // std dev = 3,934, 63,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=31 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( tempadvisedby(A, F), publication(C, F) )
%   | then return -0.004877479357804952;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( publication(C, G), tempadvisedby(G, H) )
%   | | then if ( advisedby(A, H) )
%   | | | then return 0.07712465647970644;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.3302407662067195;  // std dev = 0,813, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.09107981735286508;  // std dev = 0,492, 39,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=17 */
%   else if ( tempadvisedby(A, I), projectmember(J, I) )
%   | then return 0.1960826268183224;  // std dev = 1,058, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( advisedby(A, K), publication(L, K) )
%   | | then if ( advisedby(M, K), publication(L, M) )
%   | | | then return 0.12863034576937668;  // std dev = 4,973, 100,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=52 */
%   | | | else return 0.20280960822737196;  // std dev = 1,965, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( advisedby(A, N), projectmember(P, N) )
%   | | | then return 0.06247893699838268;  // std dev = 1,746, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.12354291791669796;  // std dev = 4,807, 95,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=47 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), tempadvisedby(G, F) )
%   | then return 0.09223339493176806;  // std dev = 0,494, 34,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | else return 0.04136543698136802;  // std dev = 0,483, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else if ( advisedby(A, H) )
%   | then if ( advisedby(I, H), ta(J, I, K) )
%   | | then if ( tempadvisedby(L, H), ta(J, L, M) )
%   | | | then return 0.0646070897947313;  // std dev = 2,278, 21,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | | | else return 0.11990283375742652;  // std dev = 4,793, 95,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=52 */
%   | | else if ( publication(N, H), publication(N, A) )
%   | | | then return -0.04035005904688775;  // std dev = 1,109, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.11522634981506027;  // std dev = 2,144, 19,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | else if ( tempadvisedby(A, P) )
%   | | then return 0.10408258629971774;  // std dev = 0,491, 68,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=35 */
%   | | else if ( ta(Q, A, R) )
%   | | | then return 0.03915345497646284;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.041913525210635405;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( publication(C, A), tempadvisedby(A, D) )
%   then if ( publication(C, D) )
%   | then return 3.6043603783332545E-4;  // std dev = 0,483, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.09389908545103241;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( ta(E, A, F) )
%   | then if ( ta(E, G, H), publication(I, G) )
%   | | then return 0.07951856565125974;  // std dev = 0,490, 81,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=39 */
%   | | else if ( ta(E, J, K), tempadvisedby(J, L) )
%   | | | then return 0.0265714572442603;  // std dev = 2,929, 35,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=16 */
%   | | | else return 0.09399457057021167;  // std dev = 1,898, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | else if ( publication(M, A) )
%   | | then if ( advisedby(A, N), publication(M, N) )
%   | | | then return 0.07064369973772158;  // std dev = 3,216, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | else return 0.16121482925946054;  // std dev = 1,841, 15,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( tempadvisedby(A, P) )
%   | | | then return 0.1000765066807411;  // std dev = 2,451, 25,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   | | | else return 0.05569775325788661;  // std dev = 3,660, 55,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=27 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), projectmember(D, C) )
%   then return 0.11220275498245061;  // std dev = 1,051, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( advisedby(A, E), publication(F, E) )
%   | then if ( tempadvisedby(G, E), ta(H, G, I) )
%   | | then if ( ta(H, A, J) )
%   | | | then return 0.006649823157642809;  // std dev = 1,555, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09285667399972326;  // std dev = 3,719, 57,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=31 */
%   | | else if ( advisedby(K, E), ta(L, K, M) )
%   | | | then return 0.05431428499408323;  // std dev = 4,396, 80,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=41 */
%   | | | else return -0.08304383228826126;  // std dev = 1,298, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( advisedby(A, N), tempadvisedby(P, N) )
%   | | then if ( ta(Q, P, R) )
%   | | | then return -0.04361992664606005;  // std dev = 1,415, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.03538639101354157;  // std dev = 1,639, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( tempadvisedby(A, S), publication(T, S) )
%   | | | then return 0.05017124299715521;  // std dev = 3,826, 61,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | | else return 0.06179905426653228;  // std dev = 3,120, 40,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=20 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), tempadvisedby(G, F) )
%   | then if ( ta(H, G, D) )
%   | | then return 0.10191829998833131;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( publication(E, F) )
%   | | | then return 0.005661525650129212;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0.08498724324152235;  // std dev = 1,387, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0.002692995590244815;  // std dev = 0,483, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else if ( advisedby(A, I), publication(J, A) )
%   | then if ( tempadvisedby(K, I) )
%   | | then return 0.028101605802739113;  // std dev = 0,499, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | else return 0.11653131233002736;  // std dev = 0,465, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, L), tempadvisedby(M, L) )
%   | | then return 0.05294554233454794;  // std dev = 0,490, 60,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=31 */
%   | | else if ( tempadvisedby(A, N) )
%   | | | then return 0.049044905284793806;  // std dev = 4,044, 68,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=35 */
%   | | | else return 0.010658773213363044;  // std dev = 3,465, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */


Predicates from source: ['inphase(person,prequals).', 'tempadvisedby(person,person).', 'publication(title,person).', 'advisedby(person,person).', 'sameperson(person,person).', 'ta(course,person,quarter).', 'projectmember(project,person).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03468012809753418
   Generating paths time   = 5.071451902389526
   Generating mappings time   = 0.46127891540527344
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 5.567423105239868


Best mapping found: ['advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), workedunder(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
2;false;workedunder(G, A), movie(H, A).;true;true
2;false,true;workedunder(G, I).;true;false
2;false,true,true;movie(J, I).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- workedunder(F, E).;true;true
3;true;workedunder(A, E).;false;true
3;false;workedunder(L, A), workedunder(M, L).;false;true
3;true,false,false;workedunder(J, A), movie(K, J).;false;false
3;true,false;workedunder(I, G).;false;true
3;false,false,false;workedunder(Q, A).;false;false
3;false,false;movie(N, A), workedunder(P, A).;false;true
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false,true,false;workedunder(K, I).;false;false
4;false;workedunder(H, G).;true;true
4;false,true;workedunder(A, G).;false;true
4;false,false,true;movie(N, M), workedunder(M, P).;false;false
4;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
4;false,false;movie(L, A), workedunder(M, A).;true;true
5;;genre(A, B) :- movie(C, A).;true;true
5;true;workedunder(F, A), movie(C, F).;false;true
5;false;workedunder(I, A), workedunder(J, I).;false;true
5;false,false;workedunder(K, A), movie(L, K).;true;true
5;true,false;movie(C, G), workedunder(H, G).;true;false
5;false,false,true;workedunder(K, M), movie(L, M).;false;false
5;false,false,false;workedunder(N, A), workedunder(P, N).;false;false
5;true,false,true;workedunder(H, A).;false;false
6;;genre(A, B) :- movie(E, A).;true;true
6;true;workedunder(F, A), workedunder(F, G).;false;false
6;false,true,false;movie(N, H), movie(N, A).;false;false
6;false;workedunder(H, A).;true;true
6;false,true;workedunder(H, I).;true;true
6;false,true,true;workedunder(H, L).;false;false
6;false,false;workedunder(P, A).;false;false
7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
7;true;movie(C, D).;false;false
7;false;movie(I, G).;false;true
7;false,false,true;workedunder(N, A), movie(M, N).;false;false
7;false,false,false;workedunder(P, A).;false;false
7;false,false;movie(M, A).;true;true
8;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
8;false,true,false;workedunder(E, K).;false;false
8;false;workedunder(E, A), movie(F, E).;true;true
8;false,true;workedunder(E, G).;false;true
8;false,false,false;workedunder(S, A), movie(T, S).;false;false
8;false,false;workedunder(N, A), workedunder(N, P).;false;true
9;;genre(A, B) :- movie(E, A).;true;true
9;true;workedunder(F, A), workedunder(F, G).;true;false
9;false;workedunder(I, A), movie(J, A).;true;true
9;false,true;workedunder(I, K).;false;false
9;false,false,false;workedunder(N, A).;false;false
9;true,true;movie(E, F).;false;false
9;false,false;workedunder(L, A), workedunder(L, M).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( workedunder(E, A), movie(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( workedunder(E, F) )
%   | | then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, F) )
%   | then if ( workedunder(A, F) )
%   | | then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( workedunder(G, H) )
%   | | | then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(C, E), workedunder(F, E) )
%   | | then if ( workedunder(F, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, F) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then if ( workedunder(E, G) )
%   | | then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then if ( movie(C, D) )
%   | | then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 7.454 seconds
Total inference time: 3.041 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'true,true': [4.21e-08, 0, 11], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), movie(F, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)', 'false,false': 'workedunder(G, A)'}, {'true': [0.0, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true': 'workedunder(A, D)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [4.21e-08, 0, 11], 'true,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true,false': 'workedunder(G, H)', 'false': 'workedunder(E, F)', 'false,true': 'workedunder(A, F)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 11, 0], 'false,true,false,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 11], 'false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'movie(C, E), workedunder(F, E)', 'true,false,true': 'workedunder(F, A)'}, {'true,true': [2.11e-08, 0, 11], 'true,false,true,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false': [5.27e-09, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false': 'movie(E, F)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [7.45e-09, 0, 11], 'false,true': [2.63e-09, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true': 'workedunder(E, G)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false,false': 'workedunder(H, A), workedunder(H, I)'}, {'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false': [2.63e-09, 11, 0], 'false,true,true': [7.45e-09, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)', 'true,true': 'movie(C, D)'}, {'true,false': [5.27e-09, 11, 0], 'false': [0.0, 0, 0], 'true,true,true': [5.27e-09, 0, 11], 'true,true,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999958, nan], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.17847162811629388, nan], 'true': [1.6148698540002277e-16, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [-2.0185873175002846e-16, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.06736877561142736, nan], 'true': [0.0, 1.6148698540002277e-16], 'true,false': [1.6148698540002277e-16, nan]}, {'': [nan, 0.04272553559876199], 'false,true,false': [-6.055761952500853e-17, nan], 'false': [0.042725535598761966, nan], 'false,true': [0.0, -6.055761952500853e-17]}, {'': [0.028960720834012178, nan], 'true': [4.0371746350005693e-17, 2.523234146875356e-18], 'true,false,true': [nan, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.020813035147004725, nan], 'true': [-2.5232341468753557e-17, 0.0]}, {'': [5.046468293750712e-18, 6.30808536718839e-19], 'true': [5.046468293750712e-18, nan], 'false': [6.30808536718839e-19, nan]}, {'': [nan, 0.012229134667364456], 'false,false,false': [nan, 6.30808536718839e-19], 'false': [5.046468293750712e-18, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19], 'false,true': [5.046468293750712e-18, nan]}, {'': [0.009820698026241881, nan], 'true': [2.523234146875356e-18, 2.523234146875356e-18], 'true,true': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '3;;genre(A, B) :- workedunder(A, D).;true;true', '4;;genre(A, B) :- workedunder(A, F).;true;true', '5;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '6;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true', '7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(E, A), movie(F, E).;true;true', '9;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.918 seconds
Total inference time: 1.767 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 15:13:23
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'parameter': {'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 3.041, 'Learning time': 7.454, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}, 'AUC ROC': 0.875, 'Inference time': 1.767, 'Mapping results': {'Knowledge compiling time': 0.03468012809753418, 'Generating paths time': 5.071451902389526, 'Possible mappings': [433], 'Max mapping': 4096, 'Finding best mapping': 1.430511474609375e-06, 'Generating mappings time': 0.46127891540527344, 'Numbers preds mapping': [7], 'Total time': 5.567423105239868}, 'Learning time': 9.372, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 3.968 seconds
Total inference time: 4.458 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 15:13:33
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 4.458, 'Learning time': 3.968, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.726963
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.566 seconds
Total inference time: 1.258 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN), Time: 15:13:36
{'CLL': -0.726963, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.875, 'Inference time': 1.258, 'Learning time': 1.566, 'Precision': [nan, 0.5], 'AUC PR': 0.8}


Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03220033645629883
   Generating paths time   = 4.993011951446533
   Generating mappings time   = 0.4614531993865967
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 5.486675977706909


Best mapping found: ['advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), workedunder(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
2;false;workedunder(G, A), movie(H, A).;true;true
2;false,true;workedunder(G, I).;true;false
2;false,true,true;movie(J, I).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- workedunder(F, E).;true;true
3;true;workedunder(E, A).;false;true
3;false;workedunder(L, A), workedunder(M, L).;false;true
3;true,false,false;workedunder(J, A), movie(K, J).;false;false
3;true,false;workedunder(I, G).;false;true
3;false,false,false;workedunder(Q, A).;false;false
3;false,false;movie(N, A), workedunder(P, A).;false;true
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false,true,false;workedunder(K, I).;false;false
4;false;workedunder(H, G).;true;true
4;false,true;workedunder(G, A).;false;true
4;false,false,true;movie(N, M), workedunder(M, P).;false;false
4;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
4;false,false;movie(L, A), workedunder(M, A).;true;true
5;;genre(A, B) :- movie(C, A).;true;true
5;true;workedunder(F, A), movie(C, F).;false;true
5;false;workedunder(I, A), workedunder(J, I).;false;true
5;false,false;workedunder(K, A), movie(L, K).;true;true
5;true,false;movie(C, G), workedunder(H, G).;true;false
5;false,false,true;workedunder(K, M), movie(L, M).;false;false
5;false,false,false;workedunder(N, A), workedunder(P, N).;false;false
5;true,false,true;workedunder(H, A).;false;false
6;;genre(A, B) :- movie(E, A).;true;true
6;true;workedunder(F, A), workedunder(F, G).;false;false
6;false,true,false;movie(N, H), movie(N, A).;false;false
6;false;workedunder(H, A).;true;true
6;false,true;workedunder(H, I).;true;true
6;false,true,true;workedunder(H, L).;false;false
6;false,false;workedunder(P, A).;false;false
7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
7;true;movie(C, D).;false;false
7;false;movie(I, G).;false;true
7;false,false,true;workedunder(N, A), movie(M, N).;false;false
7;false,false,false;workedunder(P, A).;false;false
7;false,false;movie(M, A).;true;true
8;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
8;false,true,false;workedunder(E, K).;false;false
8;false;workedunder(E, A), movie(F, E).;true;true
8;false,true;workedunder(E, G).;false;true
8;false,false,false;workedunder(S, A), movie(T, S).;false;false
8;false,false;workedunder(N, A), workedunder(N, P).;false;true
9;;genre(A, B) :- movie(E, A).;true;true
9;true;workedunder(F, A), workedunder(F, G).;true;false
9;false;workedunder(I, A), movie(J, A).;true;true
9;false,true;workedunder(I, K).;false;false
9;false,false,false;workedunder(N, A).;false;false
9;true,true;movie(E, F).;false;false
9;false,false;workedunder(L, A), workedunder(L, M).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5123505661168763;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, A), movie(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(D, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(E, F) )
%   | | then return 0.16214040922766773;  // std dev = 1,528, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, F) )
%   | then if ( workedunder(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, H) )
%   | | | then return 0.13325474485941094;  // std dev = 1,483, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.31320300985955757;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( movie(C, E), workedunder(F, E) )
%   | | then if ( workedunder(F, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13190525897060162;  // std dev = 9,13e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then return 0.24172638957477396;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.11752056078601435;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.19168194689807652;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, F) )
%   | then return -0.10586966914178522;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then if ( workedunder(E, G) )
%   | | then return 0.15572946636704324;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09625794940501263;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then if ( movie(C, D) )
%   | | then return 0.12909070040008247;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.08820348541171273;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.32786
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 5.864 seconds
Total inference time: 1.953 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'true,true': [0.961, 1, 12], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), movie(F, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)', 'false,false': 'workedunder(G, A)'}, {'true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [1.528, 12, 12], 'true,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true,false': 'workedunder(G, H)', 'false': 'workedunder(E, F)', 'false,true': 'workedunder(F, A)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 0, 0], 'false,true,false,true': [1.483, 12, 12], 'false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'movie(C, E), workedunder(F, E)', 'true,false,true': 'workedunder(F, A)'}, {'true,true': [0.961, 1, 12], 'true,false,true,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false': [9.13e-09, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false': 'movie(E, F)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'false,true': [0.0, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true': 'workedunder(E, G)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false,false': 'workedunder(H, A), workedunder(H, I)'}, {'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,true,true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)', 'true,true': 'movie(C, D)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.961, 1, 12], 'true,true,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999956, nan], 'true': [0.07100591715976314, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.19076867375623552, nan], 'true': [0.07100591715976333, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.07100591715976351, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.09731751852547608, nan], 'true': [nan, 0.09731751852547608], 'true,false': [0.09731751852547608, nan]}, {'': [nan, 0.09161532846397687], 'false,true,false': [0.09161532846397692, nan], 'false': [0.09161532846397692, nan], 'false,true': [nan, 0.09161532846397692]}, {'': [0.0876479204932752, nan], 'true': [0.07100591715976337, 7.569702440626067e-18], 'true,false,true': [nan, 7.569702440626067e-18], 'true,false': [7.569702440626067e-18, nan]}, {'': [0.07050207162494876, nan], 'true': [0.07100591715976336, 0.0]}, {'': [0.0710059171597633, -2.523234146875356e-18], 'true': [0.0710059171597633, nan], 'false': [-2.523234146875356e-18, nan]}, {'': [nan, 0.0542257138993327], 'false,false,false': [nan, -1.261617073437678e-18], 'false': [0.07100591715976327, -1.261617073437678e-18], 'false,false': [nan, -1.261617073437678e-18], 'false,true': [0.07100591715976327, nan]}, {'': [0.05018375571124047, nan], 'true': [0.0710059171597633, 0.0], 'true,true': [0.0710059171597633, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '5;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '6;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true', '7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(E, A), movie(F, E).;true;true', '9;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 4.285 seconds
Total inference time: 1.999 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 15:13:57
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'parameter': {'CLL': -0.32786, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 1.953, 'Learning time': 5.864, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}, 'AUC ROC': 0.885714, 'Inference time': 1.999, 'Mapping results': {'Knowledge compiling time': 0.03220033645629883, 'Generating paths time': 4.993011951446533, 'Possible mappings': [433], 'Max mapping': 4096, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 0.4614531993865967, 'Numbers preds mapping': [7], 'Total time': 5.486675977706909}, 'Learning time': 10.149000000000001, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 5.058 seconds
Total inference time: 1.514 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 15:14:04
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 1.514, 'Learning time': 5.058, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.75044
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.155 seconds
Total inference time: 1.458 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN), Time: 15:14:08
{'CLL': -0.75044, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.885714, 'Inference time': 1.458, 'Learning time': 2.155, 'Precision': [nan, 0.5], 'AUC PR': 0.813953}


Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03853154182434082
   Generating paths time   = 4.154934406280518
   Generating mappings time   = 0.4341146945953369
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 4.627592325210571


Best mapping found: ['advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), workedunder(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
2;false;workedunder(G, A), movie(H, A).;true;true
2;false,true;workedunder(G, I).;true;false
2;false,true,true;movie(J, I).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- workedunder(F, E).;true;true
3;true;workedunder(A, E).;false;true
3;false;workedunder(L, A), workedunder(M, L).;false;true
3;true,false,false;workedunder(J, A), movie(K, J).;false;false
3;true,false;workedunder(I, G).;false;true
3;false,false,false;workedunder(Q, A).;false;false
3;false,false;movie(N, A), workedunder(P, A).;false;true
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false,true,false;workedunder(K, I).;false;false
4;false;workedunder(H, G).;true;true
4;false,true;workedunder(A, G).;false;true
4;false,false,true;movie(N, M), workedunder(M, P).;false;false
4;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
4;false,false;movie(L, A), workedunder(M, A).;true;true
5;;genre(A, B) :- movie(C, A).;true;true
5;true;workedunder(F, A), movie(C, F).;false;true
5;false;workedunder(I, A), workedunder(J, I).;false;true
5;false,false;workedunder(K, A), movie(L, K).;true;true
5;true,false;movie(C, G), workedunder(H, G).;true;false
5;false,false,true;workedunder(K, M), movie(L, M).;false;false
5;false,false,false;workedunder(N, A), workedunder(P, N).;false;false
5;true,false,true;workedunder(H, A).;false;false
6;;genre(A, B) :- movie(E, A).;true;true
6;true;workedunder(F, A), workedunder(F, G).;false;false
6;false,true,false;movie(N, H), movie(N, A).;false;false
6;false;workedunder(H, A).;true;true
6;false,true;workedunder(H, I).;true;true
6;false,true,true;workedunder(H, L).;false;false
6;false,false;workedunder(P, A).;false;false
7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
7;true;movie(C, D).;false;false
7;false;movie(I, G).;false;true
7;false,false,true;workedunder(N, A), movie(M, N).;false;false
7;false,false,false;workedunder(P, A).;false;false
7;false,false;movie(M, A).;true;true
8;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
8;false,true,false;workedunder(E, K).;false;false
8;false;workedunder(E, A), movie(F, E).;true;true
8;false,true;workedunder(E, G).;false;true
8;false,false,false;workedunder(S, A), movie(T, S).;false;false
8;false,false;workedunder(N, A), workedunder(N, P).;false;true
9;;genre(A, B) :- movie(E, A).;true;true
9;true;workedunder(F, A), workedunder(F, G).;true;false
9;false;workedunder(I, A), movie(J, A).;true;true
9;false,true;workedunder(I, K).;false;false
9;false,false,false;workedunder(N, A).;false;false
9;true,true;movie(E, F).;false;false
9;false,false;workedunder(L, A), workedunder(L, M).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.39468718495146987;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, A), movie(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( workedunder(E, F) )
%   | | then return 0.3029206894518932;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, F) )
%   | then if ( workedunder(A, F) )
%   | | then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( workedunder(G, H) )
%   | | | then return 0.2279628397230807;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.1711293278244227;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( movie(C, E), workedunder(F, E) )
%   | | then if ( workedunder(F, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then return 0.129208558439337;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.09837607626228805;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, F) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then if ( workedunder(E, G) )
%   | | then return 0.07552905818195493;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then if ( movie(C, D) )
%   | | then return 0.05841806950104655;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.519 seconds
Total inference time: 1.516 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'true,true': [2.245, 7, 18], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), movie(F, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)', 'false,false': 'workedunder(G, A)'}, {'true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true': 'workedunder(A, D)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [2.245, 7, 18], 'true,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true,false': 'workedunder(G, H)', 'false': 'workedunder(E, F)', 'false,true': 'workedunder(A, F)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 11, 0], 'false,true,false,false': [0.0, 0, 0], 'false,true,false,true': [2.245, 7, 18], 'false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'movie(C, E), workedunder(F, E)', 'true,false,true': 'workedunder(F, A)'}, {'true,true': [2.245, 7, 18], 'true,false,true,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false': [5.27e-09, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false': 'movie(E, F)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'false,true': [2.63e-09, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true': 'workedunder(E, G)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false,false': 'workedunder(H, A), workedunder(H, I)'}, {'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false': [2.63e-09, 11, 0], 'false,true,true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)', 'true,true': 'movie(C, D)'}, {'true,false': [5.27e-09, 11, 0], 'false': [0.0, 0, 0], 'true,true,true': [2.245, 7, 18], 'true,true,false': [0.0, 0, 0]}]]
[{'': [0.2499999999999995, nan], 'true': [0.2015999999999996, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.22099738300738728, nan], 'true': [0.2016000000000001, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.20160000000000053, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.1747217246282939, nan], 'true': [0.0, 0.2016000000000004], 'true,false': [0.2016000000000004, nan]}, {'': [nan, 0.16181731640753824], 'false,true,false': [0.2016000000000001, nan], 'false': [0.16181731640753827, nan], 'false,true': [0.0, 0.2016000000000001]}, {'': [0.15394031595736635, nan], 'true': [0.2016, 2.523234146875356e-18], 'true,false,true': [nan, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.14917895052933286, nan], 'true': [0.20160000000000003, 0.0]}, {'': [0.2016, 6.30808536718839e-19], 'true': [0.2016, nan], 'false': [6.30808536718839e-19, nan]}, {'': [nan, 0.1443973137228396], 'false,false,false': [nan, 6.30808536718839e-19], 'false': [0.2015999999999999, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19], 'false,true': [0.2015999999999999, nan]}, {'': [0.1431899129862588, nan], 'true': [0.20159999999999992, 2.523234146875356e-18], 'true,true': [0.20159999999999992, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '3;;genre(A, B) :- workedunder(A, D).;true;true', '4;;genre(A, B) :- workedunder(A, F).;true;true', '5;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '6;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true', '7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(E, A), movie(F, E).;true;true', '9;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 4.275 seconds
Total inference time: 1.107 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 15:14:24
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'parameter': {'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 1.516, 'Learning time': 3.519, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}, 'AUC ROC': 0.965517, 'Inference time': 1.107, 'Mapping results': {'Knowledge compiling time': 0.03853154182434082, 'Generating paths time': 4.154934406280518, 'Possible mappings': [433], 'Max mapping': 4096, 'Finding best mapping': 1.430511474609375e-06, 'Generating mappings time': 0.4341146945953369, 'Numbers preds mapping': [7], 'Total time': 4.627592325210571}, 'Learning time': 7.7940000000000005, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( director(A) )
%   then return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.365 seconds
Total inference time: 0.964 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 15:14:29
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 0.964, 'Learning time': 3.365, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.811362
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.491 seconds
Total inference time: 0.932 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN), Time: 15:14:33
{'CLL': -0.811362, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.965517, 'Inference time': 0.932, 'Learning time': 1.491, 'Precision': [nan, 0.5], 'AUC PR': 0.935484}


Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017960548400878906
   Generating paths time   = 3.343738079071045
   Generating mappings time   = 0.26980042457580566
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 3.631509780883789


Best mapping found: ['advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), workedunder(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
2;false;workedunder(G, A), movie(H, A).;true;true
2;false,true;workedunder(G, I).;true;false
2;false,true,true;movie(J, I).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- workedunder(F, E).;true;true
3;true;workedunder(A, E).;false;true
3;false;workedunder(L, A), workedunder(M, L).;false;true
3;true,false,false;workedunder(J, A), movie(K, J).;false;false
3;true,false;workedunder(I, G).;false;true
3;false,false,false;workedunder(Q, A).;false;false
3;false,false;movie(N, A), workedunder(P, A).;false;true
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false,true,false;workedunder(K, I).;false;false
4;false;workedunder(H, G).;true;true
4;false,true;workedunder(A, G).;false;true
4;false,false,true;movie(N, M), workedunder(M, P).;false;false
4;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
4;false,false;movie(L, A), workedunder(M, A).;true;true
5;;genre(A, B) :- movie(C, A).;true;true
5;true;workedunder(F, A), movie(C, F).;false;true
5;false;workedunder(I, A), workedunder(J, I).;false;true
5;false,false;workedunder(K, A), movie(L, K).;true;true
5;true,false;movie(C, G), workedunder(H, G).;true;false
5;false,false,true;workedunder(K, M), movie(L, M).;false;false
5;false,false,false;workedunder(N, A), workedunder(P, N).;false;false
5;true,false,true;workedunder(H, A).;false;false
6;;genre(A, B) :- movie(E, A).;true;true
6;true;workedunder(F, A), workedunder(F, G).;false;false
6;false,true,false;movie(N, H), movie(N, A).;false;false
6;false;workedunder(H, A).;true;true
6;false,true;workedunder(H, I).;true;true
6;false,true,true;workedunder(H, L).;false;false
6;false,false;workedunder(P, A).;false;false
7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
7;true;movie(C, D).;false;false
7;false;movie(I, G).;false;true
7;false,false,true;workedunder(N, A), movie(M, N).;false;false
7;false,false,false;workedunder(P, A).;false;false
7;false,false;movie(M, A).;true;true
8;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
8;false,true,false;workedunder(E, K).;false;false
8;false;workedunder(E, A), movie(F, E).;true;true
8;false,true;workedunder(E, G).;false;true
8;false,false,false;workedunder(S, A), movie(T, S).;false;false
8;false,false;workedunder(N, A), workedunder(N, P).;false;true
9;;genre(A, B) :- movie(E, A).;true;true
9;true;workedunder(F, A), workedunder(F, G).;true;false
9;false;workedunder(I, A), movie(J, A).;true;true
9;false,true;workedunder(I, K).;false;false
9;false,false,false;workedunder(N, A).;false;false
9;true,true;movie(E, F).;false;false
9;false,false;workedunder(L, A), workedunder(L, M).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( workedunder(E, A), movie(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( workedunder(E, F) )
%   | | then return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, F) )
%   | then if ( workedunder(A, F) )
%   | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( workedunder(G, H) )
%   | | | then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( movie(C, E), workedunder(F, E) )
%   | | then if ( workedunder(F, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, F) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then if ( workedunder(E, G) )
%   | | then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then if ( movie(C, D) )
%   | | then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 2.47 seconds
Total inference time: 2.324 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false,false': [0.0, 3, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 3, 0], 'true,true': [0.894, 1, 4], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), movie(F, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)', 'false,false': 'workedunder(G, A)'}, {'true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.63e-09, 3, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true': 'workedunder(A, D)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.894, 1, 4], 'true,true': [0.0, 3, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true,false': 'workedunder(G, H)', 'false': 'workedunder(E, F)', 'false,true': 'workedunder(A, F)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.63e-09, 3, 0], 'false,true,false,false': [0.0, 0, 0], 'false,true,false,true': [0.894, 1, 4], 'false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'movie(C, E), workedunder(F, E)', 'true,false,true': 'workedunder(F, A)'}, {'true,true': [0.894, 1, 4], 'true,false,true,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false': [0.0, 3, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)'}, {'true,false': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false': 'movie(E, F)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'false,true': [1.86e-09, 3, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true': 'workedunder(E, G)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false,false': 'workedunder(H, A), workedunder(H, I)'}, {'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,true,true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)', 'true,true': 'movie(C, D)'}, {'true,false': [1.32e-09, 3, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.894, 1, 4], 'true,true,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999986, nan], 'true': [0.15999999999999986, 0.0], 'true,false': [nan, 0.0]}, {'': [0.20948195373304385, nan], 'true': [0.16, 0.0], 'true,false': [0.0, nan]}, {'': [0.15999999999999998, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18], 'false,false': [nan, 2.3129646346357427e-18]}, {'': [0.14475994169199063, nan], 'true': [-1.1564823173178713e-18, 0.15999999999999998], 'true,false': [0.15999999999999998, nan]}, {'': [nan, 0.12780916797331965], 'false,true,false': [0.16, nan], 'false': [0.12780916797331965, nan], 'false,true': [2.3129646346357427e-18, 0.16]}, {'': [0.11781035319965033, nan], 'true': [0.16, 0.0], 'true,false,true': [nan, 0.0], 'true,false': [0.0, nan]}, {'': [0.11186298797665685, nan], 'true': [0.16, 0.0]}, {'': [0.16, 1.1564823173178713e-18], 'true': [0.16, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [nan, 0.10587514683359293], 'false,false,false': [nan, -5.782411586589357e-19], 'false': [0.16, -5.782411586589357e-19], 'false,false': [nan, -5.782411586589357e-19], 'false,true': [0.16, nan]}, {'': [0.10433117216276941, nan], 'true': [0.16, 5.782411586589357e-19], 'true,true': [0.16, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '3;;genre(A, B) :- workedunder(A, D).;true;true', '4;;genre(A, B) :- workedunder(A, F).;true;true', '5;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '6;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true', '7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(E, A), movie(F, E).;true;true', '9;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.562 seconds
Total inference time: 1.204 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 15:14:45
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'parameter': {'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 2.324, 'Learning time': 2.47, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}, 'AUC ROC': 0.906977, 'Inference time': 1.204, 'Mapping results': {'Knowledge compiling time': 0.017960548400878906, 'Generating paths time': 3.343738079071045, 'Possible mappings': [433], 'Max mapping': 4096, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 0.26980042457580566, 'Numbers preds mapping': [7], 'Total time': 3.631509780883789}, 'Learning time': 4.032, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 4.123 seconds
Total inference time: 1.041 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 15:14:51
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 1.041, 'Learning time': 4.123, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.789772
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.212 seconds
Total inference time: 0.896 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN), Time: 15:14:54
{'CLL': -0.789772, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.906977, 'Inference time': 0.896, 'Learning time': 1.212, 'Precision': [nan, 0.5], 'AUC PR': 0.843137}


Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.031193971633911133
   Generating paths time   = 3.3944051265716553
   Generating mappings time   = 0.43840742111206055
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.9073486328125e-06
   Total time   = 3.864018201828003


Best mapping found: ['advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), workedunder(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
2;false;workedunder(G, A), movie(H, A).;true;true
2;false,true;workedunder(G, I).;true;false
2;false,true,true;movie(J, I).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- workedunder(F, E).;true;true
3;true;workedunder(A, E).;false;true
3;false;workedunder(L, A), workedunder(M, L).;false;true
3;true,false,false;workedunder(J, A), movie(K, J).;false;false
3;true,false;workedunder(I, G).;false;true
3;false,false,false;workedunder(Q, A).;false;false
3;false,false;movie(N, A), workedunder(P, A).;false;true
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false,true,false;workedunder(K, I).;false;false
4;false;workedunder(H, G).;true;true
4;false,true;workedunder(A, G).;false;true
4;false,false,true;movie(N, M), workedunder(M, P).;false;false
4;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
4;false,false;movie(L, A), workedunder(M, A).;true;true
5;;genre(A, B) :- movie(C, A).;true;true
5;true;workedunder(F, A), movie(C, F).;false;true
5;false;workedunder(I, A), workedunder(J, I).;false;true
5;false,false;workedunder(K, A), movie(L, K).;true;true
5;true,false;movie(C, G), workedunder(H, G).;true;false
5;false,false,true;workedunder(K, M), movie(L, M).;false;false
5;false,false,false;workedunder(N, A), workedunder(P, N).;false;false
5;true,false,true;workedunder(H, A).;false;false
6;;genre(A, B) :- movie(E, A).;true;true
6;true;workedunder(F, A), workedunder(F, G).;false;false
6;false,true,false;movie(N, H), movie(N, A).;false;false
6;false;workedunder(H, A).;true;true
6;false,true;workedunder(H, I).;true;true
6;false,true,true;workedunder(H, L).;false;false
6;false,false;workedunder(P, A).;false;false
7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
7;true;movie(C, D).;false;false
7;false;movie(I, G).;false;true
7;false,false,true;workedunder(N, A), movie(M, N).;false;false
7;false,false,false;workedunder(P, A).;false;false
7;false,false;movie(M, A).;true;true
8;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
8;false,true,false;workedunder(E, K).;false;false
8;false;workedunder(E, A), movie(F, E).;true;true
8;false,true;workedunder(E, G).;false;true
8;false,false,false;workedunder(S, A), movie(T, S).;false;false
8;false,false;workedunder(N, A), workedunder(N, P).;false;true
9;;genre(A, B) :- movie(E, A).;true;true
9;true;workedunder(F, A), workedunder(F, G).;true;false
9;false;workedunder(I, A), movie(J, A).;true;true
9;false,true;workedunder(I, K).;false;false
9;false,false,false;workedunder(N, A).;false;false
9;true,true;movie(E, F).;false;false
9;false,false;workedunder(L, A), workedunder(L, M).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, A), movie(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( workedunder(E, F) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, F) )
%   | then if ( workedunder(A, F) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( workedunder(G, H) )
%   | | | then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( movie(C, E), workedunder(F, E) )
%   | | then if ( workedunder(F, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, F) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then if ( workedunder(E, G) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), workedunder(H, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then if ( movie(C, D) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.301095
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 1.591 seconds
Total inference time: 1.97 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false,false': [0.0, 2, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 2, 0], 'true,true': [0.0, 0, 2], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), movie(F, A)', 'false,false,false': 'workedunder(H, A), movie(I, H)', 'false,false': 'workedunder(G, A)'}, {'true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true': 'workedunder(A, D)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 0, 2], 'true,true': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true,false': 'workedunder(G, H)', 'false': 'workedunder(E, F)', 'false,true': 'workedunder(A, F)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 2, 0], 'false,true,false,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 2], 'false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'movie(C, E), workedunder(F, E)', 'true,false,true': 'workedunder(F, A)'}, {'true,true': [0.0, 0, 2], 'true,false,true,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false': [0.0, 2, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)'}, {'true,false': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false': 'movie(E, F)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false,true': [0.0, 2, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true': 'workedunder(E, G)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false,false': 'workedunder(H, A), workedunder(H, I)'}, {'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,true,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)', 'true,true': 'movie(C, D)'}, {'true,false': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 0, 0]}]]
[{'': [0.25, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.17847162811629394, nan], 'true': [0.0, 0.0], 'true,false': [0.0, nan]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.06736877561142736, nan], 'true': [0.0, 0.0], 'true,false': [0.0, nan]}, {'': [nan, 0.04272553559876201], 'false,true,false': [0.0, nan], 'false': [0.04272553559876201, nan], 'false,true': [0.0, 0.0]}, {'': [0.028960720834012167, nan], 'true': [0.0, 0.0], 'true,false,true': [nan, 0.0], 'true,false': [0.0, nan]}, {'': [0.020813035147004725, nan], 'true': [0.0, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan]}, {'': [nan, 0.01222913466736446], 'false,false,false': [nan, 0.0], 'false': [0.0, 0.0], 'false,false': [nan, 0.0], 'false,true': [0.0, nan]}, {'': [0.00982069802624188, nan], 'true': [0.0, 0.0], 'true,true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '3;;genre(A, B) :- workedunder(A, D).;true;true', '4;;genre(A, B) :- workedunder(A, F).;true;true', '5;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '6;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true', '7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(E, A), movie(F, E).;true;true', '9;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.13400703000801117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.301095
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 1.394 seconds
Total inference time: 1.165 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 15:15:05
{'CLL': -0.301095, 'Recall': 1.0, 'F1': 0.909091, 'parameter': {'CLL': -0.301095, 'Recall': 1.0, 'F1': 0.909091, 'AUC ROC': 0.9, 'Inference time': 1.97, 'Learning time': 1.591, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}, 'AUC ROC': 0.9, 'Inference time': 1.165, 'Mapping results': {'Knowledge compiling time': 0.031193971633911133, 'Generating paths time': 3.3944051265716553, 'Possible mappings': [433], 'Max mapping': 4096, 'Finding best mapping': 1.9073486328125e-06, 'Generating mappings time': 0.43840742111206055, 'Numbers preds mapping': [7], 'Total time': 3.864018201828003}, 'Learning time': 2.985, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.093 seconds
Total inference time: 1.13 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 15:15:09
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 1.13, 'Learning time': 2.093, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.72 seconds
Total inference time: 0.845 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN), Time: 15:15:11
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 0.845, 'Learning time': 0.72, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


