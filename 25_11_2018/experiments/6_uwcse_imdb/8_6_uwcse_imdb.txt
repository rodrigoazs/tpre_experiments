Starting experiment #8 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.3343394112899885;  // std dev = 0,499, 21,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   else if ( advisedby(A, G), publication(H, G) )
%   | then if ( advisedby(I, G), publication(H, I) )
%   | | then if ( ta(J, I, K), ta(L, A, M) )
%   | | | then return 0.4735335504841277;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.36389606153629317;  // std dev = 4,663, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.28672036367094095;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.41134042446121344;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( publication(R, A) )
%   | | | then return 0.40360348055405776;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.26991364098186527;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( publication(E, A), advisedby(A, F) )
%   | then return 0.24415759818152227;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then if ( sameperson(A, G) )
%   | | | then return 0.32440661669252935;  // std dev = 3,146, 40,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | | | else return 0.6075894187392612;  // std dev = 0,889, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( ta(C, I, J), advisedby(I, K) )
%   | | | then return 0.24189946894348618;  // std dev = 3,011, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.30467057826294275;  // std dev = 1,868, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( advisedby(A, L), projectmember(M, L) )
%   | then return 0.2421123968371836;  // std dev = 0,491, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( publication(N, A), tempadvisedby(A, P) )
%   | | then return 0.24811816884741297;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( advisedby(A, Q), tempadvisedby(R, Q) )
%   | | | then return 0.32689387106832946;  // std dev = 3,672, 54,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return 0.3566759664491182;  // std dev = 4,122, 69,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=38 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( publication(C, F), tempadvisedby(G, F) )
%   | then return 0.20029164470108207;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else return 0.2654002605316581;  // std dev = 0,493, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L) )
%   | | | then return 0.2954420491421894;  // std dev = 3,549, 51,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=28 */
%   | | | else return 0.24047281510730323;  // std dev = 3,498, 49,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=24 */
%   | | else return 0.36939160375635083;  // std dev = 0,479, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, M) )
%   | | then if ( tempadvisedby(N, M), publication(P, N) )
%   | | | then return 0.20051063521516627;  // std dev = 2,267, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.2994091867235969;  // std dev = 3,384, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( publication(Q, A), advisedby(A, R) )
%   | | | then return 0.32250835513203197;  // std dev = 1,305, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.19280115881135557;  // std dev = 3,036, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.203600980089082;  // std dev = 0,493, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then return 0.1530693617696712;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.19973607051819148;  // std dev = 0,498, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( publication(J, A), advisedby(A, K) )
%   | then if ( tempadvisedby(L, K) )
%   | | then if ( publication(J, L) )
%   | | | then return 0.02624519772906993;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.21308449556564046;  // std dev = 2,868, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.3350890637134916;  // std dev = 0,475, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, M) )
%   | | then return 0.2347505477365736;  // std dev = 0,494, 32,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else if ( advisedby(A, N), publication(P, N) )
%   | | | then return 0.2245438945251867;  // std dev = 2,860, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.15421485882694594;  // std dev = 2,510, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( tempadvisedby(A, F), publication(E, F) )
%   | then return 0.014895955361041898;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( advisedby(A, G) )
%   | | then if ( tempadvisedby(H, G) )
%   | | | then return 0.1432714453774742;  // std dev = 2,892, 34,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | | | else return 0.02660703239360789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.22352271950045324;  // std dev = 0,488, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( advisedby(A, I), publication(J, A) )
%   | then return 0.187893771480385;  // std dev = 0,494, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( tempadvisedby(A, K), advisedby(L, K) )
%   | | then if ( ta(M, A, N), ta(P, L, N) )
%   | | | then return 0.10344993639238947;  // std dev = 1,707, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.19131351377314793;  // std dev = 3,491, 50,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=27 */
%   | | else if ( advisedby(A, Q) )
%   | | | then return 0.16478446148458434;  // std dev = 4,625, 87,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=45 */
%   | | | else return 0.11894094241953258;  // std dev = 2,592, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( publication(E, F), tempadvisedby(G, F) )
%   | then if ( ta(H, G, D), advisedby(A, F) )
%   | | then return 0.17628176152827255;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.07916431997087267;  // std dev = 0,491, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
%   | else return 0.14370132109612704;  // std dev = 0,488, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( publication(I, A), advisedby(A, J) )
%   | then if ( tempadvisedby(K, J) )
%   | | then if ( publication(I, K) )
%   | | | then return -0.021095232758439757;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.12258951170621264;  // std dev = 2,868, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.21380714468278705;  // std dev = 0,475, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( publication(L, A), tempadvisedby(A, M) )
%   | | then return 0.0830053569470399;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( tempadvisedby(A, N), advisedby(P, N) )
%   | | | then return 0.1406023074761509;  // std dev = 3,661, 55,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=29 */
%   | | | else return 0.11842650886058115;  // std dev = 5,303, 115,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=57 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( publication(C, F), tempadvisedby(G, F) )
%   | then if ( advisedby(A, H), publication(C, G) )
%   | | then return 0.15635422206311594;  // std dev = 1,219, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( publication(I, G) )
%   | | | then return 0.028859033319950822;  // std dev = 2,054, 18,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | | else return 0.09067549227837268;  // std dev = 1,982, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | else return 0.11030739320515211;  // std dev = 0,488, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( tempadvisedby(A, J), projectmember(K, J) )
%   | then return 0.15859405082943728;  // std dev = 1,088, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( advisedby(A, L), publication(M, L) )
%   | | then if ( advisedby(N, L), publication(M, N) )
%   | | | then return 0.09338411925578859;  // std dev = 4,968, 100,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=52 */
%   | | | else return 0.16529883272850016;  // std dev = 1,967, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( tempadvisedby(A, P) )
%   | | | then return 0.09698596813572477;  // std dev = 3,915, 63,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=32 */
%   | | | else return 0.07642629674423353;  // std dev = 3,300, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, F), publication(G, E) )
%   | then return 0.07905258359132974;  // std dev = 0,490, 86,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=41 */
%   | else if ( ta(C, H, I), tempadvisedby(H, J) )
%   | | then if ( advisedby(K, J), ta(L, K, D) )
%   | | | then return -0.05196933973722384;  // std dev = 2,120, 19,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0.10688323807834095;  // std dev = 1,981, 16,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | else return 0.10201558716373789;  // std dev = 0,488, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   else if ( advisedby(A, M), projectmember(N, M) )
%   | then return 0.03611780895120726;  // std dev = 0,482, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( advisedby(A, P) )
%   | | then if ( publication(Q, P) )
%   | | | then return 0.07623595464538588;  // std dev = 4,375, 78,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=42 */
%   | | | else return 0.18939891615920157;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( tempadvisedby(A, R) )
%   | | | then return 0.08444663982021969;  // std dev = 2,789, 32,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return 0.031480739727560866;  // std dev = 1,702, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then if ( ta(H, F, I), publication(G, E) )
%   | | then if ( samecourse(C, H) )
%   | | | then return 0.03267978859026301;  // std dev = 2,646, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | | else return 0.15488889713618065;  // std dev = 1,808, 14,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | else if ( tempadvisedby(J, E), ta(C, J, K) )
%   | | | then return -0.08174813221112225;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.007813953798311887;  // std dev = 2,611, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | else return 0.17273084865646504;  // std dev = 1,127, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( tempadvisedby(A, L), publication(M, A) )
%   | then return 0.014966755534121176;  // std dev = 0,491, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( advisedby(A, N), projectmember(P, N) )
%   | | then return 0.027554908417569295;  // std dev = 0,482, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( publication(Q, A) )
%   | | | then return 0.07425916076197496;  // std dev = 3,737, 58,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=32 */
%   | | | else return 0.057219829942613404;  // std dev = 5,318, 116,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=59 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), publication(D, A) )
%   then if ( publication(D, C) )
%   | then return -0.019693018093154643;  // std dev = 0,483, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.07350649730674752;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tempadvisedby(A, E) )
%   | then if ( advisedby(F, E), publication(G, F) )
%   | | then return 0.06338390201715123;  // std dev = 0,490, 45,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   | | else if ( publication(H, E), ta(I, A, J) )
%   | | | then return 0.0991064705971;  // std dev = 1,247, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.045371455529699664;  // std dev = 1,489, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( publication(K, A) )
%   | | then if ( advisedby(A, L), publication(K, L) )
%   | | | then return 0.02857199490875515;  // std dev = 4,164, 71,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=34 */
%   | | | else return 0.08375172398571641;  // std dev = 2,690, 31,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=17 */
%   | | else if ( advisedby(A, M), tempadvisedby(N, M) )
%   | | | then return 0.05080587657913493;  // std dev = 3,792, 60,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=31 */
%   | | | else return 0.011385492361659718;  // std dev = 3,317, 45,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=21 */


Predicates from source: ['inphase(person,prequals).', 'samecourse(course,course).', 'tempadvisedby(person,person).', 'publication(title,person).', 'advisedby(person,person).', 'sameperson(person,person).', 'ta(course,person,quarter).', 'projectmember(project,person).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017255544662475586
   Generating paths time   = 2.672842025756836
   Generating mappings time   = 0.7783687114715576
   Possible mappings   = [1299]
   Max mapping   = 16384
   Numbers predicates mapping   = [8]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 3.468475103378296


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false,true;workedunder(N, P), movie(Q, P).;false;false
0;false,false,false;movie(R, A).;false;false
0;false,false;workedunder(N, A).;true;true
1;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
1;false;workedunder(L, A), movie(M, L).;false;true
1;false,false,false;workedunder(Q, A), workedunder(Q, R).;false;false
1;false,false;movie(N, A), workedunder(P, A).;false;true
2;;genre(A, B) :- movie(C, A).;true;true
2;true;movie(C, F), workedunder(F, G).;false;false
2;false;workedunder(H, A), movie(I, H).;true;true
2;false,true;workedunder(H, J), movie(I, J).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;movie(Q, A), workedunder(R, A).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(J, A), workedunder(K, A).;true;true
3;false,true;workedunder(K, L).;true;false
3;false,true,true;movie(J, L).;false;false
3;false,false,false;workedunder(N, A), movie(P, N).;false;false
3;false,false;workedunder(M, A).;false;true
4;;genre(A, B) :- movie(E, A).;true;true
4;true;workedunder(F, A), movie(E, F).;false;true
4;false;workedunder(I, A), movie(J, A).;false;true
4;false,false;workedunder(K, A), workedunder(K, L).;false;true
4;true,false;workedunder(G, A).;true;false
4;false,false,false;workedunder(Q, A).;false;false
4;true,false,true;workedunder(G, H).;false;false
5;;genre(A, B) :- movie(E, A).;true;true
5;true;movie(E, F), workedunder(F, G).;true;false
5;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
5;false;movie(I, A), workedunder(J, A).;true;true
5;false,true;workedunder(J, K).;true;false
5;false,true,true;movie(I, K).;false;false
5;true,true;workedunder(F, A).;false;false
5;false,false;movie(L, A), workedunder(M, A).;false;true
6;;genre(A, B) :- movie(C, A).;true;true
6;true;movie(C, F), workedunder(F, G).;true;false
6;false;workedunder(J, A), movie(K, J).;false;true
6;true,true,false;movie(I, G).;false;false
6;false,false,false;workedunder(P, A).;false;false
6;false,false,true;workedunder(L, N), movie(M, N).;false;false
6;true,true;workedunder(H, A), movie(C, G).;false;true
6;false,false;workedunder(L, A), movie(M, L).;true;true
7;;genre(A, B) :- movie(G, E).;false;true
7;false,false,true;movie(Q, P).;false;false
7;false;workedunder(M, A), movie(N, M).;false;true
7;false,false,false;workedunder(R, A).;false;false
7;false,false;workedunder(P, A).;true;true
8;;genre(A, B) :- workedunder(E, A).;true;true
8;true;workedunder(E, F), movie(G, F).;true;false
8;true,true;movie(G, E).;true;true
8;false,false;workedunder(N, A), movie(P, N).;false;true
8;true,true,false;workedunder(E, J).;false;false
8;false,false,false;movie(Q, A).;false;false
8;true,true,true;workedunder(H, C).;false;false
8;false;workedunder(L, A), movie(M, A).;false;true
9;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
9;true;movie(D, C).;false;false
9;false,true,false;movie(H, E).;false;false
9;false;workedunder(E, A).;true;true
9;false,true;workedunder(E, F), movie(G, F).;false;true
9;false,false,true;workedunder(L, A), movie(K, L).;false;false
9;false,false,false;workedunder(M, A), workedunder(M, N).;false;false
9;false,false;movie(K, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.2215250292763393;  // std dev = 1,566, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.18192146118801353;  // std dev = 1,493, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.45485606368381715;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1592459623649813;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.3461683010073871;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.13906289079091846;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(F, A), movie(C, E) )
%   | | then return 0.27247664403833927;  // std dev = 1,05e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(G, E) )
%   | | | then return -0.12323368503116926;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.055692642260865656;  // std dev = 0,780, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.21244292356879993;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), movie(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A), movie(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(L, A) )
%   | | | then return -0.11611980075975746;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.17906347910984444;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), movie(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10472257706070033;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.354975
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.504 seconds
Total inference time: 1.135 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(I, A), workedunder(I, J)', 'false,false': 'movie(G, A), workedunder(H, A)'}, {'true': [4.21e-08, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.566, 11, 11]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.493, 11, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [2.11e-08, 0, 11], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [2.11e-08, 0, 11], 'true,true,false': [5.27e-09, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(F, A), movie(C, E)', 'true,true,false': 'movie(G, E)'}, {'true,false': [0.0, 0, 0], 'true,true,false,true': [0.0, 11, 0], 'true,true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [1.05e-08, 0, 11]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'true': [0.78, 11, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A), movie(K, J)', 'true,true': 'movie(E, C)', 'false,false,false': 'movie(L, A)', 'false': 'workedunder(H, A), movie(I, A)'}, {'true,true,true,true': [2.11e-08, 0, 11], 'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'movie(D, C)', 'false,false,true': 'workedunder(G, A), movie(F, G)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'false,false,true,false': [5.27e-09, 11, 0]}]]
[{'': [0.24999999999999958, nan], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17]}, {'': [1.6148698540002277e-16, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.11145008534151403, nan], 'true': [0.11145008534151403, nan]}, {'': [0.10130960288467862, nan]}, {'': [0.09428032459930974, nan], 'true': [4.0371746350005693e-17, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.05886232737350106, nan], 'true': [0.05886232737350106, nan], 'true,true': [4.0371746350005693e-17, 2.523234146875356e-18]}, {'': [0.03914666613307467, nan], 'true': [0.03914666613307467, nan], 'true,true': [1.0092936587501423e-17, -1.0092936587501423e-17], 'true,true,false': [-1.0092936587501423e-17, nan]}, {'': [0.027628236300163013, nan]}, {'': [4.0371746350005693e-17, -7.569702440626067e-18], 'true': [4.0371746350005693e-17, nan], 'true,true': [4.0371746350005693e-17, nan], 'false,false': [nan, -7.569702440626067e-18], 'false,false,false': [-7.569702440626067e-18, nan], 'true,true,true': [4.0371746350005693e-17, nan], 'false': [nan, -7.569702440626067e-18]}, {'': [-5.046468293750712e-18, 2.523234146875356e-18], 'true': [-5.046468293750712e-18, nan], 'false,false,true': [nan, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '5;;genre(A, B) :- workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(F, A), movie(C, E).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, E) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.581 seconds
Total inference time: 1.008 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 05:53:46
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'parameter': {'CLL': -0.354975, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 1.135, 'Learning time': 1.504, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}, 'AUC ROC': 0.875, 'Inference time': 1.008, 'Mapping results': {'Knowledge compiling time': 0.017255544662475586, 'Generating paths time': 2.672842025756836, 'Possible mappings': [1299], 'Max mapping': 16384, 'Finding best mapping': 1.430511474609375e-06, 'Generating mappings time': 0.7783687114715576, 'Numbers preds mapping': [8], 'Total time': 3.468475103378296}, 'Learning time': 3.085, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.964 seconds
Total inference time: 0.636 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 05:53:49
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 0.636, 'Learning time': 1.964, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.726963
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.988 seconds
Total inference time: 0.966 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN), Time: 05:53:51
{'CLL': -0.726963, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.875, 'Inference time': 0.966, 'Learning time': 0.988, 'Precision': [nan, 0.5], 'AUC PR': 0.8}


Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.032140493392944336
   Generating paths time   = 2.794116973876953
   Generating mappings time   = 0.7711226940155029
   Possible mappings   = [1299]
   Max mapping   = 16384
   Numbers predicates mapping   = [8]
   Finding best mapping   = 1.1920928955078125e-06
   Total time   = 3.597388982772827


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false,true;workedunder(N, P), movie(Q, P).;false;false
0;false,false,false;movie(R, A).;false;false
0;false,false;workedunder(N, A).;true;true
1;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
1;false;workedunder(L, A), movie(M, L).;false;true
1;false,false,false;workedunder(Q, A), workedunder(Q, R).;false;false
1;false,false;movie(N, A), workedunder(P, A).;false;true
2;;genre(A, B) :- movie(C, A).;true;true
2;true;movie(C, F), workedunder(F, G).;false;false
2;false;workedunder(H, A), movie(I, H).;true;true
2;false,true;workedunder(H, J), movie(I, J).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;movie(Q, A), workedunder(R, A).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(J, A), workedunder(K, A).;true;true
3;false,true;workedunder(K, L).;true;false
3;false,true,true;movie(J, L).;false;false
3;false,false,false;workedunder(N, A), movie(P, N).;false;false
3;false,false;workedunder(M, A).;false;true
4;;genre(A, B) :- movie(E, A).;true;true
4;true;workedunder(F, A), movie(E, F).;false;true
4;false;workedunder(I, A), movie(J, A).;false;true
4;false,false;workedunder(K, A), workedunder(K, L).;false;true
4;true,false;workedunder(G, A).;true;false
4;false,false,false;workedunder(Q, A).;false;false
4;true,false,true;workedunder(G, H).;false;false
5;;genre(A, B) :- movie(E, A).;true;true
5;true;movie(E, F), workedunder(F, G).;true;false
5;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
5;false;movie(I, A), workedunder(J, A).;true;true
5;false,true;workedunder(J, K).;true;false
5;false,true,true;movie(I, K).;false;false
5;true,true;workedunder(F, A).;false;false
5;false,false;movie(L, A), workedunder(M, A).;false;true
6;;genre(A, B) :- movie(C, A).;true;true
6;true;movie(C, F), workedunder(F, G).;true;false
6;false;workedunder(J, A), movie(K, J).;false;true
6;true,true,false;movie(I, G).;false;false
6;false,false,false;workedunder(P, A).;false;false
6;false,false,true;workedunder(L, N), movie(M, N).;false;false
6;true,true;workedunder(H, A), movie(C, G).;false;true
6;false,false;workedunder(L, A), movie(M, L).;true;true
7;;genre(A, B) :- movie(G, E).;false;true
7;false,false,true;movie(Q, P).;false;false
7;false;workedunder(M, A), movie(N, M).;false;true
7;false,false,false;workedunder(R, A).;false;false
7;false,false;workedunder(P, A).;true;true
8;;genre(A, B) :- workedunder(E, A).;true;true
8;true;workedunder(E, F), movie(G, F).;true;false
8;true,true;movie(G, E).;true;true
8;false,false;workedunder(N, A), movie(P, N).;false;true
8;true,true,false;workedunder(E, J).;false;false
8;false,false,false;movie(Q, A).;false;false
8;true,true,true;workedunder(H, C).;false;false
8;false;workedunder(L, A), movie(M, A).;false;true
9;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
9;true;movie(D, C).;false;false
9;false,true,false;movie(H, E).;false;false
9;false;workedunder(E, A).;true;true
9;false,true;workedunder(E, F), movie(G, F).;false;true
9;false,false,true;workedunder(L, A), movie(K, L).;false;false
9;false,false,false;workedunder(M, A), workedunder(M, N).;false;false
9;false,false;movie(K, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.22604488330790526;  // std dev = 1,802, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.18466182366462278;  // std dev = 1,739, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.4106436775429907;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.16022041515699084;  // std dev = 1,05e-08, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.3099709641602018;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.13981715887430685;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(F, A), movie(C, E) )
%   | | then return 0.23947861815962554;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( movie(G, E) )
%   | | | then return -0.12383259398362703;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.05208487309689707;  // std dev = 1,210, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.1800193727997394;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), movie(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A), movie(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(L, A) )
%   | | | then return -0.11625584388832427;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.14717527517997656;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), movie(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10483408388905004;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.334155
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 2.967 seconds
Total inference time: 0.897 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(I, A), workedunder(I, J)', 'false,false': 'movie(G, A), workedunder(H, A)'}, {'true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.802, 12, 12]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.739, 12, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false,false': [1.05e-08, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.961, 1, 12], 'true,true,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(F, A), movie(C, E)', 'true,true,false': 'movie(G, E)'}, {'true,false': [0.0, 0, 0], 'true,true,false,true': [0.0, 11, 0], 'true,true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'true': [1.21, 12, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A), movie(K, J)', 'true,true': 'movie(E, C)', 'false,false,false': 'movie(L, A)', 'false': 'workedunder(H, A), movie(I, A)'}, {'true,true,true,true': [0.961, 1, 12], 'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'movie(D, C)', 'false,false,true': 'workedunder(G, A), movie(F, G)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'false,false,true,false': [0.0, 11, 0]}]]
[{'': [0.24999999999999956, nan], 'true': [0.07100591715976314, -1.0092936587501423e-17]}, {'': [0.07100591715976333, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.13533629047183346, nan], 'true': [0.13533629047183346, nan]}, {'': [0.12595740906584602, nan]}, {'': [0.11936721756533501, nan], 'true': [0.07100591715976347, 1.0092936587501423e-17], 'true,false': [nan, 1.0092936587501423e-17]}, {'': [0.08868764584708631, nan], 'true': [0.08868764584708631, nan], 'true,true': [0.07100591715976323, -7.569702440626067e-18]}, {'': [0.07123113962866857, nan], 'true': [0.07123113962866857, nan], 'true,true': [0.07100591715976333, -2.523234146875356e-18], 'true,true,false': [-2.523234146875356e-18, nan]}, {'': [0.060969355998674236, nan]}, {'': [0.07100591715976332, -5.046468293750712e-18], 'true': [0.07100591715976332, nan], 'true,true': [0.07100591715976332, nan], 'false,false': [nan, -5.046468293750712e-18], 'false,false,false': [-5.046468293750712e-18, nan], 'true,true,true': [0.07100591715976332, nan], 'false': [nan, -5.046468293750712e-18]}, {'': [0.07100591715976327, -3.784851220313033e-18], 'true': [0.07100591715976327, nan], 'false,false,true': [nan, -3.784851220313033e-18], 'false': [nan, -3.784851220313033e-18], 'false,false': [-3.784851220313033e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '5;;genre(A, B) :- workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(F, A), movie(C, E).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, E) )
%   then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 3.637 seconds
Total inference time: 0.776 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 05:54:04
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'parameter': {'CLL': -0.334155, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 0.897, 'Learning time': 2.967, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}, 'AUC ROC': 0.885714, 'Inference time': 0.776, 'Mapping results': {'Knowledge compiling time': 0.032140493392944336, 'Generating paths time': 2.794116973876953, 'Possible mappings': [1299], 'Max mapping': 16384, 'Finding best mapping': 1.1920928955078125e-06, 'Generating mappings time': 0.7711226940155029, 'Numbers preds mapping': [8], 'Total time': 3.597388982772827}, 'Learning time': 6.604, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 2.727 seconds
Total inference time: 0.644 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 05:54:08
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 0.644, 'Learning time': 2.727, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.75044
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.86 seconds
Total inference time: 0.566 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN), Time: 05:54:09
{'CLL': -0.75044, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.885714, 'Inference time': 0.566, 'Learning time': 0.86, 'Precision': [nan, 0.5], 'AUC PR': 0.813953}


Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.033238887786865234
   Generating paths time   = 2.948033332824707
   Generating mappings time   = 0.7644686698913574
   Possible mappings   = [1299]
   Max mapping   = 16384
   Numbers predicates mapping   = [8]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 3.7457501888275146


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false,true;workedunder(N, P), movie(Q, P).;false;false
0;false,false,false;movie(R, A).;false;false
0;false,false;workedunder(N, A).;true;true
1;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
1;false;workedunder(L, A), movie(M, L).;false;true
1;false,false,false;workedunder(Q, A), workedunder(Q, R).;false;false
1;false,false;movie(N, A), workedunder(P, A).;false;true
2;;genre(A, B) :- movie(C, A).;true;true
2;true;movie(C, F), workedunder(F, G).;false;false
2;false;workedunder(H, A), movie(I, H).;true;true
2;false,true;workedunder(H, J), movie(I, J).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;movie(Q, A), workedunder(R, A).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(J, A), workedunder(K, A).;true;true
3;false,true;workedunder(K, L).;true;false
3;false,true,true;movie(J, L).;false;false
3;false,false,false;workedunder(N, A), movie(P, N).;false;false
3;false,false;workedunder(M, A).;false;true
4;;genre(A, B) :- movie(E, A).;true;true
4;true;workedunder(F, A), movie(E, F).;false;true
4;false;workedunder(I, A), movie(J, A).;false;true
4;false,false;workedunder(K, A), workedunder(K, L).;false;true
4;true,false;workedunder(G, A).;true;false
4;false,false,false;workedunder(Q, A).;false;false
4;true,false,true;workedunder(G, H).;false;false
5;;genre(A, B) :- movie(E, A).;true;true
5;true;movie(E, F), workedunder(F, G).;true;false
5;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
5;false;movie(I, A), workedunder(J, A).;true;true
5;false,true;workedunder(J, K).;true;false
5;false,true,true;movie(I, K).;false;false
5;true,true;workedunder(F, A).;false;false
5;false,false;movie(L, A), workedunder(M, A).;false;true
6;;genre(A, B) :- movie(C, A).;true;true
6;true;movie(C, F), workedunder(F, G).;true;false
6;false;workedunder(J, A), movie(K, J).;false;true
6;true,true,false;movie(I, G).;false;false
6;false,false,false;workedunder(P, A).;false;false
6;false,false,true;workedunder(L, N), movie(M, N).;false;false
6;true,true;workedunder(H, A), movie(C, G).;false;true
6;false,false;workedunder(L, A), movie(M, L).;true;true
7;;genre(A, B) :- movie(G, E).;false;true
7;false,false,true;movie(Q, P).;false;false
7;false;workedunder(M, A), movie(N, M).;false;true
7;false,false,false;workedunder(R, A).;false;false
7;false,false;workedunder(P, A).;true;true
8;;genre(A, B) :- workedunder(E, A).;true;true
8;true;workedunder(E, F), movie(G, F).;true;false
8;true,true;movie(G, E).;true;true
8;false,false;workedunder(N, A), movie(P, N).;false;true
8;true,true,false;workedunder(E, J).;false;false
8;false,false,false;movie(Q, A).;false;false
8;true,true,true;workedunder(H, C).;false;false
8;false;workedunder(L, A), movie(M, A).;false;true
9;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
9;true;movie(D, C).;false;false
9;false,true,false;movie(H, E).;false;false
9;false;workedunder(E, A).;true;true
9;false,true;workedunder(E, F), movie(G, F).;false;true
9;false,false,true;workedunder(L, A), movie(K, L).;false;false
9;false,false,false;workedunder(M, A), workedunder(M, N).;false;false
9;false,false;movie(K, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.23976942954603;  // std dev = 2,646, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.19380511765638891;  // std dev = 2,606, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.2934368460247748;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1633212375992397;  // std dev = 1,05e-08, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.2206126330107647;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return -0.14221147385424368;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(F, A), movie(C, E) )
%   | | then return 0.1656747704323253;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else if ( movie(G, E) )
%   | | | then return -0.12572984986296934;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.0525563222087159;  // std dev = 2,339, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.11260073408850182;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), movie(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A), movie(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(L, A) )
%   | | | then return -0.11790428749090318;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.0860978572217974;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), movie(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10618350802016327;  // std dev = 8,33e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.296409
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.852 seconds
Total inference time: 1.146 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(I, A), workedunder(I, J)', 'false,false': 'movie(G, A), workedunder(H, A)'}, {'true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [2.646, 18, 18]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [2.606, 18, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false,false': [1.05e-08, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [2.245, 7, 18], 'true,true,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(F, A), movie(C, E)', 'true,true,false': 'movie(G, E)'}, {'true,false': [0.0, 0, 0], 'true,true,false,true': [7.45e-09, 11, 0], 'true,true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'true': [2.339, 18, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A), movie(K, J)', 'true,true': 'movie(E, C)', 'false,false,false': 'movie(L, A)', 'false': 'workedunder(H, A), movie(I, A)'}, {'true,true,true,true': [2.245, 7, 18], 'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'movie(D, C)', 'false,false,true': 'workedunder(G, A), movie(F, G)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'false,false,true,false': [8.33e-09, 11, 0]}]]
[{'': [0.2499999999999995, nan], 'true': [0.2015999999999996, -1.0092936587501423e-17]}, {'': [0.2016000000000001, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.1945443430451362, nan], 'true': [0.1945443430451362, nan]}, {'': [0.18859746147890197, nan]}, {'': [0.18426904738647193, nan], 'true': [0.20159999999999997, 1.0092936587501423e-17], 'true,false': [nan, 1.0092936587501423e-17]}, {'': [0.16793315312010618, nan], 'true': [0.16793315312010618, nan], 'true,true': [0.20159999999999992, -1.5139404881252134e-17]}, {'': [0.158018579861572, nan], 'true': [0.158018579861572, nan], 'true,true': [0.2016, 5.046468293750712e-18], 'true,true,false': [5.046468293750712e-18, nan]}, {'': [0.1519940206137852, nan]}, {'': [0.2016, -2.523234146875356e-18], 'true': [0.2016, nan], 'true,true': [0.2016, nan], 'false,false': [nan, -2.523234146875356e-18], 'false,false,false': [-2.523234146875356e-18, nan], 'true,true,true': [0.2016, nan], 'false': [nan, -2.523234146875356e-18]}, {'': [0.20160000000000003, 6.308085367188389e-18], 'true': [0.20160000000000003, nan], 'false,false,true': [nan, 6.308085367188389e-18], 'false': [nan, 6.308085367188389e-18], 'false,false': [6.308085367188389e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '5;;genre(A, B) :- workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(F, A), movie(C, E).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, E) )
%   then return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.04 seconds
Total inference time: 1.923 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 05:54:22
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'parameter': {'CLL': -0.296409, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 1.146, 'Learning time': 1.852, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}, 'AUC ROC': 0.965517, 'Inference time': 1.923, 'Mapping results': {'Knowledge compiling time': 0.033238887786865234, 'Generating paths time': 2.948033332824707, 'Possible mappings': [1299], 'Max mapping': 16384, 'Finding best mapping': 1.430511474609375e-06, 'Generating mappings time': 0.7644686698913574, 'Numbers preds mapping': [8], 'Total time': 3.7457501888275146}, 'Learning time': 4.892, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( director(A) )
%   then return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.698 seconds
Total inference time: 1.678 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 05:54:27
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 1.678, 'Learning time': 2.698, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.811362
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.257 seconds
Total inference time: 0.674 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN), Time: 05:54:29
{'CLL': -0.811362, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.965517, 'Inference time': 0.674, 'Learning time': 1.257, 'Precision': [nan, 0.5], 'AUC PR': 0.935484}


Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.060927391052246094
   Generating paths time   = 4.660433769226074
   Generating mappings time   = 1.3828773498535156
   Possible mappings   = [1299]
   Max mapping   = 16384
   Numbers predicates mapping   = [8]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 6.104251861572266


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false,true;workedunder(N, P), movie(Q, P).;false;false
0;false,false,false;movie(R, A).;false;false
0;false,false;workedunder(N, A).;true;true
1;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
1;false;workedunder(L, A), workedunder(M, L).;false;true
1;false,false,false;workedunder(Q, A), workedunder(Q, R).;false;false
1;false,false;movie(N, A), workedunder(P, A).;false;true
2;;genre(A, B) :- movie(C, A).;true;true
2;true;movie(C, F), workedunder(F, G).;false;false
2;false;workedunder(H, A), movie(I, H).;true;true
2;false,true;workedunder(H, J), movie(I, J).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;movie(Q, A), workedunder(R, A).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(J, A), workedunder(K, A).;true;true
3;false,true;workedunder(K, L).;true;false
3;false,true,true;movie(J, L).;false;false
3;false,false,false;workedunder(N, A), movie(P, N).;false;false
3;false,false;workedunder(M, A).;false;true
4;;genre(A, B) :- movie(E, A).;true;true
4;true;workedunder(F, A), movie(E, F).;false;true
4;false;workedunder(I, A), movie(J, A).;false;true
4;false,false;workedunder(K, A), workedunder(K, L).;false;true
4;true,false;workedunder(G, A).;true;false
4;false,false,false;workedunder(Q, A).;false;false
4;true,false,true;workedunder(G, H).;false;false
5;;genre(A, B) :- movie(E, A).;true;true
5;true;movie(E, F), workedunder(F, G).;true;false
5;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
5;false;movie(I, A), workedunder(J, A).;true;true
5;false,true;workedunder(J, K).;true;false
5;false,true,true;movie(I, K).;false;false
5;true,true;workedunder(F, A).;false;false
5;false,false;movie(L, A), workedunder(M, A).;false;true
6;;genre(A, B) :- movie(C, A).;true;true
6;true;movie(C, F), workedunder(F, G).;true;false
6;false;workedunder(J, A), workedunder(K, J).;false;true
6;true,true,false;movie(I, G).;false;false
6;false,false,false;workedunder(P, A).;false;false
6;false,false,true;workedunder(L, N), movie(M, N).;false;false
6;true,true;workedunder(H, A), movie(C, G).;false;true
6;false,false;workedunder(L, A), movie(M, L).;true;true
7;;genre(A, B) :- movie(G, E).;false;true
7;false,false,true;movie(Q, P).;false;false
7;false;workedunder(M, A), workedunder(N, M).;false;true
7;false,false,false;workedunder(R, A).;false;false
7;false,false;workedunder(P, A).;true;true
8;;genre(A, B) :- workedunder(E, A).;true;true
8;true;workedunder(E, F), movie(G, F).;true;false
8;true,true;movie(G, E).;true;true
8;false,false;workedunder(N, A), workedunder(P, N).;false;true
8;true,true,false;workedunder(E, J).;false;false
8;false,false,false;movie(Q, A).;false;false
8;true,true,true;workedunder(H, C).;false;false
8;false;workedunder(L, A), movie(M, A).;false;true
9;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
9;true;movie(D, C).;false;false
9;false,true,false;movie(H, E).;false;false
9;false;workedunder(E, A).;true;true
9;false,true;workedunder(E, F), movie(G, F).;false;true
9;false,false,true;workedunder(L, A), movie(K, L).;false;false
9;false,false,false;workedunder(M, A), workedunder(M, N).;false;false
9;false,false;movie(K, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( workedunder(E, A), workedunder(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.23409923944267316;  // std dev = 1,173, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.1898987206468091;  // std dev = 1,147, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.3398735916659722;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1620168374242482;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.25511123247989737;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14120535506154822;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(F, A), movie(C, E) )
%   | | then return 0.1928969806047705;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( movie(G, E) )
%   | | | then return -0.12493331982186946;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.05050734529666734;  // std dev = 0,963, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.136583803071805;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), movie(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A), workedunder(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(L, A) )
%   | | | then return -0.1170212171461732;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.10679644951200891;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), movie(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10546101490109223;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.32538
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.404 seconds
Total inference time: 1.292 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), workedunder(F, E)', 'false,false,false': 'workedunder(I, A), workedunder(I, J)', 'false,false': 'movie(G, A), workedunder(H, A)'}, {'true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.173, 4, 4]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.147, 4, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false,false': [3.73e-09, 3, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.894, 1, 4], 'true,true,false': [0.0, 3, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(F, A), movie(C, E)', 'true,true,false': 'movie(G, E)'}, {'true,false': [0.0, 0, 0], 'true,true,false,true': [2.63e-09, 3, 0], 'true,true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'true': [0.963, 4, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A), workedunder(K, J)', 'true,true': 'movie(E, C)', 'false,false,false': 'movie(L, A)', 'false': 'workedunder(H, A), movie(I, A)'}, {'true,true,true,true': [0.894, 1, 4], 'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'movie(D, C)', 'false,false,true': 'workedunder(G, A), movie(F, G)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'false,false,true,false': [2.63e-09, 3, 0]}]]
[{'': [0.24999999999999986, nan], 'true': [0.15999999999999986, 0.0]}, {'': [0.16, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.17200226808539504, nan], 'true': [0.17200226808539504, nan]}, {'': [0.1644546506722156, nan]}, {'': [0.15903765690914812, nan], 'true': [0.16, 4.625929269271485e-18], 'true,false': [nan, 4.625929269271485e-18]}, {'': [0.1368125400532413, nan], 'true': [0.1368125400532413, nan], 'true,true': [0.15999999999999998, -2.3129646346357427e-18]}, {'': [0.12367564840686442, nan], 'true': [0.12367564840686442, nan], 'true,true': [0.15999999999999998, 2.3129646346357427e-18], 'true,true,false': [2.3129646346357427e-18, nan]}, {'': [0.11582618094950665, nan]}, {'': [0.15999999999999998, 0.0], 'true': [0.15999999999999998, nan], 'true,true': [0.15999999999999998, nan], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan], 'true,true,true': [0.15999999999999998, nan], 'false': [nan, 0.0]}, {'': [0.16, 2.3129646346357427e-18], 'true': [0.16, nan], 'false,false,true': [nan, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'false,false': [2.3129646346357427e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '5;;genre(A, B) :- workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(F, A), movie(C, E).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, E) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 2.397 seconds
Total inference time: 0.96 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 05:54:42
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'parameter': {'CLL': -0.32538, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 1.292, 'Learning time': 1.404, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}, 'AUC ROC': 0.906977, 'Inference time': 0.96, 'Mapping results': {'Knowledge compiling time': 0.060927391052246094, 'Generating paths time': 4.660433769226074, 'Possible mappings': [1299], 'Max mapping': 16384, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 1.3828773498535156, 'Numbers preds mapping': [8], 'Total time': 6.104251861572266}, 'Learning time': 3.8009999999999997, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.489 seconds
Total inference time: 0.822 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 05:54:45
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 0.822, 'Learning time': 1.489, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.789772
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.825 seconds
Total inference time: 0.622 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN), Time: 05:54:46
{'CLL': -0.789772, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.906977, 'Inference time': 0.622, 'Learning time': 0.825, 'Precision': [nan, 0.5], 'AUC PR': 0.843137}


Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017870664596557617
   Generating paths time   = 3.0045533180236816
   Generating mappings time   = 0.9478116035461426
   Possible mappings   = [1299]
   Max mapping   = 16384
   Numbers predicates mapping   = [8]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 3.970245599746704


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false,true;workedunder(N, P), movie(Q, P).;false;false
0;false,false,false;movie(R, A).;false;false
0;false,false;workedunder(N, A).;true;true
1;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
1;false;workedunder(L, A), workedunder(M, L).;false;true
1;false,false,false;workedunder(Q, A), workedunder(Q, R).;false;false
1;false,false;movie(N, A), workedunder(P, A).;false;true
2;;genre(A, B) :- movie(C, A).;true;true
2;true;movie(C, F), workedunder(F, G).;false;false
2;false;workedunder(H, A), movie(I, H).;true;true
2;false,true;workedunder(H, J), movie(I, J).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;movie(Q, A), workedunder(R, A).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(J, A), workedunder(K, A).;true;true
3;false,true;workedunder(K, L).;true;false
3;false,true,true;movie(J, L).;false;false
3;false,false,false;workedunder(N, A), movie(P, N).;false;false
3;false,false;workedunder(M, A).;false;true
4;;genre(A, B) :- movie(E, A).;true;true
4;true;workedunder(F, A), movie(E, F).;false;true
4;false;workedunder(I, A), movie(J, A).;false;true
4;false,false;workedunder(K, A), workedunder(K, L).;false;true
4;true,false;workedunder(G, A).;true;false
4;false,false,false;workedunder(Q, A).;false;false
4;true,false,true;workedunder(G, H).;false;false
5;;genre(A, B) :- movie(E, A).;true;true
5;true;movie(E, F), workedunder(F, G).;true;false
5;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
5;false;movie(I, A), workedunder(J, A).;true;true
5;false,true;workedunder(J, K).;true;false
5;false,true,true;movie(I, K).;false;false
5;true,true;workedunder(F, A).;false;false
5;false,false;movie(L, A), workedunder(M, A).;false;true
6;;genre(A, B) :- movie(C, A).;true;true
6;true;movie(C, F), workedunder(F, G).;true;false
6;false;workedunder(J, A), workedunder(K, J).;false;true
6;true,true,false;movie(I, G).;false;false
6;false,false,false;workedunder(P, A).;false;false
6;false,false,true;workedunder(L, N), movie(M, N).;false;false
6;true,true;workedunder(H, A), movie(C, G).;false;true
6;false,false;workedunder(L, A), movie(M, L).;true;true
7;;genre(A, B) :- movie(G, E).;false;true
7;false,false,true;movie(Q, P).;false;false
7;false;workedunder(M, A), workedunder(N, M).;false;true
7;false,false,false;workedunder(R, A).;false;false
7;false,false;workedunder(P, A).;true;true
8;;genre(A, B) :- workedunder(E, A).;true;true
8;true;workedunder(E, F), movie(G, F).;true;false
8;true,true;movie(G, E).;true;true
8;false,false;workedunder(N, A), workedunder(P, N).;false;true
8;true,true,false;workedunder(E, J).;false;false
8;false,false,false;movie(Q, A).;false;false
8;true,true,true;workedunder(H, C).;false;false
8;false;workedunder(L, A), movie(M, A).;false;true
9;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
9;true;movie(D, C).;false;false
9;false,true,false;movie(H, E).;false;false
9;false;workedunder(E, A).;true;true
9;false,true;workedunder(E, F), movie(G, F).;false;true
9;false,false,true;workedunder(L, A), movie(K, L).;false;false
9;false,false,false;workedunder(M, A), workedunder(M, N).;false;false
9;false,false;movie(K, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, A), workedunder(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.22152502927633905;  // std dev = 0,668, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.18192146118801372;  // std dev = 0,637, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.45485606368381726;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.15924596236498129;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.34616830100738716;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1390628907909185;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(F, A), movie(C, E) )
%   | | then return 0.27247664403833927;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( movie(G, E) )
%   | | | then return -0.12323368503116922;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.05569264226086563;  // std dev = 0,332, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.2124429235688;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), movie(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A), workedunder(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(L, A) )
%   | | | then return -0.11611980075975742;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.17906347910984444;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), movie(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10472257706070036;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.310747
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 1.357 seconds
Total inference time: 1.11 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), workedunder(F, E)', 'false,false,false': 'workedunder(I, A), workedunder(I, J)', 'false,false': 'movie(G, A), workedunder(H, A)'}, {'true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [0.668, 2, 2]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [0.637, 2, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false,false': [0.0, 2, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 2, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(F, A), movie(C, E)', 'true,true,false': 'movie(G, E)'}, {'true,false': [0.0, 0, 0], 'true,true,false,true': [0.0, 2, 0], 'true,true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'true': [0.332, 2, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A), workedunder(K, J)', 'true,true': 'movie(E, C)', 'false,false,false': 'movie(L, A)', 'false': 'workedunder(H, A), movie(I, A)'}, {'true,true,true,true': [0.0, 0, 2], 'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'movie(D, C)', 'false,false,true': 'workedunder(G, A), movie(F, G)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 2, 0]}]]
[{'': [0.25, nan], 'true': [0.0, 0.0]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.11145008534151418, nan], 'true': [0.11145008534151418, nan]}, {'': [0.10130960288467858, nan]}, {'': [0.09428032459930984, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.058862327373501014, nan], 'true': [0.058862327373501014, nan], 'true,true': [0.0, 0.0]}, {'': [0.03914666613307467, nan], 'true': [0.03914666613307467, nan], 'true,true': [0.0, 0.0], 'true,true,false': [0.0, nan]}, {'': [0.02762823630016302, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'true,true,true': [0.0, nan], 'false': [nan, 0.0], 'false,false,false': [0.0, nan], 'true,true': [0.0, nan], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false,false,true': [nan, 0.0], 'false': [nan, 0.0], 'false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '4;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '5;;genre(A, B) :- workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(F, A), movie(C, E).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,334, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,334, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, E) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,170, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.300991
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 1.825 seconds
Total inference time: 0.964 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 05:54:56
{'CLL': -0.300991, 'Recall': 1.0, 'F1': 0.909091, 'parameter': {'CLL': -0.310747, 'Recall': 1.0, 'F1': 0.909091, 'AUC ROC': 0.9, 'Inference time': 1.11, 'Learning time': 1.357, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}, 'AUC ROC': 0.9, 'Inference time': 0.964, 'Mapping results': {'Knowledge compiling time': 0.017870664596557617, 'Generating paths time': 3.0045533180236816, 'Possible mappings': [1299], 'Max mapping': 16384, 'Finding best mapping': 9.5367431640625e-07, 'Generating mappings time': 0.9478116035461426, 'Numbers preds mapping': [8], 'Total time': 3.970245599746704}, 'Learning time': 3.182, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.22 seconds
Total inference time: 0.65 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 05:54:58
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 0.65, 'Learning time': 1.22, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.775 seconds
Total inference time: 0.958 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN), Time: 05:55:00
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 0.958, 'Learning time': 0.775, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


