Starting experiment #6 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( tempadvisedby(A, G), publication(E, G) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3581489350995123;  // std dev = 0,500, 18,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L) )
%   | | | then return 0.4071685429426485;  // std dev = 3,554, 51,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=28 */
%   | | | else return 0.3479448534668582;  // std dev = 3,499, 49,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=24 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, M), projectmember(N, M) )
%   | | then return 0.24276431971489695;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( advisedby(A, P) )
%   | | | then return 0.4581489350995123;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.3470378239884017;  // std dev = 4,742, 90,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=44 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F) )
%   | then return 0.2431522573300012;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then return 0.47540780245230163;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.24779728811959792;  // std dev = 0,493, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( advisedby(A, I), publication(J, I) )
%   | then if ( advisedby(K, I), publication(J, K) )
%   | | then if ( ta(L, K, M), ta(N, A, P) )
%   | | | then return 0.41642849982537694;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.31201240418820314;  // std dev = 4,662, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.43201604470553195;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, Q) )
%   | | then if ( tempadvisedby(R, Q), publication(S, R) )
%   | | | then return 0.2390253257491676;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.3636453865394401;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else return 0.2554524423348888;  // std dev = 0,495, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( advisedby(A, E), publication(F, A) )
%   | then if ( tempadvisedby(G, E) )
%   | | then return 0.2209329843208306;  // std dev = 0,496, 34,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | | else return 0.10912178652522565;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( ta(C, H, D), advisedby(H, I) )
%   | | then return 0.2938614907434983;  // std dev = 0,494, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | else if ( ta(C, J, K), advisedby(J, L) )
%   | | | then return 0.1901562241304402;  // std dev = 3,012, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.26120273584774223;  // std dev = 1,859, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( advisedby(A, M), projectmember(N, M) )
%   | then return 0.20878533243596462;  // std dev = 0,488, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( tempadvisedby(A, P), publication(Q, A) )
%   | | then return 0.19956621655278314;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( advisedby(A, R), tempadvisedby(S, R) )
%   | | | then return 0.26868160057964974;  // std dev = 3,672, 54,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return 0.30052876913860804;  // std dev = 4,117, 69,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=38 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.20216536651047706;  // std dev = 0,495, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else return 0.16925820770729885;  // std dev = 0,496, 51,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=23 */
%   else if ( publication(G, A), advisedby(A, H) )
%   | then if ( tempadvisedby(I, H) )
%   | | then if ( publication(J, I) )
%   | | | then return 0.23486142577252844;  // std dev = 1,796, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.1855082981385455;  // std dev = 2,398, 23,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | | else return 0.3375682533596707;  // std dev = 0,475, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, K) )
%   | | then if ( tempadvisedby(L, K), publication(M, L) )
%   | | | then return 0.16002473868282358;  // std dev = 1,984, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.31257103582299617;  // std dev = 1,936, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( advisedby(A, N), publication(P, N) )
%   | | | then return 0.2238454966801545;  // std dev = 2,859, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.14279966400190738;  // std dev = 2,502, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then if ( publication(G, E), ta(H, F, I) )
%   | | then return 0.1668167374062312;  // std dev = 0,494, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | else return 0.08248660886377104;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.27493232801171846;  // std dev = 1,141, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( publication(J, A), advisedby(A, K) )
%   | then if ( publication(J, K) )
%   | | then return 0.16695173155638793;  // std dev = 0,498, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else return 0.2875410387490678;  // std dev = 0,468, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | else if ( tempadvisedby(A, L) )
%   | | then if ( tempadvisedby(M, L), publication(N, M) )
%   | | | then return 0.11858514493301146;  // std dev = 2,516, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return 0.203927934029211;  // std dev = 3,385, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, P), publication(Q, P) )
%   | | | then return 0.17336967106618748;  // std dev = 2,860, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.12522842368724107;  // std dev = 3,148, 41,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then return 0.10212060060447793;  // std dev = 0,494, 74,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=34 */
%   | else return 0.20802956284132076;  // std dev = 1,140, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( publication(H, A) )
%   | then if ( publication(H, I), advisedby(J, I) )
%   | | then if ( ta(K, J, L), publication(M, J) )
%   | | | then return 0.15808230444955548;  // std dev = 3,377, 47,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=25 */
%   | | | else return 0.05655522142268862;  // std dev = 2,113, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | else return 0.241754030116445;  // std dev = 0,462, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.09019455935264384;  // std dev = 1,850, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.15642343213891144;  // std dev = 3,384, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.122726661408435;  // std dev = 3,393, 47,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=24 */
%   | | | else return 0.05157551065247335;  // std dev = 2,070, 18,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.09977141056306328;  // std dev = 0,492, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then if ( tempadvisedby(J, I), publication(K, J) )
%   | | | then return -0.052582876022302806;  // std dev = 1,417, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.0874277914297569;  // std dev = 2,631, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | | else if ( tempadvisedby(A, L), publication(M, L) )
%   | | | then return 0.15754663340345948;  // std dev = 1,458, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.00842807468317951;  // std dev = 1,104, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( publication(N, A), advisedby(A, P) )
%   | then return 0.1147782268418185;  // std dev = 0,491, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( tempadvisedby(A, Q) )
%   | | then return 0.11383188059898203;  // std dev = 0,492, 32,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else if ( advisedby(A, R), publication(S, R) )
%   | | | then return 0.10226301594378005;  // std dev = 2,860, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.060273324442858496;  // std dev = 2,495, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( publication(F, E) )
%   | then if ( advisedby(G, E), publication(H, G) )
%   | | then if ( publication(F, A) )
%   | | | then return 0.03731294067112314;  // std dev = 2,650, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | | else return 0.07416126503275985;  // std dev = 3,215, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | | else return 0.19621294014755838;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.02699962317757083;  // std dev = 1,081, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( publication(I, A), advisedby(A, J) )
%   | then return 0.08661489561241897;  // std dev = 0,491, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( publication(K, A), tempadvisedby(A, L) )
%   | | then if ( publication(K, L) )
%   | | | then return -0.008222490663449836;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.11471941055276481;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tempadvisedby(A, M) )
%   | | | then return 0.08612863951987318;  // std dev = 3,842, 61,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=32 */
%   | | | else return 0.06783010771028475;  // std dev = 4,244, 74,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=36 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), publication(D, A) )
%   then if ( publication(D, C) )
%   | then if ( ta(E, A, F) )
%   | | then return -0.043204886742122785;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.015873357069148785;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.08721761792496192;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( advisedby(A, G), projectmember(H, G) )
%   | then if ( advisedby(A, I), publication(J, I) )
%   | | then return 0.4973850242247568;  // std dev = 0,145, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.001266999555067816;  // std dev = 0,482, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | else if ( ta(K, A, L), advisedby(A, M) )
%   | | then if ( publication(N, M), tempadvisedby(P, M) )
%   | | | then return 0.04441262528943579;  // std dev = 3,661, 55,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=26 */
%   | | | else return 0.009923758837725732;  // std dev = 2,342, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | else if ( tempadvisedby(A, Q), projectmember(R, Q) )
%   | | | then return 0.13152518052909867;  // std dev = 1,054, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.059543004380821676;  // std dev = 6,417, 169,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=88 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( publication(C, A), tempadvisedby(A, D) )
%   then if ( publication(C, D) )
%   | then return -0.004849537547318206;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.06592827613916039;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( ta(E, A, F), advisedby(A, G) )
%   | then if ( tempadvisedby(H, G), ta(E, H, I) )
%   | | then if ( publication(J, A) )
%   | | | then return 0.029988490614901688;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.10669098207498895;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.041439255542869174;  // std dev = 0,489, 70,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=34 */
%   | else if ( publication(K, A) )
%   | | then if ( advisedby(A, L), tempadvisedby(M, L) )
%   | | | then return 0.023369475804600928;  // std dev = 2,996, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | | else return 0.10599052252418151;  // std dev = 2,429, 26,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | else if ( tempadvisedby(A, N), projectmember(P, N) )
%   | | | then return 0.09881057388444772;  // std dev = 1,054, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.03610330391318191;  // std dev = 5,416, 121,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=60 */


Predicates from source: ['inphase(person,prequals).', 'advisedby(person,person).', 'ta(course,person,quarter).', 'projectmember(project,person).', 'tempadvisedby(person,person).', 'publication(title,person).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017287015914916992
   Generating paths time   = 4.246322393417358
   Generating mappings time   = 0.06266951560974121
   Possible mappings   = [145]
   Max mapping   = 1024
   Numbers predicates mapping   = [6]
   Finding best mapping   = 1.9073486328125e-06
   Total time   = 4.326290845870972


Best mapping found: ['projectmember(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), movie(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;true;true
2;true;workedunder(E, G).;false;true
2;false;workedunder(M, A), movie(N, M).;false;true
2;true,false,false;workedunder(L, J).;false;false
2;true,false;workedunder(I, H).;false;true
2;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
2;false,false;workedunder(P, A), movie(Q, A).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(G, A), workedunder(H, A).;true;true
3;false,true;workedunder(H, I).;true;false
3;false,true,true;movie(J, I).;false;false
3;false,false,true;workedunder(K, L), movie(M, L).;false;false
3;false,false,false;workedunder(N, A), movie(P, N).;false;false
3;false,false;workedunder(K, A).;true;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true;workedunder(E, F), movie(G, F).;true;false
4;false;movie(J, A), workedunder(K, A).;true;true
4;false,true;movie(J, K).;false;false
4;false,false,false;workedunder(P, A), movie(Q, P).;false;false
4;false,false,true;workedunder(L, M), movie(N, M).;false;false
4;true,true;movie(G, E).;false;false
4;false,false;workedunder(L, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;false;false
5;false;movie(H, A).;true;true
5;false,true;movie(H, I), workedunder(I, J).;true;false
5;false,true,true;movie(M, J).;false;false
5;false,false,true;workedunder(N, P), movie(Q, P).;false;false
5;false,false,false;workedunder(R, A).;false;false
5;false,false;workedunder(N, A).;true;true
6;;genre(A, B) :- workedunder(F, E).;false;true
6;false;movie(N, A), workedunder(P, A).;false;true
6;false,false,false;workedunder(R, A), movie(S, R).;false;false
6;false,false;workedunder(Q, A).;false;true
7;;genre(A, B) :- workedunder(E, A).;true;true
7;true;movie(F, E).;true;false
7;true,true;workedunder(E, G), movie(H, G).;true;false
7;false,false;movie(K, A), workedunder(L, A).;true;true
7;false,false,false;workedunder(M, A).;false;false
7;false,false,true;movie(K, L).;false;false
7;true,true,true;movie(F, A).;false;false
7;false;movie(I, A), workedunder(J, A).;false;true
8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
8;true;movie(D, C).;false;false
8;false;workedunder(G, A), movie(H, G).;true;true
8;false,true;workedunder(I, A), movie(J, I).;false;false
8;false,false,true;movie(N, M), workedunder(M, P).;false;false
8;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
8;false,false;workedunder(M, A).;true;true
9;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
9;true;movie(C, D).;false;false
9;false;workedunder(G, A).;true;true
9;false,true;workedunder(G, H).;true;false
9;false,true,true;movie(J, A).;false;false
9;false,false,true;workedunder(L, A), workedunder(L, M).;false;false
9;false,false,false;workedunder(N, A), movie(P, N).;false;false
9;false,false;movie(K, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( workedunder(C, E) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), workedunder(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.15795862733523683;  // std dev = 1,217, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.379670407154312;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11694812838381761;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.2951257630772826;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.10540117602192779;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.07087859096812653;  // std dev = 0,782, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( movie(D, C) )
%   | then if ( workedunder(C, E), movie(F, E) )
%   | | then if ( movie(D, A) )
%   | | | then return 0.22502449270940558;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, A), workedunder(H, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(I, A), workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10219004323816935;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.18821560123839973;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09318816756258273;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.16112756551602878;  // std dev = 1,49e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), workedunder(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08560629730701765;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.351932
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 2.294 seconds
Total inference time: 2.211 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'true,true': [4.21e-08, 0, 11], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'workedunder(C, E)', 'false': 'workedunder(F, A), movie(G, F)', 'false,false,false': 'workedunder(J, A), workedunder(J, K)', 'false,false': 'workedunder(H, A), movie(I, A)'}, {'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.217, 11, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'movie(F, A), workedunder(G, A)', 'true,true': 'movie(E, C)', 'false,false,false': 'workedunder(I, A), movie(J, I)', 'false,false': 'workedunder(H, A)'}, {'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 11], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'movie(F, A)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,true,true': [7.45e-09, 11, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [0.782, 11, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'movie(D, C)', 'true,true,true': 'movie(D, A)', 'false,false': 'movie(I, A), workedunder(J, A)', 'true,true': 'workedunder(C, E), movie(F, E)', 'false,false,false': 'workedunder(K, A)', 'false': 'movie(G, A), workedunder(H, A)'}, {'true,true,true,true': [0.0, 0, 11], 'false,false,false,false': [3.73e-09, 11, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'movie(D, C)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(H, A), movie(I, H)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [7.45e-09, 0, 11]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false,false,true': 'workedunder(G, A), workedunder(G, H)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [1.49e-08, 0, 11], 'false,false,true,false': [5.27e-09, 11, 0]}]]
[{'': [0.24999999999999958, nan], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.17847162811629388, nan], 'true': [1.6148698540002277e-16, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [-2.0185873175002846e-16, 5.046468293750712e-18], 'true': [-2.0185873175002846e-16, nan], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.06736877561142736, nan]}, {'': [-4.0371746350005693e-17, -2.523234146875356e-18], 'true': [-4.0371746350005693e-17, nan], 'false': [nan, -2.523234146875356e-18], 'true,true': [-4.0371746350005693e-17, nan], 'false,false,false': [nan, -2.523234146875356e-18], 'false,false': [nan, -2.523234146875356e-18]}, {'': [-2.0185873175002847e-17, 5.046468293750712e-18], 'false,true,true': [5.046468293750712e-18, nan], 'true': [-2.0185873175002847e-17, nan], 'false': [5.046468293750712e-18, nan], 'false,true': [5.046468293750712e-18, nan]}, {'': [0.02780443610551242, nan]}, {'': [-2.0185873175002847e-17, 1.261617073437678e-18], 'true': [-2.0185873175002847e-17, nan], 'true,true,true': [-2.0185873175002847e-17, nan], 'false': [nan, 1.261617073437678e-18], 'true,true': [-2.0185873175002847e-17, nan], 'false,false,false': [nan, 1.261617073437678e-18], 'false,false': [nan, 1.261617073437678e-18]}, {'': [5.046468293750712e-18, 0.0], 'true': [5.046468293750712e-18, nan], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [2.0185873175002847e-17, 2.523234146875356e-18], 'true': [2.0185873175002847e-17, nan], 'false,false,true': [nan, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '9;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.554 seconds
Total inference time: 0.811 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 23:21:09
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'parameter': {'CLL': -0.351932, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 2.211, 'Learning time': 2.294, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}, 'AUC ROC': 0.875, 'Inference time': 0.811, 'Mapping results': {'Knowledge compiling time': 0.017287015914916992, 'Generating paths time': 4.246322393417358, 'Possible mappings': [145], 'Max mapping': 1024, 'Finding best mapping': 1.9073486328125e-06, 'Generating mappings time': 0.06266951560974121, 'Numbers preds mapping': [6], 'Total time': 4.326290845870972}, 'Learning time': 3.848, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.908 seconds
Total inference time: 1.428 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 23:21:13
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 1.428, 'Learning time': 1.908, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.726963
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.378 seconds
Total inference time: 1.066 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN), Time: 23:21:16
{'CLL': -0.726963, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.875, 'Inference time': 1.066, 'Learning time': 1.378, 'Precision': [nan, 0.5], 'AUC PR': 0.8}


Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.029615163803100586
   Generating paths time   = 3.2053682804107666
   Generating mappings time   = 0.03560781478881836
   Possible mappings   = [145]
   Max mapping   = 1024
   Numbers predicates mapping   = [6]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 3.270627021789551


Best mapping found: ['projectmember(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), movie(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;true;true
2;true;workedunder(E, G).;false;true
2;false;workedunder(M, A), movie(N, M).;false;true
2;true,false,false;workedunder(L, J).;false;false
2;true,false;workedunder(I, H).;false;true
2;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
2;false,false;workedunder(P, A), movie(Q, A).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(G, A), workedunder(H, A).;true;true
3;false,true;workedunder(H, I).;true;false
3;false,true,true;movie(J, I).;false;false
3;false,false,true;workedunder(K, L), movie(M, L).;false;false
3;false,false,false;workedunder(N, A), movie(P, N).;false;false
3;false,false;workedunder(K, A).;true;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true;workedunder(E, F), movie(G, F).;true;false
4;false;movie(J, A), workedunder(K, A).;true;true
4;false,true;movie(J, K).;false;false
4;false,false,false;workedunder(P, A), movie(Q, P).;false;false
4;false,false,true;workedunder(L, M), movie(N, M).;false;false
4;true,true;movie(G, E).;false;false
4;false,false;workedunder(L, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;false;false
5;false;movie(H, A).;true;true
5;false,true;movie(H, I), workedunder(I, J).;true;false
5;false,true,true;movie(M, J).;false;false
5;false,false,true;workedunder(N, P), movie(Q, P).;false;false
5;false,false,false;workedunder(R, A).;false;false
5;false,false;workedunder(N, A).;true;true
6;;genre(A, B) :- workedunder(F, E).;false;true
6;false;movie(N, A), workedunder(P, A).;false;true
6;false,false,false;workedunder(R, A), movie(S, R).;false;false
6;false,false;workedunder(Q, A).;false;true
7;;genre(A, B) :- workedunder(E, A).;true;true
7;true;movie(F, E).;true;false
7;true,true;workedunder(E, G), movie(H, G).;true;false
7;false,false;movie(K, A), workedunder(L, A).;true;true
7;false,false,false;workedunder(M, A).;false;false
7;false,false,true;movie(K, L).;false;false
7;true,true,true;movie(F, A).;false;false
7;false;movie(I, A), workedunder(J, A).;false;true
8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
8;true;movie(D, C).;false;false
8;false;workedunder(G, A), movie(H, G).;true;true
8;false,true;workedunder(I, A), movie(J, I).;false;false
8;false,false,true;movie(N, M), workedunder(M, P).;false;false
8;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
8;false,false;workedunder(M, A).;true;true
9;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
9;true;movie(C, D).;false;false
9;false;workedunder(G, A).;true;true
9;false,true;workedunder(G, H).;true;false
9;false,true,true;movie(J, A).;false;false
9;false,false,true;workedunder(L, A), workedunder(L, M).;false;false
9;false,false,false;workedunder(N, A), movie(P, N).;false;false
9;false,false;movie(K, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( workedunder(C, E) )
%   | then return 0.5123505661168763;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), workedunder(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.16214040922766773;  // std dev = 1,528, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.34533087234248505;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11738067852967662;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.2640730309307144;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.10575522108695315;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.06828761491311085;  // std dev = 1,213, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( movie(D, C) )
%   | then if ( workedunder(C, E), movie(F, E) )
%   | | then if ( movie(D, A) )
%   | | | then return 0.19374828807902636;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, A), workedunder(H, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(I, A), workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10226385095097255;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.15723715925458953;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09324990797012657;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.13022469101534478;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), workedunder(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08565865328184974;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.326947
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 3.637 seconds
Total inference time: 1.149 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'true,true': [0.961, 1, 12], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'workedunder(C, E)', 'false': 'workedunder(F, A), movie(G, F)', 'false,false,false': 'workedunder(J, A), workedunder(J, K)', 'false,false': 'workedunder(H, A), movie(I, A)'}, {'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.528, 12, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'movie(F, A), workedunder(G, A)', 'true,true': 'movie(E, C)', 'false,false,false': 'workedunder(I, A), movie(J, I)', 'false,false': 'workedunder(H, A)'}, {'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true,true': [0.961, 1, 12], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'movie(F, A)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 11, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.213, 12, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'movie(D, C)', 'true,true,true': 'movie(D, A)', 'false,false': 'movie(I, A), workedunder(J, A)', 'true,true': 'workedunder(C, E), movie(F, E)', 'false,false,false': 'workedunder(K, A)', 'false': 'movie(G, A), workedunder(H, A)'}, {'true,true,true,true': [0.961, 1, 12], 'false,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'movie(D, C)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(H, A), movie(I, H)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false,false,true': 'workedunder(G, A), workedunder(G, H)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'false,false,true,false': [0.0, 11, 0]}]]
[{'': [0.24999999999999956, nan], 'true': [0.07100591715976314, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.19076867375623552, nan], 'true': [0.07100591715976333, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.07100591715976351, 5.046468293750712e-18], 'true': [0.07100591715976351, nan], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.09731751852547608, nan]}, {'': [0.07100591715976337, -2.523234146875356e-18], 'true': [0.07100591715976337, nan], 'false': [nan, -2.523234146875356e-18], 'false,false,false': [nan, -2.523234146875356e-18], 'true,true': [0.07100591715976337, nan], 'false,false': [nan, -2.523234146875356e-18]}, {'': [0.07100591715976332, 0.0], 'true': [0.07100591715976332, nan], 'false': [0.0, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.06134484954534902, nan]}, {'': [0.0710059171597633, 2.523234146875356e-18], 'true': [0.0710059171597633, nan], 'true,true': [0.0710059171597633, nan], 'false,false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'true,true,true': [0.0710059171597633, nan], 'false': [nan, 2.523234146875356e-18]}, {'': [0.07100591715976332, 5.046468293750712e-18], 'true': [0.07100591715976332, nan], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.07100591715976332, 0.0], 'true': [0.07100591715976332, nan], 'false,false,true': [nan, 0.0], 'false': [nan, 0.0], 'false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '9;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 3.506 seconds
Total inference time: 0.818 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 23:21:30
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'parameter': {'CLL': -0.326947, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 1.149, 'Learning time': 3.637, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}, 'AUC ROC': 0.885714, 'Inference time': 0.818, 'Mapping results': {'Knowledge compiling time': 0.029615163803100586, 'Generating paths time': 3.2053682804107666, 'Possible mappings': [145], 'Max mapping': 1024, 'Finding best mapping': 9.5367431640625e-07, 'Generating mappings time': 0.03560781478881836, 'Numbers preds mapping': [6], 'Total time': 3.270627021789551}, 'Learning time': 7.143, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( director(A) )
%   then return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 4.361 seconds
Total inference time: 0.62 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 23:21:35
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 0.62, 'Learning time': 4.361, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.75044
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.818 seconds
Total inference time: 0.823 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN), Time: 23:21:37
{'CLL': -0.75044, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.885714, 'Inference time': 0.823, 'Learning time': 0.818, 'Precision': [nan, 0.5], 'AUC PR': 0.813953}


Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017902612686157227
   Generating paths time   = 4.111926317214966
   Generating mappings time   = 0.06655240058898926
   Possible mappings   = [145]
   Max mapping   = 1024
   Numbers predicates mapping   = [6]
   Finding best mapping   = 1.9073486328125e-06
   Total time   = 4.196392774581909


Best mapping found: ['projectmember(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), movie(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;true;true
2;true;workedunder(E, G).;false;true
2;false;workedunder(M, A), movie(N, M).;false;true
2;true,false,false;workedunder(L, J).;false;false
2;true,false;workedunder(I, H).;false;true
2;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
2;false,false;workedunder(P, A), movie(Q, A).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(G, A), workedunder(H, A).;true;true
3;false,true;workedunder(H, I).;true;false
3;false,true,true;movie(J, I).;false;false
3;false,false,true;workedunder(K, L), movie(M, L).;false;false
3;false,false,false;workedunder(N, A), movie(P, N).;false;false
3;false,false;workedunder(K, A).;true;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true;workedunder(E, F), movie(G, F).;true;false
4;false;movie(J, A), workedunder(K, A).;true;true
4;false,true;movie(J, K).;false;false
4;false,false,false;workedunder(P, A), movie(Q, P).;false;false
4;false,false,true;workedunder(L, M), movie(N, M).;false;false
4;true,true;movie(G, E).;false;false
4;false,false;workedunder(L, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;false;false
5;false;movie(H, A).;true;true
5;false,true;movie(H, I), workedunder(I, J).;true;false
5;false,true,true;movie(M, J).;false;false
5;false,false,true;workedunder(N, P), movie(Q, P).;false;false
5;false,false,false;workedunder(R, A).;false;false
5;false,false;workedunder(N, A).;true;true
6;;genre(A, B) :- workedunder(F, E).;false;true
6;false;movie(N, A), workedunder(P, A).;false;true
6;false,false,false;workedunder(R, A), movie(S, R).;false;false
6;false,false;workedunder(Q, A).;false;true
7;;genre(A, B) :- workedunder(E, A).;true;true
7;true;movie(F, E).;true;false
7;true,true;workedunder(E, G), movie(H, G).;true;false
7;false,false;movie(K, A), workedunder(L, A).;true;true
7;false,false,false;workedunder(M, A).;false;false
7;false,false,true;movie(K, L).;false;false
7;true,true,true;movie(F, A).;false;false
7;false;movie(I, A), workedunder(J, A).;false;true
8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
8;true;movie(D, C).;false;false
8;false;workedunder(G, A), movie(H, G).;true;true
8;false,true;workedunder(I, A), movie(J, I).;false;false
8;false,false,true;movie(N, M), workedunder(M, P).;false;false
8;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
8;false,false;workedunder(M, A).;true;true
9;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
9;true;movie(C, D).;false;false
9;false;workedunder(G, A).;true;true
9;false,true;workedunder(G, H).;true;false
9;false,true,true;movie(J, A).;false;false
9;false,false,true;workedunder(L, A), workedunder(L, M).;false;false
9;false,false,false;workedunder(N, A), movie(P, N).;false;false
9;false,false;movie(K, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( workedunder(C, E) )
%   | then return 0.39468718495146987;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), workedunder(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.17931826699808692;  // std dev = 2,508, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.25878603914901577;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11917207682255643;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.19419056870327844;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.1072191863590061;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.07174776700599174;  // std dev = 2,344, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( movie(D, C) )
%   | then if ( workedunder(C, E), movie(F, E) )
%   | | then if ( movie(D, A) )
%   | | | then return 0.1287179345000556;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, A), workedunder(H, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(I, A), workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10387075057951986;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.09801412171314201;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09459240283509128;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.07525937296520657;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), workedunder(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08679586469732713;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.282685
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.791 seconds
Total inference time: 1.573 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'true,true': [2.245, 7, 18], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'workedunder(C, E)', 'false': 'workedunder(F, A), movie(G, F)', 'false,false,false': 'workedunder(J, A), workedunder(J, K)', 'false,false': 'workedunder(H, A), movie(I, A)'}, {'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [2.508, 18, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'movie(F, A), workedunder(G, A)', 'true,true': 'movie(E, C)', 'false,false,false': 'workedunder(I, A), movie(J, I)', 'false,false': 'workedunder(H, A)'}, {'false,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true,true': [2.245, 7, 18], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'movie(F, A)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 11, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [2.344, 18, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'movie(D, C)', 'true,true,true': 'movie(D, A)', 'false,false': 'movie(I, A), workedunder(J, A)', 'true,true': 'workedunder(C, E), movie(F, E)', 'false,false,false': 'workedunder(K, A)', 'false': 'movie(G, A), workedunder(H, A)'}, {'true,true,true,true': [2.245, 7, 18], 'false,false,false,false': [3.73e-09, 11, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'movie(D, C)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(H, A), movie(I, H)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,false': [3.73e-09, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false,false,true': 'workedunder(G, A), workedunder(G, H)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'false,false,true,false': [0.0, 11, 0]}]]
[{'': [0.2499999999999995, nan], 'true': [0.2015999999999996, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.22099738300738728, nan], 'true': [0.2016000000000001, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.20160000000000053, 5.046468293750712e-18], 'true': [0.20160000000000053, nan], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.1747217246282939, nan]}, {'': [0.20159999999999975, 2.523234146875356e-18], 'true': [0.20159999999999975, nan], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'true,true': [0.20159999999999975, nan], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.20160000000000003, 0.0], 'true': [0.20160000000000003, nan], 'false': [0.0, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.15258579265939826, nan]}, {'': [0.20160000000000003, 1.261617073437678e-18], 'true': [0.20160000000000003, nan], 'true,true': [0.20160000000000003, nan], 'false,false': [nan, 1.261617073437678e-18], 'false,false,false': [nan, 1.261617073437678e-18], 'true,true,true': [0.20160000000000003, nan], 'false': [nan, 1.261617073437678e-18]}, {'': [0.2016, 1.261617073437678e-18], 'true': [0.2016, nan], 'false': [nan, 1.261617073437678e-18], 'false,false,false': [nan, 1.261617073437678e-18], 'false,false': [nan, 1.261617073437678e-18]}, {'': [0.20160000000000003, 0.0], 'true': [0.20160000000000003, nan], 'false,false,true': [nan, 0.0], 'false': [nan, 0.0], 'false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '9;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.157 seconds
Total inference time: 1.728 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 23:21:53
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'parameter': {'CLL': -0.282685, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 1.573, 'Learning time': 3.791, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}, 'AUC ROC': 0.965517, 'Inference time': 1.728, 'Mapping results': {'Knowledge compiling time': 0.017902612686157227, 'Generating paths time': 4.111926317214966, 'Possible mappings': [145], 'Max mapping': 1024, 'Finding best mapping': 1.9073486328125e-06, 'Generating mappings time': 0.06655240058898926, 'Numbers preds mapping': [6], 'Total time': 4.196392774581909}, 'Learning time': 6.948, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.229 seconds
Total inference time: 0.773 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 23:21:57
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 0.773, 'Learning time': 3.229, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.811362
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.058 seconds
Total inference time: 0.543 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN), Time: 23:21:59
{'CLL': -0.811362, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.965517, 'Inference time': 0.543, 'Learning time': 1.058, 'Precision': [nan, 0.5], 'AUC PR': 0.935484}


Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.028661251068115234
   Generating paths time   = 3.087367534637451
   Generating mappings time   = 0.06538724899291992
   Possible mappings   = [145]
   Max mapping   = 1024
   Numbers predicates mapping   = [6]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 3.1814281940460205


Best mapping found: ['projectmember(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), movie(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;true;true
2;true;workedunder(E, G).;false;true
2;false;workedunder(M, A), movie(N, M).;false;true
2;true,false,false;workedunder(L, J).;false;false
2;true,false;workedunder(I, H).;false;true
2;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
2;false,false;workedunder(P, A), movie(Q, A).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(G, A), workedunder(H, A).;true;true
3;false,true;workedunder(H, I).;true;false
3;false,true,true;movie(J, I).;false;false
3;false,false,true;workedunder(K, L), movie(M, L).;false;false
3;false,false,false;workedunder(N, A), movie(P, N).;false;false
3;false,false;workedunder(K, A).;true;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true;workedunder(E, F), movie(G, F).;true;false
4;false;movie(J, A), workedunder(K, A).;true;true
4;false,true;movie(J, K).;false;false
4;false,false,false;workedunder(P, A), movie(Q, P).;false;false
4;false,false,true;workedunder(L, M), movie(N, M).;false;false
4;true,true;movie(G, E).;false;false
4;false,false;workedunder(L, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;false;false
5;false;movie(H, A).;true;true
5;false,true;movie(H, I), workedunder(I, J).;true;false
5;false,true,true;movie(M, J).;false;false
5;false,false,true;workedunder(N, P), movie(Q, P).;false;false
5;false,false,false;workedunder(R, A).;false;false
5;false,false;workedunder(N, A).;true;true
6;;genre(A, B) :- workedunder(F, E).;false;true
6;false;movie(N, A), workedunder(P, A).;false;true
6;false,false,false;workedunder(R, A), movie(S, R).;false;false
6;false,false;workedunder(Q, A).;false;true
7;;genre(A, B) :- workedunder(E, A).;true;true
7;true;movie(F, E).;true;false
7;true,true;workedunder(E, G), movie(H, G).;true;false
7;false,false;movie(K, A), workedunder(L, A).;true;true
7;false,false,false;workedunder(M, A).;false;false
7;false,false,true;movie(K, L).;false;false
7;true,true,true;movie(F, A).;false;false
7;false;movie(I, A), workedunder(J, A).;false;true
8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
8;true;movie(D, C).;false;false
8;false;workedunder(G, A), movie(H, G).;true;true
8;false,true;workedunder(I, A), movie(J, I).;false;false
8;false,false,true;movie(N, M), workedunder(M, P).;false;false
8;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
8;false,false;workedunder(M, A).;true;true
9;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
9;true;movie(C, D).;false;false
9;false;workedunder(G, A).;true;true
9;false,true;workedunder(G, H).;true;false
9;false,true,true;movie(J, A).;false;false
9;false,false,true;workedunder(L, A), workedunder(L, M).;false;false
9;false,false,false;workedunder(N, A), movie(P, N).;false;false
9;false,false;movie(K, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( workedunder(C, E) )
%   | then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), workedunder(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.17153349828640083;  // std dev = 1,076, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.29258794850627473;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11835732849170555;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.220130347586957;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.10655381774489354;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.0684628867602125;  // std dev = 0,965, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( movie(D, C) )
%   | then if ( workedunder(C, E), movie(F, E) )
%   | | then if ( movie(D, A) )
%   | | | then return 0.1518695309834887;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, A), workedunder(H, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(I, A), workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10298152613232209;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.1180601174147919;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0938498914246289;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.09302006247845614;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), workedunder(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08616718168199279;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.314344
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 4.907 seconds
Total inference time: 0.956 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false,false': [0.0, 3, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 3, 0], 'true,true': [0.894, 1, 4], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'workedunder(C, E)', 'false': 'workedunder(F, A), movie(G, F)', 'false,false,false': 'workedunder(J, A), workedunder(J, K)', 'false,false': 'workedunder(H, A), movie(I, A)'}, {'false,false,false,false': [2.63e-09, 3, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.076, 4, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'movie(F, A), workedunder(G, A)', 'true,true': 'movie(E, C)', 'false,false,false': 'workedunder(I, A), movie(J, I)', 'false,false': 'workedunder(H, A)'}, {'false,false,false,false': [0.0, 3, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true,true': [0.894, 1, 4], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'movie(F, A)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 3, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [0.965, 4, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'movie(D, C)', 'true,true,true': 'movie(D, A)', 'false,false': 'movie(I, A), workedunder(J, A)', 'true,true': 'workedunder(C, E), movie(F, E)', 'false,false,false': 'workedunder(K, A)', 'false': 'movie(G, A), workedunder(H, A)'}, {'true,true,true,true': [0.894, 1, 4], 'false,false,false,false': [0.0, 3, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'movie(D, C)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(H, A), movie(I, H)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,false': [1.86e-09, 3, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false,false,true': 'workedunder(G, A), workedunder(G, H)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'false,false,true,false': [0.0, 3, 0]}]]
[{'': [0.24999999999999986, nan], 'true': [0.15999999999999986, 0.0], 'true,false': [nan, 0.0]}, {'': [0.20948195373304385, nan], 'true': [0.16, 0.0], 'true,false': [0.0, nan]}, {'': [0.15999999999999998, 2.3129646346357427e-18], 'true': [0.15999999999999998, nan], 'false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18], 'false,false': [nan, 2.3129646346357427e-18]}, {'': [0.14475994169199063, nan]}, {'': [0.15999999999999998, 0.0], 'true': [0.15999999999999998, nan], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true': [0.15999999999999998, nan], 'false,false': [nan, 0.0]}, {'': [0.16, 0.0], 'true': [0.16, nan], 'false': [0.0, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.11639242212082301, nan]}, {'': [0.16, 0.0], 'true': [0.16, nan], 'true,true': [0.16, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true,true': [0.16, nan], 'false': [nan, 0.0]}, {'': [0.15999999999999998, 1.1564823173178713e-18], 'true': [0.15999999999999998, nan], 'false': [nan, 1.1564823173178713e-18], 'false,false,false': [nan, 1.1564823173178713e-18], 'false,false': [nan, 1.1564823173178713e-18]}, {'': [0.16, -1.1564823173178713e-18], 'true': [0.16, nan], 'false,false,true': [nan, -1.1564823173178713e-18], 'false': [nan, -1.1564823173178713e-18], 'false,false': [-1.1564823173178713e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '9;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.132 seconds
Total inference time: 1.152 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 23:22:11
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'parameter': {'CLL': -0.314344, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 0.956, 'Learning time': 4.907, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}, 'AUC ROC': 0.906977, 'Inference time': 1.152, 'Mapping results': {'Knowledge compiling time': 0.028661251068115234, 'Generating paths time': 3.087367534637451, 'Possible mappings': [145], 'Max mapping': 1024, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 0.06538724899291992, 'Numbers preds mapping': [6], 'Total time': 3.1814281940460205}, 'Learning time': 6.039, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.449 seconds
Total inference time: 0.875 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 23:22:13
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 0.875, 'Learning time': 1.449, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.789772
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.723 seconds
Total inference time: 0.569 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN), Time: 23:22:15
{'CLL': -0.789772, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.906977, 'Inference time': 0.569, 'Learning time': 0.723, 'Precision': [nan, 0.5], 'AUC PR': 0.843137}


Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.01632523536682129
   Generating paths time   = 4.0130650997161865
   Generating mappings time   = 0.06291317939758301
   Possible mappings   = [145]
   Max mapping   = 1024
   Numbers predicates mapping   = [6]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 4.092314958572388


Best mapping found: ['projectmember(A,B) -> movie(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), movie(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;true;true
2;true;workedunder(E, G).;false;true
2;false;workedunder(M, A), movie(N, M).;false;true
2;true,false,false;workedunder(L, J).;false;false
2;true,false;workedunder(I, H).;false;true
2;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
2;false,false;workedunder(P, A), movie(Q, A).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false;movie(G, A), workedunder(H, A).;true;true
3;false,true;workedunder(H, I).;true;false
3;false,true,true;movie(J, I).;false;false
3;false,false,true;workedunder(K, L), movie(M, L).;false;false
3;false,false,false;workedunder(N, A), movie(P, N).;false;false
3;false,false;workedunder(K, A).;true;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true;workedunder(E, F), movie(G, F).;true;false
4;false;movie(J, A), workedunder(K, A).;true;true
4;false,true;movie(J, K).;false;false
4;false,false,false;workedunder(P, A), movie(Q, P).;false;false
4;false,false,true;workedunder(L, M), movie(N, M).;false;false
4;true,true;movie(G, E).;false;false
4;false,false;workedunder(L, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;false;false
5;false;movie(H, A).;true;true
5;false,true;movie(H, I), workedunder(I, J).;true;false
5;false,true,true;movie(M, J).;false;false
5;false,false,true;workedunder(N, P), movie(Q, P).;false;false
5;false,false,false;workedunder(R, A).;false;false
5;false,false;workedunder(N, A).;true;true
6;;genre(A, B) :- workedunder(F, E).;false;true
6;false;movie(N, A), workedunder(P, A).;false;true
6;false,false,false;workedunder(R, A), movie(S, R).;false;false
6;false,false;workedunder(Q, A).;false;true
7;;genre(A, B) :- workedunder(E, A).;true;true
7;true;movie(F, E).;true;false
7;true,true;workedunder(E, G), movie(H, G).;true;false
7;false,false;movie(K, A), workedunder(L, A).;true;true
7;false,false,false;workedunder(M, A).;false;false
7;false,false,true;movie(K, L).;false;false
7;true,true,true;movie(F, A).;false;false
7;false;movie(I, A), workedunder(J, A).;false;true
8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
8;true;movie(D, C).;false;false
8;false;workedunder(G, A), movie(H, G).;true;true
8;false,true;workedunder(I, A), movie(J, I).;false;false
8;false,false,true;movie(N, M), workedunder(M, P).;false;false
8;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
8;false,false;workedunder(M, A).;true;true
9;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
9;true;movie(C, D).;false;false
9;false;workedunder(G, A).;true;true
9;false,true;workedunder(G, H).;true;false
9;false,true,true;movie(J, A).;false;false
9;false,false,true;workedunder(L, A), workedunder(L, M).;false;false
9;false,false,false;workedunder(N, A), movie(P, N).;false;false
9;false,false;movie(K, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( workedunder(C, E) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), workedunder(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.15795862733523686;  // std dev = 0,519, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.379670407154312;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11694812838381759;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.29512576307728255;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.10540117602192783;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.07087859096812646;  // std dev = 0,333, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( movie(D, C) )
%   | then if ( workedunder(C, E), movie(F, E) )
%   | | then if ( movie(D, A) )
%   | | | then return 0.2250244927094055;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, A), workedunder(H, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(I, A), workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10219004323816935;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.18821560123839975;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09318816756258273;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.1611275655160288;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), workedunder(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08560629730701763;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.304933
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 2.03 seconds
Total inference time: 1.91 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false,false': [0.0, 2, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 2, 0], 'true,true': [0.0, 0, 2], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'workedunder(C, E)', 'false': 'workedunder(F, A), movie(G, F)', 'false,false,false': 'workedunder(J, A), workedunder(J, K)', 'false,false': 'workedunder(H, A), movie(I, A)'}, {'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [0.519, 2, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'movie(F, A), workedunder(G, A)', 'true,true': 'movie(E, C)', 'false,false,false': 'workedunder(I, A), movie(J, I)', 'false,false': 'workedunder(H, A)'}, {'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'movie(F, A)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 2, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [0.333, 2, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'movie(D, C)', 'true,true,true': 'movie(D, A)', 'false,false': 'movie(I, A), workedunder(J, A)', 'true,true': 'workedunder(C, E), movie(F, E)', 'false,false,false': 'workedunder(K, A)', 'false': 'movie(G, A), workedunder(H, A)'}, {'true,true,true,true': [0.0, 0, 2], 'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'true': 'movie(D, C)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(H, A), movie(I, H)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false,false,true': 'workedunder(G, A), workedunder(G, H)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 2, 0]}]]
[{'': [0.25, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.17847162811629394, nan], 'true': [0.0, 0.0], 'true,false': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.06736877561142736, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true': [0.0, nan], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.02780443610551245, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'true,true,true': [0.0, nan], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true': [0.0, nan], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false,false,true': [nan, 0.0], 'false': [nan, 0.0], 'false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '9;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,260, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,170, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.299128
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 1.752 seconds
Total inference time: 1.323 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 23:22:27
{'CLL': -0.299128, 'Recall': 1.0, 'F1': 0.909091, 'parameter': {'CLL': -0.304933, 'Recall': 1.0, 'F1': 0.909091, 'AUC ROC': 0.9, 'Inference time': 1.91, 'Learning time': 2.03, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}, 'AUC ROC': 0.9, 'Inference time': 1.323, 'Mapping results': {'Knowledge compiling time': 0.01632523536682129, 'Generating paths time': 4.0130650997161865, 'Possible mappings': [145], 'Max mapping': 1024, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 0.06291317939758301, 'Numbers preds mapping': [6], 'Total time': 4.092314958572388}, 'Learning time': 3.782, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.298 seconds
Total inference time: 0.918 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 23:22:31
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 0.918, 'Learning time': 2.298, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.868 seconds
Total inference time: 0.686 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN), Time: 23:22:33
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 0.686, 'Learning time': 0.868, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


