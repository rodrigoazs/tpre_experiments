Starting experiment #7 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( publication(E, A), advisedby(A, F) )
%   | then return 0.28314893509951233;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then return 0.41370449065506687;  // std dev = 0,497, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | else return 0.30912932725637404;  // std dev = 0,498, 51,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=23 */
%   else if ( advisedby(A, I), publication(J, I) )
%   | then if ( advisedby(K, I), publication(J, K) )
%   | | then if ( ta(L, K, M), publication(J, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3812258581764354;  // std dev = 4,027, 65,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=34 */
%   | | else return 0.4945125714631487;  // std dev = 0,481, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | else if ( advisedby(A, N), projectmember(P, N) )
%   | | then return 0.24276431971489695;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( advisedby(A, Q) )
%   | | | then return 0.4831489350995123;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.35814893509951146;  // std dev = 3,317, 44,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( publication(E, A), advisedby(A, F) )
%   | then return 0.2450743157714587;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then return 0.3555557392714994;  // std dev = 0,497, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | else if ( ta(C, I, J), advisedby(I, K) )
%   | | | then return 0.2486413522628645;  // std dev = 3,013, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.3162089198304327;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( advisedby(A, L), projectmember(M, L) )
%   | then return 0.251727813648471;  // std dev = 0,492, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( advisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, A) )
%   | | | then return 0.3029414283660605;  // std dev = 2,825, 32,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.37337206103053017;  // std dev = 3,631, 54,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | else if ( tempadvisedby(A, R) )
%   | | | then return 0.3399911357856347;  // std dev = 2,823, 32,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return 0.22540780245230174;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( tempadvisedby(A, F), publication(E, F) )
%   | then return 0.09731994888376155;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.22410477870955534;  // std dev = 0,496, 47,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=21 */
%   else if ( advisedby(A, G), publication(H, A) )
%   | then if ( tempadvisedby(I, G) )
%   | | then if ( publication(J, I), ta(K, I, L) )
%   | | | then return 0.30569840231553624;  // std dev = 1,483, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.23761806460591597;  // std dev = 2,598, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else return 0.3820878108392924;  // std dev = 0,477, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, M) )
%   | | then if ( tempadvisedby(N, M), publication(P, N) )
%   | | | then return 0.18521400550807265;  // std dev = 2,267, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.3165695650477671;  // std dev = 3,391, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, Q), publication(R, Q) )
%   | | | then return 0.27077155475369025;  // std dev = 4,202, 71,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=38 */
%   | | | else return 0.18870354739654827;  // std dev = 3,025, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( publication(E, F), tempadvisedby(G, F) )
%   | then return 0.1623505263816623;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( advisedby(A, H) )
%   | | then if ( tempadvisedby(I, H) )
%   | | | then return 0.24032760308176315;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.07366093641509645;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3868687407215922;  // std dev = 0,799, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( advisedby(A, J), publication(K, A) )
%   | then return 0.2355900447524461;  // std dev = 0,494, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( tempadvisedby(A, L) )
%   | | then if ( tempadvisedby(M, L), publication(N, M) )
%   | | | then return 0.14953952025978626;  // std dev = 2,267, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.2548082203626818;  // std dev = 3,388, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, P), publication(Q, P) )
%   | | | then return 0.21489524837076854;  // std dev = 4,202, 71,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=38 */
%   | | | else return 0.15346531529732632;  // std dev = 3,024, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( publication(C, A), tempadvisedby(A, D) )
%   then if ( publication(C, D) )
%   | then return 0.0695668037285149;  // std dev = 0,483, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.1678343876238063;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( ta(E, A, F), advisedby(A, G) )
%   | then if ( advisedby(H, G), publication(I, H) )
%   | | then if ( ta(J, H, K), publication(I, G) )
%   | | | then return 0.1732610289380569;  // std dev = 3,245, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | | else return 0.07667438637599672;  // std dev = 2,749, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else return 0.3105441328924533;  // std dev = 1,146, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( publication(L, A) )
%   | | then if ( advisedby(A, M), publication(L, M) )
%   | | | then return 0.15915714793749564;  // std dev = 3,223, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | else return 0.25679333608525534;  // std dev = 2,142, 20,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | | else if ( tempadvisedby(A, N), advisedby(P, N) )
%   | | | then return 0.1843260464264006;  // std dev = 3,674, 55,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=29 */
%   | | | else return 0.14342799179623011;  // std dev = 4,160, 71,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=34 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.12870911975656782;  // std dev = 0,493, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then if ( tempadvisedby(J, I), publication(K, J) )
%   | | | then return -0.023736086959800524;  // std dev = 1,417, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.10884722643927205;  // std dev = 2,631, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | | else if ( tempadvisedby(A, L), publication(M, L) )
%   | | | then return 0.19091361116208805;  // std dev = 1,453, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.013865372594278124;  // std dev = 1,101, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( advisedby(A, N), tempadvisedby(P, N) )
%   | then if ( ta(Q, P, R), publication(S, N) )
%   | | then if ( advisedby(T, N), ta(Q, T, U) )
%   | | | then return 0.11217950904581508;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.19337680606721583;  // std dev = 2,299, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else return 0.07810599739455429;  // std dev = 0,494, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.14481115392278607;  // std dev = 0,492, 76,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=41 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then if ( advisedby(E, C), ta(F, E, G) )
%   | then return 0.22672849478511523;  // std dev = 0,473, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | else return 0.01072377043253834;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( ta(H, A, I), advisedby(A, J) )
%   | then if ( ta(H, K, I), tempadvisedby(K, L) )
%   | | then return 0.1930969364108718;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tempadvisedby(M, J), ta(N, M, I) )
%   | | | then return 0.10115816101532338;  // std dev = 1,738, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.058395890714154686;  // std dev = 3,910, 63,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=28 */
%   | else if ( publication(P, A), tempadvisedby(A, Q) )
%   | | then if ( publication(P, Q) )
%   | | | then return 0.018490082350779424;  // std dev = 1,368, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.09971284247893371;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(R, A) )
%   | | | then return 0.1153820403215996;  // std dev = 3,743, 58,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=32 */
%   | | | else return 0.09891919951225542;  // std dev = 5,321, 116,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=59 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( advisedby(A, C), ta(D, A, E) )
%   then if ( advisedby(F, C), publication(G, F) )
%   | then if ( publication(G, C), ta(H, F, I) )
%   | | then if ( samecourse(D, H) )
%   | | | then return 0.040021603438206745;  // std dev = 2,650, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | | else return 0.18891443168951919;  // std dev = 1,812, 14,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | else if ( publication(G, C) )
%   | | | then return -0.007329076440091716;  // std dev = 2,302, 22,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | | else return 0.06675113727306793;  // std dev = 1,477, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else return 0.16659419031896835;  // std dev = 1,135, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( advisedby(A, J), tempadvisedby(K, J) )
%   | then if ( ta(L, K, M), publication(N, J) )
%   | | then if ( publication(N, A) )
%   | | | then return 0.06898387292550477;  // std dev = 2,048, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return 0.13435085620731954;  // std dev = 1,887, 15,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else return 0.03207914832832115;  // std dev = 0,493, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.07964909700517324;  // std dev = 0,491, 132,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=68 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then if ( advisedby(A, E), publication(F, E) )
%   | then return 0.4972142497528845;  // std dev = 0,123, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.007740960328812321;  // std dev = 0,482, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   else if ( ta(G, A, H), advisedby(A, I) )
%   | then if ( publication(J, I) )
%   | | then if ( tempadvisedby(K, I), ta(G, K, L) )
%   | | | then return 0.0027090590780612157;  // std dev = 1,555, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04750940252829458;  // std dev = 3,903, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
%   | | else return -0.016419520947434374;  // std dev = 1,081, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( publication(M, A), advisedby(A, N) )
%   | | then if ( publication(M, N) )
%   | | | then return 0.045949515220459314;  // std dev = 3,217, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | else return 0.1808364174670533;  // std dev = 1,168, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( publication(P, A), tempadvisedby(A, Q) )
%   | | | then return 0.015796507442428585;  // std dev = 1,697, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.058093474638554236;  // std dev = 5,519, 125,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=64 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), projectmember(D, C) )
%   then return 0.12300852978229626;  // std dev = 1,061, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( advisedby(A, E), publication(F, E) )
%   | then if ( advisedby(G, E), publication(F, G) )
%   | | then if ( ta(H, G, I) )
%   | | | then return 0.045882501712141616;  // std dev = 4,455, 81,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=41 */
%   | | | else return 0.016161624341176073;  // std dev = 3,552, 52,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=25 */
%   | | else if ( advisedby(A, J), projectmember(K, J) )
%   | | | then return 0.37794440477416885;  // std dev = 0,118, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.04921913013474609;  // std dev = 2,052, 18,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | else if ( advisedby(A, L), tempadvisedby(M, L) )
%   | | then if ( publication(N, A), projectmember(P, L) )
%   | | | then return 0.057458007741594944;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.007505113514607996;  // std dev = 1,918, 16,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( publication(Q, A), tempadvisedby(A, R) )
%   | | | then return 0.012013698496488631;  // std dev = 1,697, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.04508556198683283;  // std dev = 4,640, 89,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=45 */


Predicates from source: ['inphase(person,prequals).', 'samecourse(course,course).', 'tempadvisedby(person,person).', 'publication(title,person).', 'advisedby(person,person).', 'ta(course,person,quarter).', 'projectmember(project,person).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.016265153884887695
   Generating paths time   = 2.6866044998168945
   Generating mappings time   = 0.13002634048461914
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 2.832904815673828


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
0;false;workedunder(I, A), movie(J, I).;true;true
0;false,true;workedunder(I, K), movie(J, K).;true;false
0;false,true,true;movie(J, A).;false;false
0;false,false,false;workedunder(Q, A).;false;false
0;false,false;workedunder(N, A), movie(P, N).;false;true
1;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
1;false,false,true;workedunder(N, P), movie(Q, A).;false;false
1;false;workedunder(L, A), movie(M, L).;false;true
1;false,false,false;workedunder(R, A).;false;false
1;false,false;workedunder(N, A).;true;true
2;;genre(A, B) :- movie(E, A).;true;true
2;true;workedunder(F, A), movie(E, F).;false;false
2;false;workedunder(G, A), movie(H, A).;true;true
2;false,true;workedunder(G, I).;true;false
2;false,true,true;movie(J, I).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- movie(E, A).;true;true
3;true;movie(E, F), workedunder(F, G).;false;true
3;false;workedunder(J, A), movie(K, A).;false;true
3;false,false;workedunder(L, A).;true;true
3;true,false;workedunder(H, A).;true;false
3;false,false,true;workedunder(L, M), movie(N, M).;false;false
3;false,false,false;workedunder(P, A), movie(Q, P).;false;false
3;true,false,true;workedunder(H, I).;false;false
4;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
4;true;movie(C, D).;false;false
4;false;workedunder(G, A).;true;true
4;false,true;workedunder(G, H), movie(I, H).;true;false
4;false,true,true;movie(I, G).;false;false
4;false,false,true;workedunder(M, A), movie(L, M).;false;false
4;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
4;false,false;movie(L, A).;true;true
5;;genre(A, B) :- workedunder(F, E).;false;true
5;false,true,true;workedunder(N, T).;false;false
5;false;workedunder(N, A), workedunder(N, P).;true;false
5;false,true;movie(S, N).;true;false
6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true
6;true;workedunder(C, E).;false;false
6;false,true,false;workedunder(J, M).;false;false
6;false;workedunder(J, A).;true;true
6;false,true;workedunder(L, K).;false;true
6;false,false,true;movie(P, Q).;false;false
6;false,false,false;movie(R, A).;false;false
6;false,false;movie(P, A), workedunder(Q, A).;true;true
7;;genre(A, B) :- workedunder(C, A).;true;true
7;true;workedunder(C, F), movie(G, F).;true;false
7;true,true;movie(G, C).;true;true
7;true,true,false;movie(G, C).;false;false
7;false,true,true;movie(N, A).;false;false
7;false,true;movie(N, J).;true;false
7;true,true,true;workedunder(H, D).;false;false
7;false;workedunder(J, A), workedunder(J, K).;true;false
8;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true
8;true;workedunder(E, A), movie(F, E).;false;false
8;false;workedunder(I, A).;true;true
8;false,true;movie(J, I).;true;false
8;false,true,true;workedunder(I, K).;false;false
8;false,false,true;movie(M, N).;false;false
8;false,false,false;movie(P, A), workedunder(Q, A).;false;false
8;false,false;movie(M, A), workedunder(N, A).;true;true
9;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
9;false,true,false;workedunder(J, A), movie(K, J).;false;false
9;false;workedunder(E, A), movie(F, E).;true;true
9;false,true;workedunder(E, G), movie(F, G).;false;true
9;false,false,true;movie(N, A), movie(P, L).;false;false
9;false,false,false;movie(Q, A), workedunder(R, A).;false;false
9;false,false;workedunder(L, A), workedunder(L, M).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.15795862733523683;  // std dev = 1,217, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.379670407154312;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), movie(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11694812838381761;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.09486229352767742;  // std dev = 0,939, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then if ( workedunder(C, E) )
%   | then return 0.2757823278341051;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.11468652148049484;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.22421631624077729;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(H, I) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10354648380445167;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.18763079364073976;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(J, A), workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09432175052738524;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.16068912778771716;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A), workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08656678676384023;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352372
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.695 seconds
Total inference time: 1.011 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(I, A)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'true': [0.0, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(H, A)', 'false,false': 'workedunder(G, A)'}, {'true': [4.21e-08, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [7.45e-09, 11, 0], 'false': [0.0, 0, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.217, 11, 11]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false,false,true': 'workedunder(G, A), movie(F, G)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'false,false,true,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [0.939, 11, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'true': 'workedunder(C, E)', 'false': 'workedunder(F, A)', 'false,false,false': 'movie(I, A)', 'false,false': 'movie(G, A), workedunder(H, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'true,true,true': 'workedunder(F, G)', 'false': 'workedunder(H, A), workedunder(H, I)'}, {'true,true,true,true': [0.0, 0, 11], 'false,false': [0.0, 11, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'true': 'workedunder(E, A), movie(F, E)', 'false': 'workedunder(G, A)', 'false,false,false': 'movie(J, A), workedunder(K, A)', 'false,false': 'movie(H, A), workedunder(I, A)'}, {'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'movie(I, A), workedunder(J, A)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'true': [0.0, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.73e-09, 11, 0], 'false,true': [0.0, 0, 0]}]]
[{'': [-1.6148698540002277e-16, -1.0092936587501423e-17], 'false': [nan, -1.0092936587501423e-17], 'false,false,false': [nan, -1.0092936587501423e-17], 'false,false': [nan, -1.0092936587501423e-17]}, {'': [1.6148698540002277e-16, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.11145008534151403, nan], 'true': [-2.0185873175002846e-16, 5.046468293750712e-18]}, {'': [0.06736877561142736, nan], 'true': [0.06736877561142736, nan]}, {'': [-4.0371746350005693e-17, -2.523234146875356e-18], 'true': [-4.0371746350005693e-17, nan], 'false,false,true': [nan, -2.523234146875356e-18], 'false': [nan, -2.523234146875356e-18], 'false,false': [-2.523234146875356e-18, nan]}, {'': [0.04010545723604565, nan]}, {'': [-2.0185873175002847e-17, -5.046468293750712e-18], 'true': [-2.0185873175002847e-17, nan], 'false': [nan, -5.046468293750712e-18], 'false,false,false': [-5.046468293750712e-18, nan], 'false,false': [nan, -5.046468293750712e-18]}, {'': [-2.0185873175002847e-17, 0.0], 'true': [-2.0185873175002847e-17, nan], 'true,true,true': [-2.0185873175002847e-17, nan], 'false': [nan, 0.0], 'true,true': [-2.0185873175002847e-17, nan]}, {'': [-5.046468293750712e-18, -1.261617073437678e-18], 'true': [-5.046468293750712e-18, nan], 'false': [nan, -1.261617073437678e-18], 'false,false,false': [nan, -1.261617073437678e-18], 'false,false': [nan, -1.261617073437678e-18]}, {'': [0.0, 1.261617073437678e-18], 'false': [nan, 1.261617073437678e-18], 'false,false,false': [nan, 1.261617073437678e-18], 'false,false': [nan, 1.261617073437678e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '1;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '4;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '7;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.298 seconds
Total inference time: 0.905 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:30:10
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'parameter': {'CLL': -0.352372, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 1.011, 'Learning time': 1.695, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}, 'AUC ROC': 0.875, 'Inference time': 0.905, 'Mapping results': {'Knowledge compiling time': 0.016265153884887695, 'Generating paths time': 2.6866044998168945, 'Possible mappings': [435], 'Max mapping': 4096, 'Finding best mapping': 9.5367431640625e-07, 'Generating mappings time': 0.13002634048461914, 'Numbers preds mapping': [7], 'Total time': 2.832904815673828}, 'Learning time': 2.9930000000000003, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.836 seconds
Total inference time: 0.755 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:30:13
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 0.755, 'Learning time': 1.836, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.726963
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.838 seconds
Total inference time: 0.615 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:30:15
{'CLL': -0.726963, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.875, 'Inference time': 0.615, 'Learning time': 0.838, 'Precision': [nan, 0.5], 'AUC PR': 0.8}


Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017249107360839844
   Generating paths time   = 2.891273260116577
   Generating mappings time   = 0.23804807662963867
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.1920928955078125e-06
   Total time   = 3.1465799808502197


Best mapping found: ['samecourse(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
0;false;workedunder(I, A), movie(J, I).;true;true
0;false,true;workedunder(I, K), movie(J, K).;true;false
0;false,true,true;movie(J, A).;false;false
0;false,false,false;workedunder(Q, A).;false;false
0;false,false;workedunder(N, A), workedunder(N, P).;false;true
1;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
1;false,false,true;workedunder(N, P), movie(Q, A).;false;false
1;false;workedunder(L, A), workedunder(L, M).;false;true
1;false,false,false;workedunder(R, A).;false;false
1;false,false;workedunder(N, A).;true;true
2;;genre(A, B) :- movie(E, A).;true;true
2;true;workedunder(F, A), movie(E, F).;false;false
2;false;workedunder(G, A), movie(H, A).;true;true
2;false,true;workedunder(G, I).;true;false
2;false,true,true;movie(J, I).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- movie(E, A).;true;true
3;true;movie(E, F), workedunder(F, G).;false;true
3;false;workedunder(J, A), movie(K, A).;false;true
3;false,false;workedunder(L, A).;true;true
3;true,false;workedunder(H, A).;true;false
3;false,false,true;workedunder(L, M), movie(N, M).;false;false
3;false,false,false;workedunder(P, A), movie(Q, P).;false;false
3;true,false,true;workedunder(H, I).;false;false
4;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
4;true;movie(C, D).;false;false
4;false;workedunder(G, A).;true;true
4;false,true;workedunder(G, H), movie(I, H).;true;false
4;false,true,true;movie(I, G).;false;false
4;false,false,true;workedunder(M, A), movie(L, M).;false;false
4;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
4;false,false;movie(L, A).;true;true
5;;genre(A, B) :- workedunder(F, E).;false;true
5;false,true,true;workedunder(N, T).;false;false
5;false;workedunder(N, A), workedunder(N, P).;true;false
5;false,true;movie(S, N).;true;false
6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
6;true;workedunder(C, E).;false;false
6;false,true,false;workedunder(J, M).;false;false
6;false;workedunder(J, A).;true;true
6;false,true;workedunder(L, K).;false;true
6;false,false,true;movie(P, Q).;false;false
6;false,false,false;movie(R, A).;false;false
6;false,false;movie(P, A), workedunder(Q, A).;true;true
7;;genre(A, B) :- workedunder(C, A).;true;true
7;true;workedunder(C, F), movie(G, F).;true;false
7;true,true;movie(G, C).;true;true
7;true,true,false;movie(G, C).;false;false
7;false,true,true;movie(N, A).;false;false
7;false,true;movie(N, J).;true;false
7;true,true,true;workedunder(D, H).;false;false
7;false;workedunder(J, A), workedunder(J, K).;true;false
8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
8;true;workedunder(E, A), movie(F, E).;false;false
8;false;workedunder(I, A).;true;true
8;false,true;movie(J, I).;true;false
8;false,true,true;workedunder(I, K).;false;false
8;false,false,true;movie(M, N).;false;false
8;false,false,false;movie(P, A), workedunder(Q, A).;false;false
8;false,false;movie(M, A), workedunder(N, A).;true;true
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
9;false,true,false;workedunder(J, A), workedunder(J, K).;false;false
9;false;workedunder(E, A), movie(F, E).;true;true
9;false,true;workedunder(E, G), movie(F, G).;false;true
9;false,false,true;movie(N, A), workedunder(L, P).;false;false
9;false,false,false;movie(Q, A), workedunder(R, A).;false;false
9;false,false;workedunder(L, A), workedunder(L, M).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5123505661168763;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.16214040922766773;  // std dev = 1,528, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.34533087234248505;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), movie(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11738067852967662;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.09456841542261683;  // std dev = 1,318, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(C, E) )
%   | then return 0.2431520018338939;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.11503782308129583;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.19269152575068352;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(H, I) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10383497100726545;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.15646638687620054;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(J, A), workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0945625454784039;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.12964516511916782;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A), workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08677059833083454;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.327346
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.446 seconds
Total inference time: 1.081 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(I, A)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'false,false,false': 'workedunder(H, A)', 'false,false': 'workedunder(G, A)'}, {'true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [7.45e-09, 11, 0], 'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.528, 12, 12]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false,false,true': 'workedunder(G, A), movie(F, G)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'false,false,true,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.318, 12, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'true': 'workedunder(C, E)', 'false': 'workedunder(F, A)', 'false,false,false': 'movie(I, A)', 'false,false': 'movie(G, A), workedunder(H, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'true,true,true': 'workedunder(F, G)', 'false': 'workedunder(H, A), workedunder(H, I)'}, {'true,true,true,true': [0.961, 1, 12], 'false,false': [0.0, 11, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'true': 'workedunder(E, A), movie(F, E)', 'false': 'workedunder(G, A)', 'false,false,false': 'movie(J, A), workedunder(K, A)', 'false,false': 'movie(H, A), workedunder(I, A)'}, {'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'movie(I, A), workedunder(J, A)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0]}]]
[{'': [0.07100591715976314, -1.0092936587501423e-17], 'false': [nan, -1.0092936587501423e-17], 'false,false,false': [nan, -1.0092936587501423e-17], 'false,false': [nan, -1.0092936587501423e-17]}, {'': [0.07100591715976333, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.13533629047183346, nan], 'true': [0.07100591715976351, 5.046468293750712e-18]}, {'': [0.09731751852547608, nan], 'true': [0.09731751852547608, nan]}, {'': [0.07100591715976337, -2.523234146875356e-18], 'true': [0.07100591715976337, nan], 'false,false,true': [nan, -2.523234146875356e-18], 'false': [nan, -2.523234146875356e-18], 'false,false': [-2.523234146875356e-18, nan]}, {'': [0.07241731944527703, nan]}, {'': [0.07100591715976329, -7.569702440626067e-18], 'true': [0.07100591715976329, nan], 'false': [nan, -7.569702440626067e-18], 'false,false,false': [-7.569702440626067e-18, nan], 'false,false': [nan, -7.569702440626067e-18]}, {'': [0.07100591715976326, -7.569702440626067e-18], 'true': [0.07100591715976326, nan], 'true,true,true': [0.07100591715976326, nan], 'true,true': [0.07100591715976326, nan], 'false': [nan, -7.569702440626067e-18]}, {'': [0.07100591715976329, -1.261617073437678e-18], 'true': [0.07100591715976329, nan], 'false': [nan, -1.261617073437678e-18], 'false,false,false': [nan, -1.261617073437678e-18], 'false,false': [nan, -1.261617073437678e-18]}, {'': [0.07100591715976329, -3.784851220313033e-18], 'false': [nan, -3.784851220313033e-18], 'false,false,false': [nan, -3.784851220313033e-18], 'false,false': [nan, -3.784851220313033e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '1;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '4;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '7;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 2.113 seconds
Total inference time: 0.815 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:30:24
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'parameter': {'CLL': -0.327346, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 1.081, 'Learning time': 1.446, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}, 'AUC ROC': 0.885714, 'Inference time': 0.815, 'Mapping results': {'Knowledge compiling time': 0.017249107360839844, 'Generating paths time': 2.891273260116577, 'Possible mappings': [435], 'Max mapping': 4096, 'Finding best mapping': 1.1920928955078125e-06, 'Generating mappings time': 0.23804807662963867, 'Numbers preds mapping': [7], 'Total time': 3.1465799808502197}, 'Learning time': 3.559, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 2.228 seconds
Total inference time: 0.846 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:30:28
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 0.846, 'Learning time': 2.228, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.75044
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.873 seconds
Total inference time: 0.631 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:30:29
{'CLL': -0.75044, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.885714, 'Inference time': 0.631, 'Learning time': 0.873, 'Precision': [nan, 0.5], 'AUC PR': 0.813953}


Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.02893376350402832
   Generating paths time   = 2.6433448791503906
   Generating mappings time   = 0.12964320182800293
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.1920928955078125e-06
   Total time   = 2.8019306659698486


Best mapping found: ['samecourse(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
0;false;workedunder(I, A), movie(J, I).;true;true
0;false,true;workedunder(I, K), movie(J, K).;true;false
0;false,true,true;movie(J, A).;false;false
0;false,false,false;workedunder(Q, A).;false;false
0;false,false;workedunder(N, A), movie(P, N).;false;true
1;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
1;false,false,true;workedunder(N, P), movie(Q, A).;false;false
1;false;workedunder(L, A), movie(M, L).;false;true
1;false,false,false;workedunder(R, A).;false;false
1;false,false;workedunder(N, A).;true;true
2;;genre(A, B) :- movie(E, A).;true;true
2;true;workedunder(F, A), movie(E, F).;false;false
2;false;workedunder(G, A), movie(H, A).;true;true
2;false,true;workedunder(G, I).;true;false
2;false,true,true;movie(J, I).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- movie(E, A).;true;true
3;true;movie(E, F), workedunder(F, G).;false;true
3;false;workedunder(J, A), movie(K, A).;false;true
3;false,false;workedunder(L, A).;true;true
3;true,false;workedunder(H, A).;true;false
3;false,false,true;workedunder(L, M), movie(N, M).;false;false
3;false,false,false;workedunder(P, A), movie(Q, P).;false;false
3;true,false,true;workedunder(H, I).;false;false
4;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
4;true;movie(C, D).;false;false
4;false;workedunder(G, A).;true;true
4;false,true;workedunder(G, H), movie(I, H).;true;false
4;false,true,true;movie(I, G).;false;false
4;false,false,true;workedunder(M, A), movie(L, M).;false;false
4;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
4;false,false;movie(L, A).;true;true
5;;genre(A, B) :- workedunder(F, E).;false;true
5;false,true,true;workedunder(N, T).;false;false
5;false;workedunder(N, A), workedunder(N, P).;true;false
5;false,true;movie(S, N).;true;false
6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true
6;true;workedunder(C, E).;false;false
6;false,true,false;workedunder(J, M).;false;false
6;false;workedunder(J, A).;true;true
6;false,true;workedunder(L, K).;false;true
6;false,false,true;movie(P, Q).;false;false
6;false,false,false;movie(R, A).;false;false
6;false,false;movie(P, A), workedunder(Q, A).;true;true
7;;genre(A, B) :- workedunder(C, A).;true;true
7;true;workedunder(C, F), movie(G, F).;true;false
7;true,true;movie(G, C).;true;true
7;true,true,false;movie(G, C).;false;false
7;false,true,true;movie(N, A).;false;false
7;false,true;movie(N, J).;true;false
7;true,true,true;workedunder(D, H).;false;false
7;false;workedunder(J, A), workedunder(J, K).;true;false
8;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true
8;true;workedunder(E, A), movie(F, E).;false;false
8;false;workedunder(I, A).;true;true
8;false,true;movie(J, I).;true;false
8;false,true,true;workedunder(I, K).;false;false
8;false,false,true;movie(M, N).;false;false
8;false,false,false;movie(P, A), workedunder(Q, A).;false;false
8;false,false;movie(M, A), workedunder(N, A).;true;true
9;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
9;false,true,false;workedunder(J, A), movie(K, J).;false;false
9;false;workedunder(E, A), movie(F, E).;true;true
9;false,true;workedunder(E, G), movie(F, G).;false;true
9;false,false,true;movie(N, A), movie(P, L).;false;false
9;false,false,false;movie(Q, A), workedunder(R, A).;false;false
9;false,false;workedunder(L, A), workedunder(L, M).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.39468718495146987;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.17931826699808692;  // std dev = 2,508, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.25878603914901577;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), movie(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11917207682255643;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.10209314354535823;  // std dev = 2,395, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then if ( workedunder(C, E) )
%   | then return 0.16882415845380588;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.11739092773794636;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.12751522884606548;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(H, I) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10576360749532268;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.09712665927097282;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(J, A), workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09616969992637249;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.07459797031296361;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A), workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08812899192092262;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.282937
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.562 seconds
Total inference time: 0.915 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(I, A)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(H, A)', 'false,false': 'workedunder(G, A)'}, {'true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [7.45e-09, 11, 0], 'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [2.508, 18, 18]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false,false,true': 'workedunder(G, A), movie(F, G)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'false,false,true,false': [5.27e-09, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [2.395, 18, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'true': 'workedunder(C, E)', 'false': 'workedunder(F, A)', 'false,false,false': 'movie(I, A)', 'false,false': 'movie(G, A), workedunder(H, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [5.27e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'true,true,true': 'workedunder(F, G)', 'false': 'workedunder(H, A), workedunder(H, I)'}, {'true,true,true,true': [2.245, 7, 18], 'false,false': [3.73e-09, 11, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'true': 'workedunder(E, A), movie(F, E)', 'false': 'workedunder(G, A)', 'false,false,false': 'movie(J, A), workedunder(K, A)', 'false,false': 'movie(H, A), workedunder(I, A)'}, {'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'movie(I, A), workedunder(J, A)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0]}]]
[{'': [0.2015999999999996, -1.0092936587501423e-17], 'false': [nan, -1.0092936587501423e-17], 'false,false,false': [nan, -1.0092936587501423e-17], 'false,false': [nan, -1.0092936587501423e-17]}, {'': [0.2016000000000001, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.1945443430451362, nan], 'true': [0.20160000000000053, 5.046468293750712e-18]}, {'': [0.1747217246282939, nan], 'true': [0.1747217246282939, nan]}, {'': [0.20159999999999975, 2.523234146875356e-18], 'true': [0.20159999999999975, nan], 'false,false,true': [nan, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false': [2.523234146875356e-18, nan]}, {'': [0.15927712663799698, nan]}, {'': [0.2016000000000001, 2.523234146875356e-18], 'true': [0.2016000000000001, nan], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [2.523234146875356e-18, nan], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.20159999999999986, 1.261617073437678e-18], 'true': [0.20159999999999986, nan], 'true,true,true': [0.20159999999999986, nan], 'true,true': [0.20159999999999986, nan], 'false': [nan, 1.261617073437678e-18]}, {'': [0.20160000000000008, 0.0], 'true': [0.20160000000000008, nan], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.20160000000000003, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '1;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '4;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '7;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.669 seconds
Total inference time: 0.78 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:30:39
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'parameter': {'CLL': -0.282937, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 0.915, 'Learning time': 1.562, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}, 'AUC ROC': 0.965517, 'Inference time': 0.78, 'Mapping results': {'Knowledge compiling time': 0.02893376350402832, 'Generating paths time': 2.6433448791503906, 'Possible mappings': [435], 'Max mapping': 4096, 'Finding best mapping': 1.1920928955078125e-06, 'Generating mappings time': 0.12964320182800293, 'Numbers preds mapping': [7], 'Total time': 2.8019306659698486}, 'Learning time': 4.231, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.142 seconds
Total inference time: 0.813 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:30:42
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 0.813, 'Learning time': 2.142, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.811362
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.962 seconds
Total inference time: 0.603 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:30:44
{'CLL': -0.811362, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.965517, 'Inference time': 0.603, 'Learning time': 0.962, 'Precision': [nan, 0.5], 'AUC PR': 0.935484}


Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03308916091918945
   Generating paths time   = 2.9526925086975098
   Generating mappings time   = 0.19679784774780273
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 3.1825883388519287


Best mapping found: ['samecourse(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
0;false;workedunder(I, A), movie(J, I).;true;true
0;false,true;workedunder(I, K), movie(J, K).;true;false
0;false,true,true;movie(J, A).;false;false
0;false,false,false;workedunder(Q, A).;false;false
0;false,false;workedunder(N, A), workedunder(N, P).;false;true
1;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
1;false,false,true;workedunder(N, P), movie(Q, A).;false;false
1;false;workedunder(L, A), workedunder(L, M).;false;true
1;false,false,false;workedunder(R, A).;false;false
1;false,false;workedunder(N, A).;true;true
2;;genre(A, B) :- movie(E, A).;true;true
2;true;workedunder(F, A), movie(E, F).;false;false
2;false;workedunder(G, A), movie(H, A).;true;true
2;false,true;workedunder(G, I).;true;false
2;false,true,true;movie(J, I).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- movie(E, A).;true;true
3;true;movie(E, F), workedunder(F, G).;false;true
3;false;workedunder(J, A), movie(K, A).;false;true
3;false,false;workedunder(L, A).;true;true
3;true,false;workedunder(H, A).;true;false
3;false,false,true;workedunder(L, M), movie(N, M).;false;false
3;false,false,false;workedunder(P, A), movie(Q, P).;false;false
3;true,false,true;workedunder(H, I).;false;false
4;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
4;true;movie(C, D).;false;false
4;false;workedunder(G, A).;true;true
4;false,true;workedunder(G, H), movie(I, H).;true;false
4;false,true,true;movie(I, G).;false;false
4;false,false,true;workedunder(M, A), movie(L, M).;false;false
4;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
4;false,false;movie(L, A).;true;true
5;;genre(A, B) :- workedunder(F, E).;false;true
5;false,true,true;workedunder(N, T).;false;false
5;false;workedunder(N, A), workedunder(N, P).;true;false
5;false,true;movie(S, N).;true;false
6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
6;true;workedunder(C, E).;false;false
6;false,true,false;workedunder(J, M).;false;false
6;false;workedunder(J, A).;true;true
6;false,true;workedunder(L, K).;false;true
6;false,false,true;movie(P, Q).;false;false
6;false,false,false;movie(R, A).;false;false
6;false,false;movie(P, A), workedunder(Q, A).;true;true
7;;genre(A, B) :- workedunder(C, A).;true;true
7;true;workedunder(C, F), movie(G, F).;true;false
7;true,true;movie(G, C).;true;true
7;true,true,false;movie(G, C).;false;false
7;false,true,true;movie(N, A).;false;false
7;false,true;movie(N, J).;true;false
7;true,true,true;workedunder(D, H).;false;false
7;false;workedunder(J, A), workedunder(J, K).;true;false
8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
8;true;workedunder(E, A), movie(F, E).;false;false
8;false;workedunder(I, A).;true;true
8;false,true;movie(J, I).;true;false
8;false,true,true;workedunder(I, K).;false;false
8;false,false,true;movie(M, N).;false;false
8;false,false,false;movie(P, A), workedunder(Q, A).;false;false
8;false,false;movie(M, A), workedunder(N, A).;true;true
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
9;false,true,false;workedunder(J, A), workedunder(J, K).;false;false
9;false;workedunder(E, A), movie(F, E).;true;true
9;false,true;workedunder(E, G), movie(F, G).;false;true
9;false,false,true;movie(N, A), workedunder(L, P).;false;false
9;false,false,false;movie(Q, A), workedunder(R, A).;false;false
9;false,false;workedunder(L, A), workedunder(L, M).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.17153349828640083;  // std dev = 1,076, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.29258794850627473;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), movie(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11835732849170555;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.09762378558751306;  // std dev = 1,000, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(C, E) )
%   | then return 0.19654974596322122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.11621086810654602;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.1505979575097232;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(H, I) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1047972221839909;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.1171262978687005;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(J, A), workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09536497377982739;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.09232140837095455;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A), workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08744924081794209;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.314644
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.115 seconds
Total inference time: 1.132 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(I, A)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'false,false,false': 'workedunder(H, A)', 'false,false': 'workedunder(G, A)'}, {'true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [2.63e-09, 3, 0], 'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.076, 4, 4]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false,false,true': 'workedunder(G, A), movie(F, G)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'false,false,true,false': [0.0, 3, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.0, 4, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'true': 'workedunder(C, E)', 'false': 'workedunder(F, A)', 'false,false,false': 'movie(I, A)', 'false,false': 'movie(G, A), workedunder(H, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'true,true,true': 'workedunder(F, G)', 'false': 'workedunder(H, A), workedunder(H, I)'}, {'true,true,true,true': [0.894, 1, 4], 'false,false': [0.0, 3, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'true': 'workedunder(E, A), movie(F, E)', 'false': 'workedunder(G, A)', 'false,false,false': 'movie(J, A), workedunder(K, A)', 'false,false': 'movie(H, A), workedunder(I, A)'}, {'false,false,false,false': [0.0, 3, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'movie(I, A), workedunder(J, A)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,true': [0.0, 0, 0]}]]
[{'': [0.15999999999999986, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.16, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.17200226808539504, nan], 'true': [0.15999999999999998, 2.3129646346357427e-18]}, {'': [0.14475994169199063, nan], 'true': [0.14475994169199063, nan]}, {'': [0.15999999999999998, 0.0], 'true': [0.15999999999999998, nan], 'false,false,true': [nan, 0.0], 'false': [nan, 0.0], 'false,false': [0.0, nan]}, {'': [0.12501309622153933, nan]}, {'': [0.15999999999999998, -2.3129646346357427e-18], 'true': [0.15999999999999998, nan], 'false': [nan, -2.3129646346357427e-18], 'false,false,false': [-2.3129646346357427e-18, nan], 'false,false': [nan, -2.3129646346357427e-18]}, {'': [0.16, 0.0], 'true': [0.16, nan], 'true,true,true': [0.16, nan], 'true,true': [0.16, nan], 'false': [nan, 0.0]}, {'': [0.16, 0.0], 'true': [0.16, nan], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.16, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '1;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '4;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '7;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.221 seconds
Total inference time: 0.692 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:30:52
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'parameter': {'CLL': -0.314644, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 1.132, 'Learning time': 1.115, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}, 'AUC ROC': 0.906977, 'Inference time': 0.692, 'Mapping results': {'Knowledge compiling time': 0.03308916091918945, 'Generating paths time': 2.9526925086975098, 'Possible mappings': [435], 'Max mapping': 4096, 'Finding best mapping': 9.5367431640625e-07, 'Generating mappings time': 0.19679784774780273, 'Numbers preds mapping': [7], 'Total time': 3.1825883388519287}, 'Learning time': 2.3360000000000003, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.517 seconds
Total inference time: 1.308 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:30:55
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 1.308, 'Learning time': 1.517, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.789772
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.947 seconds
Total inference time: 0.728 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:30:57
{'CLL': -0.789772, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.906977, 'Inference time': 0.728, 'Learning time': 0.947, 'Precision': [nan, 0.5], 'AUC PR': 0.843137}


Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.030359268188476562
   Generating paths time   = 2.7035274505615234
   Generating mappings time   = 0.13033556938171387
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 2.8642308712005615


Best mapping found: ['samecourse(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
0;false;workedunder(I, A), movie(J, I).;true;true
0;false,true;workedunder(I, K), movie(J, K).;true;false
0;false,true,true;movie(J, A).;false;false
0;false,false,false;workedunder(Q, A).;false;false
0;false,false;workedunder(N, A), movie(P, N).;false;true
1;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
1;false,false,true;workedunder(N, P), movie(Q, A).;false;false
1;false;workedunder(L, A), movie(M, L).;false;true
1;false,false,false;workedunder(R, A).;false;false
1;false,false;workedunder(N, A).;true;true
2;;genre(A, B) :- movie(E, A).;true;true
2;true;workedunder(F, A), movie(E, F).;false;false
2;false;workedunder(G, A), movie(H, A).;true;true
2;false,true;workedunder(G, I).;true;false
2;false,true,true;movie(J, I).;false;false
2;false,false,true;workedunder(M, N), movie(P, N).;false;false
2;false,false,false;workedunder(Q, A), movie(R, Q).;false;false
2;false,false;workedunder(M, A).;true;true
3;;genre(A, B) :- movie(E, A).;true;true
3;true;movie(E, F), workedunder(F, G).;false;true
3;false;workedunder(J, A), movie(K, A).;false;true
3;false,false;workedunder(L, A).;true;true
3;true,false;workedunder(H, A).;true;false
3;false,false,true;workedunder(L, M), movie(N, M).;false;false
3;false,false,false;workedunder(P, A), movie(Q, P).;false;false
3;true,false,true;workedunder(H, I).;false;false
4;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
4;true;movie(C, D).;false;false
4;false;workedunder(G, A).;true;true
4;false,true;workedunder(G, H), movie(I, H).;true;false
4;false,true,true;movie(I, G).;false;false
4;false,false,true;workedunder(M, A), movie(L, M).;false;false
4;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
4;false,false;movie(L, A).;true;true
5;;genre(A, B) :- workedunder(F, E).;false;true
5;false,true,true;workedunder(N, T).;false;false
5;false;workedunder(N, A), workedunder(N, P).;true;false
5;false,true;movie(S, N).;true;false
6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true
6;true;workedunder(C, E).;false;false
6;false,true,false;workedunder(J, M).;false;false
6;false;workedunder(J, A).;true;true
6;false,true;workedunder(L, K).;false;true
6;false,false,true;movie(P, Q).;false;false
6;false,false,false;movie(R, A).;false;false
6;false,false;movie(P, A), workedunder(Q, A).;true;true
7;;genre(A, B) :- workedunder(C, A).;true;true
7;true;workedunder(C, F), movie(G, F).;true;false
7;true,true;movie(G, C).;true;true
7;true,true,false;movie(G, C).;false;false
7;false,true,true;movie(N, A).;false;false
7;false,true;movie(N, J).;true;false
7;true,true,true;workedunder(D, H).;false;false
7;false;workedunder(J, A), workedunder(J, K).;true;false
8;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true
8;true;workedunder(E, A), movie(F, E).;false;false
8;false;workedunder(I, A).;true;true
8;false,true;movie(J, I).;true;false
8;false,true,true;workedunder(I, K).;false;false
8;false,false,true;movie(M, N).;false;false
8;false,false,false;movie(P, A), workedunder(Q, A).;false;false
8;false,false;movie(M, A), workedunder(N, A).;true;true
9;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
9;false,true,false;workedunder(J, A), movie(K, J).;false;false
9;false;workedunder(E, A), movie(F, E).;true;true
9;false,true;workedunder(E, G), movie(F, G).;false;true
9;false,false,true;movie(N, A), movie(P, L).;false;false
9;false,false,false;movie(Q, A), workedunder(R, A).;false;false
9;false,false;workedunder(L, A), workedunder(L, M).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.15795862733523686;  // std dev = 0,519, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.379670407154312;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(F, A) )
%   | | then if ( workedunder(G, A), movie(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11694812838381759;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.09486229352767736;  // std dev = 0,401, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then if ( workedunder(C, E) )
%   | then return 0.27578232783410506;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(G, A), workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.11468652148049488;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.2242163162407772;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(H, I) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.10354648380445167;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.18763079364073976;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(J, A), workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09432175052738526;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.16068912778771716;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A), workedunder(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08656678676384025;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.305335
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 1.294 seconds
Total inference time: 0.937 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(I, A)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'workedunder(H, A)', 'false,false': 'workedunder(G, A)'}, {'true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [0.519, 2, 2]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false,false,true': 'workedunder(G, A), movie(F, G)', 'false': 'workedunder(E, A)', 'false,false': 'movie(F, A)'}, {'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 2, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [0.401, 2, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'true': 'workedunder(C, E)', 'false': 'workedunder(F, A)', 'false,false,false': 'movie(I, A)', 'false,false': 'movie(G, A), workedunder(H, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true': 'movie(E, C)', 'true,true,true': 'workedunder(F, G)', 'false': 'workedunder(H, A), workedunder(H, I)'}, {'true,true,true,true': [0.0, 0, 2], 'false,false': [0.0, 2, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'true': 'workedunder(E, A), movie(F, E)', 'false': 'workedunder(G, A)', 'false,false,false': 'movie(J, A), workedunder(K, A)', 'false,false': 'movie(H, A), workedunder(I, A)'}, {'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'movie(I, A), workedunder(J, A)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0]}]]
[{'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.11145008534151418, nan], 'true': [0.0, 0.0]}, {'': [0.06736877561142736, nan], 'true': [0.06736877561142736, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false,false,true': [nan, 0.0], 'false': [nan, 0.0], 'false,false': [0.0, nan]}, {'': [0.04010545723604565, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [nan, 0.0], 'false,false,false': [0.0, nan], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'true,true,true': [0.0, nan], 'false': [nan, 0.0], 'true,true': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '1;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '4;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '7;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,260, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,207, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.299128
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.881 seconds
Total inference time: 0.705 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:31:04
{'CLL': -0.299128, 'Recall': 1.0, 'F1': 0.909091, 'parameter': {'CLL': -0.305335, 'Recall': 1.0, 'F1': 0.909091, 'AUC ROC': 0.9, 'Inference time': 0.937, 'Learning time': 1.294, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}, 'AUC ROC': 0.9, 'Inference time': 0.705, 'Mapping results': {'Knowledge compiling time': 0.030359268188476562, 'Generating paths time': 2.7035274505615234, 'Possible mappings': [435], 'Max mapping': 4096, 'Finding best mapping': 1.430511474609375e-06, 'Generating mappings time': 0.13033556938171387, 'Numbers preds mapping': [7], 'Total time': 2.8642308712005615}, 'Learning time': 2.175, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.958 seconds
Total inference time: 0.858 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:31:06
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 0.858, 'Learning time': 0.958, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.496 seconds
Total inference time: 0.533 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:31:08
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 0.533, 'Learning time': 0.496, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


