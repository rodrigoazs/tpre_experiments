Starting experiment #5 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.3343394112899885;  // std dev = 0,499, 21,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   else if ( advisedby(A, G), publication(H, G) )
%   | then if ( advisedby(I, G), publication(H, I) )
%   | | then if ( ta(J, I, K) )
%   | | | then return 0.4071685429426485;  // std dev = 3,554, 51,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=28 */
%   | | | else return 0.3479448534668582;  // std dev = 3,499, 49,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=24 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, L) )
%   | | then if ( tempadvisedby(M, L), publication(N, M) )
%   | | | then return 0.28672036367094095;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.41134042446121344;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( publication(P, A) )
%   | | | then return 0.40360348055405776;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.26991364098186527;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( tempadvisedby(A, F), publication(E, F) )
%   | then return 0.14573025403358983;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( advisedby(A, G) )
%   | | then return 0.24415759818152227;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | | else return 0.38382549212882794;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L) )
%   | | | then return 0.3500634922838995;  // std dev = 3,554, 51,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=28 */
%   | | | else return 0.3001104399107084;  // std dev = 3,499, 49,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=24 */
%   | | else return 0.43201604470553195;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, M) )
%   | | then if ( tempadvisedby(N, M), publication(P, N) )
%   | | | then return 0.24811816884741297;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.3535696551594697;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else return 0.26147489333905416;  // std dev = 0,496, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( publication(C, F), tempadvisedby(G, F) )
%   | then return 0.20386156826217922;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else return 0.26468188814122573;  // std dev = 0,498, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( advisedby(A, H), publication(I, A) )
%   | then if ( tempadvisedby(J, H) )
%   | | then if ( publication(I, J) )
%   | | | then return 0.07271706688471465;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.26470851918936106;  // std dev = 2,866, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.39942876996510124;  // std dev = 0,475, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, K), publication(L, K) )
%   | | then if ( publication(L, M), projectmember(N, M) )
%   | | | then return 0.4713120442081265;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.26216776682127757;  // std dev = 4,078, 67,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=35 */
%   | | else if ( tempadvisedby(A, P) )
%   | | | then return 0.26558162364681487;  // std dev = 4,106, 68,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=35 */
%   | | | else return 0.1990566518832005;  // std dev = 3,041, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then if ( sameperson(A, E) )
%   | | then return 0.19060952668931816;  // std dev = 0,495, 80,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=38 */
%   | | else return 0.49465299398626417;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then return 0.13933935295080704;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else if ( tempadvisedby(A, J), publication(K, J) )
%   | | | then return 0.2622514964867777;  // std dev = 1,462, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.09260955548526131;  // std dev = 1,100, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( advisedby(A, L), projectmember(M, L) )
%   | then return 0.15117181940677624;  // std dev = 0,482, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( advisedby(A, N), tempadvisedby(P, N) )
%   | | then if ( ta(Q, P, R) )
%   | | | then return 0.24370178368284376;  // std dev = 2,768, 31,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=17 */
%   | | | else return 0.1778403046544352;  // std dev = 2,395, 23,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | | else return 0.23733231020073073;  // std dev = 0,494, 76,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=41 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( publication(C, F), tempadvisedby(G, F) )
%   | then if ( advisedby(A, F), ta(H, G, E) )
%   | | then return 0.20877237954216224;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.11034682298702893;  // std dev = 0,491, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
%   | else return 0.168534033466615;  // std dev = 0,491, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( advisedby(A, I), publication(J, A) )
%   | then if ( tempadvisedby(K, I) )
%   | | then return 0.1540399634054897;  // std dev = 0,498, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | else return 0.26370258153580023;  // std dev = 0,475, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, L), publication(M, L) )
%   | | then if ( publication(M, N), projectmember(P, N) )
%   | | | then return 0.3244964161138896;  // std dev = 0,844, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.16222099406071785;  // std dev = 4,076, 67,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=35 */
%   | | else if ( tempadvisedby(A, Q), advisedby(R, Q) )
%   | | | then return 0.17085782015408424;  // std dev = 3,896, 62,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=32 */
%   | | | else return 0.1273350363084936;  // std dev = 3,263, 44,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.12945674442931007;  // std dev = 0,492, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then if ( ta(J, G, D), tempadvisedby(K, I) )
%   | | | then return 0.3313437772414024;  // std dev = 0,787, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0529023922487904;  // std dev = 2,867, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
%   | | else return 0.12357436432305446;  // std dev = 0,492, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( advisedby(A, L), projectmember(M, L) )
%   | then return 0.08727885512421683;  // std dev = 0,478, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( advisedby(A, N), publication(P, N) )
%   | | then if ( tempadvisedby(Q, N), publication(R, Q) )
%   | | | then return 0.1786579693954124;  // std dev = 1,969, 16,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0.12000481156500362;  // std dev = 3,900, 62,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=33 */
%   | | else if ( advisedby(A, S) )
%   | | | then return 0.25593268247532797;  // std dev = 1,366, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.12815947290861515;  // std dev = 3,282, 44,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), tempadvisedby(G, F) )
%   | then if ( publication(E, F) )
%   | | then if ( ta(H, G, D) )
%   | | | then return 0.13441398882197197;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.0569261102710647;  // std dev = 2,191, 20,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | else if ( ta(I, G, J) )
%   | | | then return -0.02393772358970414;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2205158340032523;  // std dev = 1,106, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.05232892448533728;  // std dev = 0,486, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else if ( advisedby(A, K) )
%   | then if ( advisedby(L, K), publication(M, L) )
%   | | then if ( ta(N, L, P), publication(Q, A) )
%   | | | then return 0.1317875257596223;  // std dev = 2,686, 30,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | | else return 0.08489509328634913;  // std dev = 4,655, 88,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=45 */
%   | | else return 0.13452494958558614;  // std dev = 0,481, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else return 0.09255398435137992;  // std dev = 0,492, 90,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=44 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( advisedby(A, F) )
%   | then return 0.05050782483148299;  // std dev = 0,492, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else return 0.08970349507721893;  // std dev = 0,488, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( tempadvisedby(A, G), advisedby(H, G) )
%   | then if ( ta(I, A, J), ta(K, H, J) )
%   | | then if ( publication(L, H) )
%   | | | then return -0.026586836665761518;  // std dev = 1,366, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.1052755907069033;  // std dev = 1,002, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( ta(M, H, N), ta(P, A, Q) )
%   | | | then return 0.18078532436316;  // std dev = 1,545, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.07587412786810416;  // std dev = 3,097, 39,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=20 */
%   | else if ( advisedby(A, R) )
%   | | then if ( advisedby(S, R), publication(T, S) )
%   | | | then return 0.07308016063792631;  // std dev = 5,376, 118,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=62 */
%   | | | else return 0.10236833369282121;  // std dev = 2,256, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | else return 0.04203302896064536;  // std dev = 0,489, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( tempadvisedby(A, F), publication(C, F) )
%   | then return -0.04942338349532479;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( advisedby(A, G) )
%   | | then if ( tempadvisedby(H, G) )
%   | | | then return 0.05513450086117909;  // std dev = 2,878, 34,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | | | else return -0.0547999588791614;  // std dev = 1,156, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.11845417399935396;  // std dev = 0,486, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( tempadvisedby(A, I), projectmember(J, I) )
%   | then return 0.13219434309157144;  // std dev = 1,058, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( advisedby(A, K), publication(L, K) )
%   | | then if ( advisedby(M, K), publication(L, M) )
%   | | | then return 0.05151172928688309;  // std dev = 4,968, 100,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=52 */
%   | | | else return 0.10827308229233866;  // std dev = 1,935, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( advisedby(A, N), projectmember(P, N) )
%   | | | then return -0.010883366101435322;  // std dev = 1,743, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.057578712337290915;  // std dev = 4,791, 95,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=47 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then return 0.0740929769016514;  // std dev = 0,470, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   else if ( ta(E, A, F) )
%   | then if ( ta(E, G, H), publication(I, G) )
%   | | then if ( tempadvisedby(A, J), publication(I, J) )
%   | | | then return -0.05204531505297916;  // std dev = 1,375, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.05524208129329226;  // std dev = 4,277, 77,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=37 */
%   | | else if ( ta(E, K, L), tempadvisedby(K, M) )
%   | | | then return -0.017661918940269375;  // std dev = 2,915, 35,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=16 */
%   | | | else return 0.058875095627071196;  // std dev = 1,848, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( advisedby(A, N), publication(P, N) )
%   | | then if ( advisedby(Q, N), publication(R, Q) )
%   | | | then return 0.04723004623243592;  // std dev = 4,249, 74,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=40 */
%   | | | else return -0.06564783789815498;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( publication(S, A), tempadvisedby(A, T) )
%   | | | then return -0.01239928066387354;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.0687964828127389;  // std dev = 3,301, 45,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */


Predicates from source: ['inphase(person,prequals).', 'tempadvisedby(person,person).', 'publication(title,person).', 'advisedby(person,person).', 'sameperson(person,person).', 'ta(course,person,quarter).', 'projectmember(project,person).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03004312515258789
   Generating paths time   = 4.37814474105835
   Generating mappings time   = 0.4598972797393799
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 2.1457672119140625e-06
   Total time   = 4.868096828460693


Best mapping found: ['advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false,true;workedunder(L, M), movie(N, M).;false;false
0;false,false,false;movie(P, A).;false;false
0;false,false;workedunder(L, A).;true;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A), movie(E, F).;false;true
1;false;workedunder(H, A), movie(I, H).;true;true
1;false,true;workedunder(H, J), movie(I, J).;false;false
1;true,false;workedunder(G, A).;false;false
1;false,false,true;workedunder(M, N), movie(P, N).;false;false
1;false,false;workedunder(M, A).;true;false
2;;genre(A, B) :- movie(C, A).;true;true
2;true;movie(C, F), workedunder(F, G).;false;false
2;false;workedunder(H, A), movie(I, A).;true;true
2;false,true;workedunder(H, J).;true;false
2;false,true,true;movie(I, J).;false;false
2;false,false,true;movie(L, M), movie(N, M).;false;false
2;false,false,false;workedunder(P, A).;false;false
2;false,false;workedunder(K, A), movie(L, K).;true;true
3;;genre(A, B) :- workedunder(F, E).;true;true
3;true;workedunder(A, E).;false;true
3;false;workedunder(L, A), movie(M, L).;false;true
3;true,false,false;workedunder(J, A), movie(K, J).;false;false
3;true,false;workedunder(I, G).;false;true
3;false,false;workedunder(N, A), workedunder(N, P).;false;false
4;;genre(A, B) :- movie(C, A).;true;true
4;true;movie(C, F), workedunder(F, G).;true;false
4;false;workedunder(I, A), movie(J, A).;true;true
4;false,true;workedunder(I, K).;false;false
4;false,false,false;workedunder(Q, A), workedunder(Q, R).;false;false
4;false,false,true;movie(M, N), movie(P, N).;false;false
4;true,true;workedunder(F, A).;false;false
4;false,false;workedunder(L, A), movie(M, L).;true;true
5;;genre(A, B) :- workedunder(F, E).;false;true
5;false,false,true;workedunder(N, Q), movie(R, Q).;false;false
5;false;workedunder(L, A), movie(M, L).;false;true
5;false,false,false;workedunder(S, A).;false;false
5;false,false;workedunder(N, A), movie(P, N).;true;true
6;;genre(A, B) :- movie(E, A).;true;true
6;true;workedunder(F, A), workedunder(F, G).;true;false
6;false;workedunder(K, A).;true;false
6;false,true;workedunder(K, L), movie(M, L).;true;false
6;false,true,true;movie(Q, A).;false;false
6;true,true;movie(E, F).;false;false
7;;genre(A, B) :- movie(C, A).;true;true
7;true;workedunder(F, A).;false;false
7;false;workedunder(G, A), workedunder(G, H).;true;true
7;false,true;movie(L, H).;false;false
7;false,false,true;workedunder(R, S), movie(T, S).;false;false
7;false,false;workedunder(R, A).;true;false
8;;genre(A, B) :- movie(C, A).;true;true
8;true;workedunder(F, A), movie(C, F).;false;true
8;false;workedunder(I, A), movie(J, I).;false;true
8;false,false;workedunder(K, A), movie(L, K).;true;true
8;true,false;workedunder(G, A).;true;false
8;false,false,true;workedunder(K, M), movie(L, M).;false;false
8;false,false,false;workedunder(N, A), movie(P, N).;false;false
8;true,false,true;workedunder(G, H).;false;false
9;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
9;false,true,false;workedunder(M, K).;false;false
9;false;movie(I, G).;true;true
9;false,true;workedunder(J, A), movie(I, J).;false;true
9;false,false,true;workedunder(N, Q), movie(R, Q).;false;false
9;false,false,false;movie(S, A), workedunder(T, A).;false;false
9;false,false;workedunder(N, A), movie(P, N).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.2215250292763393;  // std dev = 1,566, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then return -0.13637023346435795;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( workedunder(E, F) )
%   | | then return 0.5002131558403854;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.377690957815415;  // std dev = 1,49e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12109080086507204;  // std dev = 9,13e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.0925030210673108;  // std dev = 0,944, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then if ( movie(C, D) )
%   | | then return 0.2749693064602385;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11808107268713285;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.22364953150626432;  // std dev = 1,05e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10632803812788186;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.1872204146603255;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0966391804806873;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.1603812988119758;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( movie(E, F) )
%   | then if ( workedunder(G, A), movie(E, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, I) )
%   | | | then return -0.08852517668472613;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.35313
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 3.265 seconds
Total inference time: 2.169 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [4.21e-08, 0, 11], 'true,false,false': [5.27e-09, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.566, 11, 11]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true': 'workedunder(A, D)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 0, 11], 'true,true': [7.45e-09, 11, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [1.49e-08, 0, 11], 'true,true,false': [9.13e-09, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [0.944, 11, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)', 'true,true': 'movie(C, D)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 11], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)'}, {'true,false': [3.73e-09, 11, 0], 'false': [0.0, 0, 0], 'true,true': [1.05e-08, 0, 11]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false,true,false': 'workedunder(H, I)', 'false': 'movie(E, F)', 'false,true': 'workedunder(G, A), movie(E, G)'}, {'true': [7.45e-09, 0, 11], 'false,true,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999958, nan], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17]}, {'': [0.17847162811629388, nan], 'true': [1.6148698540002277e-16, 2.523234146875356e-18], 'true,false': [nan, 2.523234146875356e-18]}, {'': [0.11145008534151403, nan], 'true': [0.11145008534151403, nan]}, {'': [0.10130960288467862, nan], 'true': [5.046468293750712e-18, 0.0], 'true,false': [0.0, nan]}, {'': [0.062195810698099964, nan], 'true': [0.062195810698099964, nan], 'true,true': [2.0185873175002847e-17, 7.569702440626067e-18]}, {'': [0.04051610769524334, nan]}, {'': [0.038622150136973066, nan], 'true': [-4.0371746350005693e-17, -1.0092936587501423e-17], 'true,true': [-4.0371746350005693e-17, nan]}, {'': [0.027221299115414436, nan], 'true': [1.0092936587501423e-17, 1.261617073437678e-18]}, {'': [0.020144067438404897, nan], 'true': [-2.5232341468753557e-17, -2.523234146875356e-18], 'true,false': [nan, -2.523234146875356e-18]}, {'': [5.046468293750712e-18, -1.261617073437678e-18], 'false,true,false': [-1.261617073437678e-18, nan], 'false': [-1.261617073437678e-18, nan], 'false,true': [nan, -1.261617073437678e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '3;;genre(A, B) :- workedunder(A, D).;true;true', '4;;genre(A, B) :- workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true', '7;;genre(A, B) :- workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 2.803 seconds
Total inference time: 3.711 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 19:21:05
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'parameter': {'CLL': -0.35313, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 2.169, 'Learning time': 3.265, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}, 'AUC ROC': 0.875, 'Inference time': 3.711, 'Mapping results': {'Knowledge compiling time': 0.03004312515258789, 'Generating paths time': 4.37814474105835, 'Possible mappings': [433], 'Max mapping': 4096, 'Finding best mapping': 2.1457672119140625e-06, 'Generating mappings time': 0.4598972797393799, 'Numbers preds mapping': [7], 'Total time': 4.868096828460693}, 'Learning time': 6.068, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 6.73 seconds
Total inference time: 1.888 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 19:21:14
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 1.888, 'Learning time': 6.73, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.726963
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.782 seconds
Total inference time: 1.247 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN), Time: 19:21:18
{'CLL': -0.726963, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.875, 'Inference time': 1.247, 'Learning time': 1.782, 'Precision': [nan, 0.5], 'AUC PR': 0.8}


Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.032326459884643555
   Generating paths time   = 4.959065198898315
   Generating mappings time   = 0.4430396556854248
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 5.43444299697876


Best mapping found: ['advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false,true;workedunder(L, M), movie(N, M).;false;false
0;false,false,false;movie(P, A).;false;false
0;false,false;workedunder(L, A).;true;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A), movie(E, F).;false;true
1;false;workedunder(H, A), movie(I, H).;true;true
1;false,true;workedunder(H, J), movie(I, J).;false;false
1;true,false;workedunder(G, A).;false;false
1;false,false,true;workedunder(M, N), movie(P, N).;false;false
1;false,false;workedunder(M, A).;true;false
2;;genre(A, B) :- movie(C, A).;true;true
2;true;movie(C, F), workedunder(F, G).;false;false
2;false;workedunder(H, A), movie(I, A).;true;true
2;false,true;workedunder(H, J).;true;false
2;false,true,true;movie(I, J).;false;false
2;false,false,true;movie(L, M), movie(N, M).;false;false
2;false,false,false;workedunder(P, A).;false;false
2;false,false;workedunder(K, A), movie(L, K).;true;true
3;;genre(A, B) :- workedunder(F, E).;true;true
3;true;workedunder(A, E).;false;true
3;false;workedunder(L, A), movie(M, L).;false;true
3;true,false,false;workedunder(J, A), movie(K, J).;false;false
3;true,false;workedunder(I, G).;false;true
3;false,false;workedunder(N, A), workedunder(N, P).;false;false
4;;genre(A, B) :- movie(C, A).;true;true
4;true;movie(C, F), workedunder(F, G).;true;false
4;false;workedunder(I, A), movie(J, A).;true;true
4;false,true;workedunder(I, K).;false;false
4;false,false,false;workedunder(Q, A), workedunder(Q, R).;false;false
4;false,false,true;movie(M, N), movie(P, N).;false;false
4;true,true;workedunder(F, A).;false;false
4;false,false;workedunder(L, A), movie(M, L).;true;true
5;;genre(A, B) :- workedunder(F, E).;false;true
5;false,false,true;workedunder(N, Q), movie(R, Q).;false;false
5;false;workedunder(L, A), movie(M, L).;false;true
5;false,false,false;workedunder(S, A).;false;false
5;false,false;workedunder(N, A), movie(P, N).;true;true
6;;genre(A, B) :- movie(E, A).;true;true
6;true;workedunder(F, A), workedunder(F, G).;true;false
6;false;workedunder(K, A).;true;false
6;false,true;workedunder(K, L), movie(M, L).;true;false
6;false,true,true;movie(Q, A).;false;false
6;true,true;movie(E, F).;false;false
7;;genre(A, B) :- movie(C, A).;true;true
7;true;workedunder(F, A).;false;false
7;false;workedunder(G, A), workedunder(G, H).;true;true
7;false,true;movie(L, H).;false;false
7;false,false,true;workedunder(R, S), movie(T, S).;false;false
7;false,false;workedunder(R, A).;true;false
8;;genre(A, B) :- movie(C, A).;true;true
8;true;workedunder(F, A), movie(C, F).;false;true
8;false;workedunder(I, A), movie(J, I).;false;true
8;false,false;workedunder(K, A), movie(L, K).;true;true
8;true,false;workedunder(G, A).;true;false
8;false,false,true;workedunder(K, M), movie(L, M).;false;false
8;false,false,false;workedunder(N, A), movie(P, N).;false;false
8;true,false,true;workedunder(G, H).;false;false
9;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
9;false,true,false;workedunder(M, K).;false;false
9;false;movie(I, G).;true;true
9;false,true;workedunder(J, A), movie(I, J).;false;true
9;false,false,true;workedunder(N, Q), movie(R, Q).;false;false
9;false,false,false;movie(S, A), workedunder(T, A).;false;false
9;false,false;workedunder(N, A), movie(P, N).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.22604488330790526;  // std dev = 1,802, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then return -0.13690342743409517;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( workedunder(E, F) )
%   | | then return 0.45675549767123047;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.3433050670813882;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.12151573373300312;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.09225805803688837;  // std dev = 1,322, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then if ( movie(C, D) )
%   | | then return 0.24228793563700282;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11842691142021966;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.1920796974214591;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.10661067290548179;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.15601986176850838;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09687412300584407;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.1293092419447252;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( movie(E, F) )
%   | then if ( workedunder(G, A), movie(E, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, I) )
%   | | | then return -0.08872333352913432;  // std dev = 6,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.328047
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 3.838 seconds
Total inference time: 1.994 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false,false': [5.27e-09, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.802, 12, 12]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true': 'workedunder(A, D)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.961, 1, 12], 'true,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.961, 1, 12], 'true,true,false': [5.27e-09, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.322, 12, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)', 'true,true': 'movie(C, D)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.961, 1, 12], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false,true,false': 'workedunder(H, I)', 'false': 'movie(E, F)', 'false,true': 'workedunder(G, A), movie(E, G)'}, {'true': [0.961, 1, 12], 'false,true,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 0, 0], 'false,true,false,true': [6.45e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999956, nan], 'true': [0.07100591715976314, -1.0092936587501423e-17]}, {'': [0.19076867375623552, nan], 'true': [0.07100591715976333, 2.523234146875356e-18], 'true,false': [nan, 2.523234146875356e-18]}, {'': [0.13533629047183346, nan], 'true': [0.13533629047183346, nan]}, {'': [0.12595740906584602, nan], 'true': [-7.569702440626067e-18, 0.0710059171597634], 'true,false': [0.0710059171597634, nan]}, {'': [0.09210103133023939, nan], 'true': [0.09210103133023939, nan], 'true,true': [0.07100591715976344, 2.523234146875356e-18]}, {'': [0.0727787524435609, nan]}, {'': [0.070764444237432, nan], 'true': [0.07100591715976329, -2.523234146875356e-18], 'true,true': [0.07100591715976329, nan]}, {'': [0.060610634012969816, nan], 'true': [0.07100591715976337, -5.046468293750712e-18]}, {'': [0.05433934672110824, nan], 'true': [0.07100591715976329, -7.569702440626067e-18], 'true,false': [nan, -7.569702440626067e-18]}, {'': [0.07100591715976332, 3.784851220313033e-18], 'false,true,false': [3.784851220313033e-18, nan], 'false': [3.784851220313033e-18, nan], 'false,true': [nan, 3.784851220313033e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '3;;genre(A, B) :- workedunder(A, D).;true;true', '4;;genre(A, B) :- workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true', '7;;genre(A, B) :- workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '9;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 3.822 seconds
Total inference time: 1.153 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 19:21:36
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'parameter': {'CLL': -0.328047, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 1.994, 'Learning time': 3.838, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}, 'AUC ROC': 0.885714, 'Inference time': 1.153, 'Mapping results': {'Knowledge compiling time': 0.032326459884643555, 'Generating paths time': 4.959065198898315, 'Possible mappings': [433], 'Max mapping': 4096, 'Finding best mapping': 1.430511474609375e-06, 'Generating mappings time': 0.4430396556854248, 'Numbers preds mapping': [7], 'Total time': 5.43444299697876}, 'Learning time': 7.66, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( director(A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 3.949 seconds
Total inference time: 0.94 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 19:21:41
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 0.94, 'Learning time': 3.949, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.75044
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.682 seconds
Total inference time: 1.165 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN), Time: 19:21:45
{'CLL': -0.75044, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.885714, 'Inference time': 1.165, 'Learning time': 1.682, 'Precision': [nan, 0.5], 'AUC PR': 0.813953}


Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03345513343811035
   Generating paths time   = 3.3021187782287598
   Generating mappings time   = 0.3225517272949219
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.1920928955078125e-06
   Total time   = 3.6581358909606934


Best mapping found: ['advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false,true;workedunder(L, M), movie(N, M).;false;false
0;false,false,false;movie(P, A).;false;false
0;false,false;workedunder(L, A).;true;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A), movie(E, F).;false;true
1;false;workedunder(H, A), movie(I, H).;true;true
1;false,true;workedunder(H, J), movie(I, J).;false;false
1;true,false;workedunder(G, A).;false;false
1;false,false,true;workedunder(M, N), movie(P, N).;false;false
1;false,false;workedunder(M, A).;true;false
2;;genre(A, B) :- movie(C, A).;true;true
2;true;movie(C, F), workedunder(F, G).;false;false
2;false;workedunder(H, A), movie(I, A).;true;true
2;false,true;workedunder(H, J).;true;false
2;false,true,true;movie(I, J).;false;false
2;false,false,true;movie(L, M), workedunder(N, M).;false;false
2;false,false,false;workedunder(P, A).;false;false
2;false,false;workedunder(K, A), movie(L, K).;true;true
3;;genre(A, B) :- workedunder(F, E).;true;true
3;true;workedunder(A, E).;false;true
3;false;workedunder(L, A), workedunder(M, L).;false;true
3;true,false,false;workedunder(J, A), movie(K, J).;false;false
3;true,false;workedunder(I, G).;false;true
3;false,false;workedunder(N, A), workedunder(N, P).;false;false
4;;genre(A, B) :- movie(C, A).;true;true
4;true;movie(C, F), workedunder(F, G).;true;false
4;false;workedunder(I, A), movie(J, A).;true;true
4;false,true;workedunder(I, K).;false;false
4;false,false,false;workedunder(Q, A), workedunder(Q, R).;false;false
4;false,false,true;movie(M, N), workedunder(P, N).;false;false
4;true,true;workedunder(F, A).;false;false
4;false,false;workedunder(L, A), movie(M, L).;true;true
5;;genre(A, B) :- workedunder(F, E).;false;true
5;false,false,true;workedunder(N, Q), movie(R, Q).;false;false
5;false;workedunder(L, A), workedunder(M, L).;false;true
5;false,false,false;workedunder(S, A).;false;false
5;false,false;workedunder(N, A), movie(P, N).;true;true
6;;genre(A, B) :- movie(E, A).;true;true
6;true;workedunder(F, A), workedunder(F, G).;true;false
6;false;workedunder(K, A).;true;false
6;false,true;workedunder(K, L), movie(M, L).;true;false
6;false,true,true;movie(Q, A).;false;false
6;true,true;movie(E, F).;false;false
7;;genre(A, B) :- movie(C, A).;true;true
7;true;workedunder(F, A).;false;false
7;false;workedunder(G, A), workedunder(G, H).;true;true
7;false,true;movie(L, H).;false;false
7;false,false,true;workedunder(R, S), movie(T, S).;false;false
7;false,false;workedunder(R, A).;true;false
8;;genre(A, B) :- movie(C, A).;true;true
8;true;workedunder(F, A), movie(C, F).;false;true
8;false;workedunder(I, A), workedunder(J, I).;false;true
8;false,false;workedunder(K, A), movie(L, K).;true;true
8;true,false;workedunder(G, A).;true;false
8;false,false,true;workedunder(K, M), movie(L, M).;false;false
8;false,false,false;workedunder(N, A), workedunder(P, N).;false;false
8;true,false,true;workedunder(G, H).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
9;false,true,false;workedunder(M, K).;false;false
9;false;movie(I, G).;true;true
9;false,true;workedunder(J, A), movie(I, J).;false;true
9;false,false,true;workedunder(N, Q), movie(R, Q).;false;false
9;false,false,false;movie(S, A), workedunder(T, A).;false;false
9;false,false;workedunder(N, A), movie(P, N).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.23976942954603;  // std dev = 2,646, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then return -0.13853322814260766;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( workedunder(E, F) )
%   | | then return 0.34003398980794736;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.25734494947429226;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return -0.12281276528082398;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.10043320483692961;  // std dev = 2,396, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then if ( movie(C, D) )
%   | | then return 0.16815707936547064;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.12042209999903603;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.12702521829204133;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return -0.10823854169840462;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.09676501385039799;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09822540512098556;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, F) )
%   | then if ( workedunder(G, A), movie(E, G) )
%   | | then return 0.07432837483365923;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else if ( workedunder(H, I) )
%   | | | then return -0.08986167014112935;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.283554
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 6.322 seconds
Total inference time: 2.564 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false,false': [5.27e-09, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [2.646, 18, 18]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true': 'workedunder(A, D)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [2.245, 7, 18], 'true,true': [0.0, 11, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [2.245, 7, 18], 'true,true,false': [5.27e-09, 11, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [2.396, 18, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)', 'true,true': 'movie(C, D)'}, {'true,false': [7.45e-09, 11, 0], 'false': [0.0, 0, 0], 'true,true,true': [2.245, 7, 18], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)'}, {'true,false': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true,false': 'workedunder(H, I)', 'false': 'movie(E, F)', 'false,true': 'workedunder(G, A), movie(E, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [2.245, 7, 18], 'false,true,false,false': [0.0, 0, 0], 'false,true,false,true': [3.73e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2499999999999995, nan], 'true': [0.2015999999999996, -1.0092936587501423e-17]}, {'': [0.22099738300738728, nan], 'true': [0.2016000000000001, 2.523234146875356e-18], 'true,false': [nan, 2.523234146875356e-18]}, {'': [0.1945443430451362, nan], 'true': [0.1945443430451362, nan]}, {'': [0.18859746147890197, nan], 'true': [-5.046468293750712e-18, 0.20160000000000022], 'true,false': [0.20160000000000022, nan]}, {'': [0.1706658713149335, nan], 'true': [0.1706658713149335, nan], 'true,true': [0.20159999999999997, 2.523234146875356e-18]}, {'': [0.1595180587423067, nan]}, {'': [0.15767085976831804, nan], 'true': [0.2015999999999999, 5.046468293750712e-18], 'true,true': [0.2015999999999999, nan]}, {'': [0.1517445872764904, nan], 'true': [0.20160000000000003, -2.523234146875356e-18]}, {'': [0.14806778353389258, nan], 'true': [0.2016, -2.523234146875356e-18], 'true,false': [nan, -2.523234146875356e-18]}, {'': [nan, 0.14572033332478884], 'false,true,false': [1.261617073437678e-18, nan], 'false': [0.14572033332478887, nan], 'false,true': [0.20159999999999997, 1.261617073437678e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '3;;genre(A, B) :- workedunder(A, D).;true;true', '4;;genre(A, B) :- workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true', '7;;genre(A, B) :- workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '9;;genre(A, B) :- workedunder(G, A), movie(E, G).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 4.373 seconds
Total inference time: 1.608 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 19:22:06
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'parameter': {'CLL': -0.283554, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 2.564, 'Learning time': 6.322, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}, 'AUC ROC': 0.965517, 'Inference time': 1.608, 'Mapping results': {'Knowledge compiling time': 0.03345513343811035, 'Generating paths time': 3.3021187782287598, 'Possible mappings': [433], 'Max mapping': 4096, 'Finding best mapping': 1.1920928955078125e-06, 'Generating mappings time': 0.3225517272949219, 'Numbers preds mapping': [7], 'Total time': 3.6581358909606934}, 'Learning time': 10.695, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 6.763 seconds
Total inference time: 1.481 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 19:22:15
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 1.481, 'Learning time': 6.763, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.811362
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.824 seconds
Total inference time: 1.415 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN), Time: 19:22:18
{'CLL': -0.811362, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.965517, 'Inference time': 1.415, 'Learning time': 1.824, 'Precision': [nan, 0.5], 'AUC PR': 0.935484}


Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.030382871627807617
   Generating paths time   = 3.307699680328369
   Generating mappings time   = 0.44124937057495117
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 3.7793431282043457


Best mapping found: ['advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false,true;workedunder(L, M), movie(N, M).;false;false
0;false,false,false;movie(P, A).;false;false
0;false,false;workedunder(L, A).;true;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A), movie(E, F).;false;true
1;false;workedunder(H, A), movie(I, H).;true;true
1;false,true;workedunder(H, J), movie(I, J).;false;false
1;true,false;workedunder(G, A).;false;false
1;false,false,true;workedunder(M, N), movie(P, N).;false;false
1;false,false;workedunder(M, A).;true;false
2;;genre(A, B) :- movie(C, A).;true;true
2;true;movie(C, F), workedunder(F, G).;false;false
2;false;workedunder(H, A), movie(I, A).;true;true
2;false,true;workedunder(H, J).;true;false
2;false,true,true;movie(I, J).;false;false
2;false,false,true;movie(L, M), workedunder(N, M).;false;false
2;false,false,false;workedunder(P, A).;false;false
2;false,false;workedunder(K, A), movie(L, K).;true;true
3;;genre(A, B) :- workedunder(F, E).;true;true
3;true;workedunder(A, E).;false;true
3;false;workedunder(L, A), workedunder(M, L).;false;true
3;true,false,false;workedunder(J, A), movie(K, J).;false;false
3;true,false;workedunder(I, G).;false;true
3;false,false;workedunder(N, A), workedunder(N, P).;false;false
4;;genre(A, B) :- movie(C, A).;true;true
4;true;movie(C, F), workedunder(F, G).;true;false
4;false;workedunder(I, A), movie(J, A).;true;true
4;false,true;workedunder(I, K).;false;false
4;false,false,false;workedunder(Q, A), workedunder(Q, R).;false;false
4;false,false,true;movie(M, N), workedunder(P, N).;false;false
4;true,true;workedunder(F, A).;false;false
4;false,false;workedunder(L, A), movie(M, L).;true;true
5;;genre(A, B) :- workedunder(F, E).;false;true
5;false,false,true;workedunder(N, Q), movie(R, Q).;false;false
5;false;workedunder(L, A), workedunder(M, L).;false;true
5;false,false,false;workedunder(S, A).;false;false
5;false,false;workedunder(N, A), movie(P, N).;true;true
6;;genre(A, B) :- movie(E, A).;true;true
6;true;workedunder(F, A), workedunder(F, G).;true;false
6;false;workedunder(K, A).;true;false
6;false,true;workedunder(K, L), movie(M, L).;true;false
6;false,true,true;movie(Q, A).;false;false
6;true,true;movie(E, F).;false;false
7;;genre(A, B) :- movie(C, A).;true;true
7;true;workedunder(F, A).;false;false
7;false;workedunder(G, A), workedunder(G, H).;true;true
7;false,true;movie(L, H).;false;false
7;false,false,true;workedunder(R, S), movie(T, S).;false;false
7;false,false;workedunder(R, A).;true;false
8;;genre(A, B) :- movie(C, A).;true;true
8;true;workedunder(F, A), movie(C, F).;false;true
8;false;workedunder(I, A), workedunder(J, I).;false;true
8;false,false;workedunder(K, A), movie(L, K).;true;true
8;true,false;workedunder(G, A).;true;false
8;false,false,true;workedunder(K, M), movie(L, M).;false;false
8;false,false,false;workedunder(N, A), workedunder(P, N).;false;false
8;true,false,true;workedunder(G, H).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
9;false,true,false;workedunder(M, K).;false;false
9;false;movie(I, G).;true;true
9;false,true;workedunder(J, A), movie(I, J).;false;true
9;false,false,true;workedunder(N, Q), movie(R, Q).;false;false
9;false,false,false;movie(S, A), workedunder(T, A).;false;false
9;false,false;workedunder(N, A), movie(P, N).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.23409923944267316;  // std dev = 1,173, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then return -0.13785792350709075;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( workedunder(E, F) )
%   | | then return 0.38655270713914897;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.2907959857459462;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.12227568030698387;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.0956079208618524;  // std dev = 1,001, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then if ( movie(C, D) )
%   | | then return 0.19574550382895722;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.11944228950588066;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.1500158299942937;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.1074396883003964;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.11669861319682524;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0975626860118164;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, F) )
%   | then if ( workedunder(G, A), movie(E, G) )
%   | | then return 0.0920012862085255;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( workedunder(H, I) )
%   | | | then return -0.08930367890381528;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.315261
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 2.376 seconds
Total inference time: 2.633 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false,false': [0.0, 3, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [1.173, 4, 4]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true': 'workedunder(A, D)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.894, 1, 4], 'true,true': [0.0, 3, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.894, 1, 4], 'true,true,false': [2.63e-09, 3, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.001, 4, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)', 'true,true': 'movie(C, D)'}, {'true,false': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.894, 1, 4], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)'}, {'true,false': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false,false': [0.0, 3, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true,false': 'workedunder(H, I)', 'false': 'movie(E, F)', 'false,true': 'workedunder(G, A), movie(E, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.894, 1, 4], 'false,true,false,false': [0.0, 0, 0], 'false,true,false,true': [1.86e-09, 3, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999986, nan], 'true': [0.15999999999999986, 0.0]}, {'': [0.20948195373304385, nan], 'true': [0.16, 0.0], 'true,false': [nan, 0.0]}, {'': [0.17200226808539504, nan], 'true': [0.17200226808539504, nan]}, {'': [0.1644546506722156, nan], 'true': [0.0, 0.15999999999999998], 'true,false': [0.15999999999999998, nan]}, {'': [0.13999098467868984, nan], 'true': [0.13999098467868984, nan], 'true,true': [0.15999999999999998, 2.3129646346357427e-18]}, {'': [0.1253023357324878, nan]}, {'': [0.12328359650014481, nan], 'true': [0.15999999999999998, 0.0], 'true,true': [0.15999999999999998, nan]}, {'': [0.11553515872665332, nan], 'true': [0.16, 0.0]}, {'': [0.11075966507935352, nan], 'true': [0.15999999999999998, -2.3129646346357427e-18], 'true,false': [nan, -2.3129646346357427e-18]}, {'': [nan, 0.10770425555649699], 'false,true,false': [1.1564823173178713e-18, nan], 'false': [0.10770425555649699, nan], 'false,true': [0.16, 1.1564823173178713e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '3;;genre(A, B) :- workedunder(A, D).;true;true', '4;;genre(A, B) :- workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true', '7;;genre(A, B) :- workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '9;;genre(A, B) :- workedunder(G, A), movie(E, G).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 3.275 seconds
Total inference time: 1.84 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 19:22:34
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'parameter': {'CLL': -0.315261, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 2.633, 'Learning time': 2.376, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}, 'AUC ROC': 0.906977, 'Inference time': 1.84, 'Mapping results': {'Knowledge compiling time': 0.030382871627807617, 'Generating paths time': 3.307699680328369, 'Possible mappings': [433], 'Max mapping': 4096, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 0.44124937057495117, 'Numbers preds mapping': [7], 'Total time': 3.7793431282043457}, 'Learning time': 5.651, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 4.573 seconds
Total inference time: 1.075 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 19:22:40
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 1.075, 'Learning time': 4.573, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.789772
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.175 seconds
Total inference time: 1.46 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN), Time: 19:22:43
{'CLL': -0.789772, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.906977, 'Inference time': 1.46, 'Learning time': 1.175, 'Precision': [nan, 0.5], 'AUC PR': 0.843137}


Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.040135860443115234
   Generating paths time   = 4.699243783950806
   Generating mappings time   = 0.43787097930908203
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.9073486328125e-06
   Total time   = 5.177263498306274


Best mapping found: ['advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,true;workedunder(G, I), movie(H, I).;false;false
0;false,false,true;workedunder(L, M), movie(N, M).;false;false
0;false,false,false;movie(P, A).;false;false
0;false,false;workedunder(L, A).;true;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A), movie(E, F).;false;true
1;false;workedunder(H, A), movie(I, H).;true;true
1;false,true;workedunder(H, J), movie(I, J).;false;false
1;true,false;workedunder(G, A).;false;false
1;false,false,true;workedunder(M, N), movie(P, N).;false;false
1;false,false;workedunder(M, A).;true;false
2;;genre(A, B) :- movie(C, A).;true;true
2;true;movie(C, F), workedunder(F, G).;false;false
2;false;workedunder(H, A), movie(I, A).;true;true
2;false,true;workedunder(H, J).;true;false
2;false,true,true;movie(I, J).;false;false
2;false,false,true;movie(L, M), workedunder(N, M).;false;false
2;false,false,false;workedunder(P, A).;false;false
2;false,false;workedunder(K, A), movie(L, K).;true;true
3;;genre(A, B) :- workedunder(F, E).;true;true
3;true;workedunder(A, E).;false;true
3;false;workedunder(L, A), workedunder(M, L).;false;true
3;true,false,false;workedunder(J, A), movie(K, J).;false;false
3;true,false;workedunder(I, G).;false;true
3;false,false;workedunder(N, A), workedunder(N, P).;false;false
4;;genre(A, B) :- movie(C, A).;true;true
4;true;movie(C, F), workedunder(F, G).;true;false
4;false;workedunder(I, A), movie(J, A).;true;true
4;false,true;workedunder(I, K).;false;false
4;false,false,false;workedunder(Q, A), workedunder(Q, R).;false;false
4;false,false,true;movie(M, N), workedunder(P, N).;false;false
4;true,true;workedunder(F, A).;false;false
4;false,false;workedunder(L, A), movie(M, L).;true;true
5;;genre(A, B) :- workedunder(F, E).;false;true
5;false,false,true;workedunder(N, Q), movie(R, Q).;false;false
5;false;workedunder(L, A), workedunder(M, L).;false;true
5;false,false,false;workedunder(S, A).;false;false
5;false,false;workedunder(N, A), movie(P, N).;true;true
6;;genre(A, B) :- movie(E, A).;true;true
6;true;workedunder(F, A), workedunder(F, G).;true;false
6;false;workedunder(K, A).;true;false
6;false,true;workedunder(K, L), movie(M, L).;true;false
6;false,true,true;movie(Q, A).;false;false
6;true,true;movie(E, F).;false;false
7;;genre(A, B) :- movie(C, A).;true;true
7;true;workedunder(F, A).;false;false
7;false;workedunder(G, A), workedunder(G, H).;true;true
7;false,true;movie(L, H).;false;false
7;false,false,true;workedunder(R, S), movie(T, S).;false;false
7;false,false;workedunder(R, A).;true;false
8;;genre(A, B) :- movie(C, A).;true;true
8;true;workedunder(F, A), movie(C, F).;false;true
8;false;workedunder(I, A), workedunder(J, I).;false;true
8;false,false;workedunder(K, A), movie(L, K).;true;true
8;true,false;workedunder(G, A).;true;false
8;false,false,true;workedunder(K, M), movie(L, M).;false;false
8;false,false,false;workedunder(N, A), workedunder(P, N).;false;false
8;true,false,true;workedunder(G, H).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
9;false,true,false;workedunder(M, K).;false;false
9;false;movie(I, G).;true;true
9;false,true;workedunder(J, A), movie(I, J).;false;true
9;false,false,true;workedunder(N, Q), movie(R, Q).;false;false
9;false,false,false;movie(S, A), workedunder(T, A).;false;false
9;false,false;workedunder(N, A), movie(P, N).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.22152502927633905;  // std dev = 0,668, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then if ( workedunder(A, D) )
%   | then return -0.13637023346435792;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( workedunder(E, F) )
%   | | then return 0.5002131558403854;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( workedunder(D, A) )
%   | | then return 0.37769095781541506;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.12109080086507203;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.0925030210673109;  // std dev = 0,403, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then if ( movie(C, D) )
%   | | then return 0.2749693064602384;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1180810726871328;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.22364953150626432;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.10632803812788187;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.18722041466032546;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0966391804806873;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, F) )
%   | then if ( workedunder(G, A), movie(E, G) )
%   | | then return 0.16038129881197583;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( workedunder(H, I) )
%   | | | then return -0.08852517668472613;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.306096
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 1.91 seconds
Total inference time: 2.96 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'true,false': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false,false': [0.0, 2, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true': [0.668, 2, 2]}], ['genre(A, B)', {'': 'workedunder(C, D)', 'true': 'workedunder(A, D)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 0, 2], 'true,true': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'workedunder(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 2, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [0.403, 2, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)', 'true,true': 'movie(C, D)'}, {'true,false': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)'}, {'true,false': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false,false': [0.0, 2, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false,true,false': 'workedunder(H, I)', 'false': 'movie(E, F)', 'false,true': 'workedunder(G, A), movie(E, G)'}, {'true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 2, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.25, nan], 'true': [0.0, 0.0]}, {'': [0.17847162811629394, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.11145008534151418, nan], 'true': [0.11145008534151418, nan]}, {'': [0.10130960288467858, nan], 'true': [0.0, 0.0], 'true,false': [0.0, nan]}, {'': [0.062195810698099915, nan], 'true': [0.062195810698099915, nan], 'true,true': [0.0, 0.0]}, {'': [0.04051610769524332, nan]}, {'': [0.038622150136973066, nan], 'true': [0.0, 0.0], 'true,true': [0.0, nan]}, {'': [0.027221299115414453, nan], 'true': [0.0, 0.0]}, {'': [0.020144067438404915, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [nan, 0.015488608386047575], 'false,true,false': [0.0, nan], 'false': [0.015488608386047575, nan], 'false,true': [0.0, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '3;;genre(A, B) :- workedunder(A, D).;true;true', '4;;genre(A, B) :- workedunder(D, A).;true;true', '6;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true', '7;;genre(A, B) :- workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '9;;genre(A, B) :- workedunder(G, A), movie(E, G).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,334, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,207, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.299128
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 2.439 seconds
Total inference time: 2.831 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 19:23:00
{'CLL': -0.299128, 'Recall': 1.0, 'F1': 0.909091, 'parameter': {'CLL': -0.306096, 'Recall': 1.0, 'F1': 0.909091, 'AUC ROC': 0.9, 'Inference time': 2.96, 'Learning time': 1.91, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}, 'AUC ROC': 0.9, 'Inference time': 2.831, 'Mapping results': {'Knowledge compiling time': 0.040135860443115234, 'Generating paths time': 4.699243783950806, 'Possible mappings': [433], 'Max mapping': 4096, 'Finding best mapping': 1.9073486328125e-06, 'Generating mappings time': 0.43787097930908203, 'Numbers preds mapping': [7], 'Total time': 5.177263498306274}, 'Learning time': 4.349, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 4.428 seconds
Total inference time: 1.552 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 19:23:07
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 1.552, 'Learning time': 4.428, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.174 seconds
Total inference time: 1.362 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN), Time: 19:23:10
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 1.362, 'Learning time': 1.174, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


