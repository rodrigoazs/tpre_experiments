Starting experiment #1 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( tempadvisedby(A, G), publication(E, G) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3581489350995123;  // std dev = 0,500, 18,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L) )
%   | | | then return 0.4071685429426485;  // std dev = 3,554, 51,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=28 */
%   | | | else return 0.3479448534668582;  // std dev = 3,499, 49,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=24 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, M), projectmember(N, M) )
%   | | then return 0.24276431971489695;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( advisedby(A, P) )
%   | | | then return 0.4581489350995123;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.3470378239884017;  // std dev = 4,742, 90,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=44 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F) )
%   | then return 0.2431522573300012;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then return 0.47540780245230163;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.24779728811959792;  // std dev = 0,493, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( advisedby(A, I), publication(J, I) )
%   | then if ( advisedby(K, I), publication(J, K) )
%   | | then if ( ta(L, K, M), ta(N, A, P) )
%   | | | then return 0.41642849982537694;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.31201240418820314;  // std dev = 4,662, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.43201604470553195;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, Q) )
%   | | then if ( tempadvisedby(R, Q), publication(S, R) )
%   | | | then return 0.2390253257491676;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.3636453865394401;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else return 0.2554524423348888;  // std dev = 0,495, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( advisedby(A, E), publication(F, A) )
%   | then return 0.20416130465148977;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then return 0.2938614907434983;  // std dev = 0,494, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | else return 0.2096591881312682;  // std dev = 0,497, 51,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=23 */
%   else if ( advisedby(A, I), publication(J, A) )
%   | then if ( tempadvisedby(K, I) )
%   | | then if ( publication(J, K) )
%   | | | then return 0.07998228352737054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2709351609547872;  // std dev = 2,868, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.39783358394301715;  // std dev = 0,476, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, L), projectmember(M, L) )
%   | | then return 0.1778454869722387;  // std dev = 0,480, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( tempadvisedby(A, N), publication(P, A) )
%   | | | then return 0.19956621655278314;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.27629531347465947;  // std dev = 4,286, 74,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=39 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.2021860854531204;  // std dev = 0,495, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then return 0.14965160538211575;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else if ( tempadvisedby(A, J), publication(K, J) )
%   | | | then return 0.2799579660512811;  // std dev = 1,469, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.11524248878246271;  // std dev = 1,100, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( advisedby(A, L), publication(M, A) )
%   | then return 0.24063691810361812;  // std dev = 0,494, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.16279558992134097;  // std dev = 1,984, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.31775298851904576;  // std dev = 1,936, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( advisedby(A, R), publication(S, R) )
%   | | | then return 0.22506109269039362;  // std dev = 2,859, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.14756142405774145;  // std dev = 2,501, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), projectmember(D, C) )
%   then return 0.2627737904560433;  // std dev = 1,061, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( ta(E, A, F), advisedby(A, G) )
%   | then if ( advisedby(H, G), publication(I, H) )
%   | | then if ( publication(I, G), ta(J, H, K) )
%   | | | then return 0.16765877355003664;  // std dev = 3,241, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | | else return 0.08136002634157986;  // std dev = 2,745, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else return 0.27492740394589754;  // std dev = 1,141, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( advisedby(A, L), publication(M, A) )
%   | | then if ( tempadvisedby(N, L) )
%   | | | then return 0.152527287752374;  // std dev = 2,992, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | | else return 0.2612367618539014;  // std dev = 1,959, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( tempadvisedby(A, P), publication(Q, A) )
%   | | | then return 0.11799345637697801;  // std dev = 1,707, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.1618449385886587;  // std dev = 5,649, 130,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=65 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then if ( ta(H, F, I), publication(G, E) )
%   | | then if ( samecourse(C, H) )
%   | | | then return 0.08439299834147748;  // std dev = 2,652, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | | else return 0.22566774472282042;  // std dev = 1,809, 14,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | else return 0.06297111122353569;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.2080256518666861;  // std dev = 1,140, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( advisedby(A, J), projectmember(K, J) )
%   | then return 0.10203906184932864;  // std dev = 0,484, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( advisedby(A, L) )
%   | | then if ( publication(M, L) )
%   | | | then return 0.13129533699148882;  // std dev = 4,377, 78,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=42 */
%   | | | else return 0.21909109533523466;  // std dev = 1,366, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( tempadvisedby(A, N) )
%   | | | then return 0.1376671459892682;  // std dev = 4,223, 73,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.09180327419761689;  // std dev = 2,565, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then if ( ta(H, F, I), publication(G, E) )
%   | | then return 0.09954253863013977;  // std dev = 0,492, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | else if ( tempadvisedby(J, E), ta(C, J, K) )
%   | | | then return -0.04428629324275676;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.0583739510298373;  // std dev = 2,615, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | else return 0.15625894314797642;  // std dev = 1,140, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( tempadvisedby(A, L), projectmember(M, L) )
%   | then return 0.1686692060841782;  // std dev = 1,058, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( publication(N, A) )
%   | | then if ( publication(N, P), advisedby(Q, P) )
%   | | | then return 0.09465498956245548;  // std dev = 3,995, 65,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=33 */
%   | | | else return 0.2132335046079915;  // std dev = 1,389, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( tempadvisedby(A, R) )
%   | | | then return 0.10886199417252425;  // std dev = 3,708, 56,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=29 */
%   | | | else return 0.07331217943788894;  // std dev = 3,978, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, F), publication(G, E) )
%   | then return 0.07957448454077183;  // std dev = 0,491, 86,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=41 */
%   | else if ( ta(C, H, I), advisedby(H, J) )
%   | | then return 0.02931339198578521;  // std dev = 0,492, 41,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else if ( tempadvisedby(A, K), publication(L, K) )
%   | | | then return 0.2076794742641075;  // std dev = 1,144, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.1179950369077946;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tempadvisedby(A, M) )
%   | then return 0.09318561252631492;  // std dev = 0,492, 32,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | else if ( advisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.12441245078615129;  // std dev = 1,971, 16,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0.0708692047979546;  // std dev = 4,515, 84,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=44 */
%   | | else if ( publication(R, A) )
%   | | | then return 0.09042983452991128;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.01514741624279968;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( publication(C, A), tempadvisedby(A, D) )
%   then if ( publication(C, D) )
%   | then if ( ta(E, A, F) )
%   | | then return -0.058118589595909285;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 6.259318502533917E-4;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.10023949727244495;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( advisedby(A, G), projectmember(H, G) )
%   | then if ( advisedby(A, I), publication(J, I) )
%   | | then return 0.520963261787842;  // std dev = 0,142, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.008562505786341042;  // std dev = 0,484, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | else if ( advisedby(A, K), ta(L, A, M) )
%   | | then if ( publication(N, K), tempadvisedby(P, K) )
%   | | | then return 0.04824860242824803;  // std dev = 3,645, 55,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=26 */
%   | | | else return 0.008237155945722106;  // std dev = 2,338, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | else if ( publication(Q, A) )
%   | | | then return 0.0685716560708958;  // std dev = 3,742, 58,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=32 */
%   | | | else return 0.055882474166681385;  // std dev = 5,319, 116,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=59 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C) )
%   then if ( tempadvisedby(D, C), publication(E, D) )
%   | then if ( ta(F, D, G) )
%   | | then return -0.02172449202064546;  // std dev = 0,489, 15,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( sameperson(A, D), publication(E, C) )
%   | | | then return 4.7577735698840496E-4;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06154410709056512;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.07142993781265049;  // std dev = 0,489, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   else if ( advisedby(A, H), projectmember(I, H) )
%   | then return 0.07953061147894229;  // std dev = 0,463, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else if ( ta(J, A, K), advisedby(A, L) )
%   | | then if ( publication(M, L) )
%   | | | then return 0.03193906233371618;  // std dev = 4,193, 73,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=34 */
%   | | | else return -0.03490154145841269;  // std dev = 1,080, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( ta(N, A, P), publication(Q, A) )
%   | | | then return 0.12702051216929208;  // std dev = 1,073, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.03712749240408359;  // std dev = 5,133, 108,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=56 */


Predicates from source: ['inphase(person,prequals).', 'samecourse(course,course).', 'tempadvisedby(person,person).', 'publication(title,person).', 'advisedby(person,person).', 'sameperson(person,person).', 'ta(course,person,quarter).', 'projectmember(project,person).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03127717971801758
   Generating paths time   = 5.121309518814087
   Generating mappings time   = 1.538996696472168
   Possible mappings   = [1299]
   Max mapping   = 16384
   Numbers predicates mapping   = [8]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 6.691596031188965


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), workedunder(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
2;false;workedunder(I, A), movie(J, A).;true;true
2;false,true;workedunder(I, K).;true;false
2;false,true,true;movie(J, K).;false;false
2;false,false,false;workedunder(N, A), movie(P, A).;false;false
2;false,false;workedunder(L, A), workedunder(M, L).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false,false,true;workedunder(N, P), movie(Q, P).;false;false
3;false;workedunder(L, A), movie(M, A).;false;true
3;false,false,false;workedunder(R, A), movie(S, R).;false;false
3;false,false;workedunder(N, A).;true;true
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false;workedunder(G, A).;true;true
4;false,true;workedunder(G, H), movie(I, H).;true;false
4;false,true,true;movie(I, G).;false;false
4;false,false,true;workedunder(L, N).;false;false
4;false,false,false;workedunder(P, A), movie(Q, A).;false;false
4;false,false;workedunder(L, A), movie(M, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;true;false
5;true,true;movie(G, E).;true;false
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(N, A).;false;false
5;false,false,true;movie(M, L).;false;false
5;true,true,true;workedunder(H, C).;false;false
5;false;workedunder(J, A), workedunder(K, J).;false;true
6;;genre(A, B) :- workedunder(E, A).;true;true
6;true;workedunder(E, F), movie(G, F).;true;false
6;false;workedunder(L, A), workedunder(M, L).;false;true
6;true,true,false;workedunder(E, J).;false;false
6;false,false,false;workedunder(R, A).;false;false
6;false,false,true;movie(N, P), workedunder(P, Q).;false;false
6;true,true;movie(G, E).;false;true
6;false,false;movie(N, A).;true;true
7;;genre(A, B) :- movie(G, E).;false;true
7;false,false,true;workedunder(N, P), movie(Q, P).;false;false
7;false;workedunder(M, A).;false;true
7;false,false,false;movie(R, A).;false;false
7;false,false;workedunder(N, A).;true;true
8;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
8;true;movie(C, D).;false;false
8;false;workedunder(G, A), workedunder(H, G).;true;true
8;false,true;workedunder(I, A), movie(J, I).;false;false
8;false,false,true;movie(N, K), workedunder(K, P).;false;false
8;false,false,false;movie(Q, A).;false;false
8;false,false;workedunder(K, A).;true;true
9;;genre(A, B) :- workedunder(C, A).;true;true
9;true;workedunder(C, D), movie(E, D).;true;false
9;false;workedunder(H, A), workedunder(I, H).;false;true
9;false,false,false;movie(Q, A).;false;false
9;false,false,true;movie(M, L).;false;false
9;true,true;workedunder(A, D), movie(E, C).;false;false
9;false,false;workedunder(L, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( workedunder(E, A), movie(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.15795862733523683;  // std dev = 1,217, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then if ( workedunder(E, F), movie(G, F) )
%   | | then if ( movie(G, E) )
%   | | | then return 0.379670407154312;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11694812838381761;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.2951257630772826;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(I, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10540117602192779;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.23762521343920523;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A) )
%   | | then if ( movie(H, I), workedunder(I, J) )
%   | | | then return -0.0958680315029523;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.05470390396933396;  // std dev = 0,669, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.18876227787485586;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return -0.09235890632255707;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( workedunder(A, D), movie(E, C) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1615371704381019;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.08490259984743663;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.351589
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 5.004 seconds
Total inference time: 2.641 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'true,true': [4.21e-08, 0, 11], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), movie(F, A)', 'false,false,false': 'workedunder(I, A), movie(J, A)', 'false,false': 'workedunder(G, A), workedunder(H, G)'}, {'true': [0.0, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.217, 11, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'workedunder(E, A)', 'false,true': 'workedunder(E, F), movie(G, F)', 'false,true,true': 'movie(G, E)', 'false,false,false': 'workedunder(J, A), movie(K, A)', 'false,false': 'workedunder(H, A), movie(I, A)'}, {'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A)', 'true,true': 'movie(E, C)', 'false,false,false': 'workedunder(K, A)', 'false': 'workedunder(H, A), workedunder(I, H)'}, {'true,true,true,true': [0.0, 0, 11], 'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'workedunder(F, A), workedunder(G, F)', 'false,false,true': 'movie(H, I), workedunder(I, J)', 'true,true': 'movie(E, C)', 'false,false': 'movie(H, A)'}, {'true,true,true': [0.0, 0, 11], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 11, 0], 'false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'true': [0.669, 11, 11], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false': 'workedunder(E, A), workedunder(F, E)', 'false,false,false': 'movie(H, A)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [3.73e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [7.45e-09, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'workedunder(F, A), workedunder(G, F)', 'true,true': 'workedunder(A, D), movie(E, C)', 'false,false,false': 'movie(I, A)', 'false,false': 'workedunder(H, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 11]}]]
[{'': [0.24999999999999958, nan], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.17847162811629388, nan], 'true': [1.6148698540002277e-16, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [-2.0185873175002846e-16, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.06736877561142736, nan]}, {'': [nan, 0.06165749246000911], 'false': [-4.0371746350005693e-17, -2.523234146875356e-18], 'false,true': [-4.0371746350005693e-17, nan], 'false,true,true': [-4.0371746350005693e-17, nan], 'false,false,false': [nan, -2.523234146875356e-18], 'false,false': [nan, -2.523234146875356e-18]}, {'': [-2.0185873175002847e-17, 5.046468293750712e-18], 'true': [-2.0185873175002847e-17, nan], 'true,true,true': [-2.0185873175002847e-17, nan], 'false': [nan, 5.046468293750712e-18], 'true,true': [-2.0185873175002847e-17, nan], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [-3.027880976250427e-17, -3.784851220313033e-18], 'true': [-3.027880976250427e-17, nan], 'false': [nan, -3.784851220313033e-18], 'false,false,true': [-3.784851220313033e-18, nan], 'true,true': [-3.027880976250427e-17, nan], 'false,false': [-3.784851220313033e-18, nan]}, {'': [0.020328535906743557, nan]}, {'': [5.046468293750712e-18, 1.261617073437678e-18], 'true': [5.046468293750712e-18, nan], 'false': [nan, 1.261617073437678e-18], 'false,false,false': [1.261617073437678e-18, nan], 'false,false': [nan, 1.261617073437678e-18]}, {'': [0.0, -2.523234146875356e-18], 'true': [0.0, nan], 'false': [nan, -2.523234146875356e-18], 'false,false,false': [-2.523234146875356e-18, nan], 'true,true': [nan, 0.0], 'false,false': [nan, -2.523234146875356e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(E, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '9;;genre(A, B) :- workedunder(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 6.469 seconds
Total inference time: 2.561 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:28:58
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'parameter': {'CLL': -0.351589, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 2.641, 'Learning time': 5.004, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}, 'AUC ROC': 0.875, 'Inference time': 2.561, 'Mapping results': {'Knowledge compiling time': 0.03127717971801758, 'Generating paths time': 5.121309518814087, 'Possible mappings': [1299], 'Max mapping': 16384, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 1.538996696472168, 'Numbers preds mapping': [8], 'Total time': 6.691596031188965}, 'Learning time': 11.472999999999999, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 6.169 seconds
Total inference time: 1.698 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:29:07
{'CLL': -0.352709, 'Recall': 1.0, 'F1': 0.888889, 'AUC ROC': 0.875, 'Inference time': 1.698, 'Learning time': 6.169, 'Precision': [0.8, 0.5], 'AUC PR': 0.8}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.726963
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.553 seconds
Total inference time: 1.28 seconds
AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:29:12
{'CLL': -0.726963, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.875, 'Inference time': 1.28, 'Learning time': 2.553, 'Precision': [nan, 0.5], 'AUC PR': 0.8}


Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03476142883300781
   Generating paths time   = 5.111325740814209
   Generating mappings time   = 1.3956172466278076
   Possible mappings   = [1299]
   Max mapping   = 16384
   Numbers predicates mapping   = [8]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 6.541716575622559


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), movie(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
2;false;workedunder(I, A), movie(J, A).;true;true
2;false,true;workedunder(I, K).;true;false
2;false,true,true;movie(J, K).;false;false
2;false,false,false;workedunder(N, A), movie(P, A).;false;false
2;false,false;workedunder(L, A), movie(M, L).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false,false,true;workedunder(N, P), movie(Q, P).;false;false
3;false;workedunder(L, A), movie(M, A).;false;true
3;false,false,false;workedunder(R, A), movie(S, R).;false;false
3;false,false;workedunder(N, A).;true;true
4;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
4;false;workedunder(G, A).;true;true
4;false,true;workedunder(G, H), movie(I, H).;true;false
4;false,true,true;movie(I, G).;false;false
4;false,false,true;workedunder(L, N).;false;false
4;false,false,false;workedunder(P, A), movie(Q, A).;false;false
4;false,false;workedunder(L, A), movie(M, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;true;false
5;true,true;movie(G, E).;true;false
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(N, A).;false;false
5;false,false,true;movie(M, L).;false;false
5;true,true,true;workedunder(H, C).;false;false
5;false;workedunder(J, A), movie(K, J).;false;true
6;;genre(A, B) :- workedunder(E, A).;true;true
6;true;workedunder(E, F), movie(G, F).;true;false
6;false;workedunder(L, A), movie(M, L).;false;true
6;true,true,false;workedunder(E, J).;false;false
6;false,false,false;workedunder(R, A).;false;false
6;false,false,true;movie(N, P), workedunder(P, Q).;false;false
6;true,true;movie(G, E).;false;true
6;false,false;movie(N, A).;true;true
7;;genre(A, B) :- movie(G, E).;false;true
7;false,false,true;workedunder(N, P), movie(Q, P).;false;false
7;false;workedunder(M, A).;false;true
7;false,false,false;movie(R, A).;false;false
7;false,false;workedunder(N, A).;true;true
8;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
8;true;movie(C, D).;false;false
8;false;workedunder(G, A), movie(H, G).;true;true
8;false,true;workedunder(I, A), movie(J, I).;false;false
8;false,false,true;movie(N, K), workedunder(K, P).;false;false
8;false,false,false;movie(Q, A).;false;false
8;false,false;workedunder(K, A).;true;true
9;;genre(A, B) :- workedunder(C, A).;true;true
9;true;workedunder(C, D), movie(E, D).;true;false
9;false;workedunder(H, A), movie(I, H).;false;true
9;false,false,false;movie(Q, A).;false;false
9;false,false,true;movie(M, L).;false;false
9;true,true;workedunder(A, D), movie(E, C).;false;false
9;false,false;workedunder(L, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5123505661168763;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, A), movie(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.16214040922766773;  // std dev = 1,528, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.34533087234248505;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11738067852967662;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.2640730309307144;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), movie(I, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10575522108695315;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.20743789944857718;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A) )
%   | | then if ( movie(H, I), workedunder(I, J) )
%   | | | then return -0.0961627213560766;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.050160595001434376;  // std dev = 1,145, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.1580338547734718;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return -0.09223802831596882;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( workedunder(A, D), movie(E, C) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.13082327041475178;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.08479994964309968;  // std dev = 6,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.32664
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 4.216 seconds
Total inference time: 4.043 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'true,true': [0.961, 1, 12], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), movie(F, A)', 'false,false,false': 'workedunder(I, A), movie(J, A)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.528, 12, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(H, A), movie(I, A)', 'false,false': 'workedunder(F, A), movie(G, A)'}, {'true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A)', 'true,true': 'movie(E, C)', 'false,false,false': 'workedunder(K, A)', 'false': 'workedunder(H, A), movie(I, H)'}, {'true,true,true,true': [0.961, 1, 12], 'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'workedunder(F, A), movie(G, F)', 'false,false,true': 'movie(H, I), workedunder(I, J)', 'true,true': 'movie(E, C)', 'false,false': 'movie(H, A)'}, {'true,true,true': [0.961, 1, 12], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 11, 0], 'false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'true': [1.145, 12, 12], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'movie(H, A)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'workedunder(F, A), movie(G, F)', 'true,true': 'workedunder(A, D), movie(E, C)', 'false,false,false': 'movie(I, A)', 'false,false': 'workedunder(H, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [6.45e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 0], 'true,true,false': [0.961, 1, 12]}]]
[{'': [0.24999999999999956, nan], 'true': [0.07100591715976314, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.19076867375623552, nan], 'true': [0.07100591715976333, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.07100591715976351, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.09731751852547608, nan]}, {'': [0.07100591715976337, -2.523234146875356e-18], 'false': [nan, -2.523234146875356e-18], 'false,false,false': [nan, -2.523234146875356e-18], 'false,false': [nan, -2.523234146875356e-18]}, {'': [0.07100591715976332, 0.0], 'true': [0.07100591715976332, nan], 'true,true': [0.07100591715976332, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true,true': [0.07100591715976332, nan], 'false': [nan, 0.0]}, {'': [0.07100591715976332, -1.261617073437678e-18], 'true': [0.07100591715976332, nan], 'false': [nan, -1.261617073437678e-18], 'false,false,true': [-1.261617073437678e-18, nan], 'true,true': [0.07100591715976332, nan], 'false,false': [-1.261617073437678e-18, nan]}, {'': [0.05464201427030261, nan]}, {'': [0.0710059171597633, -5.046468293750712e-18], 'true': [0.0710059171597633, nan], 'false': [nan, -5.046468293750712e-18], 'false,false,false': [-5.046468293750712e-18, nan], 'false,false': [nan, -5.046468293750712e-18]}, {'': [0.07100591715976332, 3.784851220313033e-18], 'true': [0.07100591715976332, nan], 'false': [nan, 3.784851220313033e-18], 'false,false,false': [3.784851220313033e-18, nan], 'true,true': [nan, 0.07100591715976332], 'false,false': [nan, 3.784851220313033e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '9;;genre(A, B) :- workedunder(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 5.157 seconds
Total inference time: 1.743 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:29:35
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'parameter': {'CLL': -0.32664, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 4.043, 'Learning time': 4.216, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}, 'AUC ROC': 0.885714, 'Inference time': 1.743, 'Mapping results': {'Knowledge compiling time': 0.03476142883300781, 'Generating paths time': 5.111325740814209, 'Possible mappings': [1299], 'Max mapping': 16384, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 1.3956172466278076, 'Numbers preds mapping': [8], 'Total time': 6.541716575622559}, 'Learning time': 9.373000000000001, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 6.671 seconds
Total inference time: 1.459 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:29:44
{'CLL': -0.320018, 'Recall': 1.0, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Inference time': 1.459, 'Learning time': 6.671, 'Precision': [0.813953, 0.5], 'AUC PR': 0.813953}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.75044
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.659 seconds
Total inference time: 1.407 seconds
AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:29:48
{'CLL': -0.75044, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.885714, 'Inference time': 1.407, 'Learning time': 2.659, 'Precision': [nan, 0.5], 'AUC PR': 0.813953}


Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03748679161071777
   Generating paths time   = 5.08462381362915
   Generating mappings time   = 1.434715747833252
   Possible mappings   = [1299]
   Max mapping   = 16384
   Numbers predicates mapping   = [8]
   Finding best mapping   = 1.9073486328125e-06
   Total time   = 6.556838750839233


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), movie(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
2;false;workedunder(I, A), movie(J, A).;true;true
2;false,true;workedunder(I, K).;true;false
2;false,true,true;movie(J, K).;false;false
2;false,false,false;workedunder(N, A), movie(P, A).;false;false
2;false,false;workedunder(L, A), movie(M, L).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false,false,true;workedunder(N, P), movie(Q, P).;false;false
3;false;workedunder(L, A), movie(M, A).;false;true
3;false,false,false;workedunder(R, A), movie(S, R).;false;false
3;false,false;workedunder(N, A).;true;true
4;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
4;false;workedunder(G, A).;true;true
4;false,true;workedunder(G, H), movie(I, H).;true;false
4;false,true,true;movie(I, G).;false;false
4;false,false,true;workedunder(L, N).;false;false
4;false,false,false;workedunder(P, A), movie(Q, A).;false;false
4;false,false;workedunder(L, A), movie(M, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;true;false
5;true,true;movie(G, E).;true;false
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(N, A).;false;false
5;false,false,true;movie(M, L).;false;false
5;true,true,true;workedunder(H, C).;false;false
5;false;workedunder(J, A), movie(K, J).;false;true
6;;genre(A, B) :- workedunder(E, A).;true;true
6;true;workedunder(E, F), movie(G, F).;true;false
6;false;workedunder(L, A), movie(M, L).;false;true
6;true,true,false;workedunder(E, J).;false;false
6;false,false,false;workedunder(R, A).;false;false
6;false,false,true;movie(N, P), workedunder(P, Q).;false;false
6;true,true;movie(G, E).;false;true
6;false,false;movie(N, A).;true;true
7;;genre(A, B) :- movie(G, E).;false;true
7;false,false,true;workedunder(N, P), movie(Q, P).;false;false
7;false;workedunder(M, A).;false;true
7;false,false,false;movie(R, A).;false;false
7;false,false;workedunder(N, A).;true;true
8;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
8;true;movie(C, D).;false;false
8;false;workedunder(G, A), movie(H, G).;true;true
8;false,true;workedunder(I, A), movie(J, I).;false;false
8;false,false,true;movie(N, K), workedunder(K, P).;false;false
8;false,false,false;movie(Q, A).;false;false
8;false,false;workedunder(K, A).;true;true
9;;genre(A, B) :- workedunder(C, A).;true;true
9;true;workedunder(C, D), movie(E, D).;true;false
9;false;workedunder(H, A), movie(I, H).;false;true
9;false,false,false;movie(Q, A).;false;false
9;false,false,true;movie(M, L).;false;false
9;true,true;workedunder(A, D), movie(E, C).;false;false
9;false,false;workedunder(L, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.39468718495146987;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, A), movie(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.17931826699808692;  // std dev = 2,508, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.25878603914901577;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11917207682255643;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.19419056870327844;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), movie(I, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1072191863590061;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.14616381883713392;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A) )
%   | | then if ( movie(H, I), workedunder(I, J) )
%   | | | then return -0.0973796235193314;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.049748438665645434;  // std dev = 2,312, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.09908531809377726;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return -0.09327253256199121;  // std dev = 6,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( workedunder(A, D), movie(E, C) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.07605738371773654;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.08567783773124993;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.282593
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 6.185 seconds
Total inference time: 2.232 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false,false': [0.0, 11, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'true,true': [2.245, 7, 18], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), movie(F, A)', 'false,false,false': 'workedunder(I, A), movie(J, A)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [2.508, 18, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(H, A), movie(I, A)', 'false,false': 'workedunder(F, A), movie(G, A)'}, {'true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A)', 'true,true': 'movie(E, C)', 'false,false,false': 'workedunder(K, A)', 'false': 'workedunder(H, A), movie(I, H)'}, {'true,true,true,true': [2.245, 7, 18], 'false,false,false,false': [0.0, 11, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'workedunder(F, A), movie(G, F)', 'false,false,true': 'movie(H, I), workedunder(I, J)', 'true,true': 'movie(E, C)', 'false,false': 'movie(H, A)'}, {'true,true,true': [2.245, 7, 18], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [5.27e-09, 11, 0], 'false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'true': [2.312, 18, 18], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'movie(H, A)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [6.45e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'workedunder(F, A), movie(G, F)', 'true,true': 'workedunder(A, D), movie(E, C)', 'false,false,false': 'movie(I, A)', 'false,false': 'workedunder(H, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 0], 'true,true,false': [2.245, 7, 18]}]]
[{'': [0.2499999999999995, nan], 'true': [0.2015999999999996, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.22099738300738728, nan], 'true': [0.2016000000000001, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.20160000000000053, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.1747217246282939, nan]}, {'': [0.20159999999999975, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.20160000000000003, 0.0], 'true': [0.20160000000000003, nan], 'true,true': [0.20160000000000003, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true,true': [0.20160000000000003, nan], 'false': [nan, 0.0]}, {'': [0.2016, 2.523234146875356e-18], 'true': [0.2016, nan], 'false': [nan, 2.523234146875356e-18], 'false,false,true': [2.523234146875356e-18, nan], 'true,true': [0.2016, nan], 'false,false': [2.523234146875356e-18, nan]}, {'': [0.1484887539032498, nan]}, {'': [0.2016000000000001, 3.784851220313033e-18], 'true': [0.2016000000000001, nan], 'false': [nan, 3.784851220313033e-18], 'false,false,false': [3.784851220313033e-18, nan], 'false,false': [nan, 3.784851220313033e-18]}, {'': [0.2016, 0.0], 'true': [0.2016, nan], 'false': [nan, 0.0], 'false,false,false': [0.0, nan], 'true,true': [nan, 0.2016], 'false,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '9;;genre(A, B) :- workedunder(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 6.87 seconds
Total inference time: 1.618 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:30:13
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'parameter': {'CLL': -0.282593, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 2.232, 'Learning time': 6.185, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}, 'AUC ROC': 0.965517, 'Inference time': 1.618, 'Mapping results': {'Knowledge compiling time': 0.03748679161071777, 'Generating paths time': 5.08462381362915, 'Possible mappings': [1299], 'Max mapping': 16384, 'Finding best mapping': 1.9073486328125e-06, 'Generating mappings time': 1.434715747833252, 'Numbers preds mapping': [8], 'Total time': 6.556838750839233}, 'Learning time': 13.055, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 6.605 seconds
Total inference time: 1.487 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:30:22
{'CLL': -0.264596, 'Recall': 1.0, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Inference time': 1.487, 'Learning time': 6.605, 'Precision': [0.935484, 0.5], 'AUC PR': 0.935484}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.811362
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.777 seconds
Total inference time: 2.434 seconds
AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:30:28
{'CLL': -0.811362, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.965517, 'Inference time': 2.434, 'Learning time': 2.777, 'Precision': [nan, 0.5], 'AUC PR': 0.935484}


Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.034154415130615234
   Generating paths time   = 5.4883246421813965
   Generating mappings time   = 1.3877394199371338
   Possible mappings   = [1299]
   Max mapping   = 16384
   Numbers predicates mapping   = [8]
   Finding best mapping   = 1.9073486328125e-06
   Total time   = 6.91023063659668


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), workedunder(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
2;false;workedunder(I, A), movie(J, A).;true;true
2;false,true;workedunder(I, K).;true;false
2;false,true,true;movie(J, K).;false;false
2;false,false,false;workedunder(N, A), movie(P, A).;false;false
2;false,false;workedunder(L, A), workedunder(M, L).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false,false,true;workedunder(N, P), movie(Q, P).;false;false
3;false;workedunder(L, A), movie(M, A).;false;true
3;false,false,false;workedunder(R, A), movie(S, R).;false;false
3;false,false;workedunder(N, A).;true;true
4;;genre(A, B) :- workedunder(C, A), workedunder(D, C).;false;true
4;false;workedunder(G, A).;true;true
4;false,true;workedunder(G, H), movie(I, H).;true;false
4;false,true,true;movie(I, G).;false;false
4;false,false,true;workedunder(L, N).;false;false
4;false,false,false;workedunder(P, A), movie(Q, A).;false;false
4;false,false;workedunder(L, A), movie(M, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;true;false
5;true,true;movie(G, E).;true;false
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(N, A).;false;false
5;false,false,true;movie(M, L).;false;false
5;true,true,true;workedunder(H, C).;false;false
5;false;workedunder(J, A), workedunder(K, J).;false;true
6;;genre(A, B) :- workedunder(E, A).;true;true
6;true;workedunder(E, F), movie(G, F).;true;false
6;false;workedunder(L, A), workedunder(M, L).;false;true
6;true,true,false;workedunder(E, J).;false;false
6;false,false,false;workedunder(R, A).;false;false
6;false,false,true;movie(N, P), workedunder(P, Q).;false;false
6;true,true;movie(G, E).;false;true
6;false,false;movie(N, A).;true;true
7;;genre(A, B) :- movie(G, E).;false;true
7;false,false,true;workedunder(N, P), movie(Q, P).;false;false
7;false;workedunder(M, A).;false;true
7;false,false,false;movie(R, A).;false;false
7;false,false;workedunder(N, A).;true;true
8;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
8;true;movie(C, D).;false;false
8;false;workedunder(G, A), workedunder(H, G).;true;true
8;false,true;workedunder(I, A), movie(J, I).;false;false
8;false,false,true;movie(N, K), workedunder(K, P).;false;false
8;false,false,false;movie(Q, A).;false;false
8;false,false;workedunder(K, A).;true;true
9;;genre(A, B) :- workedunder(C, A).;true;true
9;true;workedunder(C, D), movie(E, D).;true;false
9;false;workedunder(H, A), workedunder(I, H).;false;true
9;false,false,false;movie(Q, A).;false;false
9;false,false,true;movie(M, L).;false;false
9;true,true;workedunder(A, D), movie(E, C).;false;false
9;false,false;workedunder(L, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( workedunder(E, A), movie(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.17153349828640083;  // std dev = 1,076, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(D, C) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then if ( workedunder(E, F), movie(G, F) )
%   | | then if ( movie(G, E) )
%   | | | then return 0.29258794850627473;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11835732849170555;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.220130347586957;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(I, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10655381774489354;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.16763674053475225;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A) )
%   | | then if ( movie(H, I), workedunder(I, J) )
%   | | | then return -0.09682686953068707;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.047742220707758645;  // std dev = 0,943, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.1191354785745475;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return -0.09261847436683672;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( workedunder(A, D), movie(E, C) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.09382409039172242;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.08512296167781915;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.314162
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 4.456 seconds
Total inference time: 2.774 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false,false': [0.0, 3, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 3, 0], 'true,true': [0.894, 1, 4], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), movie(F, A)', 'false,false,false': 'workedunder(I, A), movie(J, A)', 'false,false': 'workedunder(G, A), workedunder(H, G)'}, {'true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.63e-09, 3, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [1.076, 4, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(D, C)', 'false': 'workedunder(E, A)', 'false,true': 'workedunder(E, F), movie(G, F)', 'false,true,true': 'movie(G, E)', 'false,false,false': 'workedunder(J, A), movie(K, A)', 'false,false': 'workedunder(H, A), movie(I, A)'}, {'true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true,true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A)', 'true,true': 'movie(E, C)', 'false,false,false': 'workedunder(K, A)', 'false': 'workedunder(H, A), workedunder(I, H)'}, {'true,true,true,true': [0.894, 1, 4], 'false,false,false,false': [0.0, 3, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'workedunder(F, A), workedunder(G, F)', 'false,false,true': 'movie(H, I), workedunder(I, J)', 'true,true': 'movie(E, C)', 'false,false': 'movie(H, A)'}, {'true,true,true': [0.894, 1, 4], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.86e-09, 3, 0], 'false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'true': [0.943, 4, 4], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false': 'workedunder(E, A), workedunder(F, E)', 'false,false,false': 'movie(H, A)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'workedunder(F, A), workedunder(G, F)', 'true,true': 'workedunder(A, D), movie(E, C)', 'false,false,false': 'movie(I, A)', 'false,false': 'workedunder(H, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 0], 'true,true,false': [0.894, 1, 4]}]]
[{'': [0.24999999999999986, nan], 'true': [0.15999999999999986, 0.0], 'true,false': [nan, 0.0]}, {'': [0.20948195373304385, nan], 'true': [0.16, 0.0], 'true,false': [0.0, nan]}, {'': [0.15999999999999998, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18], 'false,false': [nan, 2.3129646346357427e-18]}, {'': [0.14475994169199063, nan]}, {'': [nan, 0.13958031734850312], 'false': [0.15999999999999998, 0.0], 'false,true': [0.15999999999999998, nan], 'false,true,true': [0.15999999999999998, nan], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.16, 0.0], 'true': [0.16, nan], 'true,true': [0.16, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true,true': [0.16, nan], 'false': [nan, 0.0]}, {'': [0.16, 1.1564823173178713e-18], 'true': [0.16, nan], 'false': [nan, 1.1564823173178713e-18], 'false,false,true': [1.1564823173178713e-18, nan], 'true,true': [0.16, nan], 'false,false': [1.1564823173178713e-18, nan]}, {'': [0.11116718380244672, nan]}, {'': [0.15999999999999998, 0.0], 'true': [0.15999999999999998, nan], 'false': [nan, 0.0], 'false,false,false': [0.0, nan], 'false,false': [nan, 0.0]}, {'': [0.16, -1.1564823173178713e-18], 'true': [0.16, nan], 'false': [nan, -1.1564823173178713e-18], 'false,false,false': [-1.1564823173178713e-18, nan], 'true,true': [nan, 0.16], 'false,false': [nan, -1.1564823173178713e-18]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(E, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '9;;genre(A, B) :- workedunder(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 3.519 seconds
Total inference time: 2.272 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:30:50
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'parameter': {'CLL': -0.314162, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 2.774, 'Learning time': 4.456, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}, 'AUC ROC': 0.906977, 'Inference time': 2.272, 'Mapping results': {'Knowledge compiling time': 0.034154415130615234, 'Generating paths time': 5.4883246421813965, 'Possible mappings': [1299], 'Max mapping': 16384, 'Finding best mapping': 1.9073486328125e-06, 'Generating mappings time': 1.3877394199371338, 'Numbers preds mapping': [8], 'Total time': 6.91023063659668}, 'Learning time': 7.9750000000000005, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 4.661 seconds
Total inference time: 1.626 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:30:57
{'CLL': -0.300536, 'Recall': 1.0, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Inference time': 1.626, 'Learning time': 4.661, 'Precision': [0.843137, 0.5], 'AUC PR': 0.843137}


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.789772
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.557 seconds
Total inference time: 1.407 seconds
AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:31:02
{'CLL': -0.789772, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.906977, 'Inference time': 1.407, 'Learning time': 2.557, 'Precision': [nan, 0.5], 'AUC PR': 0.843137}


Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.03801870346069336
   Generating paths time   = 5.095455646514893
   Generating mappings time   = 1.4533236026763916
   Possible mappings   = [1299]
   Max mapping   = 16384
   Numbers predicates mapping   = [8]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 6.586809873580933


Best mapping found: ['samecourse(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> movie(A,B)', 'tempadvisedby(A,B) -> workedunder(B,A)', 'sameperson(A,B) -> workedunder(A,B)', 'publication(A,B) -> movie(A,B)', 'inphase(A,B) -> genre(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;true;workedunder(F, A), movie(E, F).;false;true
0;false;workedunder(H, A), movie(I, H).;true;true
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,false,false;workedunder(P, A).;false;false
0;false,false;workedunder(M, A), movie(N, M).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;true;workedunder(F, A).;false;true
1;false;workedunder(I, A), movie(J, I).;true;true
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true,false;workedunder(H, G).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,false;workedunder(Q, A).;true;false
2;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
2;false;workedunder(I, A), movie(J, A).;true;true
2;false,true;workedunder(I, K).;true;false
2;false,true,true;movie(J, K).;false;false
2;false,false,false;workedunder(N, A), movie(P, A).;false;false
2;false,false;workedunder(L, A), movie(M, L).;false;true
3;;genre(A, B) :- workedunder(F, E).;false;true
3;false,false,true;workedunder(N, P), movie(Q, P).;false;false
3;false;workedunder(L, A), movie(M, A).;false;true
3;false,false,false;workedunder(R, A), movie(S, R).;false;false
3;false,false;workedunder(N, A).;true;true
4;;genre(A, B) :- workedunder(C, A), movie(D, C).;false;true
4;false;workedunder(G, A).;true;true
4;false,true;workedunder(G, H), movie(I, H).;true;false
4;false,true,true;movie(I, G).;false;false
4;false,false,true;workedunder(L, N).;false;false
4;false,false,false;workedunder(P, A), movie(Q, A).;false;false
4;false,false;workedunder(L, A), movie(M, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true;workedunder(E, F), movie(G, F).;true;false
5;true,true;movie(G, E).;true;false
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(N, A).;false;false
5;false,false,true;movie(M, L).;false;false
5;true,true,true;workedunder(H, C).;false;false
5;false;workedunder(J, A), movie(K, J).;false;true
6;;genre(A, B) :- workedunder(E, A).;true;true
6;true;workedunder(E, F), movie(G, F).;true;false
6;false;workedunder(L, A), movie(M, L).;false;true
6;true,true,false;workedunder(E, J).;false;false
6;false,false,false;workedunder(R, A).;false;false
6;false,false,true;movie(N, P), workedunder(P, Q).;false;false
6;true,true;movie(G, E).;false;true
6;false,false;movie(N, A).;true;true
7;;genre(A, B) :- movie(G, E).;false;true
7;false,false,true;workedunder(N, P), movie(Q, P).;false;false
7;false;workedunder(M, A).;false;true
7;false,false,false;movie(R, A).;false;false
7;false,false;workedunder(N, A).;true;true
8;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
8;true;movie(C, D).;false;false
8;false;workedunder(G, A), movie(H, G).;true;true
8;false,true;workedunder(I, A), movie(J, I).;false;false
8;false,false,true;movie(N, K), workedunder(K, P).;false;false
8;false,false,false;movie(Q, A).;false;false
8;false,false;workedunder(K, A).;true;true
9;;genre(A, B) :- workedunder(C, A).;true;true
9;true;workedunder(C, D), movie(E, D).;true;false
9;false;workedunder(H, A), movie(I, H).;false;true
9;false,false,false;movie(Q, A).;false;false
9;false,false,true;movie(M, L).;false;false
9;true,true;workedunder(A, D), movie(E, C).;false;false
9;false,false;workedunder(L, A).;true;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, A), movie(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), movie(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), movie(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.15795862733523686;  // std dev = 0,519, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.379670407154312;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), movie(I, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11694812838381759;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.29512576307728255;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), movie(I, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10540117602192783;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.23762521343920517;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A) )
%   | | then if ( movie(H, I), workedunder(I, J) )
%   | | | then return -0.09586803150295227;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D) )
%   then return 0.05470390396933389;  // std dev = 0,285, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.1887622778748559;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return -0.09235890632255707;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( workedunder(A, D), movie(E, C) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.16153717043810167;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(I, A) )
%   | | | then return -0.08490259984743662;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.30463
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 3.261 seconds
Total inference time: 3.029 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false,false': [0.0, 2, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 2, 0], 'true,true': [0.0, 0, 2], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'workedunder(E, A), movie(F, A)', 'false,false,false': 'workedunder(I, A), movie(J, A)', 'false,false': 'workedunder(G, A), movie(H, G)'}, {'true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'true': [0.519, 2, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, C)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(H, A), movie(I, A)', 'false,false': 'workedunder(F, A), movie(G, A)'}, {'true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A)', 'true,true': 'movie(E, C)', 'false,false,false': 'workedunder(K, A)', 'false': 'workedunder(H, A), movie(I, H)'}, {'true,true,true,true': [0.0, 0, 2], 'false,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'workedunder(F, A), movie(G, F)', 'false,false,true': 'movie(H, I), workedunder(I, J)', 'true,true': 'movie(E, C)', 'false,false': 'movie(H, A)'}, {'true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 2, 0], 'false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, D)'}, {'true': [0.285, 2, 2], 'false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'true': 'movie(C, D)', 'false': 'workedunder(E, A), movie(F, E)', 'false,false,false': 'movie(H, A)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true': 'workedunder(C, D), movie(E, D)', 'false': 'workedunder(F, A), movie(G, F)', 'true,true': 'workedunder(A, D), movie(E, C)', 'false,false,false': 'movie(I, A)', 'false,false': 'workedunder(H, A)'}, {'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'true,true,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 2]}]]
[{'': [0.25, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.17847162811629394, nan], 'true': [0.0, 0.0], 'true,false': [0.0, nan]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.06736877561142736, nan]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'true,true,true': [0.0, nan], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true': [0.0, nan], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [nan, 0.0], 'false,false,true': [0.0, nan], 'true,true': [0.0, nan], 'false,false': [0.0, nan]}, {'': [0.020328535906743567, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [nan, 0.0], 'false,false,false': [0.0, nan], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [nan, 0.0], 'false,false,false': [0.0, nan], 'true,true': [nan, 0.0], 'false,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A), movie(D, C).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '9;;genre(A, B) :- workedunder(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,260, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,144, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.299128
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 2.72 seconds
Total inference time: 1.744 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:31:20
{'CLL': -0.299128, 'Recall': 1.0, 'F1': 0.909091, 'parameter': {'CLL': -0.30463, 'Recall': 1.0, 'F1': 0.909091, 'AUC ROC': 0.9, 'Inference time': 3.029, 'Learning time': 3.261, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}, 'AUC ROC': 0.9, 'Inference time': 1.744, 'Mapping results': {'Knowledge compiling time': 0.03801870346069336, 'Generating paths time': 5.095455646514893, 'Possible mappings': [1299], 'Max mapping': 16384, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 1.4533236026763916, 'Numbers preds mapping': [8], 'Total time': 6.586809873580933}, 'Learning time': 5.981, 'Precision': [0.833333, 0.5], 'AUC PR': 0.833333}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.738 seconds
Total inference time: 1.713 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:31:26
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 1.713, 'Learning time': 2.738, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


WILL Produced-Tree #1
% FOR genre(A, B):
%   return 0;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -1.052978
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.461 seconds
Total inference time: 1.829 seconds
AUC ROC: 0.5


Dataset: 6_uwcse_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:31:30
{'CLL': -1.052978, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.5, 'Inference time': 1.829, 'Learning time': 1.461, 'Precision': [nan, 0.5], 'AUC PR': 0.5}


