Starting experiment #10 for 7_imdb_cora

Start learning from source dataset

Source train facts examples: 696
Source train pos examples: 382
Source train neg examples: 382

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.14185106490048804;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839202;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360675;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783623;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.10159632948783649;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.09269127618926053;  // std dev = 1,13e-07, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.08518475138839678;  // std dev = 9,19e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109176;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109143;  // std dev = 2,98e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07324622576333703;  // std dev = 8,56e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06842697784420307;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06419184008202618;  // std dev = 4,71e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */


Predicates from source: ['workedunder(person,person).', 'movie(movie,person).', 'actor(person).', 'director(person).']

Starting fold 1

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.09147024154663086
   Generating paths time   = 2.7303550243377686
   Generating mappings time   = 0.005818605422973633
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 2.8276526927948


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 7095
Target train pos examples: 368
Target train neg examples: 368

Target test facts examples: 32446
Target test pos examples: 2649
Target test neg examples: 2372

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39877393509950776;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.08731560176617863;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34300337446082674;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.07635080560123796;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2829757526611641;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.06620209782707072;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2252798172623557;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.05696901974896947;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17475296268559667;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.04869607932732711;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13334329939108758;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.0413815147045419;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10079964128532884;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.03498823961218326;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07583443148005016;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.029454875605481722;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05692841477064725;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.024705527060021732;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042702080777636764;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.020657656117816402;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */


Results
   AUC ROC   = 0.546475
   AUC PR    = 0.552575
   CLL	      = -0.684943
   Precision = 0.553319 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697726


Total learning time: 193.321 seconds
Total inference time: 3.048 seconds
AUC ROC: 0.546475


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}]]
[{'': [0.2483496093749918, 0.17664930555555647]}, {'': [0.24834960937500003, 0.17664930555555483]}, {'': [0.24834960937499692, 0.17664930555555602]}, {'': [0.24834960937499745, 0.17664930555555527]}, {'': [0.24834960937500034, 0.1766493055555556]}, {'': [0.2483496093749967, 0.17664930555555505]}, {'': [0.24834960937499817, 0.17664930555555614]}, {'': [0.24834960937500314, 0.176649305555556]}, {'': [0.24834960937499853, 0.17664930555555555]}, {'': [0.24834960937500156, 0.17664930555555547]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7024603123450174;  // std dev = 6,626, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.015414283291292909;  // std dev = 5,369, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.524815601766179;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.06968739663797391;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else return 0.10814893509951236;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5942136425412414;  // std dev = 6,627, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.013904354802370374;  // std dev = 5,355, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.4646455502738005;  // std dev = 0,395, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.5585419988249184;  // std dev = 0,795, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.448295606241962;  // std dev = 0,471, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.15054759871688242;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.09389684572756193;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.011134104502422184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.10762533257259782;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.46768301019503045;  // std dev = 6,627, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.012235682998794096;  // std dev = 5,355, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.3726967994569488;  // std dev = 0,380, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.46029189793691755;  // std dev = 0,772, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36236334632262296;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.009666111816663556;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.052712846960651254;  // std dev = 0,406, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | else return 0.09296004718136926;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3533621097410997;  // std dev = 6,627, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.010781066007370312;  // std dev = 5,355, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.2885510231515225;  // std dev = 0,370, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.36105789666799165;  // std dev = 0,758, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.2807538536965854;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2807538536965851;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | then return -0.13845912384570824;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.07417274577201903;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.06973831089766494;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.14463892092491;  // std dev = 0,375, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.22704955361363058;  // std dev = 0,352, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.21248070121827137;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.29471137466238473;  // std dev = 0,938, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.21248070121827117;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.0011315828901515834;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordvenue(B, P) )
%   | | | then return -0.12275385172620733;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.06343601131780571;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.06873564357802;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.11740806764923589;  // std dev = 0,372, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.16466600581000013;  // std dev = 0,365, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.2362140216559318;  // std dev = 0,768, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.15948988228171176;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1594898822817118;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.11013524982563364;  // std dev = 6,45e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.05384103692507022;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -9.736257907082176E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.057743561971019;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.09470240725273993;  // std dev = 0,369, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.13303276722417942;  // std dev = 0,352, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.19723409143093698;  // std dev = 0,960, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.11975529938157481;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11975529938157481;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.09979579530140976;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.045396141236158725;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -8.378129035638467E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.04815831313737852;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.07681205041713374;  // std dev = 0,369, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.09435570761005414;  // std dev = 0,368, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.0902808182944097;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.15490280052415045;  // std dev = 0,779, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.09028081829440963;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.09118166596955975;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.038059751545871545;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -7.210151777986099E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.03991891073245893;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.06232616056979195;  // std dev = 0,367, 612,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=327 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.13543426314298598;  // std dev = 0,966, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.06840311429118535;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06840311429118515;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.2252486778617745;  // std dev = 2,462, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return -0.2070887853382149;  // std dev = 0,126, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.08390206556161549;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -6.205520777186058E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.03292044860779188;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.04990868885304053;  // std dev = 0,367, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.06624294649348288;  // std dev = 0,357, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.10661225381720912;  // std dev = 0,966, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.05207890570125262;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.052078905701252745;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.0872956409213252;  // std dev = 0,037, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.02718432308611361;  // std dev = 0,411, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -5.341256517157056E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.02703427615687788;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */


Results
   AUC ROC   = 0.861922
   AUC PR    = 0.824019
   CLL	      = -0.452408
   Precision = 0.836168 at threshold = 0.5
   Recall    = 0.9094
   F1        = 0.871248


Total learning time: 154.95600000000002 seconds
Total inference time: 107.80199999999999 seconds
AUC ROC: 0.861922


Refined model AUC ROC: 0.861922


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:23:25
{'Recall': 0.9094, 'F1': 0.871248, 'AUC PR': 0.824019, 'Learning time': 348.27700000000004, 'AUC ROC': 0.861922, 'Inference time': 107.80199999999999, 'Precision': [0.836168, 0.5], 'Mapping results': {'Generating mappings time': 0.005818605422973633, 'Possible mappings': [6], 'Generating paths time': 2.7303550243377686, 'Total time': 2.8276526927948, 'Numbers preds mapping': [4], 'Finding best mapping': 1.430511474609375e-06, 'Max mapping': 121, 'Knowledge compiling time': 0.09147024154663086}, 'parameter': {'Recall': 0.94413, 'F1': 0.697726, 'AUC PR': 0.552575, 'Learning time': 193.321, 'AUC ROC': 0.546475, 'Inference time': 3.048, 'Precision': [0.553319, 0.5], 'CLL': -0.684943}, 'CLL': -0.452408}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.701522429075412;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.01877414182356519;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.6081489350995123;  // std dev = 0,433, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.524815601766179;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.06968739663797391;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.12130682983635446;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.593348233548271;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.016504108168397414;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return -0.23292803776327828;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.7670719622367218;  // std dev = 2,98e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.448295606241962;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.060990862821579055;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else return 0.09441819999154308;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4670374791755083;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.014533760159937995;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.4049913437211976;  // std dev = 0,346, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3695360758311997;  // std dev = 0,466, 28,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then return 0.0659751665290751;  // std dev = 0,417, 49,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | else return -0.15851462938929223;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.00967262840326714;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.09296700095578594;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1922779554369467;  // std dev = 0,393, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.31244289759883925;  // std dev = 0,333, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.3257237153073156;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.2790526459179809;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.28483280779006515;  // std dev = 2,328, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.15507804183764812;  // std dev = 0,038, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.07693003988750355;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.00838823461223077;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.07943240517960215;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.3049031535667546;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.037016375476578316;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.23796902883785465;  // std dev = 0,328, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.24488000684882505;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.24434370180423604;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.20986923523178205;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.13585378989691416;  // std dev = 0,034, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.06592584970683012;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.059044222670711785;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.11521057407949728;  // std dev = 0,372, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.18158749540262542;  // std dev = 0,327, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.1836511407286364;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1840463901475886;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.15751099656488138;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.12069823420299915;  // std dev = 0,031, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.05605215666072713;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -8.038790302740776E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.057750027124907934;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.0931930511688464;  // std dev = 0,370, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.13969639468953107;  // std dev = 0,328, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.13950174603657248;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1392131277563804;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.11828412353917872;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -6.918288286726174E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.03386468452094298;  // std dev = 2,900, 49,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return -0.09626194943710713;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.04816390721535753;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07620628343085821;  // std dev = 0,368, 608,000 (wgt'ed) examples reached here.  /* #neg=284 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1066729138812188;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.10688525817334935;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.08919041982264053;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.22993363497148214;  // std dev = 2,481, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return -0.19899120156903;  // std dev = 0,080, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.08820686169707041;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -5.954449225001879E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.039923688211787794;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.16556926360143986;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.07316651477725815;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.09197149271615199;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.08274539102132483;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.06788112495182164;  // std dev = 0,817, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06995630406906597;  // std dev = 2,327, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.11276347439985449;  // std dev = 0,082, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.03642688419942836;  // std dev = 0,411, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.028364892599041014;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04602098783894747;  // std dev = 0,361, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.07250268872037316;  // std dev = 0,333, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.06724465157079118;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06463474674029246;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.05097320410790342;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.004499145391780239;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.017834742409098825;  // std dev = 2,773, 49,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return -0.07332517493462044;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.02785906824543229;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */


Results
   AUC ROC   = 0.856028
   AUC PR    = 0.807431
   CLL	      = -0.442399
   Precision = 0.824864 at threshold = 0.5
   Recall    = 0.919215
   F1        = 0.869488


Total learning time: 361.398 seconds
Total inference time: 53.809 seconds
AUC ROC: 0.856028


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:30:20
{'Recall': 0.919215, 'F1': 0.869488, 'AUC PR': 0.807431, 'Learning time': 361.398, 'AUC ROC': 0.856028, 'Inference time': 53.809, 'Precision': [0.824864, 0.5], 'CLL': -0.442399}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.701522429075412;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.01877414182356519;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.6081489350995123;  // std dev = 0,433, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5367203636709408;  // std dev = 0,467, 28,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.10814893509951236;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */


Results
   AUC ROC   = 0.860021
   AUC PR    = 0.823787
   CLL	      = -0.844787
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 49.404 seconds
Total inference time: 13.793 seconds
AUC ROC: 0.860021


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 00:31:24
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.823787, 'Learning time': 49.404, 'AUC ROC': 0.860021, 'Inference time': 13.793, 'Precision': [nan, 0.5], 'CLL': -0.844787}


Starting fold 2

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.07933688163757324
   Generating paths time   = 2.7566239833831787
   Generating mappings time   = 0.00589299201965332
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 2.8418636322021484


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8245
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 31296
Target test pos examples: 2246
Target test neg examples: 2196

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.437142
   AUC PR    = 0.443375
   CLL	      = -0.710286
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 87.80199999999999 seconds
Total inference time: 2.581 seconds
AUC ROC: 0.437142


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.4395254533181309;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787085800137994;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102688235526539;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24461726813614929;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18789941389409623;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1422385557428411;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10695306596966281;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08024476936841042;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06020903900852438;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04522092347502299;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.541577
   AUC PR    = 0.513081
   CLL	      = -0.707934
   Precision = 0.535439 at threshold = 0.5
   Recall    = 0.958593
   F1        = 0.687091


Total learning time: 117.444 seconds
Total inference time: 8.29 seconds
AUC ROC: 0.541577


Refined model AUC ROC: 0.541577


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:35:07
{'Recall': 0.958593, 'F1': 0.687091, 'AUC PR': 0.513081, 'Learning time': 205.24599999999998, 'AUC ROC': 0.541577, 'Inference time': 8.29, 'Precision': [0.535439, 0.5], 'Mapping results': {'Generating mappings time': 0.00589299201965332, 'Possible mappings': [6], 'Generating paths time': 2.7566239833831787, 'Total time': 2.8418636322021484, 'Numbers preds mapping': [4], 'Finding best mapping': 1.430511474609375e-06, 'Max mapping': 121, 'Knowledge compiling time': 0.07933688163757324}, 'parameter': {'Recall': 1.0, 'F1': 0.671651, 'AUC PR': 0.443375, 'Learning time': 87.80199999999999, 'AUC ROC': 0.437142, 'Inference time': 2.581, 'Precision': [0.505628, 0.5], 'CLL': -0.710286}, 'CLL': -0.707934}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.22916842377028543;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.008145345695425854;  // std dev = 0,852, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0,494, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4246457186582996;  // std dev = 1,908, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.43170309793098227;  // std dev = 0,348, 33,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24202763793698784;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3098169854894562;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.28778262938095234;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.44960468245709945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.44785888933339724;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.1316730160126654;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18614669808889744;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23288770051702257;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21657984029357435;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3425676419265825;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.3413723950665916;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10354034558269198;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1410479916173633;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.19155569148270196;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1440244614724635;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.27003591012705197;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.2692252801573361;  // std dev = 2,58e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08048520911847132;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10611811638818072;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.14461627028325488;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1089426081749053;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2202042845490333;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.21963717184900058;  // std dev = 3,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.062053704514323335;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07963336122477321;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.11195432529744664;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08108635212187189;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.18472148527435484;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.18430941015911712;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.047569338903151896;  // std dev = 0,489, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.32933767500069616;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.0015663380083452833;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.26727100408362703;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05761268070276731;  // std dev = 0,493, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.09072421010644466;  // std dev = 1,913, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.0801576397103393;  // std dev = 1,889, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.15819384874026537;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03631983068294583;  // std dev = 0,489, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.044872959911584825;  // std dev = 0,492, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07027006466821403;  // std dev = 0,439, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03907403390714169;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.14810274007254776;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.13824751296937304;  // std dev = 2,24e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02765267645364165;  // std dev = 0,489, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.554708
   AUC PR    = 0.527208
   CLL	      = -0.705141
   Precision = 0.5375 at threshold = 0.5
   Recall    = 0.957257
   F1        = 0.688441


Total learning time: 174.847 seconds
Total inference time: 9.73 seconds
AUC ROC: 0.554708


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 00:38:14
{'Recall': 0.957257, 'F1': 0.688441, 'AUC PR': 0.527208, 'Learning time': 174.847, 'AUC ROC': 0.554708, 'Inference time': 9.73, 'Precision': [0.5375, 0.5], 'CLL': -0.705141}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.546724
   AUC PR    = 0.523109
   CLL	      = -0.91326
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 19.513 seconds
Total inference time: 3.127 seconds
AUC ROC: 0.546724


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 00:38:37
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.523109, 'Learning time': 19.513, 'AUC ROC': 0.546724, 'Inference time': 3.127, 'Precision': [nan, 0.5], 'CLL': -0.91326}


Starting fold 3

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.10478997230529785
   Generating paths time   = 3.0238277912139893
   Generating mappings time   = 0.003396272659301758
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 3.1320226192474365


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8725
Target train pos examples: 581
Target train neg examples: 581

Target test facts examples: 30816
Target test pos examples: 2436
Target test neg examples: 2159

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.11529179224236799;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3368104452725042;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.1006698265126728;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2782019553062949;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.08691854825778976;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2218655867177258;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.074287373672246;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1724245980376236;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.06292492981534978;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13178285263632983;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.05288752556858072;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09974654995840213;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.044156924602564436;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07510777615464852;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.036661434327724535;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056412350427134834;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.030295939098124496;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04232482322953948;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.02493848785740836;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */


Results
   AUC ROC   = 0.547299
   AUC PR    = 0.555563
   CLL	      = -0.684914
   Precision = 0.556307 at threshold = 0.5
   Recall    = 0.944992
   F1        = 0.700335


Total learning time: 38.242 seconds
Total inference time: 3.556 seconds
AUC ROC: 0.547299


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}]]
[{'': [0.24889323340519648, 0.19102040816326663]}, {'': [0.24889323340519198, 0.1910204081632664]}, {'': [0.2488932334051973, 0.19102040816326585]}, {'': [0.2488932334051982, 0.1910204081632639]}, {'': [0.248893233405201, 0.19102040816326604]}, {'': [0.24889323340520084, 0.1910204081632663]}, {'': [0.24889323340520145, 0.19102040816326452]}, {'': [0.2488932334051957, 0.1910204081632664]}, {'': [0.24889323340520308, 0.19102040816326624]}, {'': [0.24889323340520328, 0.19102040816326568]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.039967116917694;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.12044401706672549;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.058148935099512175;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.1340110040650296;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3368104452725042;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03503196034273708;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.04248464503493671;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.09809593421099634;  // std dev = 3,454, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.12675460295257243;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.18937829798949696;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.2814450097316553;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.03059004775032249;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.0927193731999364;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.038045251259425795;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.09962665799130258;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.30731811648208085;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.1521873628896167;  // std dev = 0,499, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return 0.2233939746951225;  // std dev = 0,499, 989,000 (wgt'ed) examples reached here.  /* #neg=460 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.026621534319001657;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.07926062918360868;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.03281490733568563;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.08469441275703335;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1724149504489582;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5317408499842929;  // std dev = 2,091, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.19239826593733558;  // std dev = 0,064, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.028195917887646648;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.091280860274072;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.07125574962255571;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13177869841785003;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.006900362468405863;  // std dev = 0,356, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.0316652526597241;  // std dev = 2,914, 58,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=14 */
%   | | | else return 0.07414679143570813;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.0787094651371103;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.06878601869067828;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09974622363464031;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4285257894310959;  // std dev = 2,093, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1687394789808806;  // std dev = 0,062, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.06314131273996233;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.06724597764829639;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.047875876042235595;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00498529022949076;  // std dev = 0,496, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.07767011739994131;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.3319032162860156;  // std dev = 2,094, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14638634971022538;  // std dev = 0,055, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.053357261301559156;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.05698747080691712;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.03934079844924753;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056410309421233436;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.25049016098913146;  // std dev = 2,094, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.12903248001308373;  // std dev = 0,049, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.04479156655440698;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.04795561374069704;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.032164079506943055;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04232657339487067;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.1879739025304887;  // std dev = 2,094, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11521818584695474;  // std dev = 0,044, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.037389656022260624;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.02787587984003169;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */


Results
   AUC ROC   = 0.557325
   AUC PR    = 0.565345
   CLL	      = -0.673397
   Precision = 0.559166 at threshold = 0.5
   Recall    = 0.925287
   F1        = 0.697077


Total learning time: 57.59 seconds
Total inference time: 8.8 seconds
AUC ROC: 0.557325


Refined model AUC ROC: 0.557325


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:40:30
{'Recall': 0.925287, 'F1': 0.697077, 'AUC PR': 0.565345, 'Learning time': 95.832, 'AUC ROC': 0.557325, 'Inference time': 8.8, 'Precision': [0.559166, 0.5], 'Mapping results': {'Generating mappings time': 0.003396272659301758, 'Possible mappings': [6], 'Generating paths time': 3.0238277912139893, 'Total time': 3.1320226192474365, 'Numbers preds mapping': [4], 'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 121, 'Knowledge compiling time': 0.10478997230529785}, 'parameter': {'Recall': 0.944992, 'F1': 0.700335, 'AUC PR': 0.555563, 'Learning time': 38.242, 'AUC ROC': 0.547299, 'Inference time': 3.556, 'Precision': [0.556307, 0.5], 'CLL': -0.684914}, 'CLL': -0.673397}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.32243464938522665;  // std dev = 0,499, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return 0.3930326560297401;  // std dev = 0,499, 989,000 (wgt'ed) examples reached here.  /* #neg=460 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.039967116917694;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.12044401706672549;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.058148935099512175;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.1340110040650296;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.22264201219171206;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.27849027391233155;  // std dev = 0,499, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | | else return 0.341909302918359;  // std dev = 0,499, 958,000 (wgt'ed) examples reached here.  /* #neg=442 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.03503196034273708;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.10514080895131177;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.05092203251355425;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.11690238620380397;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2781590826273592;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.027686046641405414;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.07950281652375277;  // std dev = 3,236, 56,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | | else return 0.0443462976046685;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.09877186593214066;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.11049605646593645;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2617041621923911;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.179514423323576;  // std dev = 0,499, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return 0.2228339950611585;  // std dev = 0,499, 989,000 (wgt'ed) examples reached here.  /* #neg=460 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.023701576837702444;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.018187659291915015;  // std dev = 0,385, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.07421352795384638;  // std dev = 3,452, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.09395058135849792;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17239722321311718;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.015683350211209802;  // std dev = 0,385, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.06978052748734076;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.028121095184950463;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.06994088173182639;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13177370540711159;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5230268035407094;  // std dev = 2,093, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1994706596469073;  // std dev = 0,079, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.07408142729189714;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.08094760520196909;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.058270426784572144;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09974983988373737;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.006438274618977247;  // std dev = 0,356, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.024534244195538343;  // std dev = 2,901, 58,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=14 */
%   | | | else return 0.06308271991012189;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.058663911224212176;  // std dev = 0,449, 64,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0751184163217544;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00544592744223254;  // std dev = 0,356, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.020440936013106887;  // std dev = 2,896, 58,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=14 */
%   | | | else return 0.05330560083446202;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.06042076790436356;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.046640607152514266;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.4685746759580691;  // std dev = 4,575, 401,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=379 */
%   | | | else return 0.39858482394362005;  // std dev = 2,288, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | | else return -0.412555045757082;  // std dev = 0,199, 451,000 (wgt'ed) examples reached here.  /* #neg=435 #pos=16 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.209074335801238;  // std dev = 0,463, 189,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=130 */
%   | | else return 0.051814368224486554;  // std dev = 0,405, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5189820057104967;  // std dev = 1,965, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.25066326040078746;  // std dev = 0,379, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.19456488255285853;  // std dev = 0,450, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0.5180188196475869;  // std dev = 0,037, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.3527313228532233;  // std dev = 4,576, 401,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=379 */
%   | | | else return 0.2915424703750272;  // std dev = 2,280, 24,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | else return -0.3183003853136542;  // std dev = 0,197, 448,000 (wgt'ed) examples reached here.  /* #neg=432 #pos=16 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.1553347526286024;  // std dev = 0,454, 195,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=132 */
%   | | else return 0.07652378814346289;  // std dev = 0,429, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.410788068591235;  // std dev = 1,969, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.20732281270669473;  // std dev = 0,348, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.15391602828280682;  // std dev = 0,448, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0.3903879453816697;  // std dev = 0,035, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */


Results
   AUC ROC   = 0.859884
   AUC PR    = 0.816785
   CLL	      = -0.481071
   Precision = 0.820015 at threshold = 0.5
   Recall    = 0.918309
   F1        = 0.866383


Total learning time: 153.50900000000001 seconds
Total inference time: 23.327 seconds
AUC ROC: 0.859884


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 00:43:30
{'Recall': 0.918309, 'F1': 0.866383, 'AUC PR': 0.816785, 'Learning time': 153.50900000000001, 'AUC ROC': 0.859884, 'Inference time': 23.327, 'Precision': [0.820015, 0.5], 'CLL': -0.481071}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.039967116917694;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11211718906776634;  // std dev = 3,455, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.14386322081379807;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */


Results
   AUC ROC   = 0.547111
   AUC PR    = 0.55551
   CLL	      = -0.968863
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.181 seconds
Total inference time: 2.153 seconds
AUC ROC: 0.547111


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 00:43:41
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.55551, 'Learning time': 9.181, 'AUC ROC': 0.547111, 'Inference time': 2.153, 'Precision': [nan, 0.5], 'CLL': -0.968863}


Starting fold 4

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.0721898078918457
   Generating paths time   = 2.517786979675293
   Generating mappings time   = 0.0033757686614990234
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 1.1920928955078125e-06
   Total time   = 2.59335994720459


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 7382
Target train pos examples: 747
Target train neg examples: 747

Target test facts examples: 32159
Target test pos examples: 2270
Target test neg examples: 1993

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3735611214794357;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.14097721792779405;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32175803168015193;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.12293506238583077;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26654831388655753;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.10572355771962352;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2134839465271646;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.08978633290599357;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16668724369451127;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.07541323198647286;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12794262506462942;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.06274216592519288;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09717611751164584;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.05178372301620736;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07336126033252563;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.04245584308854262;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05519822955528243;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.034618468956100754;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04145936304187153;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.02810245705359781;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */


Results
   AUC ROC   = 0.558035
   AUC PR    = 0.56414
   CLL	      = -0.686242
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 94.018 seconds
Total inference time: 3.476 seconds
AUC ROC: 0.558035


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}]]
[{'': [0.24976246451101256, 0.20283644526068886]}, {'': [0.24976246451099404, 0.20283644526068717]}, {'': [0.24976246451098316, 0.20283644526068828]}, {'': [0.24976246451099413, 0.202836445260688]}, {'': [0.24976246451098344, 0.20283644526068864]}, {'': [0.24976246451099202, 0.20283644526068909]}, {'': [0.24976246451098205, 0.20283644526068767]}, {'': [0.24976246451097817, 0.20283644526068803]}, {'': [0.24976246451099463, 0.2028364452606869]}, {'': [0.24976246451098966, 0.20283644526068803]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3735611214794357;  // std dev = 0,500, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.31968739663797385;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.12644161802634163;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32175803168015193;  // std dev = 0,500, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.27615825449321707;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.11034235232659871;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.08964016548715838;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7511361275066242;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.24886387249337577;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.7511361275066242;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.26419853679545546;  // std dev = 0,500, 1.378,000 (wgt'ed) examples reached here.  /* #neg=671 #pos=707 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return 0.2308014560359859;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.09510703098232902;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.07754550154840685;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21336795490429303;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.18732575730991188;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.08106247590562135;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.06648308448032317;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16662139444848065;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.36459653952541965;  // std dev = 2,393, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.21402251567921857;  // std dev = 0,183, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.1869776436181776;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.056548150925513005;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12791719227919804;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.29684554777413585;  // std dev = 2,391, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.18046968058263888;  // std dev = 0,164, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.14543881485841093;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.047766754411616555;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09717846125410885;  // std dev = 0,498, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.08373321720745157;  // std dev = 0,457, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.040110342621182196;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.035376125232385834;  // std dev = 0,393, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07338029938730245;  // std dev = 0,498, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.06449189747931205;  // std dev = 0,456, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.03351176627816061;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.02929719972264992;  // std dev = 0,392, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.41947703438466993;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.33736040904672865;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.41947703438467;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.053478291790003664;  // std dev = 0,500, 1.378,000 (wgt'ed) examples reached here.  /* #neg=671 #pos=707 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then return 0.049461040845669234;  // std dev = 0,456, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.027880036700617013;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.024185555596336967;  // std dev = 0,392, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04149600615191924;  // std dev = 0,498, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.03782666169063463;  // std dev = 0,455, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.023112424984988816;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.019913410476254497;  // std dev = 0,391, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */


Results
   AUC ROC   = 0.566445
   AUC PR    = 0.571997
   CLL	      = -0.677125
   Precision = 0.594937 at threshold = 0.5
   Recall    = 0.04141
   F1        = 0.07743


Total learning time: 122.22 seconds
Total inference time: 11.096 seconds
AUC ROC: 0.566445


Refined model AUC ROC: 0.566445


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:47:36
{'Recall': 0.04141, 'F1': 0.07743, 'AUC PR': 0.571997, 'Learning time': 216.238, 'AUC ROC': 0.566445, 'Inference time': 11.096, 'Precision': [0.594937, 0.5], 'Mapping results': {'Generating mappings time': 0.0033757686614990234, 'Possible mappings': [6], 'Generating paths time': 2.517786979675293, 'Total time': 2.59335994720459, 'Numbers preds mapping': [4], 'Finding best mapping': 1.1920928955078125e-06, 'Max mapping': 121, 'Knowledge compiling time': 0.0721898078918457}, 'parameter': {'Recall': 0.0, 'F1': nan, 'AUC PR': 0.56414, 'Learning time': 94.018, 'AUC ROC': 0.558035, 'Inference time': 3.476, 'Precision': [nan, 0.5], 'CLL': -0.686242}, 'CLL': -0.677125}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3675686788824765;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.40360348055405776;  // std dev = 2,335, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5803711573217345;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.31968739663797385;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.12644161802634163;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31669960489254817;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.35569342009674776;  // std dev = 2,894, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.4016114478971489;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.4942204482591004;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.27615825449321707;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.11034235232659871;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.08964016548715838;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.26261587938835473;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.28037036499843904;  // std dev = 2,333, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.3210324535556523;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.39601909095488674;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.2308014560359859;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.09510703098232902;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.07754550154840685;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.21064009539967504;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.227968711588513;  // std dev = 2,891, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.2713759137133921;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.30383299977459627;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.18732575730991188;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.08106247590562135;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.06648308448032317;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16473263450408898;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.1659200236737463;  // std dev = 2,331, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.20065573836868922;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2286109504287673;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.36459653952541965;  // std dev = 2,393, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.21402251567921857;  // std dev = 0,183, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.1869776436181776;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.056548150925513005;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.617214800901244;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3827851990987559;  // std dev = 1,49e-08, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.4172148009012441;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.12486006084008792;  // std dev = 0,500, 1.308,000 (wgt'ed) examples reached here.  /* #neg=644 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1390817264558244;  // std dev = 3,280, 44,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.1785873593526062;  // std dev = 2,109, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.058187933595748496;  // std dev = 0,420, 48,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | else return 0.14543881485841093;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.047766754411616555;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09625003705972322;  // std dev = 0,499, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.09601220720447727;  // std dev = 2,889, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.1344545692827798;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.12795314850864709;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.15907935736574483;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.09128550066519682;  // std dev = 0,473, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.04343982801985156;  // std dev = 0,414, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.040110342621182196;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07275146918135432;  // std dev = 0,499, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.06374730934552522;  // std dev = 2,329, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.09353349598827186;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.09751065776040925;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.12515186995619507;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.2739368948442184;  // std dev = 2,389, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.1971092610063523;  // std dev = 0,189, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.08960317693227893;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.03351176627816061;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.054793284085513275;  // std dev = 0,499, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.05136166195508078;  // std dev = 2,888, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.08496332656806374;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.07494190580691959;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.09997669743256894;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.048121311039859796;  // std dev = 0,456, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.027880036700617013;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.02129077922098325;  // std dev = 0,392, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5169700425607089;  // std dev = 0,114, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.4677726760480364;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5139889442209957;  // std dev = 0,063, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.03878037921162744;  // std dev = 0,499, 1.310,000 (wgt'ed) examples reached here.  /* #neg=646 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.04327542397360954;  // std dev = 3,006, 40,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=25 */
%   | | | else return 0.0624018880055102;  // std dev = 2,481, 28,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.03679384254209536;  // std dev = 0,455, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.023112424984988816;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.017502187713555217;  // std dev = 0,391, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */


Results
   AUC ROC   = 0.580991
   AUC PR    = 0.601221
   CLL	      = -0.673063
   Precision = 0.647059 at threshold = 0.5
   Recall    = 0.096916
   F1        = 0.168582


Total learning time: 220.077 seconds
Total inference time: 9.569 seconds
AUC ROC: 0.580991


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 00:51:27
{'Recall': 0.096916, 'F1': 0.168582, 'AUC PR': 0.601221, 'Learning time': 220.077, 'AUC ROC': 0.580991, 'Inference time': 9.569, 'Precision': [0.647059, 0.5], 'CLL': -0.673063}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3675686788824765;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.40360348055405776;  // std dev = 2,335, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5803711573217345;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.44148226843284566;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */


Results
   AUC ROC   = 0.578812
   AUC PR    = 0.597811
   CLL	      = -0.971542
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 24.032 seconds
Total inference time: 3.56 seconds
AUC ROC: 0.578812


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 00:51:55
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.597811, 'Learning time': 24.032, 'AUC ROC': 0.578812, 'Inference time': 3.56, 'Precision': [nan, 0.5], 'CLL': -0.971542}


Starting fold 5

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.0972127914428711
   Generating paths time   = 2.790316343307495
   Generating mappings time   = 0.0033292770385742188
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 1.1920928955078125e-06
   Total time   = 2.89086651802063


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8094
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 31447
Target test pos examples: 2467
Target test neg examples: 2240

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.535236
   AUC PR    = 0.542776
   CLL	      = -0.685676
   Precision = 0.543247 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.691798


Total learning time: 45.02 seconds
Total inference time: 2.848 seconds
AUC ROC: 0.535236


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.44587899644920087;  // std dev = 0,492, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.6581489350995123;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( author(K, I), venue(K, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.16249676118646889;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.16249676118646889;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.04458961306561406;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.3820812788566907;  // std dev = 0,492, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.6601063327032184;  // std dev = 0,283, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6258134041158593;  // std dev = 0,882, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16671450685702074;  // std dev = 0,054, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.129877843165277;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.03719491633600885;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15426808706771591;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.044790460982400505;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.3125360989681039;  // std dev = 0,492, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.5277500274600548;  // std dev = 0,280, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5173682729146571;  // std dev = 0,877, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14490392605306548;  // std dev = 0,048, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09613911016437181;  // std dev = 0,443, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.032061473041325415;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13213390478038056;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03189048206920282;  // std dev = 2,990, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.046723994408730624;  // std dev = 2,967, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.3408511239569706;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.4508155427096964;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.15346632439056868;  // std dev = 1,771, 21,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.38814393882055165;  // std dev = 0,901, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.25933723490158705;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( author(L, J), venue(L, A) )
%   | | | then return 0.3157669015954239;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.19496174406000502;  // std dev = 0,027, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09881271248371588;  // std dev = 0,451, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.05318034685443414;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.40127236336052446;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3845732070494094;  // std dev = 1,932, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.21510137991909434;  // std dev = 1,793, 21,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.35275650000631686;  // std dev = 0,921, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.14556652021369207;  // std dev = 2,257, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.10173396242004845;  // std dev = 1,811, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.21246589345444492;  // std dev = 0,485, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.08178567953294685;  // std dev = 0,431, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.04407411721286728;  // std dev = 0,414, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), title(G, E) )
%   | | | then return 0.2565900195810578;  // std dev = 1,894, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return -0.0544313177597649;  // std dev = 1,251, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.14062317640710367;  // std dev = 0,485, 783,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.2956601035731328;  // std dev = 0,282, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.562750921593411;  // std dev = 0,887, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.22164218649697146;  // std dev = 0,084, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.18101138191795618;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06230223006448875;  // std dev = 2,844, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.0372334718691927;  // std dev = 0,409, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10538691592535188;  // std dev = 0,482, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2455971645259292;  // std dev = 0,278, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4469826776747105;  // std dev = 0,885, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18602056403888675;  // std dev = 0,073, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.037077257745304154;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.014941300027513002;  // std dev = 3,040, 61,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | | | else return -0.1759195300562444;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.08700134208920068;  // std dev = 4,052, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.20029478158735461;  // std dev = 0,073, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.3207160326620297;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.21317017412457787;  // std dev = 1,960, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( haswordauthor(E, H), haswordvenue(A, H) )
%   | | | then return 0.24189864025552862;  // std dev = 0,875, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.2074136545735274;  // std dev = 1,792, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | else return 0.08959857606220341;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.09249204525320527;  // std dev = 0,373, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04187600003777661;  // std dev = 0,429, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.04441342450040992;  // std dev = 0,423, 95,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.00859322128503263;  // std dev = 0,381, 65,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05846015037600765;  // std dev = 0,480, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.22898723409624477;  // std dev = 0,197, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15283880148018555;  // std dev = 1,245, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.20944168872793553;  // std dev = 0,025, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.18682379677971991;  // std dev = 0,103, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.06457955323348345;  // std dev = 0,433, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.06254795613513495;  // std dev = 0,432, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.20190515853193328;  // std dev = 0,174, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then return 0.04503502503859631;  // std dev = 0,390, 32,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | else return 0.04405360024668853;  // std dev = 0,483, 783,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.1546180578610189;  // std dev = 0,276, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.07192330299681896;  // std dev = 0,373, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(J, H), venue(J, B) )
%   | | | then return -0.17070842298370717;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03502973423092708;  // std dev = 2,794, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.009898081453410361;  // std dev = 0,373, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.05871748941523314;  // std dev = 4,043, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1457196915022379;  // std dev = 0,068, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.53993
   AUC PR    = 0.561878
   CLL	      = -0.690272
   Precision = 0.540648 at threshold = 0.5
   Recall    = 0.932712
   F1        = 0.684516


Total learning time: 85.685 seconds
Total inference time: 16.255 seconds
AUC ROC: 0.53993


Refined model AUC ROC: 0.53993


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:54:31
{'Recall': 0.932712, 'F1': 0.684516, 'AUC PR': 0.561878, 'Learning time': 130.705, 'AUC ROC': 0.53993, 'Inference time': 16.255, 'Precision': [0.540648, 0.5], 'Mapping results': {'Generating mappings time': 0.0033292770385742188, 'Possible mappings': [6], 'Generating paths time': 2.790316343307495, 'Total time': 2.89086651802063, 'Numbers preds mapping': [4], 'Finding best mapping': 1.1920928955078125e-06, 'Max mapping': 121, 'Knowledge compiling time': 0.0972127914428711}, 'parameter': {'Recall': 0.952169, 'F1': 0.691798, 'AUC PR': 0.542776, 'Learning time': 45.02, 'AUC ROC': 0.535236, 'Inference time': 2.848, 'Precision': [0.543247, 0.5], 'CLL': -0.685676}, 'CLL': -0.690272}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6397480032138977;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15715819152444083;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.16254500754977086;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12839506992486718;  // std dev = 2,887, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.038009597489091836;  // std dev = 0,806, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15404125523550588;  // std dev = 2,947, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.044790460982400505;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6805851247859591;  // std dev = 0,056, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.30837723775582815;  // std dev = 0,493, 799,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | else return 0.46371501494270256;  // std dev = 0,355, 27,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.06853782795533964;  // std dev = 0,390, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return 0.17985647818138822;  // std dev = 1,007, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.11350020908398904;  // std dev = 2,882, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03159879174578699;  // std dev = 0,805, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1314281185914189;  // std dev = 2,936, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039047001180378405;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.5216077804329589;  // std dev = 0,063, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.17958607359853515;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12293423997308432;  // std dev = 1,926, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.19952909354155507;  // std dev = 2,542, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.11354301367104523;  // std dev = 1,913, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.2743257555258432;  // std dev = 0,485, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.17754038836549904;  // std dev = 0,438, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.07676613769846331;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05340078431628441;  // std dev = 0,412, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.39486548967809165;  // std dev = 0,060, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.13625740414004958;  // std dev = 2,583, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.10002961693124655;  // std dev = 1,938, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.1582072759735758;  // std dev = 2,542, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.08575677076530015;  // std dev = 1,917, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.21033941061917893;  // std dev = 0,485, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.17226490403966851;  // std dev = 0,436, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06433032136904711;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04412149654830405;  // std dev = 0,412, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1391565725057321;  // std dev = 0,485, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.28767216186019445;  // std dev = 0,332, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( haswordtitle(G, E) )
%   | | then return 0.06441959906554272;  // std dev = 0,390, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( author(H, F), venue(H, B) )
%   | | | then return -0.2095785590475114;  // std dev = 0,000735, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09098926180783189;  // std dev = 3,015, 44,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return -1.2928079443338402E-4;  // std dev = 0,783, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08845107484850338;  // std dev = 2,928, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.013192732987071127;  // std dev = 2,990, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.028149044022694462;  // std dev = 2,967, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.26848175678513075;  // std dev = 0,061, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return -0.05105549636673578;  // std dev = 3,069, 46,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.2781276057175674;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.05727673671601552;  // std dev = 2,736, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.17063403697217458;  // std dev = 1,564, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.12352512763351824;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.12254478566940416;  // std dev = 0,430, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.043356845972338395;  // std dev = 0,437, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03105114895443865;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2478918732037159;  // std dev = 0,101, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.07677311723100129;  // std dev = 0,485, 808,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=472 */
%   | else return 0.23530164115505148;  // std dev = 0,294, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.43926538702733114;  // std dev = 0,913, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1937483973413804;  // std dev = 0,050, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03340361140856647;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.1843567343311232;  // std dev = 0,049, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0780636854547039;  // std dev = 4,060, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.003425893584775438;  // std dev = 0,386, 65,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05904235269706623;  // std dev = 0,483, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.11911644413460669;  // std dev = 0,402, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.2515185047093429;  // std dev = 0,089, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( title(K, I), venue(K, A) )
%   | | | then return 0.6467979994439517;  // std dev = 1,755, 29,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.1980036349863653;  // std dev = 0,270, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.1655454082565106;  // std dev = 0,054, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordauthor(N, L) )
%   | | | then return 0.13085701957436904;  // std dev = 0,782, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0557559377925307;  // std dev = 4,083, 86,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return -0.22442461452470136;  // std dev = 0,129, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.44326274332411686;  // std dev = 2,58e-08, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.23531925140431534;  // std dev = 1,882, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.11097525647212134;  // std dev = 0,367, 29,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.05052703891819186;  // std dev = 0,487, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.11879616187260368;  // std dev = 0,337, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return -0.003600352982973957;  // std dev = 0,278, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.03855503919451049;  // std dev = 0,436, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.027958807467129088;  // std dev = 0,359, 95,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.014989968934072197;  // std dev = 0,379, 65,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */


Results
   AUC ROC   = 0.543625
   AUC PR    = 0.563516
   CLL	      = -0.685328
   Precision = 0.541429 at threshold = 0.5
   Recall    = 0.921767
   F1        = 0.682166


Total learning time: 112.779 seconds
Total inference time: 10.609 seconds
AUC ROC: 0.543625


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 00:56:35
{'Recall': 0.921767, 'F1': 0.682166, 'AUC PR': 0.563516, 'Learning time': 112.779, 'AUC ROC': 0.543625, 'Inference time': 10.609, 'Precision': [0.541429, 0.5], 'CLL': -0.685328}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6359267128772901;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7470378239884012;  // std dev = 1,333, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( haswordtitle(N, L) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, P), haswordtitle(Q, P) )
%   | | | then return 0.04458961306561406;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.543572
   AUC PR    = 0.563404
   CLL	      = -0.940572
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 14.733 seconds
Total inference time: 2.813 seconds
AUC ROC: 0.543572


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 00:56:53
{'Recall': 0.0, 'F1': nan, 'AUC PR': 0.563404, 'Learning time': 14.733, 'AUC ROC': 0.543572, 'Inference time': 2.813, 'Precision': [nan, 0.5], 'CLL': -0.940572}


