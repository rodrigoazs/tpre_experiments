Starting experiment #6 for 7_imdb_cora

Start learning from source dataset

Source train facts examples: 696
Source train pos examples: 382
Source train neg examples: 382

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.14185106490048804;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839202;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360675;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783623;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.10159632948783649;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.09269127618926053;  // std dev = 1,13e-07, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.08518475138839678;  // std dev = 9,19e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109176;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109143;  // std dev = 2,98e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07324622576333703;  // std dev = 8,56e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06842697784420307;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06419184008202618;  // std dev = 4,71e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */


Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Starting fold 1

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.12433052062988281
   Generating paths time   = 2.7552785873413086
   Generating mappings time   = 0.004672527313232422
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 2.8842928409576416


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 7095
Target train pos examples: 368
Target train neg examples: 368

Target test facts examples: 32446
Target test pos examples: 2649
Target test neg examples: 2372

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39877393509950776;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.08731560176617863;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34300337446082674;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.07635080560123796;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2829757526611641;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.06620209782707072;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2252798172623557;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.05696901974896947;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17475296268559667;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.04869607932732711;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13334329939108758;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.0413815147045419;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10079964128532884;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.03498823961218326;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07583443148005016;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.029454875605481722;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05692841477064725;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.024705527060021732;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042702080777636764;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.020657656117816402;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */


Results
   AUC ROC   = 0.546475
   AUC PR    = 0.552575
   CLL	      = -0.684943
   Precision = 0.553319 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697726


Total learning time: 213.208 seconds
Total inference time: 3.589 seconds
AUC ROC: 0.546475


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}]]
[{'': [0.2483496093749918, 0.17664930555555647]}, {'': [0.24834960937500003, 0.17664930555555483]}, {'': [0.24834960937499692, 0.17664930555555602]}, {'': [0.24834960937499745, 0.17664930555555527]}, {'': [0.24834960937500034, 0.1766493055555556]}, {'': [0.2483496093749967, 0.17664930555555505]}, {'': [0.24834960937499817, 0.17664930555555614]}, {'': [0.24834960937500314, 0.176649305555556]}, {'': [0.24834960937499853, 0.17664930555555555]}, {'': [0.24834960937500156, 0.17664930555555547]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7024603123450174;  // std dev = 6,626, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.015414283291292909;  // std dev = 5,369, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.524815601766179;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.06968739663797391;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else return 0.10814893509951236;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5942136425412414;  // std dev = 6,627, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.013904354802370374;  // std dev = 5,355, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.4646455502738005;  // std dev = 0,395, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.5585419988249184;  // std dev = 0,795, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.448295606241962;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.011134104502422184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.060990862821579055;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | else return 0.10762533257259782;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.46768301019503045;  // std dev = 6,627, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.012235682998794096;  // std dev = 5,355, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.3726967994569488;  // std dev = 0,380, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.46029189793691755;  // std dev = 0,772, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.36236334632262296;  // std dev = 0,471, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.15851462938929226;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.08592981505515218;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.009666111816663556;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.09296004718136926;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.19362871668169115;  // std dev = 0,393, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.2885510231515225;  // std dev = 0,370, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.36105789666799165;  // std dev = 0,758, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.2807538536965854;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2807538536965851;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.00838254293106693;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordvenue(B, P) )
%   | | | then return -0.138496224878591;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.07412880551335542;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.07942606373449619;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.15532784667271834;  // std dev = 0,388, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.22704955361363058;  // std dev = 0,352, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.30511962891587524;  // std dev = 0,934, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.21248070121827142;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2124807012182711;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.00726253290548944;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordvenue(B, P) )
%   | | | then return -0.12278334808304756;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.06339642003532565;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.06721383282569741;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.12544795207810389;  // std dev = 0,384, 612,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=327 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.23428382632762795;  // std dev = 0,766, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.1594898822817116;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15948988228171185;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.24172449565344353;  // std dev = 2,482, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return -0.18713940026060574;  // std dev = 0,079, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.11015920345046154;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return 0.006286984943840418;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.05640751621874305;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.09959310832411744;  // std dev = 0,381, 612,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=327 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.20296726842598084;  // std dev = 0,941, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.11975529938157474;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11975529938157481;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.003811085357055788;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.11444197924861939;  // std dev = 0,050, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.052920933589276;  // std dev = 2,621, 40,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | else if ( haswordvenue(A, P), haswordauthor(Q, P) )
%   | | | then return 0.005438583174856709;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.04700335535015261;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.07905582017319304;  // std dev = 0,380, 612,000 (wgt'ed) examples reached here.  /* #neg=285 #pos=327 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.15578513397440094;  // std dev = 0,942, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.09028081829440963;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09028081829440963;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.19748776346496388;  // std dev = 2,466, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return -0.16631958566905933;  // std dev = 0,085, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.08999326834089932;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return 0.004701748297992202;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.03893331209646058;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.06178503105495854;  // std dev = 0,380, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.09123497039584212;  // std dev = 0,371, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.13649423217019002;  // std dev = 0,770, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.06840311429118533;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06840311429118515;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return -0.016721116496475553;  // std dev = 0,848, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.015062028647341198;  // std dev = 0,372, 47,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | else if ( haswordvenue(A, P), haswordauthor(Q, P) )
%   | | | then return 0.004062554535823206;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.03208831437102024;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.049031983563697625;  // std dev = 0,379, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.07080723732551009;  // std dev = 0,372, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.052078905701252655;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1056596854014874;  // std dev = 0,772, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.052078905701252745;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return -0.013958307828160687;  // std dev = 0,848, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.012740371110305083;  // std dev = 0,372, 47,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | else if ( haswordvenue(A, P), haswordauthor(Q, P) )
%   | | | then return 0.0035086222925996557;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.026337846862107155;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */


Results
   AUC ROC   = 0.853538
   AUC PR    = 0.82026
   CLL	      = -0.471825
   Precision = 0.836168 at threshold = 0.5
   Recall    = 0.9094
   F1        = 0.871248


Total learning time: 289.233 seconds
Total inference time: 74.937 seconds
AUC ROC: 0.853538


Refined model AUC ROC: 0.853538


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 23:32:28
{'CLL': -0.471825, 'Recall': 0.9094, 'F1': 0.871248, 'parameter': {'CLL': -0.684943, 'Recall': 0.94413, 'F1': 0.697726, 'AUC ROC': 0.546475, 'Inference time': 3.589, 'Learning time': 213.208, 'Precision': [0.553319, 0.5], 'AUC PR': 0.552575}, 'AUC ROC': 0.853538, 'Inference time': 74.937, 'Mapping results': {'Knowledge compiling time': 0.12433052062988281, 'Generating paths time': 2.7552785873413086, 'Possible mappings': [6], 'Max mapping': 121, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 0.004672527313232422, 'Numbers preds mapping': [4], 'Total time': 2.8842928409576416}, 'Learning time': 502.44100000000003, 'Precision': [0.836168, 0.5], 'AUC PR': 0.82026}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.701522429075412;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.01877414182356519;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5381489350995123;  // std dev = 2,332, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.06968739663797391;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else return 0.10814893509951236;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.593348233548271;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.016504108168397414;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.5082438995261179;  // std dev = 0,366, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.5293445937067122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.44629680360695173;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.011134104502422184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.060990862821579055;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | else return 0.10762533257259782;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4670374791755083;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.014533760159937995;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.40691670528691;  // std dev = 0,346, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.4253550592591635;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3603119666664001;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.009666111816663556;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.05302383214916931;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | else return 0.09296004718136926;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1922779554369467;  // std dev = 0,393, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.31407260659646263;  // std dev = 0,334, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.32618980125241903;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3151786576185065;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2789467853035657;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.00838254293106693;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.0587737290365183;  // std dev = 2,921, 49,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return -0.16571606688184876;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.07942606373449619;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15473579283826083;  // std dev = 0,388, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.23922849891709347;  // std dev = 0,328, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.23676009386434207;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24524054642908122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2110399434778952;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.00726253290548944;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.16116752488745528;  // std dev = 0,039, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.07044224618184713;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.06721383282569741;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12371494326399256;  // std dev = 0,384, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.18252722482238654;  // std dev = 0,327, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.1780694542720751;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.18431214345337676;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1583980148420765;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.1405793261628276;  // std dev = 0,035, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.06008432713648681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.006286984943840418;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.05640751621874305;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09854785108630686;  // std dev = 0,382, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.14039382136069792;  // std dev = 0,328, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.13513671764223453;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.13969580176530805;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.11894366432750374;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.1244582658625182;  // std dev = 0,032, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.05087752135519009;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.005438583174856709;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.04700335535015261;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.2136141155854852;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.0943821658660211;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.10903489491900797;  // std dev = 0,330, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.1070280198266893;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.103671751136855;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.08967938835882848;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.11153313197302177;  // std dev = 0,029, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.04281159036713532;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.03426537157848758;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.0581324242898637;  // std dev = 0,369, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.08546317786351293;  // std dev = 0,332, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.08285179188923775;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08034833303035915;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.06795571830944512;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.008612628054489313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.10096190168381423;  // std dev = 0,026, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.0413873719455109;  // std dev = 2,739, 40,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | else return 0.028427583987543657;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04744889098644644;  // std dev = 0,368, 608,000 (wgt'ed) examples reached here.  /* #neg=284 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06282214181758172;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.06471514020022939;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.051744000554039736;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.22183040506721194;  // std dev = 2,466, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return -0.20978413232434337;  // std dev = 0,113, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.08160671783419307;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.003989042252956774;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.02783983917316453;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */


Results
   AUC ROC   = 0.853012
   AUC PR    = 0.801125
   CLL	      = -0.457414
   Precision = 0.824864 at threshold = 0.5
   Recall    = 0.919215
   F1        = 0.869488


Total learning time: 309.487 seconds
Total inference time: 51.719 seconds
AUC ROC: 0.853012


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 23:38:30
{'CLL': -0.457414, 'Recall': 0.919215, 'F1': 0.869488, 'AUC ROC': 0.853012, 'Inference time': 51.719, 'Learning time': 309.487, 'Precision': [0.824864, 0.5], 'AUC PR': 0.801125}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.701522429075412;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.01877414182356519;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.524815601766179;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.10814893509951236;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */


Results
   AUC ROC   = 0.847816
   AUC PR    = 0.803894
   CLL	      = -0.844331
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 49.869 seconds
Total inference time: 11.373 seconds
AUC ROC: 0.847816


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 23:39:33
{'CLL': -0.844331, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.847816, 'Inference time': 11.373, 'Learning time': 49.869, 'Precision': [nan, 0.5], 'AUC PR': 0.803894}


Starting fold 2

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.10202479362487793
   Generating paths time   = 2.69994854927063
   Generating mappings time   = 0.002595663070678711
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 2.804576873779297


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8245
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 31296
Target test pos examples: 2246
Target test neg examples: 2196

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.437142
   AUC PR    = 0.443375
   CLL	      = -0.710286
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 100.339 seconds
Total inference time: 3.223 seconds
AUC ROC: 0.437142


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.6455293835086062;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.29552938350860597;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.045529383508606;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.37690590172721483;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3102512919592048;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2446014103320406;  // std dev = 0,492, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.45183287163685415;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.12438475029312256;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1448847705180374;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.1859731137749072;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1422026230695906;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.30501645742847827;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06011136676024041;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14424405029554602;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.10551377232074027;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08025925438999715;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060247589104416084;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04527037002979664;  // std dev = 0,491, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.545635
   AUC PR    = 0.515698
   CLL	      = -0.70706
   Precision = 0.537634 at threshold = 0.5
   Recall    = 0.957257
   F1        = 0.688551


Total learning time: 110.799 seconds
Total inference time: 6.813 seconds
AUC ROC: 0.545635


Refined model AUC ROC: 0.545635


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 23:43:21
{'CLL': -0.70706, 'Recall': 0.957257, 'F1': 0.688551, 'parameter': {'CLL': -0.710286, 'Recall': 1.0, 'F1': 0.671651, 'AUC ROC': 0.437142, 'Inference time': 3.223, 'Learning time': 100.339, 'Precision': [0.505628, 0.5], 'AUC PR': 0.443375}, 'AUC ROC': 0.545635, 'Inference time': 6.813, 'Mapping results': {'Knowledge compiling time': 0.10202479362487793, 'Generating paths time': 2.69994854927063, 'Possible mappings': [6], 'Max mapping': 121, 'Finding best mapping': 9.5367431640625e-07, 'Generating mappings time': 0.002595663070678711, 'Numbers preds mapping': [4], 'Total time': 2.804576873779297}, 'Learning time': 211.138, 'Precision': [0.537634, 0.5], 'AUC PR': 0.515698}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5145754588862081;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.16457545888620817;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06605466959315473;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13542454111379182;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.2399523433083081;  // std dev = 0,494, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3261448737160187;  // std dev = 1,915, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3103700402108464;  // std dev = 1,898, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.3332419990230316;  // std dev = 0,330, 33,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1861346662330819;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23233438181079047;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2166010869669191;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.344487667745488;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.33934134460665244;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10772948932183568;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3457604235013102;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.08249918443180616;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10277518124967427;  // std dev = 1,222, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.13943894836053314;  // std dev = 0,494, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1911614910571029;  // std dev = 1,914, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17295932626034205;  // std dev = 1,895, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.2678472860901805;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08386661726494864;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.26030149954238485;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.062309926445436314;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07968463831124996;  // std dev = 1,222, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.10489886976070315;  // std dev = 0,494, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.13210812811573683;  // std dev = 1,917, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.14358359869178774;  // std dev = 1,894, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.21867246678660276;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06472566799214798;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07964837556304608;  // std dev = 0,492, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10100655536702612;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08143586437305035;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.21342721214062674;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.18360795517874845;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04965004327313348;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3258153828488585;  // std dev = 0,355, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.027119309798076086;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.2665743727693397;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.057632737033450634;  // std dev = 0,493, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.09114737124009727;  // std dev = 1,914, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.07779285206526922;  // std dev = 1,897, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.15766572149571548;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03792398425604247;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04494298600967806;  // std dev = 0,492, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.060389478216374214;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.04190981381387877;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.16859614526019817;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.13783782747782874;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02888097101035517;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.554346
   AUC PR    = 0.526503
   CLL	      = -0.705228
   Precision = 0.537287 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.687921


Total learning time: 177.74 seconds
Total inference time: 8.006 seconds
AUC ROC: 0.554346


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 23:46:28
{'CLL': -0.705228, 'Recall': 0.955922, 'F1': 0.687921, 'AUC ROC': 0.554346, 'Inference time': 8.006, 'Learning time': 177.74, 'Precision': [0.537287, 0.5], 'AUC PR': 0.526503}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.546724
   AUC PR    = 0.523109
   CLL	      = -0.91326
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 20.745 seconds
Total inference time: 3.206 seconds
AUC ROC: 0.546724


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 23:46:53
{'CLL': -0.91326, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.546724, 'Inference time': 3.206, 'Learning time': 20.745, 'Precision': [nan, 0.5], 'AUC PR': 0.523109}


Starting fold 3

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.11651086807250977
   Generating paths time   = 3.072169065475464
   Generating mappings time   = 0.002573251724243164
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 3.191261053085327


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8725
Target train pos examples: 581
Target train neg examples: 581

Target test facts examples: 30816
Target test pos examples: 2436
Target test neg examples: 2159

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.11529179224236799;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3368104452725042;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.1006698265126728;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2782019553062949;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.08691854825778976;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2218655867177258;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.074287373672246;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1724245980376236;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.06292492981534978;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13178285263632983;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.05288752556858072;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09974654995840213;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.044156924602564436;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07510777615464852;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.036661434327724535;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056412350427134834;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.030295939098124496;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04232482322953948;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.02493848785740836;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */


Results
   AUC ROC   = 0.547299
   AUC PR    = 0.555563
   CLL	      = -0.684914
   Precision = 0.556307 at threshold = 0.5
   Recall    = 0.944992
   F1        = 0.700335


Total learning time: 27.793 seconds
Total inference time: 2.529 seconds
AUC ROC: 0.547299


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}]]
[{'': [0.24889323340519648, 0.19102040816326663]}, {'': [0.24889323340519198, 0.1910204081632664]}, {'': [0.2488932334051973, 0.19102040816326585]}, {'': [0.2488932334051982, 0.1910204081632639]}, {'': [0.248893233405201, 0.19102040816326604]}, {'': [0.24889323340520084, 0.1910204081632663]}, {'': [0.24889323340520145, 0.19102040816326452]}, {'': [0.2488932334051957, 0.1910204081632664]}, {'': [0.24889323340520308, 0.19102040816326624]}, {'': [0.24889323340520328, 0.19102040816326568]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.2775037738091898;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.3946600912861201;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5854216623722396;  // std dev = 2,089, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14185106490048768;  // std dev = 4,47e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.1308762078267851;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33679013272919744;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03230343672148868;  // std dev = 0,382, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.04724661596526224;  // std dev = 0,362, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.09193187084324539;  // std dev = 3,202, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.12717325065447885;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2781858437687294;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.48249592378364614;  // std dev = 2,091, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13465561737956772;  // std dev = 0,015, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.03888012897040227;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.09843660182966814;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22185577110889385;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3829720040009907;  // std dev = 2,092, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.12184664648424785;  // std dev = 0,066, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.08355559697272397;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.07322964771413676;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.08527567570127462;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.2236381623406866;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.10270458418401941;  // std dev = 0,499, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return 0.17413582649325302;  // std dev = 0,499, 989,000 (wgt'ed) examples reached here.  /* #neg=460 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.2922112686205161;  // std dev = 2,092, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.10940858917686329;  // std dev = 0,060, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.07163781715442326;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.07062725295049298;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06193143029525397;  // std dev = 0,495, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.1343302885796264;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.21953093134556736;  // std dev = 2,092, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.09920267133716242;  // std dev = 0,056, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.060896455442868584;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.059000888340091144;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04722399998203289;  // std dev = 0,495, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.10165392278618839;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( title(I, G), venue(I, A) )
%   | | | then return 0.15332849451851172;  // std dev = 2,025, 25,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.10229520281028119;  // std dev = 0,470, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.05138117872002586;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.04175322511277769;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.04990946130682396;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0358816906372004;  // std dev = 0,495, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.07652793362724314;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( title(I, G), venue(I, A) )
%   | | | then return 0.11985328336786673;  // std dev = 2,014, 25,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.09378479097005024;  // std dev = 0,452, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.04307608816740726;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.03478507989638892;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.04106153380685757;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05640374154392375;  // std dev = 0,498, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.09413442906759432;  // std dev = 2,007, 25,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.08654578924718442;  // std dev = 0,436, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.035917762184058295;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.028851789794293495;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.03360415663632849;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.008410786981759372;  // std dev = 0,500, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.04345864253238892;  // std dev = 0,498, 989,000 (wgt'ed) examples reached here.  /* #neg=460 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.0847226497281293;  // std dev = 2,042, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.0749819971011652;  // std dev = 0,112, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.029812519982258964;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.026953310553617212;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */


Results
   AUC ROC   = 0.557432
   AUC PR    = 0.566473
   CLL	      = -0.671636
   Precision = 0.559166 at threshold = 0.5
   Recall    = 0.925287
   F1        = 0.697077


Total learning time: 80.545 seconds
Total inference time: 8.225 seconds
AUC ROC: 0.557432


Refined model AUC ROC: 0.557432


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 23:48:57
{'CLL': -0.671636, 'Recall': 0.925287, 'F1': 0.697077, 'parameter': {'CLL': -0.684914, 'Recall': 0.944992, 'F1': 0.700335, 'AUC ROC': 0.547299, 'Inference time': 2.529, 'Learning time': 27.793, 'Precision': [0.556307, 0.5], 'AUC PR': 0.555563}, 'AUC ROC': 0.557432, 'Inference time': 8.225, 'Mapping results': {'Knowledge compiling time': 0.11651086807250977, 'Generating paths time': 3.072169065475464, 'Possible mappings': [6], 'Max mapping': 121, 'Finding best mapping': 7.152557373046875e-07, 'Generating mappings time': 0.002573251724243164, 'Numbers preds mapping': [4], 'Total time': 3.191261053085327}, 'Learning time': 108.338, 'Precision': [0.559166, 0.5], 'AUC PR': 0.566473}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.039967116917694;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.12044401706672549;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.058148935099512175;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.1340110040650296;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3368104452725042;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03503196034273708;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.10514080895131177;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.05092203251355425;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.11690238620380397;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D), haswordtitle(F, C) )
%   | | then return 0.4116005202117187;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.16917627778747646;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | else return 0.2814450097316553;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.03059004775032249;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.027686046641405414;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.08490960481873672;  // std dev = 3,453, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.11049605646593645;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22184721425061055;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.026621534319001657;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.023701576837702444;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07264753421967247;  // std dev = 3,453, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.09395058135849792;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17241402676076026;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.023099042092253833;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.06925698772514567;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.022499126900865696;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.06994088173182639;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13177864876643328;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5225408699468854;  // std dev = 2,093, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.20068307802090152;  // std dev = 0,079, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.019190514772462443;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.08817213718116035;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.058270426784572144;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.15730661250824912;  // std dev = 1,086, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.01239710744997023;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.10220114592006443;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.42458353454279646;  // std dev = 2,095, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.171037888434153;  // std dev = 0,072, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.06633063510110561;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return 0.0758531639473702;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.04818834364930487;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.02193743970453921;  // std dev = 0,498, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.07687198911009445;  // std dev = 0,498, 989,000 (wgt'ed) examples reached here.  /* #neg=460 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.32836742361768484;  // std dev = 2,096, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14814896556020357;  // std dev = 0,064, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.05617601037864883;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.06467300363143091;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.0396051084155184;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.46833154146139266;  // std dev = 4,573, 401,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=379 */
%   | | | else return 0.2613239874821009;  // std dev = 2,284, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | | else return -0.4083726012288367;  // std dev = 0,205, 451,000 (wgt'ed) examples reached here.  /* #neg=435 #pos=16 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.20912142664861272;  // std dev = 0,463, 189,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=130 */
%   | | else return 0.05619999289560396;  // std dev = 0,404, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5221300598336387;  // std dev = 1,965, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.24664910621773892;  // std dev = 0,337, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.19701289288780438;  // std dev = 0,449, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0.5236138987358131;  // std dev = 0,027, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.35255247226780073;  // std dev = 4,574, 401,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=379 */
%   | | | else return 0.16364216936661868;  // std dev = 2,233, 24,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | else return -0.31606475076916335;  // std dev = 0,201, 448,000 (wgt'ed) examples reached here.  /* #neg=432 #pos=16 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.15565209841339883;  // std dev = 0,454, 195,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=132 */
%   | | else return 0.08076141191003126;  // std dev = 0,432, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.4139804255351259;  // std dev = 1,969, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.20429985428400238;  // std dev = 0,307, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.1560730953042232;  // std dev = 0,447, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0.3943739516469689;  // std dev = 0,026, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */


Results
   AUC ROC   = 0.859492
   AUC PR    = 0.815989
   CLL	      = -0.480663
   Precision = 0.813272 at threshold = 0.5
   Recall    = 0.945813
   F1        = 0.874549


Total learning time: 126.153 seconds
Total inference time: 25.013 seconds
AUC ROC: 0.859492


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 23:51:29
{'CLL': -0.480663, 'Recall': 0.945813, 'F1': 0.874549, 'AUC ROC': 0.859492, 'Inference time': 25.013, 'Learning time': 126.153, 'Precision': [0.813272, 0.5], 'AUC PR': 0.815989}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5854216623722396;  // std dev = 2,089, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14185106490048768;  // std dev = 4,47e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.1308762078267851;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */


Results
   AUC ROC   = 0.556061
   AUC PR    = 0.565582
   CLL	      = -0.963231
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.504 seconds
Total inference time: 3.346 seconds
AUC ROC: 0.556061


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 23:51:42
{'CLL': -0.963231, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.556061, 'Inference time': 3.346, 'Learning time': 9.504, 'Precision': [nan, 0.5], 'AUC PR': 0.565582}


Starting fold 4

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.07346081733703613
   Generating paths time   = 2.6591506004333496
   Generating mappings time   = 0.0025839805603027344
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 1.1920928955078125e-06
   Total time   = 2.7352027893066406


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 7382
Target train pos examples: 747
Target train neg examples: 747

Target test facts examples: 32159
Target test pos examples: 2270
Target test neg examples: 1993

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3735611214794357;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.14097721792779405;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32175803168015193;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.12293506238583077;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26654831388655753;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.10572355771962352;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2134839465271646;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.08978633290599357;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16668724369451127;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.07541323198647286;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12794262506462942;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.06274216592519288;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09717611751164584;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.05178372301620736;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07336126033252563;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.04245584308854262;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05519822955528243;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.034618468956100754;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04145936304187153;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.02810245705359781;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */


Results
   AUC ROC   = 0.558035
   AUC PR    = 0.56414
   CLL	      = -0.686242
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 84.187 seconds
Total inference time: 2.99 seconds
AUC ROC: 0.558035


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}]]
[{'': [0.24976246451101256, 0.20283644526068886]}, {'': [0.24976246451099404, 0.20283644526068717]}, {'': [0.24976246451098316, 0.20283644526068828]}, {'': [0.24976246451099413, 0.202836445260688]}, {'': [0.24976246451098344, 0.20283644526068864]}, {'': [0.24976246451099202, 0.20283644526068909]}, {'': [0.24976246451098205, 0.20283644526068767]}, {'': [0.24976246451097817, 0.20283644526068803]}, {'': [0.24976246451099463, 0.2028364452606869]}, {'': [0.24976246451098966, 0.20283644526068803]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.37195707463439115;  // std dev = 0,500, 1.376,000 (wgt'ed) examples reached here.  /* #neg=669 #pos=707 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return 0.31968739663797385;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.12644161802634163;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3216269420665857;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.27615825449321707;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.11034235232659871;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.08964016548715838;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2664458456872727;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.2308014560359859;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.09510703098232902;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.07754550154840685;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5875335004442083;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.20525335615223428;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.43501173511367286;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.21226706613601118;  // std dev = 0,500, 1.376,000 (wgt'ed) examples reached here.  /* #neg=669 #pos=707 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.3816060434442348;  // std dev = 2,396, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.19810301917212558;  // std dev = 0,141, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.22578729577145015;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.06648308448032317;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6257006319283087;  // std dev = 0,197, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3480315416328534;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.62139053962752;  // std dev = 0,106, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.15769746588318168;  // std dev = 1,107, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.2796567834086403;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.16409189701520305;  // std dev = 0,500, 1.361,000 (wgt'ed) examples reached here.  /* #neg=664 #pos=697 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.14901352233934237;  // std dev = 0,476, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.0638274493259572;  // std dev = 0,416, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.056548150925513005;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3901283194876284;  // std dev = 0,099, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.197604484573523;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.24327602865538384;  // std dev = 0,879, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.12726547231255803;  // std dev = 0,499, 1.376,000 (wgt'ed) examples reached here.  /* #neg=669 #pos=707 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.2977295456665752;  // std dev = 2,391, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.1797615177650068;  // std dev = 0,157, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.14532497392092325;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.047766754411616555;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3025783533052019;  // std dev = 0,085, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.16813000516551546;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.18459247328966616;  // std dev = 0,879, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.09670531246827742;  // std dev = 0,499, 1.376,000 (wgt'ed) examples reached here.  /* #neg=669 #pos=707 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then return 0.0861490365286445;  // std dev = 0,457, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.040110342621182196;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.03534388533935544;  // std dev = 0,393, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07331676615229639;  // std dev = 0,496, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.06639406572559958;  // std dev = 0,456, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.03351176627816061;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.029270664887790183;  // std dev = 0,392, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05525782374332279;  // std dev = 0,496, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.050942176677594035;  // std dev = 0,456, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.027880036700617013;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.024163888265143554;  // std dev = 0,392, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.09009137650397109;  // std dev = 0,199, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else return -0.028850427372057008;  // std dev = 0,789, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04116402689897303;  // std dev = 0,499, 1.376,000 (wgt'ed) examples reached here.  /* #neg=669 #pos=707 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | then return 0.038971738333870236;  // std dev = 0,455, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.023112424984988816;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.019895835099842243;  // std dev = 0,391, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */


Results
   AUC ROC   = 0.572783
   AUC PR    = 0.58729
   CLL	      = -0.673325
   Precision = 0.59761 at threshold = 0.5
   Recall    = 0.066079
   F1        = 0.119


Total learning time: 113.309 seconds
Total inference time: 7.937 seconds
AUC ROC: 0.572783


Refined model AUC ROC: 0.572783


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 23:55:15
{'CLL': -0.673325, 'Recall': 0.066079, 'F1': 0.119, 'parameter': {'CLL': -0.686242, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.558035, 'Inference time': 2.99, 'Learning time': 84.187, 'Precision': [nan, 0.5], 'AUC PR': 0.56414}, 'AUC ROC': 0.572783, 'Inference time': 7.937, 'Mapping results': {'Knowledge compiling time': 0.07346081733703613, 'Generating paths time': 2.6591506004333496, 'Possible mappings': [6], 'Max mapping': 121, 'Finding best mapping': 1.1920928955078125e-06, 'Generating mappings time': 0.0025839805603027344, 'Numbers preds mapping': [4], 'Total time': 2.7352027893066406}, 'Learning time': 197.49599999999998, 'Precision': [0.59761, 0.5], 'AUC PR': 0.58729}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3675686788824765;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.40360348055405776;  // std dev = 2,335, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5803711573217345;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.31968739663797385;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.12644161802634163;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31669960489254817;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.35569342009674776;  // std dev = 2,894, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.4016114478971489;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.4942204482591004;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.27615825449321707;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.11034235232659871;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.08964016548715838;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.26261587938835473;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.28037036499843904;  // std dev = 2,333, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.3210324535556523;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.39601909095488674;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.2308014560359859;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.09510703098232902;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.07754550154840685;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.21064009539967504;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.227968711588513;  // std dev = 2,891, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.2713759137133921;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.30383299977459627;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.18732575730991188;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.08106247590562135;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.06648308448032317;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16473263450408898;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.1659200236737463;  // std dev = 2,331, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.20065573836868922;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2286109504287673;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.36459653952541965;  // std dev = 2,393, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.21402251567921857;  // std dev = 0,183, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.1869776436181776;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.056548150925513005;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1266345446842191;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.13032937813922615;  // std dev = 2,889, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.16883971073225784;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.17163226488206357;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.29684554777413585;  // std dev = 2,391, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.18046968058263888;  // std dev = 0,164, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.14543881485841093;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.047766754411616555;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0963061203200779;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.08979566947297835;  // std dev = 2,329, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.11969279912110516;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.12963120803437964;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.15451336627983223;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08373321720745157;  // std dev = 0,457, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.040110342621182196;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.035376125232385834;  // std dev = 0,393, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5633581904022834;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.43664180959771653;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5633581904022835;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.10181972886382186;  // std dev = 1,797, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.3133581904022835;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(K, C) )
%   | | | then return 0.06915865443941631;  // std dev = 17,978, 1.293,000 (wgt'ed) examples reached here.  /* #neg=639 #pos=654 */
%   | | | else return 0.08776852884552333;  // std dev = 3,900, 68,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=43 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.04045558878876352;  // std dev = 0,436, 58,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
%   | else return 0.02929719972264992;  // std dev = 0,392, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.42346730337088756;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3337118693526665;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.42346730337088756;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.05288189972296442;  // std dev = 0,500, 1.310,000 (wgt'ed) examples reached here.  /* #neg=646 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05672094596031419;  // std dev = 3,279, 44,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.08481378487821152;  // std dev = 2,109, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.05508265358433008;  // std dev = 0,456, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.026699599651454728;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.024185555596336967;  // std dev = 0,392, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.49997265433015775;  // std dev = 0,066, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.429342539031604;  // std dev = 0,112, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.24268569422350775;  // std dev = 0,871, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.03996922384744481;  // std dev = 0,498, 1.308,000 (wgt'ed) examples reached here.  /* #neg=644 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04257590232638885;  // std dev = 3,279, 44,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.06630709907574706;  // std dev = 2,109, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.02364068822371549;  // std dev = 2,726, 47,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return 0.06815786481366735;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.022117544082878957;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */


Results
   AUC ROC   = 0.580372
   AUC PR    = 0.595756
   CLL	      = -0.67322
   Precision = 0.645161 at threshold = 0.5
   Recall    = 0.096916
   F1        = 0.168518


Total learning time: 211.273 seconds
Total inference time: 8.759 seconds
AUC ROC: 0.580372


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 23:58:56
{'CLL': -0.67322, 'Recall': 0.096916, 'F1': 0.168518, 'AUC ROC': 0.580372, 'Inference time': 8.759, 'Learning time': 211.273, 'Precision': [0.645161, 0.5], 'AUC PR': 0.595756}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3675686788824765;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.40360348055405776;  // std dev = 2,335, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5803711573217345;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.31968739663797385;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.12644161802634163;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */


Results
   AUC ROC   = 0.568052
   AUC PR    = 0.588916
   CLL	      = -0.976167
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 20.707 seconds
Total inference time: 3.506 seconds
AUC ROC: 0.568052


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 23:59:22
{'CLL': -0.976167, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.568052, 'Inference time': 3.506, 'Learning time': 20.707, 'Precision': [nan, 0.5], 'AUC PR': 0.588916}


Starting fold 5

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.14333319664001465
   Generating paths time   = 2.6360952854156494
   Generating mappings time   = 0.00257110595703125
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 2.7820067405700684


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8094
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 31447
Target test pos examples: 2467
Target test neg examples: 2240

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.535236
   AUC PR    = 0.542776
   CLL	      = -0.685676
   Precision = 0.543247 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.691798


Total learning time: 46.82 seconds
Total inference time: 4.329 seconds
AUC ROC: 0.535236


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.44587899644920087;  // std dev = 0,492, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.762910839861417;  // std dev = 0,294, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return -0.20519745475529086;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.5864692119113756;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.38156481117013774;  // std dev = 0,492, 783,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.6699615757960478;  // std dev = 0,285, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10912768446848493;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.1407704077153081;  // std dev = 0,451, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.31226488747628683;  // std dev = 0,490, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.4646664054216002;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.5907647196320306;  // std dev = 2,98e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5336799076940315;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13786678533886548;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0936683156805287;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.12070472226116916;  // std dev = 0,450, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.03250702666026084;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.04606634869415913;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.5747203312599528;  // std dev = 0,070, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.17928818625834955;  // std dev = 2,351, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.11707794805213406;  // std dev = 1,958, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.19778736148271478;  // std dev = 2,542, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.10208192789837857;  // std dev = 1,971, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.27309978915571026;  // std dev = 0,485, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.17688934374105866;  // std dev = 0,437, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0741951324753988;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.053119930061129764;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D), haswordauthor(F, D) )
%   | | then return 0.4702019962928442;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1851679712878047;  // std dev = 0,487, 810,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=474 */
%   | else return 0.3657201003593601;  // std dev = 0,276, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.13776037715536016;  // std dev = 0,390, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(J, H), venue(J, B) )
%   | | | then return -0.2026252990508568;  // std dev = 0,000437, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08976699154247814;  // std dev = 2,877, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return -0.023731211255719736;  // std dev = 0,775, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10010141425444634;  // std dev = 2,929, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.026656363894014587;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.29263982035385167;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2798054570221129;  // std dev = 1,929, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.05369714781368535;  // std dev = 0,404, 29,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.10735451983532243;  // std dev = 2,542, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.13096746059119746;  // std dev = 1,919, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.16336269907107626;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.11296503029206614;  // std dev = 0,384, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05807616561472714;  // std dev = 0,438, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.0369214547989754;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10451128023034055;  // std dev = 0,483, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.273363212134766;  // std dev = 0,278, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( author(I, G), venue(I, A) )
%   | | | then return 0.1970741678588035;  // std dev = 0,710, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17273591840451805;  // std dev = 0,026, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.06389520669337244;  // std dev = 0,445, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.06999704388823057;  // std dev = 4,101, 88,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.18573507749195578;  // std dev = 0,047, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.044061674167379834;  // std dev = 3,022, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.20331824758377579;  // std dev = 0,098, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.07821969243683015;  // std dev = 0,482, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.2747276970801019;  // std dev = 0,310, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.16275317714127674;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.22921479713320117;  // std dev = 0,112, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return 0.04522820296272198;  // std dev = 0,425, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.16988950663982258;  // std dev = 0,060, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.03753976676951165;  // std dev = 3,021, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(B, P), haswordtitle(Q, P) )
%   | | | then return 0.07322472575678454;  // std dev = 4,060, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.17250596280715935;  // std dev = 0,086, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.5031873369170702;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2437721035113922;  // std dev = 1,878, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.09693372190850369;  // std dev = 0,394, 29,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else return 0.06820019913830677;  // std dev = 0,481, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return -0.15859272103168456;  // std dev = 0,117, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(K, H) )
%   | | | then return 0.13303042553421726;  // std dev = 0,918, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06112198753116045;  // std dev = 4,069, 86,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.05511786118774748;  // std dev = 0,434, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.1874583200892694;  // std dev = 0,051, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return -0.37979043469139206;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.18670407108054232;  // std dev = 1,878, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.04316477254014392;  // std dev = 0,482, 783,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.18545295306080292;  // std dev = 0,278, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.0354274676510742;  // std dev = 0,422, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.13845401709772484;  // std dev = 0,105, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.06012152778227667;  // std dev = 4,042, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.012493345837493442;  // std dev = 2,982, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.15666139740573087;  // std dev = 0,174, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.539049
   AUC PR    = 0.561291
   CLL	      = -0.694006
   Precision = 0.541046 at threshold = 0.5
   Recall    = 0.927037
   F1        = 0.683298


Total learning time: 131.584 seconds
Total inference time: 39.622 seconds
AUC ROC: 0.539049


Refined model AUC ROC: 0.539049


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:03:13
{'CLL': -0.694006, 'Recall': 0.927037, 'F1': 0.683298, 'parameter': {'CLL': -0.685676, 'Recall': 0.952169, 'F1': 0.691798, 'AUC ROC': 0.535236, 'Inference time': 4.329, 'Learning time': 46.82, 'Precision': [0.543247, 0.5], 'AUC PR': 0.542776}, 'AUC ROC': 0.539049, 'Inference time': 39.622, 'Mapping results': {'Knowledge compiling time': 0.14333319664001465, 'Generating paths time': 2.6360952854156494, 'Possible mappings': [6], 'Max mapping': 121, 'Finding best mapping': 9.5367431640625e-07, 'Generating mappings time': 0.00257110595703125, 'Numbers preds mapping': [4], 'Total time': 2.7820067405700684}, 'Learning time': 178.404, 'Precision': [0.541046, 0.5], 'AUC PR': 0.561291}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.16343846579291768;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1290715491217583;  // std dev = 2,884, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03693744759731563;  // std dev = 0,807, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2,940, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0,056, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214675;  // std dev = 1,980, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3226813064206765;  // std dev = 0,491, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0,343, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5342138905737382;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1371885616510316;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09339221621720725;  // std dev = 0,439, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.062471098592310995;  // std dev = 0,413, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.2452899066654223;  // std dev = 0,490, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.4228986175459216;  // std dev = 0,287, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5200481531158161;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14625031652760595;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08184369183113359;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0099907349158465;  // std dev = 0,706, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11114858274088876;  // std dev = 2,908, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.024193891118573393;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.0377532131524717;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.44903606758792647;  // std dev = 0,079, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.12237294841814166;  // std dev = 2,581, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18504017324300426;  // std dev = 1,906, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1996628532108634;  // std dev = 0,489, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.2936858976779075;  // std dev = 0,340, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.13786668678361852;  // std dev = 0,390, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.16223096617710966;  // std dev = 0,000725, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08589523726060397;  // std dev = 2,858, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.04291901568186748;  // std dev = 0,409, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3445773749741795;  // std dev = 0,071, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.09302936784679429;  // std dev = 2,580, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.1488835837737423;  // std dev = 1,891, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.10949975445539283;  // std dev = 2,542, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.13259670107615945;  // std dev = 1,898, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.16401964407835518;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.1130412996017883;  // std dev = 0,385, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05703657006072951;  // std dev = 0,434, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03651593217094053;  // std dev = 0,409, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.3223362402406983;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.06799702497072795;  // std dev = 2,571, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.10535399526367668;  // std dev = 0,485, 783,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.25058775384011234;  // std dev = 0,288, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.11781166785871744;  // std dev = 0,386, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return -0.18225277468455667;  // std dev = 0,001, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06274867580113422;  // std dev = 2,846, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.05010738982327207;  // std dev = 0,425, 95,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -2.2324693533529557E-4;  // std dev = 0,382, 65,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.0771954190887354;  // std dev = 2,616, 32,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.21549104445266593;  // std dev = 1,437, 20,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | else return 0.2131412617074226;  // std dev = 0,299, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.08655836955756917;  // std dev = 0,487, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.16361647397983872;  // std dev = 0,340, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.09595324049930934;  // std dev = 0,381, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.03736273374615921;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return -0.0010465774262993029;  // std dev = 0,379, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.04308969063824567;  // std dev = 0,427, 94,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.49449193451970064;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.1997073748320313;  // std dev = 0,379, 31,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.20910999018914675;  // std dev = 0,310, 24,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.13658998874943182;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07174852984399098;  // std dev = 3,103, 49,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.066538573940039;  // std dev = 0,486, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.13051901083453343;  // std dev = 0,340, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return 0.04197293940645872;  // std dev = 0,424, 95,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.011589395116864389;  // std dev = 0,382, 65,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.1969997816314927;  // std dev = 0,076, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, B) )
%   | | then return 0.022620358017438145;  // std dev = 0,470, 41,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return -0.03249073470460662;  // std dev = 0,408, 64,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.39826513058000923;  // std dev = 1,251, 20,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.36365568879567756;  // std dev = 0,514, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.24881500164344664;  // std dev = 0,773, 16,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.06361017531633578;  // std dev = 2,910, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05822743057688398;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.0059116941146756105;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.542855
   AUC PR    = 0.564042
   CLL	      = -0.687705
   Precision = 0.542254 at threshold = 0.5
   Recall    = 0.93636
   F1        = 0.686785


Total learning time: 127.815 seconds
Total inference time: 15.185 seconds
AUC ROC: 0.542855


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 00:05:37
{'CLL': -0.687705, 'Recall': 0.93636, 'F1': 0.686785, 'AUC ROC': 0.542855, 'Inference time': 15.185, 'Learning time': 127.815, 'Precision': [0.542254, 0.5], 'AUC PR': 0.564042}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6359267128772901;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7470378239884012;  // std dev = 1,333, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.16249676118646889;  // std dev = 0,460, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, P), haswordtitle(Q, P) )
%   | | | then return 0.04458961306561406;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.543539
   AUC PR    = 0.563395
   CLL	      = -0.940559
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 18.702 seconds
Total inference time: 3.692 seconds
AUC ROC: 0.543539


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 00:06:00
{'CLL': -0.940559, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.543539, 'Inference time': 3.692, 'Learning time': 18.702, 'Precision': [nan, 0.5], 'AUC PR': 0.563395}


