Starting experiment #4 for 7_imdb_cora

Start learning from source dataset

Source train facts examples: 696
Source train pos examples: 382
Source train neg examples: 382

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.14185106490048804;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839202;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360675;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783623;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.10159632948783649;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.09269127618926053;  // std dev = 1,13e-07, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.08518475138839678;  // std dev = 9,19e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109176;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109143;  // std dev = 2,98e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07324622576333703;  // std dev = 8,56e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06842697784420307;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06419184008202618;  // std dev = 4,71e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */


Predicates from source: ['workedunder(person,person).', 'director(person).', 'movie(movie,person).', 'actor(person).']

Starting fold 1

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.14931011199951172
   Generating paths time   = 3.520880699157715
   Generating mappings time   = 0.004721879959106445
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 1.6689300537109375e-06
   Total time   = 3.674922227859497


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 7095
Target train pos examples: 368
Target train neg examples: 368

Target test facts examples: 32446
Target test pos examples: 2649
Target test neg examples: 2372

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39877393509950776;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.08731560176617863;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34300337446082674;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.07635080560123796;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2829757526611641;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.06620209782707072;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2252798172623557;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.05696901974896947;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17475296268559667;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.04869607932732711;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13334329939108758;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.0413815147045419;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10079964128532884;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.03498823961218326;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07583443148005016;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.029454875605481722;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05692841477064725;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.024705527060021732;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042702080777636764;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.020657656117816402;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */


Results
   AUC ROC   = 0.546475
   AUC PR    = 0.552575
   CLL	      = -0.684943
   Precision = 0.553319 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697726


Total learning time: 283.717 seconds
Total inference time: 4.701 seconds
AUC ROC: 0.546475


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.607, 294, 346], 'false': [4.118, 74, 22]}]]
[{'': [0.2483496093749918, 0.17664930555555647]}, {'': [0.24834960937500003, 0.17664930555555483]}, {'': [0.24834960937499692, 0.17664930555555602]}, {'': [0.24834960937499745, 0.17664930555555527]}, {'': [0.24834960937500034, 0.1766493055555556]}, {'': [0.2483496093749967, 0.17664930555555505]}, {'': [0.24834960937499817, 0.17664930555555614]}, {'': [0.24834960937500314, 0.176649305555556]}, {'': [0.24834960937499853, 0.17664930555555555]}, {'': [0.24834960937500156, 0.17664930555555547]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7024603123450174;  // std dev = 6,626, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.015414283291292909;  // std dev = 5,369, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.524815601766179;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.06968739663797391;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else return 0.10814893509951236;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5942136425412414;  // std dev = 6,627, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.013904354802370374;  // std dev = 5,355, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.4646455502738005;  // std dev = 0,395, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.5585419988249184;  // std dev = 0,795, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.448295606241962;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.060990862821579055;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return 0.011134104502422184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.10762533257259782;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.46768301019503045;  // std dev = 6,627, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.012235682998794096;  // std dev = 5,355, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.3726967994569488;  // std dev = 0,380, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.46029189793691755;  // std dev = 0,772, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36236334632262296;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.009666111816663556;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.05302383214916931;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | else return 0.09296004718136926;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.19362871668169115;  // std dev = 0,393, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.2885510231515225;  // std dev = 0,370, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.36105789666799165;  // std dev = 0,758, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.2807538536965854;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2807538536965851;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.00838254293106693;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordvenue(B, P) )
%   | | | then return -0.16571606688184873;  // std dev = 7,45e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.07872837756259538;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.07942606373449619;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.15532784667271834;  // std dev = 0,388, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.22704955361363058;  // std dev = 0,352, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.30511962891587524;  // std dev = 0,934, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.21248070121827142;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2124807012182711;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.14405462705393238;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.06755557315951767;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return 0.00726253290548944;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.06721383282569741;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.26653684749303086;  // std dev = 6,625, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.05764718665177104;  // std dev = 5,348, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.1645150191317195;  // std dev = 0,365, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.23428382632762795;  // std dev = 0,766, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.15948988228171188;  // std dev = 0,471, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.006286984943840418;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.12718636527100433;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.05750395196407236;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.05640751621874305;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.0921872428882008;  // std dev = 0,370, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.13309412915078225;  // std dev = 0,352, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.19451106002071133;  // std dev = 0,958, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.11975529938157474;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11975529938157481;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then if ( samebib(M, N), venue(N, B) )
%   | | | then return 0.23671321635155484;  // std dev = 2,481, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return -0.1922682658579083;  // std dev = 0,080, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.11372389786225862;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.04133543187170314;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.07462135460684739;  // std dev = 0,370, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.09427329544646021;  // std dev = 0,368, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.15395200967016293;  // std dev = 0,777, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.09028081829440959;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09028081829440963;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return -0.008411209525236652;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -2.2992627077129493E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, P), haswordtitle(Q, P) )
%   | | | then return 0.023701644495505526;  // std dev = 2,651, 47,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | | else return 0.03991769429412565;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.16564430907823022;  // std dev = 6,625, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.07535971600063704;  // std dev = 5,323, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.08015270512246395;  // std dev = 0,356, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.13350868830754978;  // std dev = 0,964, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.06840311429118515;  // std dev = 0,471, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.0070363650733227924;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.03694505266619655;  // std dev = 2,838, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
%   | | | else return -0.15124420666770513;  // std dev = 0,097, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03153642324796132;  // std dev = 0,408, 42,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.045466492912519314;  // std dev = 0,361, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.06240301285667238;  // std dev = 0,357, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.10501653341264561;  // std dev = 0,963, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.052078905701252655;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.052078905701252745;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return -0.11232827703640758;  // std dev = 0,036, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.03507824341413645;  // std dev = 0,438, 42,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return -0.005891363925838167;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.026358161903893822;  // std dev = 0,408, 42,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */


Results
   AUC ROC   = 0.862773
   AUC PR    = 0.825967
   CLL	      = -0.437163
   Precision = 0.836168 at threshold = 0.5
   Recall    = 0.9094
   F1        = 0.871248


Total learning time: 486.377 seconds
Total inference time: 169.124 seconds
AUC ROC: 0.862773


Refined model AUC ROC: 0.862773


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 15:31:11
{'CLL': -0.437163, 'Recall': 0.9094, 'F1': 0.871248, 'parameter': {'CLL': -0.684943, 'Recall': 0.94413, 'F1': 0.697726, 'AUC ROC': 0.546475, 'Inference time': 4.701, 'Learning time': 283.717, 'Precision': [0.553319, 0.5], 'AUC PR': 0.552575}, 'AUC ROC': 0.862773, 'Inference time': 169.124, 'Mapping results': {'Knowledge compiling time': 0.14931011199951172, 'Generating paths time': 3.520880699157715, 'Possible mappings': [6], 'Max mapping': 121, 'Finding best mapping': 1.6689300537109375e-06, 'Generating mappings time': 0.004721879959106445, 'Numbers preds mapping': [4], 'Total time': 3.674922227859497}, 'Learning time': 770.094, 'Precision': [0.836168, 0.5], 'AUC PR': 0.825967}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.701522429075412;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.01877414182356519;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.524815601766179;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.06968739663797391;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else return 0.10814893509951236;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.593348233548271;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.016504108168397414;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.5082438995261179;  // std dev = 0,366, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4592998232011236;  // std dev = 2,331, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.011134104502422184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.060990862821579055;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | else return 0.10762533257259782;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4670374791755083;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.014533760159937995;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.40691670528691;  // std dev = 0,346, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.42536487514245547;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.36032054710005085;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.05302383214916931;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.009666111816663556;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.09296004718136926;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1922779554369467;  // std dev = 0,393, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.31407260659646263;  // std dev = 0,334, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.326198336977669;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3151786576185065;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.27895421468515935;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.00838254293106693;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.0587737290365183;  // std dev = 2,921, 49,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return -0.16571606688184876;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.07942606373449619;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15473579283826083;  // std dev = 0,388, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.23922849891709347;  // std dev = 0,328, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.24524715055572144;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.23676009386434207;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2110457588890491;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.00726253290548944;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.05048759765577001;  // std dev = 2,921, 49,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return -0.14405462705393238;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.06721383282569741;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12371494326399256;  // std dev = 0,384, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.18252722482238654;  // std dev = 0,327, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.18431701165367054;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.15897535476231342;  // std dev = 0,818, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16148031636132154;  // std dev = 2,327, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.15815323477589102;  // std dev = 0,071, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.06177876864313043;  // std dev = 0,439, 42,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.018621613095443905;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.055508661113846655;  // std dev = 0,427, 42,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09854785108630686;  // std dev = 0,382, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.14039382136069792;  // std dev = 0,328, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.13969935655853657;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.11937297973475906;  // std dev = 0,818, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.12145838739070236;  // std dev = 2,327, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.13831225741654307;  // std dev = 0,063, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.051723313374168356;  // std dev = 0,439, 42,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.015840248846353232;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.047079387516404315;  // std dev = 0,427, 42,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07834547846151235;  // std dev = 0,381, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.10903489491900797;  // std dev = 0,330, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.10703063491600476;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11062077910960907;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.08845804405384787;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.2969747328776402;  // std dev = 2,265, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | | else return -0.21789545558931292;  // std dev = 0,132, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.15833719763936516;  // std dev = 0,076, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.03690709133729604;  // std dev = 0,424, 47,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06222451926662085;  // std dev = 0,380, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.08546317786351293;  // std dev = 0,332, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.08552705142008321;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.06856259070216919;  // std dev = 0,818, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06939399229006012;  // std dev = 2,327, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.04411857846562948;  // std dev = 0,901, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.11824279861317954;  // std dev = 0,041, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.0426271145242526;  // std dev = 2,882, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.03434398220872162;  // std dev = 0,410, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04940135510575885;  // std dev = 0,379, 592,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=312 */
%   | | else return 0.0675284818695853;  // std dev = 0,334, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.06762669101737473;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06673471441148904;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.05053261026828212;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.036907529290058645;  // std dev = 0,902, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.10648539438425438;  // std dev = 0,038, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.03567360942731913;  // std dev = 2,882, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.02829543648715494;  // std dev = 0,409, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */


Results
   AUC ROC   = 0.839791
   AUC PR    = 0.788685
   CLL	      = -0.477229
   Precision = 0.824864 at threshold = 0.5
   Recall    = 0.919215
   F1        = 0.869488


Total learning time: 437.688 seconds
Total inference time: 70.167 seconds
AUC ROC: 0.839791


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 15:39:41
{'CLL': -0.477229, 'Recall': 0.919215, 'F1': 0.869488, 'AUC ROC': 0.839791, 'Inference time': 70.167, 'Learning time': 437.688, 'Precision': [0.824864, 0.5], 'AUC PR': 0.788685}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.701522429075412;  // std dev = 6,622, 332,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=280 */
%   | | | else return -0.01877414182356519;  // std dev = 5,297, 260,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=32 */
%   | | else return 0.6081489350995123;  // std dev = 0,433, 16,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5381489350995123;  // std dev = 2,332, 25,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.12130682983635446;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */


Results
   AUC ROC   = 0.860184
   AUC PR    = 0.823883
   CLL	      = -0.844711
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 68.125 seconds
Total inference time: 17.339 seconds
AUC ROC: 0.860184


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 15:41:07
{'CLL': -0.844711, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.860184, 'Inference time': 17.339, 'Learning time': 68.125, 'Precision': [nan, 0.5], 'AUC PR': 0.823883}


Starting fold 2

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.14188528060913086
   Generating paths time   = 3.802938938140869
   Generating mappings time   = 0.004557371139526367
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 3.949392080307007


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8245
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 31296
Target test pos examples: 2246
Target test neg examples: 2196

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.437142
   AUC PR    = 0.443375
   CLL	      = -0.710286
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 75.33 seconds
Total inference time: 4.919 seconds
AUC ROC: 0.437142


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [17.549, 528, 739], 'false': [3.266, 16, 32]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 0,493, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.53765
   AUC PR    = 0.509894
   CLL	      = -0.708502
   Precision = 0.533399 at threshold = 0.5
   Recall    = 0.959929
   F1        = 0.685751


Total learning time: 159.101 seconds
Total inference time: 10.105 seconds
AUC ROC: 0.53765


Refined model AUC ROC: 0.53765


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 15:45:23
{'CLL': -0.708502, 'Recall': 0.959929, 'F1': 0.685751, 'parameter': {'CLL': -0.710286, 'Recall': 1.0, 'F1': 0.671651, 'AUC ROC': 0.437142, 'Inference time': 4.919, 'Learning time': 75.33, 'Precision': [0.505628, 0.5], 'AUC PR': 0.443375}, 'AUC ROC': 0.53765, 'Inference time': 10.105, 'Mapping results': {'Knowledge compiling time': 0.14188528060913086, 'Generating paths time': 3.802938938140869, 'Possible mappings': [6], 'Max mapping': 121, 'Finding best mapping': 1.430511474609375e-06, 'Generating mappings time': 0.004557371139526367, 'Numbers preds mapping': [4], 'Total time': 3.949392080307007}, 'Learning time': 234.43099999999998, 'Precision': [0.533399, 0.5], 'AUC PR': 0.509894}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.22916842377028543;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.008145345695425868;  // std dev = 0,852, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0,494, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4246457186582996;  // std dev = 1,908, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.43170309793098227;  // std dev = 0,348, 33,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24202763793698792;  // std dev = 0,493, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3098169854894562;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.28778262938095234;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.44960468245709945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.44785888933339724;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.1316730160126654;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.45582386531502983;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.12696337948380887;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.15761628867465108;  // std dev = 0,411, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.3843074996866285;  // std dev = 0,365, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.05005598060633537;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10593105372516383;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.18243715358426912;  // std dev = 16,896, 1.167,000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.2395015074255388;  // std dev = 2,697, 41,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.23313045189186302;  // std dev = 0,387, 46,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2955524343879333;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.09682378078619334;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.03970382426448277;  // std dev = 0,846, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.08391121521379521;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.13981773976343057;  // std dev = 0,493, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.17335674088763253;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.18731001771416225;  // std dev = 1,897, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.20912176993030698;  // std dev = 0,329, 34,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | else return 0.07660380181775141;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10616299563457045;  // std dev = 0,492, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1312845930044787;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11104123612914918;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2537550864171202;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.24984548165070083;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.044031624413252715;  // std dev = 0,490, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03801107872954855;  // std dev = 0,486, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.280789924409643;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.047174614262696535;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.13705702671072068;  // std dev = 0,841, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.21205654125165507;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07809561907994583;  // std dev = 0,493, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11395088562588668;  // std dev = 1,915, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10110190048750836;  // std dev = 1,899, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.14854441397449647;  // std dev = 0,321, 33,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.02900754021313461;  // std dev = 0,486, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.18004807648647228;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.03546205157246818;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06807340159916343;  // std dev = 1,218, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.058855562492096274;  // std dev = 0,493, 1.194,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07703994084391153;  // std dev = 1,919, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08870884726437689;  // std dev = 1,897, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.18274992456989483;  // std dev = 2,36e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.022091396361238292;  // std dev = 0,486, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.002056183545760339;  // std dev = 0,487, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0450904208568595;  // std dev = 0,491, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.05996600616875414;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.038201164250791377;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17913041855223177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.15701916220803463;  // std dev = 2,24e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.01679971219056977;  // std dev = 0,486, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0015564063667682926;  // std dev = 0,487, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.553077
   AUC PR    = 0.527336
   CLL	      = -0.704944
   Precision = 0.53591 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.68702


Total learning time: 288.894 seconds
Total inference time: 11.316 seconds
AUC ROC: 0.553077


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 15:50:25
{'CLL': -0.704944, 'Recall': 0.956812, 'F1': 0.68702, 'AUC ROC': 0.553077, 'Inference time': 11.316, 'Learning time': 288.894, 'Precision': [0.53591, 0.5], 'AUC PR': 0.527336}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0,494, 1.226,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0,440, 19,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.546724
   AUC PR    = 0.523109
   CLL	      = -0.91326
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 25.72 seconds
Total inference time: 5.413 seconds
AUC ROC: 0.546724


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 15:50:56
{'CLL': -0.91326, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.546724, 'Inference time': 5.413, 'Learning time': 25.72, 'Precision': [nan, 0.5], 'AUC PR': 0.523109}


Starting fold 3

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.14759230613708496
   Generating paths time   = 3.7040679454803467
   Generating mappings time   = 0.004365205764770508
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 3.8560354709625244


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8725
Target train pos examples: 581
Target train neg examples: 581

Target test facts examples: 30816
Target test pos examples: 2436
Target test neg examples: 2159

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.11529179224236799;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3368104452725042;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.1006698265126728;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2782019553062949;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.08691854825778976;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2218655867177258;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.074287373672246;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1724245980376236;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.06292492981534978;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13178285263632983;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.05288752556858072;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09974654995840213;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.044156924602564436;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07510777615464852;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.036661434327724535;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056412350427134834;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.030295939098124496;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04232482322953948;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.02493848785740836;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */


Results
   AUC ROC   = 0.547299
   AUC PR    = 0.555563
   CLL	      = -0.684914
   Precision = 0.556307 at threshold = 0.5
   Recall    = 0.944992
   F1        = 0.700335


Total learning time: 36.715 seconds
Total inference time: 4.852 seconds
AUC ROC: 0.547299


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [15.949, 477, 545], 'false': [5.171, 104, 36]}]]
[{'': [0.24889323340519648, 0.19102040816326663]}, {'': [0.24889323340519198, 0.1910204081632664]}, {'': [0.2488932334051973, 0.19102040816326585]}, {'': [0.2488932334051982, 0.1910204081632639]}, {'': [0.248893233405201, 0.19102040816326604]}, {'': [0.24889323340520084, 0.1910204081632663]}, {'': [0.24889323340520145, 0.19102040816326452]}, {'': [0.2488932334051957, 0.1910204081632664]}, {'': [0.24889323340520308, 0.19102040816326624]}, {'': [0.24889323340520328, 0.19102040816326568]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.039967116917694;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.12044401706672549;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.058148935099512175;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.1340110040650296;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.2479867879556907;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.34005349969786425;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.03503196034273708;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.10514080895131177;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.05092203251355425;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.11690238620380397;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.20588547054745146;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.28082831604812963;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then return 0.03059004775032249;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.027686046641405414;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.08490960481873672;  // std dev = 3,453, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.11049605646593645;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22182876717515837;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.026621534319001657;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.023701576837702444;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07264753421967247;  // std dev = 3,453, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.09395058135849792;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17240372465675205;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.023099042092253833;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.06925698772514567;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.022499126900865696;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.06994088173182639;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13177500828426963;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5225408699468854;  // std dev = 2,093, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.20068307802090152;  // std dev = 0,079, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.019190514772462443;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.08817213718116035;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.058270426784572144;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09974769928607004;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.42458353454279646;  // std dev = 2,095, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.171037888434153;  // std dev = 0,072, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.06633063510110561;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.0758531639473702;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.04818834364930487;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.025949657938225207;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.07690938976410809;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.32836742361768484;  // std dev = 2,096, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14814896556020357;  // std dev = 0,064, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.05617601037864883;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.042643641168962396;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056414155498331245;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.2476951803603222;  // std dev = 2,096, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13042123874078151;  // std dev = 0,057, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.0472469276934544;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.058148060105518644;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.03182521111754136;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.00578186751476529;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.028559173506143072;  // std dev = 0,499, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | | else return 0.04577724164447275;  // std dev = 0,499, 958,000 (wgt'ed) examples reached here.  /* #neg=442 #pos=516 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.18589202492834397;  // std dev = 2,096, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11633754537354223;  // std dev = 0,052, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.039502409397037974;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.048970650289088764;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.025907091889459725;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */


Results
   AUC ROC   = 0.557238
   AUC PR    = 0.565321
   CLL	      = -0.67378
   Precision = 0.559166 at threshold = 0.5
   Recall    = 0.925287
   F1        = 0.697077


Total learning time: 102.952 seconds
Total inference time: 11.68 seconds
AUC ROC: 0.557238


Refined model AUC ROC: 0.557238


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 15:53:40
{'CLL': -0.67378, 'Recall': 0.925287, 'F1': 0.697077, 'parameter': {'CLL': -0.684914, 'Recall': 0.944992, 'F1': 0.700335, 'AUC ROC': 0.547299, 'Inference time': 4.852, 'Learning time': 36.715, 'Precision': [0.556307, 0.5], 'AUC PR': 0.555563}, 'AUC ROC': 0.557238, 'Inference time': 11.68, 'Mapping results': {'Knowledge compiling time': 0.14759230613708496, 'Generating paths time': 3.7040679454803467, 'Possible mappings': [6], 'Max mapping': 121, 'Finding best mapping': 1.430511474609375e-06, 'Generating mappings time': 0.004365205764770508, 'Numbers preds mapping': [4], 'Total time': 3.8560354709625244}, 'Learning time': 139.667, 'Precision': [0.559166, 0.5], 'AUC PR': 0.565321}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D), haswordtitle(F, C) )
%   | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2823913593419366;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | else return 0.3946600912861201;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.058148935099512175;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.10814893509951237;  // std dev = 3,240, 56,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | | else return 0.058148935099512175;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.14386322081379807;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3367891321555364;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.026285619653937387;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.10760902402300751;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.05092203251355425;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.11596711948588596;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2781851116383101;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5577085894938112;  // std dev = 2,091, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.16840481774871202;  // std dev = 0,023, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.0443462976046685;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.09098368393085754;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.09976923610816317;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22185539569406543;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.019471673553118317;  // std dev = 0,382, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.028537407925322944;  // std dev = 0,359, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06721589491848544;  // std dev = 3,171, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.09423093738105874;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17242093950203555;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01681077920841833;  // std dev = 0,382, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.0640955392178274;  // std dev = 3,091, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.02911482837067796;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.07018234188377383;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13178419001282005;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.014978167450228641;  // std dev = 0,357, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.03408877476250785;  // std dev = 2,918, 58,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=14 */
%   | | | else return 0.07495012714445792;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.07321735871331159;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.06748021114260809;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.1573109203845063;  // std dev = 1,086, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.029980008744970903;  // std dev = 0,499, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.012401336101563468;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else return 0.10431642389558773;  // std dev = 0,499, 958,000 (wgt'ed) examples reached here.  /* #neg=442 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.005404477034635258;  // std dev = 0,381, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.04876400842309987;  // std dev = 3,074, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.015084087824344136;  // std dev = 1,263, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.04707301297941414;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.4819774784479861;  // std dev = 0,248, 428,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=399 */
%   | | else return -0.39531444448430425;  // std dev = 0,198, 451,000 (wgt'ed) examples reached here.  /* #neg=435 #pos=16 */
%   | else if ( haswordvenue(B, C) )
%   | | then if ( title(G, D), venue(G, B) )
%   | | | then return -0.3489768074027642;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.2565787481527898;  // std dev = 6,046, 180,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=129 */
%   | | else return 0.06071915431945001;  // std dev = 0,410, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.528779497875431;  // std dev = 1,965, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.23985241060117804;  // std dev = 0,331, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.206172896351827;  // std dev = 0,451, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0.5411358394699736;  // std dev = 0,014, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.36733356681352397;  // std dev = 4,574, 401,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=379 */
%   | | | else return 0.2945815027764428;  // std dev = 2,286, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | | else return -0.3043636314054597;  // std dev = 0,193, 451,000 (wgt'ed) examples reached here.  /* #neg=435 #pos=16 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.170782540451661;  // std dev = 0,456, 189,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=130 */
%   | | else return 0.05078657854592143;  // std dev = 0,409, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.42054904602795856;  // std dev = 1,969, 22,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.19941935800198196;  // std dev = 0,300, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return 0.16374298713739702;  // std dev = 0,449, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0.4070476816066299;  // std dev = 0,014, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03705860743232527;  // std dev = 0,369, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.23866857634000302;  // std dev = 2,096, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.09864250559739146;  // std dev = 0,150, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.043918986603108;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.00930517770469175;  // std dev = 0,357, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */


Results
   AUC ROC   = 0.859609
   AUC PR    = 0.816264
   CLL	      = -0.480304
   Precision = 0.814118 at threshold = 0.5
   Recall    = 0.942118
   F1        = 0.873454


Total learning time: 175.071 seconds
Total inference time: 32.699 seconds
AUC ROC: 0.859609


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 15:57:09
{'CLL': -0.480304, 'Recall': 0.942118, 'F1': 0.873454, 'AUC ROC': 0.859609, 'Inference time': 32.699, 'Learning time': 175.071, 'Precision': [0.814118, 0.5], 'AUC PR': 0.816264}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.039967116917694;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.12044401706672549;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.058148935099512175;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.1340110040650296;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */


Results
   AUC ROC   = 0.546839
   AUC PR    = 0.555438
   CLL	      = -0.968894
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 12.337 seconds
Total inference time: 4.131 seconds
AUC ROC: 0.546839


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 15:57:26
{'CLL': -0.968894, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.546839, 'Inference time': 4.131, 'Learning time': 12.337, 'Precision': [nan, 0.5], 'AUC PR': 0.555438}


Starting fold 4

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.12191963195800781
   Generating paths time   = 3.794416666030884
   Generating mappings time   = 0.004713535308837891
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 3.9210612773895264


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 7382
Target train pos examples: 747
Target train neg examples: 747

Target test facts examples: 32159
Target test pos examples: 2270
Target test neg examples: 1993

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3735611214794357;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.14097721792779405;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32175803168015193;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.12293506238583077;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26654831388655753;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.10572355771962352;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2134839465271646;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.08978633290599357;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16668724369451127;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.07541323198647286;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12794262506462942;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.06274216592519288;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09717611751164584;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.05178372301620736;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07336126033252563;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.04245584308854262;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05519822955528243;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.034618468956100754;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04145936304187153;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.02810245705359781;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */


Results
   AUC ROC   = 0.558035
   AUC PR    = 0.56414
   CLL	      = -0.686242
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 116.782 seconds
Total inference time: 4.765 seconds
AUC ROC: 0.558035


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [18.666, 676, 719], 'false': [4.481, 71, 28]}]]
[{'': [0.24976246451101256, 0.20283644526068886]}, {'': [0.24976246451099404, 0.20283644526068717]}, {'': [0.24976246451098316, 0.20283644526068828]}, {'': [0.24976246451099413, 0.202836445260688]}, {'': [0.24976246451098344, 0.20283644526068864]}, {'': [0.24976246451099202, 0.20283644526068909]}, {'': [0.24976246451098205, 0.20283644526068767]}, {'': [0.24976246451097817, 0.20283644526068803]}, {'': [0.24976246451099463, 0.2028364452606869]}, {'': [0.24976246451098966, 0.20283644526068803]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3735611214794357;  // std dev = 0,500, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.44148226843284566;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.806345845300223;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.19365415469977698;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.806345845300223;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.31940825458904576;  // std dev = 0,500, 1.378,000 (wgt'ed) examples reached here.  /* #neg=671 #pos=707 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return 0.28139904905404495;  // std dev = 0,483, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.10429356789691546;  // std dev = 0,420, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.08964016548715838;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2664139231744267;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.2363983370350988;  // std dev = 0,480, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.0896696523376372;  // std dev = 0,418, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.07754550154840685;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21339626686119825;  // std dev = 0,499, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.1928916221085101;  // std dev = 0,477, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.07630722797489459;  // std dev = 0,417, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.06648308448032317;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6372532337641338;  // std dev = 0,109, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3481410628273172;  // std dev = 1,05e-08, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.4284898117190045;  // std dev = 0,874, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.21114591643081795;  // std dev = 1,327, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.5350133099042915;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16398237582072958;  // std dev = 0,500, 1.361,000 (wgt'ed) examples reached here.  /* #neg=664 #pos=697 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.153731620131889;  // std dev = 0,476, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.0643547789439816;  // std dev = 0,416, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.056548150925513005;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12786379274322848;  // std dev = 0,497, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.12039710454524001;  // std dev = 0,474, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.05385721277832773;  // std dev = 0,415, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.047766754411616555;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0971692165268469;  // std dev = 0,497, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.09314263036969508;  // std dev = 0,473, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.04477865966925784;  // std dev = 0,414, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.040110342621182196;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0733980033565265;  // std dev = 0,497, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.27504045153733897;  // std dev = 2,389, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.195570260963858;  // std dev = 0,187, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.08998193586417014;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.03351176627816061;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05525790881556806;  // std dev = 0,497, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.04935330436913478;  // std dev = 0,456, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.027880036700617013;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.022166022251911333;  // std dev = 0,392, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04152825856945777;  // std dev = 0,497, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.03774762855804319;  // std dev = 0,455, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.023112424984988816;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.018231242431611117;  // std dev = 0,391, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */


Results
   AUC ROC   = 0.572328
   AUC PR    = 0.575659
   CLL	      = -0.676434
   Precision = 0.6 at threshold = 0.5
   Recall    = 0.066079
   F1        = 0.119048


Total learning time: 152.489 seconds
Total inference time: 10.699 seconds
AUC ROC: 0.572328


Refined model AUC ROC: 0.572328


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 16:02:17
{'CLL': -0.676434, 'Recall': 0.066079, 'F1': 0.119048, 'parameter': {'CLL': -0.686242, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.558035, 'Inference time': 4.765, 'Learning time': 116.782, 'Precision': [nan, 0.5], 'AUC PR': 0.56414}, 'AUC ROC': 0.572328, 'Inference time': 10.699, 'Mapping results': {'Knowledge compiling time': 0.12191963195800781, 'Generating paths time': 3.794416666030884, 'Possible mappings': [6], 'Max mapping': 121, 'Finding best mapping': 1.430511474609375e-06, 'Generating mappings time': 0.004713535308837891, 'Numbers preds mapping': [4], 'Total time': 3.9210612773895264}, 'Learning time': 269.271, 'Precision': [0.6, 0.5], 'AUC PR': 0.575659}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3675686788824765;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.40360348055405776;  // std dev = 2,335, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5803711573217345;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.31968739663797385;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.12644161802634163;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31669960489254817;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.35569342009674776;  // std dev = 2,894, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.4016114478971489;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.4942204482591004;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.27615825449321707;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.11034235232659871;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.08964016548715838;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.26261587938835473;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.28037036499843904;  // std dev = 2,333, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.3210324535556523;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.39601909095488674;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.2308014560359859;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.09510703098232902;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.07754550154840685;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7012203516166949;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.29877964838330523;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.7012203516166948;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.20809058062433944;  // std dev = 0,500, 1.310,000 (wgt'ed) examples reached here.  /* #neg=646 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2378339847987127;  // std dev = 3,282, 44,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.31508633125465785;  // std dev = 2,110, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.0917515121360546;  // std dev = 0,452, 48,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | else return 0.22578729577145015;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.06648308448032317;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1646330720068629;  // std dev = 0,499, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.1733972999419822;  // std dev = 2,891, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.21694013758415437;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.22579790431690044;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.270415015707812;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.15553583373200414;  // std dev = 0,498, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.06669804239073576;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.056548150925513005;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12658293115729172;  // std dev = 0,499, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.12192160745011928;  // std dev = 2,331, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.1562789744246083;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.16954469890227117;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.2053839959663483;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.12158257138300721;  // std dev = 0,498, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.05574884590561781;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.047766754411616555;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09628895661890159;  // std dev = 0,499, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.09602791909830029;  // std dev = 2,889, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | | else return 0.13437542950031528;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.12809839742130066;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.15878849467791895;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3394269368165645;  // std dev = 2,391, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.23843577981254363;  // std dev = 0,213, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.11548959526457736;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.040110342621182196;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.14942153015120757;  // std dev = 0,369, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | else return 0.44136860870975636;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07089685734432159;  // std dev = 0,500, 1.310,000 (wgt'ed) examples reached here.  /* #neg=646 #pos=664 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07863590070174602;  // std dev = 3,279, 44,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.10444794748328161;  // std dev = 2,109, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.2725771129340105;  // std dev = 2,389, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.19823863590470178;  // std dev = 0,190, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.08781926471507373;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.03351176627816061;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05484161740486729;  // std dev = 0,498, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.07622168576207669;  // std dev = 2,452, 28,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   | | | else return 0.013125989012540862;  // std dev = 1,732, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0739261317642255;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10384070883105355;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.04677232029442288;  // std dev = 0,456, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.027880036700617013;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.02034168030487539;  // std dev = 0,391, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.041229810417530544;  // std dev = 0,498, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03364057715040316;  // std dev = 2,327, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.05549744966565819;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.05629808345396219;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.08384399667544547;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03575364016672395;  // std dev = 0,455, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.023112424984988816;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.016713679951510445;  // std dev = 0,391, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */


Results
   AUC ROC   = 0.574519
   AUC PR    = 0.588519
   CLL	      = -0.676558
   Precision = 0.661417 at threshold = 0.5
   Recall    = 0.074009
   F1        = 0.133122


Total learning time: 262.54 seconds
Total inference time: 11.719 seconds
AUC ROC: 0.574519


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 16:06:53
{'CLL': -0.676558, 'Recall': 0.074009, 'F1': 0.133122, 'AUC ROC': 0.574519, 'Inference time': 11.719, 'Learning time': 262.54, 'Precision': [0.661417, 0.5], 'AUC PR': 0.588519}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3675686788824765;  // std dev = 0,500, 1.327,000 (wgt'ed) examples reached here.  /* #neg=651 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.40360348055405776;  // std dev = 2,335, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5803711573217345;  // std dev = 1,900, 18,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.31968739663797385;  // std dev = 0,499, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.12644161802634163;  // std dev = 0,443, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */


Results
   AUC ROC   = 0.568052
   AUC PR    = 0.588916
   CLL	      = -0.976167
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 31.646 seconds
Total inference time: 4.892 seconds
AUC ROC: 0.568052


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 16:07:30
{'CLL': -0.976167, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.568052, 'Inference time': 4.892, 'Learning time': 31.646, 'Precision': [nan, 0.5], 'AUC PR': 0.588916}


Starting fold 5

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.18524527549743652
   Generating paths time   = 4.068368434906006
   Generating mappings time   = 0.002681732177734375
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 4.25630521774292


Best mapping found: ['workedunder(A,B) -> samevenue(A,B)', 'movie(A,B) -> haswordvenue(B,A)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8094
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 31447
Target test pos examples: 2467
Target test neg examples: 2240

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.535236
   AUC PR    = 0.542776
   CLL	      = -0.685676
   Precision = 0.543247 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.691798


Total learning time: 61.603 seconds
Total inference time: 8.171 seconds
AUC ROC: 0.535236


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.44587899644920087;  // std dev = 0,492, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.762910839861417;  // std dev = 0,294, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.23314893509951226;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.14762261931003867;  // std dev = 2,796, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.38183917618901597;  // std dev = 0,492, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.6699615757960478;  // std dev = 0,285, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.629623109416637;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17037689058336297;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.16093240232975084;  // std dev = 0,000354, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13161763142406072;  // std dev = 2,888, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.03693744759731563;  // std dev = 0,807, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2,940, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.3124773748687958;  // std dev = 0,492, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.5307179033413495;  // std dev = 0,283, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5341143060820981;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1372500384536095;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.1423811574739649;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1106937140608443;  // std dev = 2,883, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.012101856363528285;  // std dev = 0,790, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1336078399436071;  // std dev = 2,935, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.039048804834509544;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.34078353995148203;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.45088312671518443;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return -0.15384794922892941;  // std dev = 1,767, 21,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.38362582785919147;  // std dev = 0,910, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.25937902290203413;  // std dev = 0,487, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5002190915514851;  // std dev = 0,905, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15813788462278683;  // std dev = 0,017, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0760874900350822;  // std dev = 0,435, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05268236076769285;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.5250485695199799;  // std dev = 0,099, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.1207934769812506;  // std dev = 2,579, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.1746078935023675;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.14562055949087563;  // std dev = 2,257, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.10394313286584396;  // std dev = 1,804, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.21251314902133087;  // std dev = 0,485, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.12401779529699639;  // std dev = 0,389, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06388329749598962;  // std dev = 0,435, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04511986934533958;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.13991875322089664;  // std dev = 0,484, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.32625286825876926;  // std dev = 0,278, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.39278547629659954;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13365267799581454;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.1386940530563842;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07461190173107049;  // std dev = 2,856, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.005120446934339759;  // std dev = 0,379, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0888935138389402;  // std dev = 4,049, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1956014948408612;  // std dev = 0,084, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.1053187425390657;  // std dev = 0,484, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.25204844432395734;  // std dev = 0,278, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.08840468898080295;  // std dev = 0,352, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.12294075992424332;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06172220835392867;  // std dev = 2,854, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.02579395960862372;  // std dev = 0,672, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0726029826800932;  // std dev = 2,875, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0028517464584896825;  // std dev = 2,984, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.029590582464710562;  // std dev = 2,956, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.0791128608599691;  // std dev = 0,484, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.20044853649451772;  // std dev = 0,275, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.2736718481040654;  // std dev = 0,900, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12850182566650514;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.039690372447669646;  // std dev = 0,432, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.015463732486140618;  // std dev = 3,050, 61,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | | | else return -0.17375387992342084;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.06869225210507529;  // std dev = 4,041, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1739999003493563;  // std dev = 0,087, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.059182990951835;  // std dev = 0,484, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.15053395941157666;  // std dev = 0,399, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.19379130591832536;  // std dev = 0,113, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then return -0.17772066753389262;  // std dev = 0,099, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(K, H) )
%   | | | then return 0.12758705603500453;  // std dev = 0,775, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0626617931904259;  // std dev = 4,055, 86,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordauthor(N, L) )
%   | | | then return 0.09818780943836598;  // std dev = 0,576, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05096301316850794;  // std dev = 4,050, 86,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return -0.18869596794120555;  // std dev = 0,051, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.2888134298905157;  // std dev = 0,105, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return -0.0036307969965527188;  // std dev = 2,578, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.24789959388345728;  // std dev = 1,872, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.007615314589002429;  // std dev = 2,455, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.19997032752530566;  // std dev = 1,421, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.06341201480297935;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then return 0.03988638426687016;  // std dev = 0,420, 98,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | else return -0.14834388497369227;  // std dev = 0,081, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.010268453303283803;  // std dev = 0,399, 109,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=26 */


Results
   AUC ROC   = 0.542062
   AUC PR    = 0.564332
   CLL	      = -0.689195
   Precision = 0.542194 at threshold = 0.5
   Recall    = 0.937576
   F1        = 0.687064


Total learning time: 122.647 seconds
Total inference time: 9.745 seconds
AUC ROC: 0.542062


Refined model AUC ROC: 0.542062


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 16:11:04
{'CLL': -0.689195, 'Recall': 0.937576, 'F1': 0.687064, 'parameter': {'CLL': -0.685676, 'Recall': 0.952169, 'F1': 0.691798, 'AUC ROC': 0.535236, 'Inference time': 8.171, 'Learning time': 61.603, 'Precision': [0.543247, 0.5], 'AUC PR': 0.542776}, 'AUC ROC': 0.542062, 'Inference time': 9.745, 'Mapping results': {'Knowledge compiling time': 0.18524527549743652, 'Generating paths time': 4.068368434906006, 'Possible mappings': [6], 'Max mapping': 121, 'Finding best mapping': 7.152557373046875e-07, 'Generating mappings time': 0.002681732177734375, 'Numbers preds mapping': [4], 'Total time': 4.25630521774292}, 'Learning time': 184.25, 'Precision': [0.542194, 0.5], 'AUC PR': 0.564332}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6397480032138977;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15715819152444083;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.16254500754977086;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1283950699248672;  // std dev = 2,887, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03800959748909183;  // std dev = 0,806, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1540412552355059;  // std dev = 2,947, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.044790460982400505;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.48283090502633463;  // std dev = 0,335, 31,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.5341280884158435;  // std dev = 0,901, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13725049948595033;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0935614918714487;  // std dev = 0,441, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.1732999421310688;  // std dev = 1,238, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.1094775601033831;  // std dev = 2,785, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03189048206920282;  // std dev = 2,990, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.046723994408730624;  // std dev = 2,967, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5934536245591475;  // std dev = 0,082, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.17888762943411973;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12448270489505191;  // std dev = 1,921, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.19883064937713968;  // std dev = 2,542, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.1151284360172542;  // std dev = 1,909, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.2735317718382664;  // std dev = 0,485, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.17264493679323667;  // std dev = 0,437, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.07493501091374409;  // std dev = 0,436, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05312223717327573;  // std dev = 0,410, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4505277728309437;  // std dev = 0,082, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.13569366041090147;  // std dev = 2,583, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.10121156909618617;  // std dev = 1,933, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.19585920082664635;  // std dev = 0,489, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.31137953480438285;  // std dev = 0,342, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.13821049538793512;  // std dev = 0,390, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06975319116429447;  // std dev = 0,440, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.08642481153832027;  // std dev = 0,448, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.02665738772757157;  // std dev = 0,395, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.40635800779393494;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.09318011224552494;  // std dev = 2,583, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return -0.07197790281033307;  // std dev = 0,387, 29,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.1499427538508421;  // std dev = 0,487, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.2595494716899857;  // std dev = 0,345, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.011959800352881432;  // std dev = 0,329, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.07908362135801132;  // std dev = 0,917, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.07819744387907702;  // std dev = 2,876, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.036886797647049094;  // std dev = 0,411, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10546584727700917;  // std dev = 0,485, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.24859783187855153;  // std dev = 0,292, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.1044135810093016;  // std dev = 0,384, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.21619784571311396;  // std dev = 0,000530, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06476488151356546;  // std dev = 2,874, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.0706514141019522;  // std dev = 4,101, 88,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.1847368522385346;  // std dev = 0,048, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.04270485831399521;  // std dev = 3,020, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.20293077990383362;  // std dev = 0,093, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.27707312485309826;  // std dev = 0,050, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.008198471633424513;  // std dev = 2,787, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.21123490539395703;  // std dev = 1,522, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.08624710674572159;  // std dev = 0,487, 753,000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.15790701296967438;  // std dev = 0,342, 22,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.1051847474252943;  // std dev = 0,427, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.19132830070265242;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.053777549549854364;  // std dev = 2,820, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.02477120228688483;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.05904073671433392;  // std dev = 0,484, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.11594315088603242;  // std dev = 0,406, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.2767706672552474;  // std dev = 0,240, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23631726197909986;  // std dev = 0,139, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.04092024359742551;  // std dev = 0,427, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(A, N) )
%   | | | then return -0.1732863099629586;  // std dev = 0,064, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.03292523772867863;  // std dev = 3,013, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(A, P), haswordtitle(Q, P) )
%   | | | then return 0.06664709777850977;  // std dev = 4,057, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1779008955889455;  // std dev = 0,091, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2091492871677739;  // std dev = 0,051, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.008534333166066924;  // std dev = 2,579, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.19452468544657806;  // std dev = 1,845, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.05720808057173292;  // std dev = 2,451, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.14643040981602864;  // std dev = 1,871, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.06016745084411151;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.04654414656850274;  // std dev = 0,424, 98,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | else return -0.1818837112112947;  // std dev = 0,081, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.01008100394906664;  // std dev = 0,408, 109,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=26 */


Results
   AUC ROC   = 0.542732
   AUC PR    = 0.56526
   CLL	      = -0.689584
   Precision = 0.544304 at threshold = 0.5
   Recall    = 0.941224
   F1        = 0.689737


Total learning time: 155.77 seconds
Total inference time: 10.83 seconds
AUC ROC: 0.542732


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 16:13:53
{'CLL': -0.689584, 'Recall': 0.941224, 'F1': 0.689737, 'AUC ROC': 0.542732, 'Inference time': 10.83, 'Learning time': 155.77, 'Precision': [0.544304, 0.5], 'AUC PR': 0.56526}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0,493, 805,000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6359267128772901;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7470378239884012;  // std dev = 1,333, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then if ( haswordtitle(P, M) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2,980, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, Q), haswordtitle(R, Q) )
%   | | | then return 0.04458961306561406;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.543572
   AUC PR    = 0.563404
   CLL	      = -0.940571
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 20.609 seconds
Total inference time: 4.13 seconds
AUC ROC: 0.543572


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 16:14:18
{'CLL': -0.940571, 'Recall': 0.0, 'F1': nan, 'AUC ROC': 0.543572, 'Inference time': 4.13, 'Learning time': 20.609, 'Precision': [nan, 0.5], 'AUC PR': 0.563404}


